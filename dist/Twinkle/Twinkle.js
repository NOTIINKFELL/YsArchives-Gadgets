/**
 * SPDX-License-Identifier: CC-BY-SA-4.0
 * _addText: '{{Gadget Header|license=CC-BY-SA-4.0}}'
 *
 * @base {@link https://git.qiuwen.net.cn/Mirror/xiplus-twinkle}
 * @source {@link https://github.com/TopRealm/YsArchives-Gadgets/tree/master/src/Twinkle}
 * @license CC-BY-SA-4.0 {@link https://youshou.wiki/wiki/H:CC-BY-SA-4.0}
 */
/**
 * +------------------------------------------------------------+
 * |            === WARNING: GLOBAL GADGET FILE ===             |
 * +------------------------------------------------------------+
 * |       All changes should be made in the repository,        |
 * |                otherwise they will be lost.                |
 * +------------------------------------------------------------+
 * |        Changes to this page may affect many users.         |
 * | Please discuss changes by opening an issue before editing. |
 * +------------------------------------------------------------+
 */
/* <nowiki> */

(() => {

"use strict";
var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/global-this.js
var require_global_this = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/global-this.js"(exports, module2) {
    "use strict";
    var check = function(it) {
      return it && it.Math === Math && it;
    };
    module2.exports = // eslint-disable-next-line es/no-global-this -- safe
    check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
    check(typeof self == "object" && self) || check(typeof global == "object" && global) || check(typeof exports == "object" && exports) || // eslint-disable-next-line no-new-func -- fallback
    /* @__PURE__ */ function() {
      return this;
    }() || Function("return this")();
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/fails.js
var require_fails = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/fails.js"(exports, module2) {
    "use strict";
    module2.exports = function(exec) {
      try {
        return !!exec();
      } catch (error) {
        return true;
      }
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/descriptors.js
var require_descriptors = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/descriptors.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    module2.exports = !fails(function() {
      return Object.defineProperty({}, 1, { get: function() {
        return 7;
      } })[1] !== 7;
    });
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/function-bind-native.js
var require_function_bind_native = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/function-bind-native.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    module2.exports = !fails(function() {
      var test = function() {
      }.bind();
      return typeof test != "function" || test.hasOwnProperty("prototype");
    });
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/function-call.js
var require_function_call = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/function-call.js"(exports, module2) {
    "use strict";
    var NATIVE_BIND = require_function_bind_native();
    var call = Function.prototype.call;
    module2.exports = NATIVE_BIND ? call.bind(call) : function() {
      return call.apply(call, arguments);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-property-is-enumerable.js
var require_object_property_is_enumerable = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-property-is-enumerable.js"(exports) {
    "use strict";
    var $propertyIsEnumerable = {}.propertyIsEnumerable;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
    exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
      var descriptor = getOwnPropertyDescriptor(this, V);
      return !!descriptor && descriptor.enumerable;
    } : $propertyIsEnumerable;
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/create-property-descriptor.js
var require_create_property_descriptor = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/create-property-descriptor.js"(exports, module2) {
    "use strict";
    module2.exports = function(bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value
      };
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/function-uncurry-this.js
var require_function_uncurry_this = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/function-uncurry-this.js"(exports, module2) {
    "use strict";
    var NATIVE_BIND = require_function_bind_native();
    var FunctionPrototype = Function.prototype;
    var call = FunctionPrototype.call;
    var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
    module2.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
      return function() {
        return call.apply(fn, arguments);
      };
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/classof-raw.js
var require_classof_raw = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/classof-raw.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toString = uncurryThis({}.toString);
    var stringSlice = uncurryThis("".slice);
    module2.exports = function(it) {
      return stringSlice(toString(it), 8, -1);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/indexed-object.js
var require_indexed_object = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/indexed-object.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var classof = require_classof_raw();
    var $Object = Object;
    var split = uncurryThis("".split);
    module2.exports = fails(function() {
      return !$Object("z").propertyIsEnumerable(0);
    }) ? function(it) {
      return classof(it) === "String" ? split(it, "") : $Object(it);
    } : $Object;
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-null-or-undefined.js
var require_is_null_or_undefined = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-null-or-undefined.js"(exports, module2) {
    "use strict";
    module2.exports = function(it) {
      return it === null || it === void 0;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/require-object-coercible.js
var require_require_object_coercible = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/require-object-coercible.js"(exports, module2) {
    "use strict";
    var isNullOrUndefined = require_is_null_or_undefined();
    var $TypeError = TypeError;
    module2.exports = function(it) {
      if (isNullOrUndefined(it)) throw new $TypeError("Can't call method on " + it);
      return it;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-indexed-object.js
var require_to_indexed_object = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-indexed-object.js"(exports, module2) {
    "use strict";
    var IndexedObject = require_indexed_object();
    var requireObjectCoercible = require_require_object_coercible();
    module2.exports = function(it) {
      return IndexedObject(requireObjectCoercible(it));
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-callable.js
var require_is_callable = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-callable.js"(exports, module2) {
    "use strict";
    var documentAll = typeof document == "object" && document.all;
    module2.exports = typeof documentAll == "undefined" && documentAll !== void 0 ? function(argument) {
      return typeof argument == "function" || argument === documentAll;
    } : function(argument) {
      return typeof argument == "function";
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-object.js
var require_is_object = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-object.js"(exports, module2) {
    "use strict";
    var isCallable = require_is_callable();
    module2.exports = function(it) {
      return typeof it == "object" ? it !== null : isCallable(it);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/get-built-in.js
var require_get_built_in = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/get-built-in.js"(exports, module2) {
    "use strict";
    var globalThis2 = require_global_this();
    var isCallable = require_is_callable();
    var aFunction = function(argument) {
      return isCallable(argument) ? argument : void 0;
    };
    module2.exports = function(namespace, method) {
      return arguments.length < 2 ? aFunction(globalThis2[namespace]) : globalThis2[namespace] && globalThis2[namespace][method];
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-is-prototype-of.js
var require_object_is_prototype_of = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-is-prototype-of.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    module2.exports = uncurryThis({}.isPrototypeOf);
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/environment-user-agent.js
var require_environment_user_agent = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/environment-user-agent.js"(exports, module2) {
    "use strict";
    var globalThis2 = require_global_this();
    var navigator = globalThis2.navigator;
    var userAgent = navigator && navigator.userAgent;
    module2.exports = userAgent ? String(userAgent) : "";
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/environment-v8-version.js
var require_environment_v8_version = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/environment-v8-version.js"(exports, module2) {
    "use strict";
    var globalThis2 = require_global_this();
    var userAgent = require_environment_user_agent();
    var process = globalThis2.process;
    var Deno = globalThis2.Deno;
    var versions = process && process.versions || Deno && Deno.version;
    var v8 = versions && versions.v8;
    var match;
    var version;
    if (v8) {
      match = v8.split(".");
      version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
    }
    if (!version && userAgent) {
      match = userAgent.match(/Edge\/(\d+)/);
      if (!match || match[1] >= 74) {
        match = userAgent.match(/Chrome\/(\d+)/);
        if (match) version = +match[1];
      }
    }
    module2.exports = version;
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/symbol-constructor-detection.js
var require_symbol_constructor_detection = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/symbol-constructor-detection.js"(exports, module2) {
    "use strict";
    var V8_VERSION = require_environment_v8_version();
    var fails = require_fails();
    var globalThis2 = require_global_this();
    var $String = globalThis2.String;
    module2.exports = !!Object.getOwnPropertySymbols && !fails(function() {
      var symbol = Symbol("symbol detection");
      return !$String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
      !Symbol.sham && V8_VERSION && V8_VERSION < 41;
    });
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/use-symbol-as-uid.js
var require_use_symbol_as_uid = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/use-symbol-as-uid.js"(exports, module2) {
    "use strict";
    var NATIVE_SYMBOL = require_symbol_constructor_detection();
    module2.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-symbol.js
var require_is_symbol = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-symbol.js"(exports, module2) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    var isCallable = require_is_callable();
    var isPrototypeOf = require_object_is_prototype_of();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var $Object = Object;
    module2.exports = USE_SYMBOL_AS_UID ? function(it) {
      return typeof it == "symbol";
    } : function(it) {
      var $Symbol = getBuiltIn("Symbol");
      return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/try-to-string.js
var require_try_to_string = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/try-to-string.js"(exports, module2) {
    "use strict";
    var $String = String;
    module2.exports = function(argument) {
      try {
        return $String(argument);
      } catch (error) {
        return "Object";
      }
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/a-callable.js
var require_a_callable = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/a-callable.js"(exports, module2) {
    "use strict";
    var isCallable = require_is_callable();
    var tryToString = require_try_to_string();
    var $TypeError = TypeError;
    module2.exports = function(argument) {
      if (isCallable(argument)) return argument;
      throw new $TypeError(tryToString(argument) + " is not a function");
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/get-method.js
var require_get_method = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/get-method.js"(exports, module2) {
    "use strict";
    var aCallable = require_a_callable();
    var isNullOrUndefined = require_is_null_or_undefined();
    module2.exports = function(V, P) {
      var func = V[P];
      return isNullOrUndefined(func) ? void 0 : aCallable(func);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/ordinary-to-primitive.js
var require_ordinary_to_primitive = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/ordinary-to-primitive.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var $TypeError = TypeError;
    module2.exports = function(input, pref) {
      var fn, val;
      if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
      if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
      if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
      throw new $TypeError("Can't convert object to primitive value");
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-pure.js
var require_is_pure = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-pure.js"(exports, module2) {
    "use strict";
    module2.exports = false;
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/define-global-property.js
var require_define_global_property = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/define-global-property.js"(exports, module2) {
    "use strict";
    var globalThis2 = require_global_this();
    var defineProperty = Object.defineProperty;
    module2.exports = function(key, value) {
      try {
        defineProperty(globalThis2, key, { value, configurable: true, writable: true });
      } catch (error) {
        globalThis2[key] = value;
      }
      return value;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/shared-store.js
var require_shared_store = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/shared-store.js"(exports, module2) {
    "use strict";
    var IS_PURE = require_is_pure();
    var globalThis2 = require_global_this();
    var defineGlobalProperty = require_define_global_property();
    var SHARED = "__core-js_shared__";
    var store = module2.exports = globalThis2[SHARED] || defineGlobalProperty(SHARED, {});
    (store.versions || (store.versions = [])).push({
      version: "3.41.0",
      mode: IS_PURE ? "pure" : "global",
      copyright: "© 2014-2025 Denis Pushkarev (zloirock.ru)",
      license: "https://github.com/zloirock/core-js/blob/v3.41.0/LICENSE",
      source: "https://github.com/zloirock/core-js"
    });
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/shared.js
var require_shared = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/shared.js"(exports, module2) {
    "use strict";
    var store = require_shared_store();
    module2.exports = function(key, value) {
      return store[key] || (store[key] = value || {});
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-object.js
var require_to_object = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-object.js"(exports, module2) {
    "use strict";
    var requireObjectCoercible = require_require_object_coercible();
    var $Object = Object;
    module2.exports = function(argument) {
      return $Object(requireObjectCoercible(argument));
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/has-own-property.js
var require_has_own_property = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/has-own-property.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toObject = require_to_object();
    var hasOwnProperty = uncurryThis({}.hasOwnProperty);
    module2.exports = Object.hasOwn || function hasOwn(it, key) {
      return hasOwnProperty(toObject(it), key);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/uid.js
var require_uid = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/uid.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var id = 0;
    var postfix = Math.random();
    var toString = uncurryThis(1 .toString);
    module2.exports = function(key) {
      return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix, 36);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/well-known-symbol.js
var require_well_known_symbol = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/well-known-symbol.js"(exports, module2) {
    "use strict";
    var globalThis2 = require_global_this();
    var shared = require_shared();
    var hasOwn = require_has_own_property();
    var uid = require_uid();
    var NATIVE_SYMBOL = require_symbol_constructor_detection();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var Symbol2 = globalThis2.Symbol;
    var WellKnownSymbolsStore = shared("wks");
    var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2["for"] || Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
    module2.exports = function(name) {
      if (!hasOwn(WellKnownSymbolsStore, name)) {
        WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol2, name) ? Symbol2[name] : createWellKnownSymbol("Symbol." + name);
      }
      return WellKnownSymbolsStore[name];
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-primitive.js
var require_to_primitive = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-primitive.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var isObject = require_is_object();
    var isSymbol = require_is_symbol();
    var getMethod = require_get_method();
    var ordinaryToPrimitive = require_ordinary_to_primitive();
    var wellKnownSymbol = require_well_known_symbol();
    var $TypeError = TypeError;
    var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
    module2.exports = function(input, pref) {
      if (!isObject(input) || isSymbol(input)) return input;
      var exoticToPrim = getMethod(input, TO_PRIMITIVE);
      var result;
      if (exoticToPrim) {
        if (pref === void 0) pref = "default";
        result = call(exoticToPrim, input, pref);
        if (!isObject(result) || isSymbol(result)) return result;
        throw new $TypeError("Can't convert object to primitive value");
      }
      if (pref === void 0) pref = "number";
      return ordinaryToPrimitive(input, pref);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-property-key.js
var require_to_property_key = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-property-key.js"(exports, module2) {
    "use strict";
    var toPrimitive = require_to_primitive();
    var isSymbol = require_is_symbol();
    module2.exports = function(argument) {
      var key = toPrimitive(argument, "string");
      return isSymbol(key) ? key : key + "";
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/document-create-element.js
var require_document_create_element = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/document-create-element.js"(exports, module2) {
    "use strict";
    var globalThis2 = require_global_this();
    var isObject = require_is_object();
    var document2 = globalThis2.document;
    var EXISTS = isObject(document2) && isObject(document2.createElement);
    module2.exports = function(it) {
      return EXISTS ? document2.createElement(it) : {};
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/ie8-dom-define.js
var require_ie8_dom_define = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/ie8-dom-define.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    var createElement = require_document_create_element();
    module2.exports = !DESCRIPTORS && !fails(function() {
      return Object.defineProperty(createElement("div"), "a", {
        get: function() {
          return 7;
        }
      }).a !== 7;
    });
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-get-own-property-descriptor.js
var require_object_get_own_property_descriptor = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-get-own-property-descriptor.js"(exports) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var call = require_function_call();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var createPropertyDescriptor = require_create_property_descriptor();
    var toIndexedObject = require_to_indexed_object();
    var toPropertyKey = require_to_property_key();
    var hasOwn = require_has_own_property();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
      O = toIndexedObject(O);
      P = toPropertyKey(P);
      if (IE8_DOM_DEFINE) try {
        return $getOwnPropertyDescriptor(O, P);
      } catch (error) {
      }
      if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/v8-prototype-define-bug.js
var require_v8_prototype_define_bug = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/v8-prototype-define-bug.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    module2.exports = DESCRIPTORS && fails(function() {
      return Object.defineProperty(function() {
      }, "prototype", {
        value: 42,
        writable: false
      }).prototype !== 42;
    });
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/an-object.js
var require_an_object = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/an-object.js"(exports, module2) {
    "use strict";
    var isObject = require_is_object();
    var $String = String;
    var $TypeError = TypeError;
    module2.exports = function(argument) {
      if (isObject(argument)) return argument;
      throw new $TypeError($String(argument) + " is not an object");
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-define-property.js
var require_object_define_property = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-define-property.js"(exports) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var anObject = require_an_object();
    var toPropertyKey = require_to_property_key();
    var $TypeError = TypeError;
    var $defineProperty = Object.defineProperty;
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var ENUMERABLE = "enumerable";
    var CONFIGURABLE = "configurable";
    var WRITABLE = "writable";
    exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
      anObject(O);
      P = toPropertyKey(P);
      anObject(Attributes);
      if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
        var current = $getOwnPropertyDescriptor(O, P);
        if (current && current[WRITABLE]) {
          O[P] = Attributes.value;
          Attributes = {
            configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
            enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
            writable: false
          };
        }
      }
      return $defineProperty(O, P, Attributes);
    } : $defineProperty : function defineProperty(O, P, Attributes) {
      anObject(O);
      P = toPropertyKey(P);
      anObject(Attributes);
      if (IE8_DOM_DEFINE) try {
        return $defineProperty(O, P, Attributes);
      } catch (error) {
      }
      if ("get" in Attributes || "set" in Attributes) throw new $TypeError("Accessors not supported");
      if ("value" in Attributes) O[P] = Attributes.value;
      return O;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/create-non-enumerable-property.js
var require_create_non_enumerable_property = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/create-non-enumerable-property.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var definePropertyModule = require_object_define_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    module2.exports = DESCRIPTORS ? function(object, key, value) {
      return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
    } : function(object, key, value) {
      object[key] = value;
      return object;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/function-name.js
var require_function_name = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/function-name.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var hasOwn = require_has_own_property();
    var FunctionPrototype = Function.prototype;
    var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
    var EXISTS = hasOwn(FunctionPrototype, "name");
    var PROPER = EXISTS && function something() {
    }.name === "something";
    var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
    module2.exports = {
      EXISTS,
      PROPER,
      CONFIGURABLE
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/inspect-source.js
var require_inspect_source = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/inspect-source.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var isCallable = require_is_callable();
    var store = require_shared_store();
    var functionToString = uncurryThis(Function.toString);
    if (!isCallable(store.inspectSource)) {
      store.inspectSource = function(it) {
        return functionToString(it);
      };
    }
    module2.exports = store.inspectSource;
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/weak-map-basic-detection.js
var require_weak_map_basic_detection = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/weak-map-basic-detection.js"(exports, module2) {
    "use strict";
    var globalThis2 = require_global_this();
    var isCallable = require_is_callable();
    var WeakMap = globalThis2.WeakMap;
    module2.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/shared-key.js
var require_shared_key = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/shared-key.js"(exports, module2) {
    "use strict";
    var shared = require_shared();
    var uid = require_uid();
    var keys = shared("keys");
    module2.exports = function(key) {
      return keys[key] || (keys[key] = uid(key));
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/hidden-keys.js
var require_hidden_keys = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/hidden-keys.js"(exports, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/internal-state.js
var require_internal_state = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/internal-state.js"(exports, module2) {
    "use strict";
    var NATIVE_WEAK_MAP = require_weak_map_basic_detection();
    var globalThis2 = require_global_this();
    var isObject = require_is_object();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var shared = require_shared_store();
    var sharedKey = require_shared_key();
    var hiddenKeys = require_hidden_keys();
    var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
    var TypeError2 = globalThis2.TypeError;
    var WeakMap = globalThis2.WeakMap;
    var set;
    var get;
    var has;
    var enforce = function(it) {
      return has(it) ? get(it) : set(it, {});
    };
    var getterFor = function(TYPE) {
      return function(it) {
        var state;
        if (!isObject(it) || (state = get(it)).type !== TYPE) {
          throw new TypeError2("Incompatible receiver, " + TYPE + " required");
        }
        return state;
      };
    };
    if (NATIVE_WEAK_MAP || shared.state) {
      store = shared.state || (shared.state = new WeakMap());
      store.get = store.get;
      store.has = store.has;
      store.set = store.set;
      set = function(it, metadata) {
        if (store.has(it)) throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        store.set(it, metadata);
        return metadata;
      };
      get = function(it) {
        return store.get(it) || {};
      };
      has = function(it) {
        return store.has(it);
      };
    } else {
      STATE = sharedKey("state");
      hiddenKeys[STATE] = true;
      set = function(it, metadata) {
        if (hasOwn(it, STATE)) throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        createNonEnumerableProperty(it, STATE, metadata);
        return metadata;
      };
      get = function(it) {
        return hasOwn(it, STATE) ? it[STATE] : {};
      };
      has = function(it) {
        return hasOwn(it, STATE);
      };
    }
    var store;
    var STATE;
    module2.exports = {
      set,
      get,
      has,
      enforce,
      getterFor
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/make-built-in.js
var require_make_built_in = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/make-built-in.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var hasOwn = require_has_own_property();
    var DESCRIPTORS = require_descriptors();
    var CONFIGURABLE_FUNCTION_NAME = require_function_name().CONFIGURABLE;
    var inspectSource = require_inspect_source();
    var InternalStateModule = require_internal_state();
    var enforceInternalState = InternalStateModule.enforce;
    var getInternalState = InternalStateModule.get;
    var $String = String;
    var defineProperty = Object.defineProperty;
    var stringSlice = uncurryThis("".slice);
    var replace = uncurryThis("".replace);
    var join = uncurryThis([].join);
    var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function() {
      return defineProperty(function() {
      }, "length", { value: 8 }).length !== 8;
    });
    var TEMPLATE = String(String).split("String");
    var makeBuiltIn = module2.exports = function(value, name, options) {
      if (stringSlice($String(name), 0, 7) === "Symbol(") {
        name = "[" + replace($String(name), /^Symbol\(([^)]*)\).*$/, "$1") + "]";
      }
      if (options && options.getter) name = "get " + name;
      if (options && options.setter) name = "set " + name;
      if (!hasOwn(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
        if (DESCRIPTORS) defineProperty(value, "name", { value: name, configurable: true });
        else value.name = name;
      }
      if (CONFIGURABLE_LENGTH && options && hasOwn(options, "arity") && value.length !== options.arity) {
        defineProperty(value, "length", { value: options.arity });
      }
      try {
        if (options && hasOwn(options, "constructor") && options.constructor) {
          if (DESCRIPTORS) defineProperty(value, "prototype", { writable: false });
        } else if (value.prototype) value.prototype = void 0;
      } catch (error) {
      }
      var state = enforceInternalState(value);
      if (!hasOwn(state, "source")) {
        state.source = join(TEMPLATE, typeof name == "string" ? name : "");
      }
      return value;
    };
    Function.prototype.toString = makeBuiltIn(function toString() {
      return isCallable(this) && getInternalState(this).source || inspectSource(this);
    }, "toString");
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/define-built-in.js
var require_define_built_in = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/define-built-in.js"(exports, module2) {
    "use strict";
    var isCallable = require_is_callable();
    var definePropertyModule = require_object_define_property();
    var makeBuiltIn = require_make_built_in();
    var defineGlobalProperty = require_define_global_property();
    module2.exports = function(O, key, value, options) {
      if (!options) options = {};
      var simple = options.enumerable;
      var name = options.name !== void 0 ? options.name : key;
      if (isCallable(value)) makeBuiltIn(value, name, options);
      if (options.global) {
        if (simple) O[key] = value;
        else defineGlobalProperty(key, value);
      } else {
        try {
          if (!options.unsafe) delete O[key];
          else if (O[key]) simple = true;
        } catch (error) {
        }
        if (simple) O[key] = value;
        else definePropertyModule.f(O, key, {
          value,
          enumerable: false,
          configurable: !options.nonConfigurable,
          writable: !options.nonWritable
        });
      }
      return O;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/math-trunc.js
var require_math_trunc = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/math-trunc.js"(exports, module2) {
    "use strict";
    var ceil = Math.ceil;
    var floor = Math.floor;
    module2.exports = Math.trunc || function trunc(x) {
      var n = +x;
      return (n > 0 ? floor : ceil)(n);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-integer-or-infinity.js
var require_to_integer_or_infinity = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-integer-or-infinity.js"(exports, module2) {
    "use strict";
    var trunc = require_math_trunc();
    module2.exports = function(argument) {
      var number = +argument;
      return number !== number || number === 0 ? 0 : trunc(number);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-absolute-index.js
var require_to_absolute_index = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-absolute-index.js"(exports, module2) {
    "use strict";
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var max = Math.max;
    var min = Math.min;
    module2.exports = function(index, length) {
      var integer = toIntegerOrInfinity(index);
      return integer < 0 ? max(integer + length, 0) : min(integer, length);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-length.js
var require_to_length = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-length.js"(exports, module2) {
    "use strict";
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var min = Math.min;
    module2.exports = function(argument) {
      var len = toIntegerOrInfinity(argument);
      return len > 0 ? min(len, 9007199254740991) : 0;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/length-of-array-like.js
var require_length_of_array_like = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/length-of-array-like.js"(exports, module2) {
    "use strict";
    var toLength = require_to_length();
    module2.exports = function(obj) {
      return toLength(obj.length);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/array-includes.js
var require_array_includes = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/array-includes.js"(exports, module2) {
    "use strict";
    var toIndexedObject = require_to_indexed_object();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var createMethod = function(IS_INCLUDES) {
      return function($this, el, fromIndex) {
        var O = toIndexedObject($this);
        var length = lengthOfArrayLike(O);
        if (length === 0) return !IS_INCLUDES && -1;
        var index = toAbsoluteIndex(fromIndex, length);
        var value;
        if (IS_INCLUDES && el !== el) while (length > index) {
          value = O[index++];
          if (value !== value) return true;
        }
        else for (; length > index; index++) {
          if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
        }
        return !IS_INCLUDES && -1;
      };
    };
    module2.exports = {
      // `Array.prototype.includes` method
      // https://tc39.es/ecma262/#sec-array.prototype.includes
      includes: createMethod(true),
      // `Array.prototype.indexOf` method
      // https://tc39.es/ecma262/#sec-array.prototype.indexof
      indexOf: createMethod(false)
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-keys-internal.js
var require_object_keys_internal = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-keys-internal.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var hasOwn = require_has_own_property();
    var toIndexedObject = require_to_indexed_object();
    var indexOf = require_array_includes().indexOf;
    var hiddenKeys = require_hidden_keys();
    var push = uncurryThis([].push);
    module2.exports = function(object, names) {
      var O = toIndexedObject(object);
      var i = 0;
      var result = [];
      var key;
      for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
      while (names.length > i) if (hasOwn(O, key = names[i++])) {
        ~indexOf(result, key) || push(result, key);
      }
      return result;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/enum-bug-keys.js
var require_enum_bug_keys = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/enum-bug-keys.js"(exports, module2) {
    "use strict";
    module2.exports = [
      "constructor",
      "hasOwnProperty",
      "isPrototypeOf",
      "propertyIsEnumerable",
      "toLocaleString",
      "toString",
      "valueOf"
    ];
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-get-own-property-names.js
var require_object_get_own_property_names = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-get-own-property-names.js"(exports) {
    "use strict";
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = enumBugKeys.concat("length", "prototype");
    exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
      return internalObjectKeys(O, hiddenKeys);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-get-own-property-symbols.js
var require_object_get_own_property_symbols = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-get-own-property-symbols.js"(exports) {
    "use strict";
    exports.f = Object.getOwnPropertySymbols;
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/own-keys.js
var require_own_keys = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/own-keys.js"(exports, module2) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    var uncurryThis = require_function_uncurry_this();
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var anObject = require_an_object();
    var concat = uncurryThis([].concat);
    module2.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
      var keys = getOwnPropertyNamesModule.f(anObject(it));
      var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/copy-constructor-properties.js
var require_copy_constructor_properties = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/copy-constructor-properties.js"(exports, module2) {
    "use strict";
    var hasOwn = require_has_own_property();
    var ownKeys = require_own_keys();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var definePropertyModule = require_object_define_property();
    module2.exports = function(target, source, exceptions) {
      var keys = ownKeys(source);
      var defineProperty = definePropertyModule.f;
      var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
          defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
      }
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-forced.js
var require_is_forced = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-forced.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    var isCallable = require_is_callable();
    var replacement = /#|\.prototype\./;
    var isForced = function(feature, detection) {
      var value = data[normalize(feature)];
      return value === POLYFILL ? true : value === NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
    };
    var normalize = isForced.normalize = function(string) {
      return String(string).replace(replacement, ".").toLowerCase();
    };
    var data = isForced.data = {};
    var NATIVE = isForced.NATIVE = "N";
    var POLYFILL = isForced.POLYFILL = "P";
    module2.exports = isForced;
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/export.js
var require_export = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/export.js"(exports, module2) {
    "use strict";
    var globalThis2 = require_global_this();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var defineBuiltIn = require_define_built_in();
    var defineGlobalProperty = require_define_global_property();
    var copyConstructorProperties = require_copy_constructor_properties();
    var isForced = require_is_forced();
    module2.exports = function(options, source) {
      var TARGET = options.target;
      var GLOBAL = options.global;
      var STATIC = options.stat;
      var FORCED, target, key, targetProperty, sourceProperty, descriptor;
      if (GLOBAL) {
        target = globalThis2;
      } else if (STATIC) {
        target = globalThis2[TARGET] || defineGlobalProperty(TARGET, {});
      } else {
        target = globalThis2[TARGET] && globalThis2[TARGET].prototype;
      }
      if (target) for (key in source) {
        sourceProperty = source[key];
        if (options.dontCallGetSet) {
          descriptor = getOwnPropertyDescriptor(target, key);
          targetProperty = descriptor && descriptor.value;
        } else targetProperty = target[key];
        FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
        if (!FORCED && targetProperty !== void 0) {
          if (typeof sourceProperty == typeof targetProperty) continue;
          copyConstructorProperties(sourceProperty, targetProperty);
        }
        if (options.sham || targetProperty && targetProperty.sham) {
          createNonEnumerableProperty(sourceProperty, "sham", true);
        }
        defineBuiltIn(target, key, sourceProperty, options);
      }
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/an-instance.js
var require_an_instance = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/an-instance.js"(exports, module2) {
    "use strict";
    var isPrototypeOf = require_object_is_prototype_of();
    var $TypeError = TypeError;
    module2.exports = function(it, Prototype) {
      if (isPrototypeOf(Prototype, it)) return it;
      throw new $TypeError("Incorrect invocation");
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/correct-prototype-getter.js
var require_correct_prototype_getter = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/correct-prototype-getter.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    module2.exports = !fails(function() {
      function F() {
      }
      F.prototype.constructor = null;
      return Object.getPrototypeOf(new F()) !== F.prototype;
    });
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-get-prototype-of.js
var require_object_get_prototype_of = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-get-prototype-of.js"(exports, module2) {
    "use strict";
    var hasOwn = require_has_own_property();
    var isCallable = require_is_callable();
    var toObject = require_to_object();
    var sharedKey = require_shared_key();
    var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
    var IE_PROTO = sharedKey("IE_PROTO");
    var $Object = Object;
    var ObjectPrototype = $Object.prototype;
    module2.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function(O) {
      var object = toObject(O);
      if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
      var constructor = object.constructor;
      if (isCallable(constructor) && object instanceof constructor) {
        return constructor.prototype;
      }
      return object instanceof $Object ? ObjectPrototype : null;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/define-built-in-accessor.js
var require_define_built_in_accessor = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/define-built-in-accessor.js"(exports, module2) {
    "use strict";
    var makeBuiltIn = require_make_built_in();
    var defineProperty = require_object_define_property();
    module2.exports = function(target, name, descriptor) {
      if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });
      if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });
      return defineProperty.f(target, name, descriptor);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/create-property.js
var require_create_property = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/create-property.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var definePropertyModule = require_object_define_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    module2.exports = function(object, key, value) {
      if (DESCRIPTORS) definePropertyModule.f(object, key, createPropertyDescriptor(0, value));
      else object[key] = value;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-keys.js
var require_object_keys = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-keys.js"(exports, module2) {
    "use strict";
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    module2.exports = Object.keys || function keys(O) {
      return internalObjectKeys(O, enumBugKeys);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-define-properties.js
var require_object_define_properties = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-define-properties.js"(exports) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var definePropertyModule = require_object_define_property();
    var anObject = require_an_object();
    var toIndexedObject = require_to_indexed_object();
    var objectKeys = require_object_keys();
    exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
      anObject(O);
      var props = toIndexedObject(Properties);
      var keys = objectKeys(Properties);
      var length = keys.length;
      var index = 0;
      var key;
      while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
      return O;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/html.js
var require_html = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/html.js"(exports, module2) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    module2.exports = getBuiltIn("document", "documentElement");
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-create.js
var require_object_create = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/object-create.js"(exports, module2) {
    "use strict";
    var anObject = require_an_object();
    var definePropertiesModule = require_object_define_properties();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = require_hidden_keys();
    var html = require_html();
    var documentCreateElement = require_document_create_element();
    var sharedKey = require_shared_key();
    var GT = ">";
    var LT = "<";
    var PROTOTYPE = "prototype";
    var SCRIPT = "script";
    var IE_PROTO = sharedKey("IE_PROTO");
    var EmptyConstructor = function() {
    };
    var scriptTag = function(content) {
      return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
    };
    var NullProtoObjectViaActiveX = function(activeXDocument2) {
      activeXDocument2.write(scriptTag(""));
      activeXDocument2.close();
      var temp = activeXDocument2.parentWindow.Object;
      activeXDocument2 = null;
      return temp;
    };
    var NullProtoObjectViaIFrame = function() {
      var iframe = documentCreateElement("iframe");
      var JS = "java" + SCRIPT + ":";
      var iframeDocument;
      iframe.style.display = "none";
      html.appendChild(iframe);
      iframe.src = String(JS);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(scriptTag("document.F=Object"));
      iframeDocument.close();
      return iframeDocument.F;
    };
    var activeXDocument;
    var NullProtoObject = function() {
      try {
        activeXDocument = new ActiveXObject("htmlfile");
      } catch (error) {
      }
      NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
      var length = enumBugKeys.length;
      while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
      return NullProtoObject();
    };
    hiddenKeys[IE_PROTO] = true;
    module2.exports = Object.create || function create(O, Properties) {
      var result;
      if (O !== null) {
        EmptyConstructor[PROTOTYPE] = anObject(O);
        result = new EmptyConstructor();
        EmptyConstructor[PROTOTYPE] = null;
        result[IE_PROTO] = O;
      } else result = NullProtoObject();
      return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/iterators-core.js
var require_iterators_core = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/iterators-core.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var create = require_object_create();
    var getPrototypeOf = require_object_get_prototype_of();
    var defineBuiltIn = require_define_built_in();
    var wellKnownSymbol = require_well_known_symbol();
    var IS_PURE = require_is_pure();
    var ITERATOR = wellKnownSymbol("iterator");
    var BUGGY_SAFARI_ITERATORS = false;
    var IteratorPrototype;
    var PrototypeOfArrayIteratorPrototype;
    var arrayIterator;
    if ([].keys) {
      arrayIterator = [].keys();
      if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
      else {
        PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
        if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
      }
    }
    var NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails(function() {
      var test = {};
      return IteratorPrototype[ITERATOR].call(test) !== test;
    });
    if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
    else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);
    if (!isCallable(IteratorPrototype[ITERATOR])) {
      defineBuiltIn(IteratorPrototype, ITERATOR, function() {
        return this;
      });
    }
    module2.exports = {
      IteratorPrototype,
      BUGGY_SAFARI_ITERATORS
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.constructor.js
var require_es_iterator_constructor = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.constructor.js"() {
    "use strict";
    var $ = require_export();
    var globalThis2 = require_global_this();
    var anInstance = require_an_instance();
    var anObject = require_an_object();
    var isCallable = require_is_callable();
    var getPrototypeOf = require_object_get_prototype_of();
    var defineBuiltInAccessor = require_define_built_in_accessor();
    var createProperty = require_create_property();
    var fails = require_fails();
    var hasOwn = require_has_own_property();
    var wellKnownSymbol = require_well_known_symbol();
    var IteratorPrototype = require_iterators_core().IteratorPrototype;
    var DESCRIPTORS = require_descriptors();
    var IS_PURE = require_is_pure();
    var CONSTRUCTOR = "constructor";
    var ITERATOR = "Iterator";
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var $TypeError = TypeError;
    var NativeIterator = globalThis2[ITERATOR];
    var FORCED = IS_PURE || !isCallable(NativeIterator) || NativeIterator.prototype !== IteratorPrototype || !fails(function() {
      NativeIterator({});
    });
    var IteratorConstructor = function Iterator() {
      anInstance(this, IteratorPrototype);
      if (getPrototypeOf(this) === IteratorPrototype) throw new $TypeError("Abstract class Iterator not directly constructable");
    };
    var defineIteratorPrototypeAccessor = function(key, value) {
      if (DESCRIPTORS) {
        defineBuiltInAccessor(IteratorPrototype, key, {
          configurable: true,
          get: function() {
            return value;
          },
          set: function(replacement) {
            anObject(this);
            if (this === IteratorPrototype) throw new $TypeError("You can't redefine this property");
            if (hasOwn(this, key)) this[key] = replacement;
            else createProperty(this, key, replacement);
          }
        });
      } else IteratorPrototype[key] = value;
    };
    if (!hasOwn(IteratorPrototype, TO_STRING_TAG)) defineIteratorPrototypeAccessor(TO_STRING_TAG, ITERATOR);
    if (FORCED || !hasOwn(IteratorPrototype, CONSTRUCTOR) || IteratorPrototype[CONSTRUCTOR] === Object) {
      defineIteratorPrototypeAccessor(CONSTRUCTOR, IteratorConstructor);
    }
    IteratorConstructor.prototype = IteratorPrototype;
    $({ global: true, constructor: true, forced: FORCED }, {
      Iterator: IteratorConstructor
    });
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/get-iterator-direct.js
var require_get_iterator_direct = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/get-iterator-direct.js"(exports, module2) {
    "use strict";
    module2.exports = function(obj) {
      return {
        iterator: obj,
        next: obj.next,
        done: false
      };
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/define-built-ins.js
var require_define_built_ins = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/define-built-ins.js"(exports, module2) {
    "use strict";
    var defineBuiltIn = require_define_built_in();
    module2.exports = function(target, src, options) {
      for (var key in src) defineBuiltIn(target, key, src[key], options);
      return target;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/create-iter-result-object.js
var require_create_iter_result_object = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/create-iter-result-object.js"(exports, module2) {
    "use strict";
    module2.exports = function(value, done) {
      return { value, done };
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/iterator-close.js
var require_iterator_close = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/iterator-close.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var anObject = require_an_object();
    var getMethod = require_get_method();
    module2.exports = function(iterator, kind, value) {
      var innerResult, innerError;
      anObject(iterator);
      try {
        innerResult = getMethod(iterator, "return");
        if (!innerResult) {
          if (kind === "throw") throw value;
          return value;
        }
        innerResult = call(innerResult, iterator);
      } catch (error) {
        innerError = true;
        innerResult = error;
      }
      if (kind === "throw") throw value;
      if (innerError) throw innerResult;
      anObject(innerResult);
      return value;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/iterator-create-proxy.js
var require_iterator_create_proxy = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/iterator-create-proxy.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var create = require_object_create();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var defineBuiltIns = require_define_built_ins();
    var wellKnownSymbol = require_well_known_symbol();
    var InternalStateModule = require_internal_state();
    var getMethod = require_get_method();
    var IteratorPrototype = require_iterators_core().IteratorPrototype;
    var createIterResultObject = require_create_iter_result_object();
    var iteratorClose = require_iterator_close();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var ITERATOR_HELPER = "IteratorHelper";
    var WRAP_FOR_VALID_ITERATOR = "WrapForValidIterator";
    var setInternalState = InternalStateModule.set;
    var createIteratorProxyPrototype = function(IS_ITERATOR) {
      var getInternalState = InternalStateModule.getterFor(IS_ITERATOR ? WRAP_FOR_VALID_ITERATOR : ITERATOR_HELPER);
      return defineBuiltIns(create(IteratorPrototype), {
        next: function next() {
          var state = getInternalState(this);
          if (IS_ITERATOR) return state.nextHandler();
          if (state.done) return createIterResultObject(void 0, true);
          try {
            var result = state.nextHandler();
            return state.returnHandlerResult ? result : createIterResultObject(result, state.done);
          } catch (error) {
            state.done = true;
            throw error;
          }
        },
        "return": function() {
          var state = getInternalState(this);
          var iterator = state.iterator;
          state.done = true;
          if (IS_ITERATOR) {
            var returnMethod = getMethod(iterator, "return");
            return returnMethod ? call(returnMethod, iterator) : createIterResultObject(void 0, true);
          }
          if (state.inner) try {
            iteratorClose(state.inner.iterator, "normal");
          } catch (error) {
            return iteratorClose(iterator, "throw", error);
          }
          if (iterator) iteratorClose(iterator, "normal");
          return createIterResultObject(void 0, true);
        }
      });
    };
    var WrapForValidIteratorPrototype = createIteratorProxyPrototype(true);
    var IteratorHelperPrototype = createIteratorProxyPrototype(false);
    createNonEnumerableProperty(IteratorHelperPrototype, TO_STRING_TAG, "Iterator Helper");
    module2.exports = function(nextHandler, IS_ITERATOR, RETURN_HANDLER_RESULT) {
      var IteratorProxy = function Iterator(record, state) {
        if (state) {
          state.iterator = record.iterator;
          state.next = record.next;
        } else state = record;
        state.type = IS_ITERATOR ? WRAP_FOR_VALID_ITERATOR : ITERATOR_HELPER;
        state.returnHandlerResult = !!RETURN_HANDLER_RESULT;
        state.nextHandler = nextHandler;
        state.counter = 0;
        state.done = false;
        setInternalState(this, state);
      };
      IteratorProxy.prototype = IS_ITERATOR ? WrapForValidIteratorPrototype : IteratorHelperPrototype;
      return IteratorProxy;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/call-with-safe-iteration-closing.js
var require_call_with_safe_iteration_closing = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/call-with-safe-iteration-closing.js"(exports, module2) {
    "use strict";
    var anObject = require_an_object();
    var iteratorClose = require_iterator_close();
    module2.exports = function(iterator, fn, value, ENTRIES) {
      try {
        return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
      } catch (error) {
        iteratorClose(iterator, "throw", error);
      }
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.filter.js
var require_es_iterator_filter = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.filter.js"() {
    "use strict";
    var $ = require_export();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var getIteratorDirect = require_get_iterator_direct();
    var createIteratorProxy = require_iterator_create_proxy();
    var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();
    var IS_PURE = require_is_pure();
    var IteratorProxy = createIteratorProxy(function() {
      var iterator = this.iterator;
      var predicate = this.predicate;
      var next = this.next;
      var result, done, value;
      while (true) {
        result = anObject(call(next, iterator));
        done = this.done = !!result.done;
        if (done) return;
        value = result.value;
        if (callWithSafeIterationClosing(iterator, predicate, [value, this.counter++], true)) return value;
      }
    });
    $({ target: "Iterator", proto: true, real: true, forced: IS_PURE }, {
      filter: function filter(predicate) {
        anObject(this);
        aCallable(predicate);
        return new IteratorProxy(getIteratorDirect(this), {
          predicate
        });
      }
    });
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/function-uncurry-this-clause.js
var require_function_uncurry_this_clause = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/function-uncurry-this-clause.js"(exports, module2) {
    "use strict";
    var classofRaw = require_classof_raw();
    var uncurryThis = require_function_uncurry_this();
    module2.exports = function(fn) {
      if (classofRaw(fn) === "Function") return uncurryThis(fn);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/function-bind-context.js
var require_function_bind_context = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/function-bind-context.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this_clause();
    var aCallable = require_a_callable();
    var NATIVE_BIND = require_function_bind_native();
    var bind = uncurryThis(uncurryThis.bind);
    module2.exports = function(fn, that) {
      aCallable(fn);
      return that === void 0 ? fn : NATIVE_BIND ? bind(fn, that) : function() {
        return fn.apply(that, arguments);
      };
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/iterators.js
var require_iterators = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/iterators.js"(exports, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-array-iterator-method.js
var require_is_array_iterator_method = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/is-array-iterator-method.js"(exports, module2) {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    var Iterators = require_iterators();
    var ITERATOR = wellKnownSymbol("iterator");
    var ArrayPrototype = Array.prototype;
    module2.exports = function(it) {
      return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-string-tag-support.js
var require_to_string_tag_support = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/to-string-tag-support.js"(exports, module2) {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var test = {};
    test[TO_STRING_TAG] = "z";
    module2.exports = String(test) === "[object z]";
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/classof.js
var require_classof = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/classof.js"(exports, module2) {
    "use strict";
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var isCallable = require_is_callable();
    var classofRaw = require_classof_raw();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var $Object = Object;
    var CORRECT_ARGUMENTS = classofRaw(/* @__PURE__ */ function() {
      return arguments;
    }()) === "Arguments";
    var tryGet = function(it, key) {
      try {
        return it[key];
      } catch (error) {
      }
    };
    module2.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
      var O, tag, result;
      return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) === "Object" && isCallable(O.callee) ? "Arguments" : result;
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/get-iterator-method.js
var require_get_iterator_method = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/get-iterator-method.js"(exports, module2) {
    "use strict";
    var classof = require_classof();
    var getMethod = require_get_method();
    var isNullOrUndefined = require_is_null_or_undefined();
    var Iterators = require_iterators();
    var wellKnownSymbol = require_well_known_symbol();
    var ITERATOR = wellKnownSymbol("iterator");
    module2.exports = function(it) {
      if (!isNullOrUndefined(it)) return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/get-iterator.js
var require_get_iterator = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/get-iterator.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var tryToString = require_try_to_string();
    var getIteratorMethod = require_get_iterator_method();
    var $TypeError = TypeError;
    module2.exports = function(argument, usingIterator) {
      var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
      if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
      throw new $TypeError(tryToString(argument) + " is not iterable");
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/iterate.js
var require_iterate = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/iterate.js"(exports, module2) {
    "use strict";
    var bind = require_function_bind_context();
    var call = require_function_call();
    var anObject = require_an_object();
    var tryToString = require_try_to_string();
    var isArrayIteratorMethod = require_is_array_iterator_method();
    var lengthOfArrayLike = require_length_of_array_like();
    var isPrototypeOf = require_object_is_prototype_of();
    var getIterator = require_get_iterator();
    var getIteratorMethod = require_get_iterator_method();
    var iteratorClose = require_iterator_close();
    var $TypeError = TypeError;
    var Result = function(stopped, result) {
      this.stopped = stopped;
      this.result = result;
    };
    var ResultPrototype = Result.prototype;
    module2.exports = function(iterable, unboundFunction, options) {
      var that = options && options.that;
      var AS_ENTRIES = !!(options && options.AS_ENTRIES);
      var IS_RECORD = !!(options && options.IS_RECORD);
      var IS_ITERATOR = !!(options && options.IS_ITERATOR);
      var INTERRUPTED = !!(options && options.INTERRUPTED);
      var fn = bind(unboundFunction, that);
      var iterator, iterFn, index, length, result, next, step;
      var stop = function(condition) {
        if (iterator) iteratorClose(iterator, "normal", condition);
        return new Result(true, condition);
      };
      var callFn = function(value) {
        if (AS_ENTRIES) {
          anObject(value);
          return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
        }
        return INTERRUPTED ? fn(value, stop) : fn(value);
      };
      if (IS_RECORD) {
        iterator = iterable.iterator;
      } else if (IS_ITERATOR) {
        iterator = iterable;
      } else {
        iterFn = getIteratorMethod(iterable);
        if (!iterFn) throw new $TypeError(tryToString(iterable) + " is not iterable");
        if (isArrayIteratorMethod(iterFn)) {
          for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
            result = callFn(iterable[index]);
            if (result && isPrototypeOf(ResultPrototype, result)) return result;
          }
          return new Result(false);
        }
        iterator = getIterator(iterable, iterFn);
      }
      next = IS_RECORD ? iterable.next : iterator.next;
      while (!(step = call(next, iterator)).done) {
        try {
          result = callFn(step.value);
        } catch (error) {
          iteratorClose(iterator, "throw", error);
        }
        if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result)) return result;
      }
      return new Result(false);
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.find.js
var require_es_iterator_find = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.find.js"() {
    "use strict";
    var $ = require_export();
    var iterate = require_iterate();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var getIteratorDirect = require_get_iterator_direct();
    $({ target: "Iterator", proto: true, real: true }, {
      find: function find(predicate) {
        anObject(this);
        aCallable(predicate);
        var record = getIteratorDirect(this);
        var counter = 0;
        return iterate(record, function(value, stop) {
          if (predicate(value, counter++)) return stop(value);
        }, { IS_RECORD: true, INTERRUPTED: true }).result;
      }
    });
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/iterator-map.js
var require_iterator_map = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/internals/iterator-map.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var getIteratorDirect = require_get_iterator_direct();
    var createIteratorProxy = require_iterator_create_proxy();
    var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();
    var IteratorProxy = createIteratorProxy(function() {
      var iterator = this.iterator;
      var result = anObject(call(this.next, iterator));
      var done = this.done = !!result.done;
      if (!done) return callWithSafeIterationClosing(iterator, this.mapper, [result.value, this.counter++], true);
    });
    module2.exports = function map(mapper) {
      anObject(this);
      aCallable(mapper);
      return new IteratorProxy(getIteratorDirect(this), {
        mapper
      });
    };
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.map.js
var require_es_iterator_map = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.map.js"() {
    "use strict";
    var $ = require_export();
    var map = require_iterator_map();
    var IS_PURE = require_is_pure();
    $({ target: "Iterator", proto: true, real: true, forced: IS_PURE }, {
      map
    });
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.reduce.js
var require_es_iterator_reduce = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.reduce.js"() {
    "use strict";
    var $ = require_export();
    var iterate = require_iterate();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var getIteratorDirect = require_get_iterator_direct();
    var $TypeError = TypeError;
    $({ target: "Iterator", proto: true, real: true }, {
      reduce: function reduce(reducer) {
        anObject(this);
        aCallable(reducer);
        var record = getIteratorDirect(this);
        var noInitial = arguments.length < 2;
        var accumulator = noInitial ? void 0 : arguments[1];
        var counter = 0;
        iterate(record, function(value) {
          if (noInitial) {
            noInitial = false;
            accumulator = value;
          } else {
            accumulator = reducer(accumulator, value, counter);
          }
          counter++;
        }, { IS_RECORD: true });
        if (noInitial) throw new $TypeError("Reduce of empty iterator with no initial value");
        return accumulator;
      }
    });
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.some.js
var require_es_iterator_some = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.some.js"() {
    "use strict";
    var $ = require_export();
    var iterate = require_iterate();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var getIteratorDirect = require_get_iterator_direct();
    $({ target: "Iterator", proto: true, real: true }, {
      some: function some(predicate) {
        anObject(this);
        aCallable(predicate);
        var record = getIteratorDirect(this);
        var counter = 0;
        return iterate(record, function(value, stop) {
          if (predicate(value, counter++)) return stop();
        }, { IS_RECORD: true, INTERRUPTED: true }).stopped;
      }
    });
  }
});

// node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.to-array.js
var require_es_iterator_to_array = __commonJS({
  "node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/modules/es.iterator.to-array.js"() {
    "use strict";
    var $ = require_export();
    var anObject = require_an_object();
    var iterate = require_iterate();
    var getIteratorDirect = require_get_iterator_direct();
    var push = [].push;
    $({ target: "Iterator", proto: true, real: true }, {
      toArray: function toArray() {
        var result = [];
        iterate(getIteratorDirect(anObject(this)), push, { that: result, IS_RECORD: true });
        return result;
      }
    });
  }
});

// dist/Twinkle/Twinkle.js
require_es_iterator_constructor();
require_es_iterator_filter();
require_es_iterator_find();
require_es_iterator_map();
require_es_iterator_reduce();
require_es_iterator_some();
require_es_iterator_to_array();
var _templateObject;
function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c), u = i.value;
  } catch (n2) {
    return void e(n2);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function() {
    var t = this, e = arguments;
    return new Promise(function(r, o) {
      var a = n.apply(t, e);
      function _next(n2) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n2);
      }
      function _throw(n2) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n2);
      }
      _next(void 0);
    });
  };
}
function _taggedTemplateLiteral(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function _createForOfIteratorHelper(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
      t && (r = t);
      var n = 0, F = function() {
      };
      return { s: F, n: function() {
        return n >= r.length ? { done: true } : { done: false, value: r[n++] };
      }, e: function(r2) {
        throw r2;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o, a = true, u = false;
  return { s: function() {
    t = t.call(r);
  }, n: function() {
    var r2 = t.next();
    return a = r2.done, r2;
  }, e: function(r2) {
    u = true, o = r2;
  }, f: function() {
    try {
      a || null == t.return || t.return();
    } finally {
      if (u) throw o;
    }
  } };
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;
};
//! src/Twinkle/modules/api.ts
var import_ext_gadget;
var api;
var init_api = __esm({
  "src/Twinkle/modules/api.ts"() {
    "use strict";
    import_ext_gadget = require("ext.gadget.Util");
    api = (0, import_ext_gadget.initMwApi)("morebits.js; Twinkle/1.1");
  }
});
//! src/Twinkle/modules/twinkle.js
var twinkle_exports = {};
var init_twinkle = __esm({
  "src/Twinkle/modules/twinkle.js"() {
    "use strict";
    init_api();
    /*! Twinkle.js - twinkle.js */
    (function twinkle($, _window) {
      const $body = $("body");
      const Twinkle2 = {};
      (_window = window).Twinkle || (_window.Twinkle = Twinkle2);
      if (!Morebits.userIsInGroup("autoconfirmed") && !Morebits.userIsInGroup("confirmed")) {
        console.warn("[Twinkle] 非确认用户或自动确认用户，Twinkle不会运行。");
        return;
      }
      Twinkle2.changeTags = "Twinkle";
      Twinkle2.summaryAd = "（[[H:TW|Twinkle]]）";
      Twinkle2.hatnoteRegex = "(?:Short[ _]description)|(?:Rellink|Hatnote|HAT)|(?:Main|[细細][节節]|Main[ _]articles|主[条條]目|Hurricane[ _]main|[条條]目|主|[頁页]面|主[頁页]面|主[頁页]|主[題题]目|Main[ _]article|AP)|(?:Wrongtitle|Correct[ _]title)|(?:主条目消歧义|主條目消歧義|消歧义链接|消歧義鏈接|消歧義連結|消连|消連|消歧义连结|DisambLink|Noteref|Dablink)|(?:Distinguish|不是|Not|提示|混淆|分別|分别|區別|区别|本条目的主题不是|本條目的主題不是|本条目主题不是|本條目主題不是|条目主题不是|條目主題不是|主题不是|主題不是|Confused|区分|區分|Confusion|Confuse|RedirectNOT|Misspelling)|(?:Distinguish2|SelfDistinguish|Not2|不是2)|(?:For)|(?:Details|Further|See|另见|另見|More|相關條目|相关条目|Detail|见|見|更多资料|更多資料|Further[ _]information|更多资讯|更多資訊|More[ _]information|更多信息)|(?:Selfref)|(?:About|Otheruses4|关于|關於)|(?:Other[ _]uses|Otheruse|条目消歧义|條目消歧義|他用|Otheruses)|(?:Other[ _]uses list|Otheruselist|主條目消歧義列表|主条目消歧义列表|Otheruseslist|Aboutlist|About[ _]list|Otheruses[ _]list)|(?:Redirect|重定向至此|Redirects[ _]here|Redirect[ _]to)|(?:Redirect2|主條目消歧義2|主条目消歧义2|Redir|重定向至此2)|(?:Redirect3)|(?:Redirect4)|(?:Redirect-distinguish)|(?:Redirect-synonym)|(?:Redirect-multi)|(?:See[ _]Wiktionary|Seewikt)|(?:Seealso|参看|參看|See[ _]also|参见|參見|Also)|(?:See[ _]also2|Seealso2|不轉換參見|不转换参见)|(?:Other[ _]places)|(?:Contrast|對比|对比)";
      Twinkle2.initCallbacks = [];
      Twinkle2.addInitCallback = (func, name) => {
        Twinkle2.initCallbacks[Twinkle2.initCallbacks.length] = {
          func,
          name
        };
      };
      Twinkle2.defaultConfig = {};
      Twinkle2.defaultConfig = {
        // General
        userTalkPageMode: "tab",
        dialogLargeFont: false,
        disabledModules: Morebits.userIsSysop ? [] : ["block"],
        // default to disable block for non-sysop, if enable manually, they can only use it to tag userpage
        disabledSysopModules: [],
        // ARV
        spiWatchReport: "yes",
        // Block
        defaultToBlock64: false,
        defaultToPartialBlocks: false,
        blankTalkpageOnIndefBlock: false,
        watchBlockNotices: "yes",
        customBlockReasonList: [],
        // Fluff (revert and rollback)
        openTalkPage: [],
        openTalkPageOnAutoRevert: false,
        rollbackInPlace: false,
        markRevertedPagesAsMinor: ["vand"],
        watchRevertedPages: ["norm", "vand", "torev"],
        watchRevertedExpiry: "yes",
        offerReasonOnNormalRevert: true,
        confirmOnFluff: false,
        showRollbackLinks: ["diff", "others"],
        customRevertSummary: [],
        // DI (twinkleimage)
        notifyUserOnDeli: true,
        deliWatchPage: "default",
        deliWatchUser: "default",
        // Protect
        watchRequestedPages: "yes",
        watchPPTaggedPages: "default",
        watchProtectedPages: "default",
        // CSD
        speedySelectionStyle: "buttonClick",
        watchSpeedyPages: ["g1", "g3", "g4", "g7", "g8"],
        watchSpeedyExpiry: "yes",
        markSpeedyPagesAsPatrolled: false,
        watchSpeedyUser: "1 month",
        // these next two should probably be identical by default
        notifyUserOnSpeedyDeletionNomination: ["db", "g1", "g2", "g3", "g4", "g5", "g6", "g7", "g8", "g9", "a1", "a2", "a3", "r1", "r2", "f1", "f2", "f3", "f4", "f5", "o1", "o2", "o3"],
        warnUserOnSpeedyDelete: ["db", "g1", "g2", "g3", "g4", "g5", "g6", "g7", "g8", "g9", "a1", "a2", "a3", "r1", "r2", "f1", "f2", "f3", "f4", "f5", "o1", "o2", "o3"],
        promptForSpeedyDeletionSummary: [],
        openUserTalkPageOnSpeedyDelete: [],
        deleteTalkPageOnDelete: true,
        deleteRedirectsOnDelete: true,
        deleteSysopDefaultToDelete: false,
        speedyWindowHeight: 500,
        speedyWindowWidth: 800,
        logSpeedyNominations: true,
        speedyLogPageName: "CSD日志",
        noLogOnSpeedyNomination: ["o1"],
        enlargeG7Input: false,
        // Unlink
        unlinkNamespaces: ["0", "6", "10", "302"],
        // Warn
        defaultWarningGroup: "1",
        combinedSingletMenus: false,
        watchWarnings: "yes",
        oldSelect: false,
        customWarningList: [],
        autoMenuAfterRollback: false,
        // XfD
        logXfdNominations: true,
        xfdLogPageName: "XfD日志",
        noLogOnXfdNomination: [],
        xfdWatchDiscussion: "default",
        xfdWatchPage: "default",
        xfdWatchUser: "default",
        markXfdPagesAsPatrolled: true,
        FwdCsdToXfd: Morebits.userIsSysop,
        afdDefaultCategory: "delete",
        afdFameDefaultReason: "没有足够的可靠来源证明此条目符合[[LIB:收录标准|收录标准]]",
        afdSubstubDefaultReason: "过期小小作品",
        XfdClose: Morebits.userIsSysop ? "all" : "hide",
        // Copyvio
        copyvioWatchPage: "yes",
        copyvioWatchUser: "yes",
        markCopyvioPagesAsPatrolled: true,
        // Hidden preferences
        autolevelStaleDays: 3,
        revertMaxRevisions: 50,
        // intentionally limited
        batchMax: 5e3,
        batchChunks: 50,
        configPage: "Help:Twinkle/参数设置",
        projectNamespaceName: mw.config.get("wgFormattedNamespaces")[4],
        sandboxPage: "LIB:沙盒",
        // Deprecated options, as a fallback for add-on scripts/modules
        summaryAd: "（[[H:TW|Twinkle]]）",
        deletionSummaryAd: "（[[H:TW|Twinkle]]）",
        protectionSummaryAd: "（[[H:TW|Twinkle]]）",
        blockSummaryAd: "（[[H:TW|Twinkle]]）",
        // Tag
        groupByDefault: true,
        watchTaggedPages: "yes",
        watchMergeDiscussions: "yes",
        markTaggedPagesAsMinor: false,
        markTaggedPagesAsPatrolled: true,
        tagArticleSortOrder: "cat",
        customTagList: [],
        customFileTagList: [],
        customRedirectTagList: [],
        // Stub
        watchStubbedPages: false,
        markStubbedPagesAsMinor: false,
        markStubbedPagesAsPatrolled: true,
        stubArticleSortOrder: "cat",
        customStubList: [],
        // Talkback
        markTalkbackAsMinor: true,
        insertTalkbackSignature: true,
        // always sign talkback templates
        talkbackHeading: window.wgULS("回复通告", "回覆通告"),
        mailHeading: window.wgULS("您有新邮件！", "您有新郵件！")
      };
      switch (mw.config.get("skin")) {
        case "vector":
        case "vector-2022":
          Twinkle2.defaultConfig.portletArea = "right-navigation";
          Twinkle2.defaultConfig.portletId = "p-twinkle";
          Twinkle2.defaultConfig.portletName = "TW";
          Twinkle2.defaultConfig.portletType = "menu";
          Twinkle2.defaultConfig.portletNext = "p-search";
          break;
        case "gongbi":
          Twinkle2.defaultConfig.portletArea = $body.find("#page-tools .sidebar-inner").length > 0 ? "#page-tools .sidebar-inner" : "#page-more .sidebar-inner";
          Twinkle2.defaultConfig.portletId = "p-twinkle";
          Twinkle2.defaultConfig.portletName = "Twinkle";
          Twinkle2.defaultConfig.portletType = null;
          Twinkle2.defaultConfig.portletNext = $body.find("#page-tools .sidebar-inner").length > 0 ? "page-more" : null;
          break;
        case "citizen":
          Twinkle2.defaultConfig.portletArea = "#page-actions-more__card .citizen-menu__card-content";
          Twinkle2.defaultConfig.portletId = "p-twinkle";
          Twinkle2.defaultConfig.portletName = "Twinkle";
          Twinkle2.defaultConfig.portletType = "nav";
          Twinkle2.defaultConfig.portletNext = "p-tb";
          break;
        default:
          Twinkle2.defaultConfig.portletArea = null;
          Twinkle2.defaultConfig.portletId = "p-cactions";
          Twinkle2.defaultConfig.portletName = null;
          Twinkle2.defaultConfig.portletType = null;
          Twinkle2.defaultConfig.portletNext = null;
      }
      Twinkle2.getPref = (name) => {
        if (typeof Twinkle2.prefs === "object" && Twinkle2.prefs[name] !== void 0) {
          return Twinkle2.prefs[name];
        }
        if (typeof window.TwinkleConfig === "object" && window.TwinkleConfig[name] !== void 0) {
          return window.TwinkleConfig[name];
        }
        return Twinkle2.defaultConfig[name];
      };
      Twinkle2.addPortlet = (navigation, id, text, type, nextnodeid) => {
        const root = document.querySelector(/^(?:#|\.)/.test(navigation) ? navigation : "#".concat(navigation));
        if (!root) {
          return null;
        }
        const item = document.querySelector("#".concat(id));
        if (item) {
          if (item.parentNode && item.parentNode === root) {
            return item;
          }
          return null;
        }
        let nextnode;
        if (nextnodeid) {
          nextnode = document.querySelector("#".concat(nextnodeid));
        }
        const skin = mw.config.get("skin");
        if (skin !== "vector" && skin !== "vector-2022" || navigation !== "left-navigation" && navigation !== "right-navigation") {
          type = null;
        }
        let outerNavClass;
        let innerDivClass;
        let ulClassName;
        switch (skin) {
          case "vector":
          case "vector-2022":
            if (navigation !== "portal" && navigation !== "left-navigation" && navigation !== "right-navigation") {
              navigation = "mw-panel";
            }
            outerNavClass = "mw-portlet vector-menu";
            if (navigation === "mw-panel") {
              outerNavClass += " vector-menu-portal";
            } else if (type === "menu") {
              outerNavClass += " vector-menu-dropdown vector-dropdown vector-menu-dropdown-noicon";
            } else {
              outerNavClass += " vector-menu-tabs";
            }
            innerDivClass = "vector-menu-content vector-dropdown-content";
            ulClassName = "vector-menu-content-list";
            break;
          case "gongbi":
            outerNavClass = "mw-portlet";
            innerDivClass = "mw-portlet-body";
            break;
          case "citizen":
            outerNavClass = "citizen-menu mw-portlet";
            innerDivClass = "citizen-menu__content mw-portlet-twinkle";
            ulClassName = "citizen-menu__content-list";
            break;
          default:
            navigation = "column-one";
            outerNavClass = "portlet";
            break;
        }
        let outerNav;
        let heading;
        if (skin === "vector-2022") {
          outerNav = document.createElement("div");
          heading = document.createElement("label");
        } else {
          outerNav = document.createElement("nav");
          heading = document.createElement("h3");
        }
        outerNav.setAttribute("aria-labelledby", "".concat(id, "-label"));
        outerNav.className = "".concat(outerNavClass, " emptyPortlet");
        outerNav.id = id;
        if (nextnode && nextnode.parentNode === root) {
          root.insertBefore(outerNav, nextnode);
        } else {
          root.appendChild(outerNav);
        }
        heading.id = "".concat(id, "-label");
        const ul = document.createElement("ul");
        if (skin === "vector" || skin === "vector-2022") {
          heading.setAttribute("for", "".concat(id, "-dropdown-checkbox"));
          ul.className = "vector-menu-content-list";
          heading.className = "vector-menu-heading vector-dropdown-label";
          if (outerNavClass.includes("vector-menu-dropdown")) {
            const chkbox = document.createElement("input");
            chkbox.id = "".concat(id, "-dropdown-checkbox");
            chkbox.className = "vector-menu-checkbox vector-dropdown-checkbox";
            chkbox.setAttribute("type", "checkbox");
            chkbox.setAttribute("aria-labelledby", "".concat(id, "-label"));
            outerNav.appendChild(chkbox);
            const span = document.createElement("span");
            span.appendChild(document.createTextNode(text));
            heading.appendChild(span);
            const a = document.createElement("a");
            a.href = "#";
            $(a).on("click", (e) => {
              e.preventDefault();
            });
            heading.appendChild(a);
          }
        } else {
          if (ulClassName) {
            ul.className = ulClassName;
          }
          heading.appendChild(document.createTextNode(text));
        }
        outerNav.appendChild(heading);
        if (innerDivClass) {
          const innerDiv = document.createElement("div");
          innerDiv.className = innerDivClass;
          innerDiv.appendChild(ul);
          outerNav.appendChild(innerDiv);
        } else {
          outerNav.appendChild(ul);
        }
        return outerNav;
      };
      Twinkle2.addPortletLink = (task, text, id, tooltip) => {
        if (Twinkle2.getPref("portletArea") !== null) {
          Twinkle2.addPortlet(Twinkle2.getPref("portletArea"), Twinkle2.getPref("portletId"), Twinkle2.getPref("portletName"), Twinkle2.getPref("portletType"), Twinkle2.getPref("portletNext"));
        }
        const link = mw.util.addPortletLink(Twinkle2.getPref("portletId"), typeof task === "string" ? task : "#", text, id, tooltip);
        $body.find(".client-js .skin-vector #p-cactions").css("margin-right", "initial");
        if (typeof task === "function") {
          $(link).find("a").on("click", (ev) => {
            task();
            ev.preventDefault();
          });
        }
        if ($.collapsibleTabs) {
          $.collapsibleTabs.handleResize();
        }
        return link;
      };
      Twinkle2.prefs || (Twinkle2.prefs = {});
      void api.get({
        action: "query",
        prop: ["revisions"],
        rvprop: "content",
        format: "json",
        formatversion: "2",
        titles: "User:".concat(mw.config.get("wgUserName"), "/twinkleoptions.js"),
        rvlimit: "1",
        rvslots: "main"
      }).then((response) => {
        if (!response["query"].pages[0].missing) {
          var _response$query$pages;
          const content = (_response$query$pages = response["query"].pages[0].revisions[0].slots.main.content) !== null && _response$query$pages !== void 0 ? _response$query$pages : "";
          if (content !== "") {
            try {
              window.eval(content);
            } catch {
              void mw.notify(window.wgULS("未能加载您的Twinkle参数设置", "未能載入您的Twinkle偏好設定"), {
                type: "error",
                tag: "twinkle"
              });
            }
          }
        }
      }).fail(() => {
        void mw.notify(window.wgULS("未能加载您的Twinkle参数设置", "未能載入您的Twinkle偏好設定"), {
          type: "error",
          tag: "twinkle"
        });
      }).always(() => {
        $(Twinkle2.load);
      });
      Twinkle2.load = () => {
        let activeSpecialPageList = ["Block", "Contributions", "AbuseLog", "Recentchanges", "Recentchangeslinked"];
        if (Morebits.userIsSysop) {
          activeSpecialPageList = [...activeSpecialPageList, "DeletedContributions", "Prefixindex", "BrokenRedirects"];
        }
        if (mw.config.get("wgNamespaceNumber") === -1 && !activeSpecialPageList.includes(mw.config.get("wgCanonicalSpecialPageName"))) {
          return;
        }
        if (window.top !== window.self) {
          return;
        }
        Twinkle2.userAgent = "Twinkle/1.1";
        Morebits.wiki.api.setApiUserAgent(Twinkle2.userAgent);
        Twinkle2.disabledModules = [...Twinkle2.getPref("disabledModules"), ...Twinkle2.getPref("disabledSysopModules")];
        Twinkle2.addInitCallback = (func, name) => {
          if (!name || !Twinkle2.disabledModules.includes(name)) {
            func();
          }
        };
        var _iterator = _createForOfIteratorHelper(Twinkle2.initCallbacks), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            const module2 = _step.value;
            Twinkle2.addInitCallback(module2.func, module2.name);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        if (Twinkle2.getPref("dialogLargeFont")) {
          mw.util.addCSS(".morebits-dialog-content,.morebits-dialog-footerlinks{font-size:100%!important}.morebits-dialog input,.morebits-dialog select,.morebits-dialog-content button{font-size:inherit !important}");
        }
        const isVector = ["vector", "vector-2022"].includes(mw.config.get("skin"));
        if (isVector && Twinkle2.getPref("portletType") === "menu" && $body.find("#p-twinkle").length === 0) {
          $body.find("#p-cactions").css("margin-right", "initial");
        }
      };
      Twinkle2.sortByNamespace = (first, second) => {
        return first.ns - second.ns || (first.title > second.title ? 1 : -1);
      };
      Twinkle2.generateBatchPageLinks = (checkbox) => {
        const $checkbox = $(checkbox);
        const link = Morebits.htmlNode("a", $checkbox.val());
        link.setAttribute("class", "tw-batchpage-link");
        link.setAttribute("href", mw.util.getUrl($checkbox.val()));
        link.setAttribute("target", "_blank");
        link.setAttribute("rel", "noopener noreferrer");
        $checkbox.next().prepend([link, " "]);
      };
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinklearv.js
var twinklearv_exports = {};
var init_twinklearv = __esm({
  "src/Twinkle/modules/twinklearv.js"() {
    "use strict";
    /*! Twinkle.js - twinklearv.js */
    (function twinklearv($) {
      const $body = $("body");
      Twinkle.arv = () => {
        const username = mw.config.get("wgRelevantUserName");
        if (!username) {
          return;
        }
        const isIP = mw.util.isIPAddress(username);
        const title = isIP ? window.wgULS("报告IP给管理员", "報告IP給管理員") : window.wgULS("报告用户给管理人员", "報告使用者給管理人員");
        Twinkle.addPortletLink(() => {
          Twinkle.arv.callback(username, isIP);
        }, window.wgULS("告状", "告狀"), "tw-arv", title);
      };
      Twinkle.arv.callback = (uid, isIP) => {
        if (uid === mw.config.get("wgUserName")) {
          void mw.notify(window.wgULS("你不想报告你自己，对吧？", "你不想報告你自己，對吧？"), {
            type: "warn",
            tag: "twinklearv"
          });
          return;
        }
        const Window = new Morebits.simpleWindow(600, 500);
        Window.setTitle(window.wgULS("报告用户给管理人员", "報告使用者給管理人員"));
        Window.setScriptName("Twinkle");
        Window.addFooterLink(window.wgULS("告状设置", "告狀設定"), "H:TW/PREF#arv");
        Window.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW#告狀");
        const form = new Morebits.quickForm(Twinkle.arv.callback.evaluate);
        const categories = form.append({
          type: "select",
          name: "category",
          label: window.wgULS("选择报告类型：", "選擇報告類別："),
          event: Twinkle.arv.callback.changeCategory
        });
        categories.append({
          type: "option",
          label: window.wgULS("破坏（LIB:VIP）", "破壞（LIB:VIP）"),
          value: "aiv"
        });
        categories.append({
          type: "option",
          label: window.wgULS("编辑争议（LIB:EWIP）", "編輯爭議（LIB:EWIP）"),
          value: "ewip"
        });
        categories.append({
          type: "option",
          label: window.wgULS("用户名（LIB:UAA）", "使用者名稱（LIB:UAA）"),
          value: "username",
          disabled: mw.util.isIPAddress(uid)
        });
        categories.append({
          type: "option",
          label: window.wgULS("傀儡调查（LIB:SPI）", "傀儡調查（LIB:SPI）"),
          value: "spi",
          disabled: mw.util.isIPAddress(uid)
        });
        form.append({
          type: "div",
          label: "",
          style: "color: #f00",
          id: "twinkle-arv-blockwarning"
        });
        form.append({
          type: "field",
          label: "Work area",
          name: "work_area"
        });
        form.append({
          type: "submit",
          label: "提交"
        });
        form.append({
          type: "hidden",
          name: "uid",
          value: uid
        });
        const result = form.render();
        Window.setContent(result);
        Window.display();
        const query = {
          action: "query",
          list: "blocks",
          bkprop: "range|flags",
          format: "json"
        };
        if (isIP) {
          query.bkip = uid;
        } else {
          query.bkusers = uid;
        }
        new Morebits.wiki.api(window.wgULS("检查用户的封禁状态", "檢查使用者的封鎖狀態"), query, (apiobj) => {
          const blocklist = apiobj.getResponse().query.blocks;
          if (blocklist.length) {
            const [block] = blocklist;
            let message = (isIP ? window.wgULS("此IP地址", "此IP位址") : window.wgULS("此账号", "此賬號")) + window.wgULS("已经被", "已經被") + (block.partial ? "部分" : "");
            message += block.rangestart === (block.rangeend ? "段" : "") + window.wgULS("封禁。", "封鎖。");
            if (block.partial) {
              $body.find("#twinkle-arv-blockwarning").css("color", "black");
            }
            $body.find("#twinkle-arv-blockwarning").text(message);
          }
        }).post();
        const evt = document.createEvent("Event");
        evt.initEvent("change", true, true);
        result.category.dispatchEvent(evt);
      };
      Twinkle.arv.lta_list = [{
        value: "",
        label: window.wgULS("请选择", "請選擇")
      }];
      Twinkle.arv.callback.sockmaster_changed = (e) => {
        Twinkle.arv.callback.set_sockmaster(e.target.value);
      };
      Twinkle.arv.callback.set_sockmaster = (sockmaster) => {
        $body.find("code.tw-arv-sockmaster").text("{{".concat("subst:", "Socksuspectnotice|1=".concat(sockmaster, "}}")));
      };
      Twinkle.arv.callback.changeCategory = (e) => {
        const value_ = e.target.value;
        const root_ = e.target.form;
        const [old_area] = Morebits.quickForm.getElements(root_, "work_area");
        let work_area = null;
        const previewlink = document.createElement("a");
        previewlink.style.cursor = "pointer";
        previewlink.textContent = window.wgULS("预览", "預覽");
        $(previewlink).on("click", () => {
          Twinkle.arv.callback.preview(root_);
        });
        switch (value_) {
          case "ewip":
            work_area = new Morebits.quickForm.element({
              type: "field",
              label: window.wgULS("报告编辑争议", "報告編輯爭議"),
              name: "work_area"
            });
            work_area.append({
              type: "dyninput",
              name: "page",
              label: window.wgULS("相关页面：", "相關頁面："),
              sublabel: window.wgULS("页面：", "頁面："),
              tooltip: window.wgULS("如不希望让报告链接到页面，请留空", "如不希望讓報告連結到頁面，請留空"),
              min: 1,
              max: 10
            });
            work_area.append({
              type: "textarea",
              name: "reason",
              label: window.wgULS("评论：", "評論：")
            });
            work_area.append({
              type: "div",
              id: "arvpreview",
              label: [previewlink]
            });
            work_area.append({
              type: "div",
              id: "twinklearv-previewbox",
              style: "display: none"
            });
            work_area = work_area.render();
            old_area.replaceWith(work_area);
            break;
          case "username":
            work_area = new Morebits.quickForm.element({
              type: "field",
              label: window.wgULS("报告不当用户名", "報告不當使用者名稱"),
              name: "work_area"
            });
            work_area.append({
              type: "header",
              label: window.wgULS("不当用户名类型", "不當使用者名稱類別"),
              tooltip: window.wgULS("有兽档案馆不允许使用带有误导性、宣传性、侮辱性或破坏性的用户名。此外，使用域名及邮箱地址的用户名亦被禁止。这些准则俱应应用至用户名及签名。在其他语言中不当的用户名或通过错拼、替代、暗示、拆字或任何间接方法达成的非妥当用户名同样视为违规。", "有獸檔案館不允許使用帶有誤導性、宣傳性、侮辱性或破壞性的使用者名稱。此外，使用域名及電子信箱位址的使用者名稱亦被禁止。這些準則俱應應用至使用者名稱及簽名。在其他語言中不當的使用者名稱或通過錯拼、替代、暗示、拆字或任何間接方法達成的非妥當使用者名稱同樣視為違規。")
            });
            work_area.append({
              type: "checkbox",
              name: "arvtype",
              list: [{
                label: window.wgULS("误导性用户名", "誤導性使用者名稱"),
                value: window.wgULS("误导性", "誤導性"),
                tooltip: window.wgULS("误导性用户名隐含着与贡献者相关或误导他人的事情。例如︰不实观点、暗示账号拥有特定权限或暗示该账号并非由一人拥有而是由一个组群、一个项目或一个集体运作。", "誤導性使用者名稱隱含著與貢獻者相關或誤導他人的事情。例如︰不實觀點、暗示賬號擁有特定權限或暗示該賬號並非由一人擁有而是由一個群組、一個計畫或一個集體運作。")
              }, {
                label: window.wgULS("宣传性用户名", "宣傳性使用者名稱"),
                value: window.wgULS("宣传性", "宣傳性"),
                tooltip: window.wgULS("宣传性用户名会于有兽档案馆上起推销一个组群或一间公司的作用。", "宣傳性使用者名稱會於有獸檔案館上起推銷一個群組或一間公司的作用。")
              }, {
                label: window.wgULS("暗示并非由一人拥有", "暗示並非由一人擁有"),
                value: "shared",
                tooltip: window.wgULS("每个账号只可以代表个人（容许一些例外情况），所有与他人分享账号的行为（包括分享账号密码）均被禁止。", "每個賬號只可以代表個人（容許一些例外情況），所有與他人分享賬號的行為（包括分享賬號密碼）均被禁止。")
              }, {
                label: window.wgULS("侮辱性用户名", "侮辱性使用者名稱"),
                value: "侮辱性",
                tooltip: window.wgULS("侮辱性用户名令协调编辑变得困难，甚至无可能。", "侮辱性使用者名稱令協調編輯變得困難，甚至無可能。")
              }, {
                label: window.wgULS("破坏性用户名", "破壞性使用者名稱"),
                value: window.wgULS("破坏性", "破壞性"),
                tooltip: window.wgULS("破坏性用户名包括人身攻击、伪冒他人或其他一切有着清晰可见的破坏有兽档案馆意图的用户名。", "破壞性使用者名稱包括人身攻擊、偽冒他人或其他一切有著清晰可見的破壞有獸檔案館意圖的使用者名稱。")
              }]
            });
            work_area.append({
              type: "checkbox",
              list: [{
                label: window.wgULS("在页面上隐藏用户名（需监督的用户名请勿于站内报告，勾选此项并不构成能在站内报告的理由）", "在頁面上隱藏使用者名稱（需監督的使用者名稱請勿於站內報告，勾選此項並不構成能在站內報告的理由）"),
                tooltip: window.wgULS("若用户名不当请勾选此项，注意：请考虑私下联系管理员处理。", "若使用者名稱不當請勾選此項，注意：請考慮私下聯絡管理員處理。"),
                name: "hidename",
                value: "hidename"
              }],
              style: "font-weight: bold;"
            });
            work_area.append({
              type: "textarea",
              name: "reason",
              label: window.wgULS("评论：", "評論：")
            });
            work_area.append({
              type: "div",
              id: "arvpreview",
              label: [previewlink]
            });
            work_area.append({
              type: "div",
              id: "twinklearv-previewbox",
              style: "display: none"
            });
            work_area = work_area.render();
            old_area.replaceWith(work_area);
            break;
          case "spi":
            work_area = new Morebits.quickForm.element({
              type: "field",
              label: window.wgULS("发起傀儡调查", "發起傀儡調查"),
              name: "work_area"
            });
            work_area.append({
              type: "input",
              name: "sockmaster",
              tooltip: window.wgULS("主账号的用户名（不含User:前缀）", "主賬號的使用者名稱（不含User:字首）"),
              value: root_.uid.value,
              event: Twinkle.arv.callback.sockmaster_changed
            });
            work_area.append({
              type: "div",
              id: "twinklearv-spinoticebox",
              style: "display: none"
            });
            work_area.append({
              type: "dyninput",
              name: "sockpuppet",
              label: "傀儡",
              sublabel: "傀儡：",
              tooltip: window.wgULS("傀儡的用户名（不含User:前缀）", "傀儡的使用者名稱（不含User:字首）"),
              min: 2,
              max: 9
            });
            work_area.append({
              type: "textarea",
              label: window.wgULS("证据：", "證據："),
              name: "reason",
              tooltip: window.wgULS("输入能够用来体现这些用户可能滥用多重账号的证据，这通常包括茶馆发言、页面历史或其他有关的信息。请避免在此处提供非与傀儡或滥用多重账号相关的其他讨论。", "輸入能夠用來體現這些使用者可能濫用多重賬號的證據，這通常包括茶館發言、頁面歷史或其他有關的資訊。請避免在此處提供非與傀儡或濫用多重賬號相關的其他討論。")
            });
            work_area.append({
              type: "checkbox",
              list: [{
                label: window.wgULS("请求用户查核", "請求使用者查核"),
                name: "checkuser",
                tooltip: window.wgULS("用户查核是一种用于获取傀儡指控相关技术证据的工具，若没有正当理由则不会使用，您必须在证据字段充分解释为什么需要使用该工具。用户查核不会用于公开连接用户账号使用的IP地址。", "使用者查核是一種用於獲取傀儡指控相關技術證據的工具，若沒有正當理由則不會使用，您必須在證據欄位充分解釋為什麼需要使用該工具。使用者查核不會用於公開連接使用者賬號使用的IP位址。")
              }]
            });
            work_area.append({
              type: "div",
              id: "arvpreview",
              label: [previewlink]
            });
            work_area.append({
              type: "div",
              id: "twinklearv-previewbox",
              style: "display: none"
            });
            work_area.append({
              type: "div",
              label: [window.wgULS("请使用常识决定是否以", "請使用常識決定是否以"), $("<code>").addClass("tw-arv-sockmaster").css("margin", "2px;")[0], window.wgULS("通知用户。这不是必须的，对于涉及新用户的报告而言，通知他们能让报告显得更公平，但是许多情况下（如长期破坏者）通知更可能适得其反。", "通知使用者。這不是必須的，對於涉及新使用者的報告而言，通知他們能讓報告顯得更公平，但是許多情況下（如長期破壞者）通知更可能適得其反。")]
            });
            work_area = work_area.render();
            $("input:text[name=sockpuppet]", work_area).first().val(root_.uid.value);
            old_area.replaceWith(work_area);
            root_.spinoticepreviewer = new Morebits.wiki.preview($(work_area).find("#twinklearv-spinoticebox").last()[0]);
            Twinkle.arv.callback.set_sockmaster(root_.uid.value);
            break;
          /* case 'aiv': */
          /* falls through */
          default:
            work_area = new Morebits.quickForm.element({
              type: "field",
              label: window.wgULS("报告用户破坏", "報告使用者破壞"),
              name: "work_area"
            });
            work_area.append({
              type: "div",
              label: window.wgULS("提报傀儡应优先发送至傀儡调查，除非相关的账号有高频率、涉及多个页面等紧急严重的破坏行为。", "提報傀儡應優先發送至傀儡調查，除非相關的賬號有高頻率、涉及多個頁面等緊急嚴重的破壞行為。")
            });
            work_area.append({
              type: "input",
              name: "page",
              label: window.wgULS("相关页面：", "相關頁面："),
              tooltip: window.wgULS("如不希望让报告链接到页面，请留空", "如不希望讓報告連結到頁面，請留空"),
              value: mw.util.getParamValue("vanarticle") || "",
              event: (event) => {
                const {
                  value
                } = event.target;
                const root = event.target.form;
                if (value === "") {
                  root.badid.disabled = true;
                  root.goodid.disabled = true;
                } else {
                  root.badid.disabled = false;
                  root.goodid.disabled = root.badid.value === "";
                }
              }
            });
            work_area.append({
              type: "input",
              name: "badid",
              label: window.wgULS("受到破坏的修订版本：", "受到破壞的修訂版本："),
              tooltip: window.wgULS("留空以略过差异", "留空以略過差異"),
              value: mw.util.getParamValue("vanarticlerevid") || "",
              disabled: !mw.util.getParamValue("vanarticle"),
              event: (event) => {
                const {
                  value
                } = event.target;
                const root = event.target.form;
                root.goodid.disabled = value === "";
              }
            });
            work_area.append({
              type: "input",
              name: "goodid",
              label: window.wgULS("破坏前的修订版本：", "破壞前的修訂版本："),
              tooltip: window.wgULS("留空以略过差异的较早版本", "留空以略過差異的較早版本"),
              value: mw.util.getParamValue("vanarticlegoodrevid") || "",
              disabled: !mw.util.getParamValue("vanarticle") || mw.util.getParamValue("vanarticlerevid")
            });
            work_area.append({
              type: "checkbox",
              name: "arvtype",
              list: [{
                label: window.wgULS("已发出最后警告", "已發出最後警告"),
                value: "final"
              }, {
                label: window.wgULS("封禁过期后随即破坏", "封鎖過期後隨即破壞"),
                value: "postblock"
              }, {
                label: window.wgULS("显而易见的纯破坏用户", "顯而易見的純破壞使用者"),
                value: "vandalonly",
                disabled: mw.util.isIPAddress(root_.uid.value)
              }, {
                label: window.wgULS("显而易见的spambot或失窃账号", "顯而易見的spambot或失竊賬號"),
                value: "spambot"
              }, {
                label: window.wgULS("仅用来散发广告宣传的用户", "僅用來散發廣告宣傳的使用者"),
                value: "promoonly",
                disabled: mw.util.isIPAddress(root_.uid.value)
              }]
            });
            if (!mw.util.isIPAddress(mw.config.get("wgRelevantUserName"))) {
              work_area.append({
                type: "checkbox",
                list: [{
                  label: window.wgULS("在页面上及编辑摘要隐藏用户名", "在頁面上及編輯摘要隱藏使用者名稱"),
                  tooltip: window.wgULS("若用户名不当请勾选此项，注意：请考虑私下联系管理员处理。", "若使用者名稱不當請勾選此項，注意：請考慮私下聯絡管理員處理。"),
                  name: "hidename",
                  value: "hidename"
                }]
              });
            }
            work_area.append({
              type: "textarea",
              name: "reason",
              label: window.wgULS("评论：", "評論：")
            });
            work_area.append({
              type: "div",
              id: "arvpreview",
              label: [previewlink]
            });
            work_area.append({
              type: "div",
              id: "twinklearv-previewbox",
              style: "display: none"
            });
            work_area = work_area.render();
            old_area.replaceWith(work_area);
            break;
        }
        root_.previewer = new Morebits.wiki.preview($(work_area).find("#twinklearv-previewbox").last()[0]);
      };
      Twinkle.arv.callback.preview = (form) => {
        const reason = Twinkle.arv.callback.getReportWikitext(form);
        if (reason === void 0) {
          return;
        }
        const input = Morebits.quickForm.getInputData(form);
        let title;
        switch (input.category) {
          case "vip":
            title = "LIB_talk:报告当前破坏";
            break;
          case "ewip":
            title = "LIB_talk:管理员告示板";
            break;
          case "username":
            title = "LIB_talk:管理员告示板";
            break;
          case "spi":
            title = "LIB_talk:管理员告示板";
            break;
          default:
            title = mw.config.get("wgPageName");
            break;
        }
        form.previewer.beginRender("__NOTOC__".concat(reason[0]), title);
      };
      Twinkle.arv.callback.getReportWikitext = (form) => {
        const input = Morebits.quickForm.getInputData(form);
        let reason = "";
        let comment = "";
        const {
          uid
        } = input;
        const checkTitle = (title, revid) => {
          if (/https?:\/\//.test(title)) {
            void mw.notify(window.wgULS("页面名称不能使用网址。", "頁面名稱不能使用網址。"), {
              type: "warn",
              tag: "twinklearv"
            });
            return false;
          }
          let page_;
          try {
            page_ = new mw.Title(title);
          } catch {
            void mw.notify("".concat(window.wgULS("“", "「") + title + window.wgULS("”不是一个有效的页面名称，如要使用差异链接请放在“评论”", "」不是一個有效的頁面名稱，如要使用差異連結請放在「評論」") + (revid ? window.wgULS("，或正确输入“修订版本”", "，或正確輸入「修訂版本」") : ""), "。"), {
              type: "warn",
              tag: "twinklearv"
            });
            return false;
          }
          if (page_.namespace === -1) {
            void mw.notify("".concat(window.wgULS("“", "「") + title + window.wgULS("”属于特殊页面，如要使用差异链接请放在“评论”", "」屬於特殊頁面，如要使用差異連結請放在「評論」") + (revid ? window.wgULS("，或正确输入“修订版本”", "，或正確輸入「修訂版本」") : ""), "。"), {
              type: "warn",
              tag: "twinklearv"
            });
            return false;
          }
          return page_;
        };
        let page;
        switch (input.category) {
          // Report 3RR
          case "ewip": {
            if (input.reason === "") {
              void mw.notify(window.wgULS("您必须指定理由", "您必須指定理由"), {
                type: "warn",
                tag: "twinklearv"
              });
              return;
            }
            reason += "== 编辑战举报（".concat(uid, "） ==\n");
            reason += "* '''{{vandal|".concat(/[=]/.test(uid) ? "1=" : "").concat(uid, "}}'''\n");
            const pages = $("input:text[name=page]", form).map((o, e) => {
              return $(e).val() || null;
            });
            var _iterator2 = _createForOfIteratorHelper(pages), _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                const page_ = _step2.value;
                page = checkTitle(page_, false);
                if (!page) {
                  return;
                }
                comment += "* {{pagelinks|".concat(page.getPrefixedText().includes("=") ? "1=" : "").concat(page.getPrefixedText(), "}}\n");
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
            input.reason = input.reason.replace(/\n\n+/g, "\n");
            input.reason = input.reason.replace(/\r?\n/g, "\n*:");
            comment += "* ".concat(input.reason, "\n");
            comment = comment.trim();
            comment = Morebits.string.appendPunctuation(comment);
            reason += "".concat(comment, "\n* 提报人：~~").concat("~~\n* 处理：");
            break;
          }
          // Report inappropriate username
          case "username": {
            let types = input.arvtype.map(Morebits.string.toLowerCaseFirstChar);
            const hasShared = types.includes("shared");
            if (hasShared) {
              types.splice(types.indexOf("shared"), 1);
            }
            if (types.includes("侮辱性") && !confirm(window.wgULS("警告：严重的侮辱性用户名和针对特定个人的侮辱性用户名不应在公开页面报告，而是应当私下联系监督员处理。是否继续？", "警告：嚴重的侮辱性使用者名稱和針對特定個人的侮辱性使用者名稱不應在公開頁面報告，而是應當私下聯絡監督員處理。是否繼續？"))) {
              return;
            }
            if (types.length <= 2) {
              types = types.join("和");
            } else {
              types = [types.slice(0, -1).join("、"), types.slice(-1)].join("和");
            }
            comment += "*{{user-uaa|1=".concat(uid);
            if (input.hidename) {
              comment += "|hidename=1";
            }
            comment += "}} &ndash; ";
            if (types.length) {
              comment += types + window.wgULS("用户名", "使用者名稱");
            }
            if (types.length && hasShared) {
              comment += "，";
            }
            if (hasShared) {
              comment += window.wgULS("暗示该账号并非由一人拥有", "暗示該賬號並非由一人擁有");
            }
            if (types.length || hasShared) {
              comment += "。";
            }
            if (input.reason) {
              comment += Morebits.string.toUpperCaseFirstChar(input.reason);
            }
            comment = Morebits.string.appendPunctuation(comment);
            comment += "--~~".concat("~~");
            comment = comment.replace(/\r?\n/g, "\n*:");
            reason = "== 不当用户名报告（".concat(input.hidename ? window.wgULS("已隐藏用户名", "已隱藏使用者名稱") : uid, "） ==\n");
            reason += comment;
            break;
          }
          // LIB:SPI
          case "spi": {
            if (!input.reason) {
              void mw.notify(window.wgULS("请输入证据。", "請輸入證據。"), {
                type: "warn",
                tag: "twinklearv"
              });
              return;
            }
            const sockpuppets = Morebits.array.uniq([...$("input:text[name=sockpuppet]", form)].map((o) => {
              return $(o).val().trim() || null;
            }));
            if (!sockpuppets[0]) {
              void mw.notify(window.wgULS("您没有指定任何傀儡。", "您沒有指定任何傀儡。"), {
                type: "warn",
                tag: "twinklearv"
              });
              return;
            }
            comment += "{{".concat("subst:", "SPI report|");
            if (!sockpuppets.includes(input.sockmaster)) {
              comment += "1={{".concat("subst:", "#ifexist:{{", "subst:", "FULLPAGENAME}}||".concat(input.sockmaster, "}}|"));
            }
            comment += "".concat(sockpuppets.map((sock, index) => {
              return "".concat(index + 2, "=").concat(sock);
            }).join("|"), "\n|evidence=").concat(Morebits.string.appendPunctuation(input.reason), "\n");
            if (input.checkuser) {
              comment += "|checkuser=yes";
            }
            comment += "}}";
            reason = comment;
            break;
          }
          // Report user for vandalism
          /* case 'aiv': */
          /* falls through */
          default: {
            if (!input.arvtype.length && input.reason === "") {
              void mw.notify(window.wgULS("您必须指定理由", "您必須指定理由"), {
                type: "warn",
                tag: "twinklearv"
              });
              return;
            }
            reason += "== ".concat(input.hidename ? window.wgULS("已隐藏用户名", "已隱藏使用者名稱") : uid, " ==\n");
            reason += "* '''{{vandal|".concat(/[=]/.test(uid) ? "1=" : "").concat(uid);
            if (input.hidename) {
              reason += "|hidename=1";
            }
            reason += "}}'''\n";
            const types = input.arvtype.map((v) => {
              switch (v) {
                case "final":
                  return "已发出最后警告";
                case "postblock":
                  return "封禁过期后随即破坏";
                case "spambot":
                  return "显而易见的spambot或失窃账号";
                case "vandalonly":
                  return "显而易见的纯破坏用户";
                case "promoonly":
                  return "仅用来散发广告宣传的用户";
                default:
                  return "未知理由";
              }
            }).join("，");
            if (input.page !== "") {
              page = checkTitle(input.page, true);
              if (!page) {
                return;
              }
              comment += "* {{pagelinks|".concat(page.getPrefixedText().includes("=") ? "1=" : "").concat(page.getPrefixedText(), "}}");
              if (input.badid) {
                var _input$goodid;
                comment += "（{{diff|".concat(page.getPrefixedText(), "|").concat(input.badid, "|").concat((_input$goodid = input.goodid) !== null && _input$goodid !== void 0 ? _input$goodid : "", "|diff}}）");
              }
              comment += "\n";
            }
            if (types) {
              comment += "* ".concat(types);
            }
            if (input.reason !== "") {
              input.reason = input.reason.replace(/\n\n+/g, "\n");
              input.reason = input.reason.replace(/\r?\n/g, "\n*:");
              comment += (types ? "。" : "* ") + input.reason;
            }
            comment = comment.trim();
            comment = Morebits.string.appendPunctuation(comment);
            reason += "".concat(comment, "\n* 发现人：~~").concat("~~\n* 处理：");
            break;
          }
        }
        return [reason, comment];
      };
      Twinkle.arv.callback.evaluate = (e) => {
        const form = e.target;
        const input = Morebits.quickForm.getInputData(form);
        const {
          uid
        } = input;
        let reason;
        let summary;
        switch (input.category) {
          // Report 3RR
          case "ewip": {
            reason = Twinkle.arv.callback.getReportWikitext(form);
            if (reason === void 0) {
              return;
            }
            summary = "".concat(window.wgULS("报告", "報告"), "[[Special:Contribs/").concat(uid, "|").concat(uid, "]]");
            Morebits.simpleWindow.setButtonsEnabled(false);
            Morebits.status.init(form);
            Morebits.wiki.actionCompleted.redirect = "LIB_talk:管理员告示板";
            Morebits.wiki.actionCompleted.notice = window.wgULS("报告完成", "報告完成");
            const ewipPage = new Morebits.wiki.page("LIB_talk:管理员告示板", window.wgULS("处理EWIP请求", "處理EWIP請求"));
            ewipPage.setFollowRedirect(true);
            ewipPage.load(() => {
              const text = ewipPage.getPageText();
              const $ewipLink = '<a rel="noopener" target="_blank" href="/wiki/LIB:EWIP">LIB:EWIP</a>';
              if (new RegExp("===\\s*\\{\\{\\s*(?:[Vv]andal)\\s*\\|\\s*(?:1=)?\\s*".concat(Morebits.string.escapeRegExp(uid), "\\s*\\}\\}\\s*===")).test(text)) {
                ewipPage.getStatusElement().error(window.wgULS("报告已存在，将不会加入新的", "報告已存在，將不會加入新的"));
                Morebits.status.printUserText(reason[1], window.wgULS("您输入的评论已在下方提供，您可以将其加入到", "您輸入的評論已在下方提供，您可以將其加入到") + $ewipLink + window.wgULS("已存在的小节中：", "已存在的小節中："));
                return;
              }
              ewipPage.setPageSection(0);
              ewipPage.getStatusElement().status(window.wgULS("加入新报告…", "加入新報告…"));
              ewipPage.setEditSummary(summary);
              ewipPage.setChangeTags(Twinkle.changeTags);
              ewipPage.setAppendText("\n".concat(reason[0]));
              ewipPage.append();
            });
            break;
          }
          // Report inappropriate username
          case "username": {
            reason = Twinkle.arv.callback.getReportWikitext(form);
            Morebits.simpleWindow.setButtonsEnabled(false);
            Morebits.status.init(form);
            Morebits.wiki.actionCompleted.redirect = "LIB_talk:管理员告示板";
            Morebits.wiki.actionCompleted.notice = window.wgULS("报告完成", "報告完成");
            const uaaPage = new Morebits.wiki.page("LIB_talk:管理员告示板", window.wgULS("处理UAA请求", "處理UAA請求"));
            uaaPage.setFollowRedirect(true);
            uaaPage.load(() => {
              const text = uaaPage.getPageText();
              if (new RegExp("\\{\\{\\s*user-uaa\\s*\\|\\s*(1\\s*=\\s*)?".concat(Morebits.string.escapeRegExp(uid), "\\s*(\\||\\})")).test(text)) {
                uaaPage.getStatusElement().error(window.wgULS("用户已被列入。", "使用者已被列入。"));
                const $uaaLink = '<a rel="noopener" target="_blank" href="/wiki/LIB:UAA">LIB:UAA</a>';
                Morebits.status.printUserText(reason[1], window.wgULS("您输入的评论已在下方提供，您可以将其手工加入", "您輸入的評論已在下方提供，您可以將其手工加入") + $uaaLink + window.wgULS("上该用户的报告中：", "上該使用者的報告中："));
                return;
              }
              uaaPage.getStatusElement().status(window.wgULS("加入新报告…", "加入新報告…"));
              uaaPage.setEditSummary(window.wgULS("新提报", "新提報"));
              uaaPage.setChangeTags(Twinkle.changeTags);
              uaaPage.setAppendText("\n\n".concat(reason[0]));
              uaaPage.append();
            });
            break;
          }
          // LIB:SPI
          case "spi": {
            reason = Twinkle.arv.callback.getReportWikitext(form);
            Morebits.simpleWindow.setButtonsEnabled(false);
            Morebits.status.init(form);
            const reportpage = "LIB_talk:管理员告示板";
            Morebits.wiki.actionCompleted.redirect = reportpage;
            Morebits.wiki.actionCompleted.notice = window.wgULS("报告完成", "報告完成");
            const spiPage = new Morebits.wiki.page(reportpage, window.wgULS("抓取讨论页面", "抓取討論頁面"));
            spiPage.setFollowRedirect(true);
            spiPage.setEditSummary(window.wgULS("加入新提报", "加入新提報"));
            spiPage.setChangeTags(Twinkle.changeTags);
            spiPage.setAppendText(reason[0]);
            spiPage.setWatchlist(Twinkle.getPref("spiWatchReport"));
            spiPage.append();
            break;
          }
          // Report user for vandalism
          /* case 'aiv': */
          /* falls through */
          default: {
            reason = Twinkle.arv.callback.getReportWikitext(form);
            if (reason === void 0) {
              return;
            }
            summary = "".concat(window.wgULS("报告", "報告"), "[[Special:Contribs/").concat(uid, "|").concat(uid, "]]");
            if (input.hidename) {
              summary = window.wgULS("报告一名用户", "報告一名使用者");
            }
            Morebits.simpleWindow.setButtonsEnabled(false);
            Morebits.status.init(form);
            Morebits.wiki.actionCompleted.redirect = "LIB_talk:报告当前破坏";
            Morebits.wiki.actionCompleted.notice = window.wgULS("报告完成", "報告完成");
            const aivPage = new Morebits.wiki.page("LIB_talk:报告当前破坏", window.wgULS("处理VIP请求", "處理VIP請求"));
            aivPage.setFollowRedirect(true);
            aivPage.load(() => {
              const text = aivPage.getPageText();
              const $aivLink = '<a rel="noopener" target="_blank" href="/wiki/LIB:VIP">LIB:VIP</a>';
              if (new RegExp("===\\s*\\{\\{\\s*(?:[Vv]andal)\\s*\\|\\s*(?:1=)?\\s*".concat(Morebits.string.escapeRegExp(uid), "\\s*\\}\\}\\s*===")).test(text)) {
                aivPage.getStatusElement().error(window.wgULS("报告已存在，将不会加入新的", "報告已存在，將不會加入新的"));
                Morebits.status.printUserText(reason[1], window.wgULS("您输入的评论已在下方提供，您可以将其加入到", "您輸入的評論已在下方提供，您可以將其加入到") + $aivLink + window.wgULS("已存在的小节中：", "已存在的小節中："));
                return;
              }
              aivPage.setPageSection(0);
              aivPage.getStatusElement().status(window.wgULS("加入新报告…", "加入新報告…"));
              aivPage.setEditSummary(summary);
              aivPage.setChangeTags(Twinkle.changeTags);
              aivPage.setAppendText("\n".concat(reason[0]));
              aivPage.append();
            });
            break;
          }
        }
      };
      Twinkle.addInitCallback(Twinkle.arv, "arv");
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinklewarn.js
var twinklewarn_exports = {};
var init_twinklewarn = __esm({
  "src/Twinkle/modules/twinklewarn.js"() {
    "use strict";
    /*! Twinkle.js - twinklewarn.js */
    (function twinklewarn($) {
      const $body = $("body");
      const relevantUserName = mw.config.get("wgRelevantUserName");
      Twinkle.warn = () => {
        if (relevantUserName) {
          Twinkle.addPortletLink(Twinkle.warn.callback, "警告", "tw-warn", window.wgULS("警告或提醒用户", "警告或提醒使用者"));
          if (Twinkle.getPref("autoMenuAfterRollback") && mw.config.get("wgNamespaceNumber") === 3 && mw.util.getParamValue("vanarticle") && !mw.util.getParamValue("noautowarn")) {
            Twinkle.warn.callback();
          }
        }
        if (mw.config.get("wgAction") === "rollback") {
          const $vandalTalkLink = $body.find("#mw-rollback-success").find(".mw-usertoollinks a").first();
          if ($vandalTalkLink.length) {
            Twinkle.warn.makeVandalTalkLink($vandalTalkLink, Morebits.pageNameNorm);
            $vandalTalkLink.css("font-weight", "bold");
          }
        }
        if (mw.config.get("wgCanonicalSpecialPageName") === "AbuseLog" && mw.config.get("wgAbuseFilterVariables") !== null) {
          const afTalkLink = $body.find(".mw-usertoollinks-talk").first();
          if (afTalkLink.length) {
            Twinkle.warn.makeVandalTalkLink(afTalkLink, mw.config.get("wgAbuseFilterVariables").page_prefixedtitle);
            afTalkLink.css("font-weight", "bold");
          }
        }
      };
      Twinkle.warn.makeVandalTalkLink = ($vandalTalkLink, pagename) => {
        $vandalTalkLink.wrapInner($("<span>").attr("title", window.wgULS("如果合适，您可以用Twinkle在该用户讨论页上做出警告。", "如果合適，您可以用Twinkle在該使用者討論頁上做出警告。")));
        const extraParam = "vanarticle=".concat(mw.util.rawurlencode(pagename));
        const href = $vandalTalkLink.attr("href");
        if (href.includes("?")) {
          $vandalTalkLink.attr("href", "".concat(href, "&").concat(extraParam));
        } else {
          $vandalTalkLink.attr("href", "".concat(href, "?").concat(extraParam));
        }
      };
      Twinkle.warn.dialog = null;
      Twinkle.warn.callback = () => {
        if (relevantUserName === mw.config.get("wgUserName") && !confirm(window.wgULS("您将要警告自己！您确定要继续吗？", "您將要警告自己！您確定要繼續嗎？"))) {
          return;
        }
        Twinkle.warn.dialog = new Morebits.simpleWindow(600, 440);
        const {
          dialog
        } = Twinkle.warn;
        dialog.setTitle(window.wgULS("警告、提醒用户", "警告、提醒使用者"));
        dialog.setScriptName("Twinkle");
        dialog.addFooterLink(window.wgULS("警告设置", "警告設定"), "H:TW/PREF#warn");
        dialog.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW/DOC#warn");
        const form = new Morebits.quickForm(Twinkle.warn.callback.evaluate);
        const main_select = form.append({
          type: "field",
          label: window.wgULS("选择要发送的警告或提醒类型", "選擇要傳送的警告或提醒類別"),
          tooltip: window.wgULS("首先选择一组，再选择具体的警告模板。", "首先選擇一組，再選擇具體的警告模板。")
        });
        const main_group = main_select.append({
          type: "select",
          name: "main_group",
          tooltip: window.wgULS("您可在Twinkle参数设置中设置默认选择的选项", "您可在Twinkle偏好設定中設定預設選擇的選項"),
          event: Twinkle.warn.callback.change_category
        });
        const defaultGroup = Number.parseInt(Twinkle.getPref("defaultWarningGroup"), 6);
        main_group.append({
          type: "option",
          label: window.wgULS("自动选择层级", "自動選擇層級"),
          value: "autolevel",
          selected: defaultGroup === 7
        });
        main_group.append({
          type: "option",
          label: "1：提醒",
          value: "level1",
          selected: defaultGroup === 1
        });
        main_group.append({
          type: "option",
          label: "2：警告",
          value: "level2",
          selected: defaultGroup === 2
        });
        if (Twinkle.getPref("combinedSingletMenus")) {
          main_group.append({
            type: "option",
            label: window.wgULS("单层级消息", "單層級訊息"),
            value: "singlecombined",
            selected: defaultGroup === 3 || defaultGroup === 4
          });
        } else {
          main_group.append({
            type: "option",
            label: window.wgULS("单层级提醒", "單層級提醒"),
            value: "singlenotice",
            selected: defaultGroup === 3
          });
          main_group.append({
            type: "option",
            label: window.wgULS("单层级警告", "單層級警告"),
            value: "singlewarn",
            selected: defaultGroup === 4
          });
        }
        if (Twinkle.getPref("customWarningList").length) {
          main_group.append({
            type: "option",
            label: window.wgULS("自定义警告", "自訂警告"),
            value: "custom",
            selected: defaultGroup === 5
          });
        }
        main_group.append({
          type: "option",
          label: "所有警告模板",
          value: "kitchensink",
          selected: defaultGroup === 6
        });
        main_select.append({
          type: "select",
          name: "sub_group",
          event: Twinkle.warn.callback.change_subcategory
        });
        form.append({
          type: "input",
          name: "article",
          label: window.wgULS("页面链接", "頁面連結"),
          value: mw.util.getParamValue("vanarticle") || "",
          size: 50,
          tooltip: window.wgULS("给模板中加入一页面链接，可留空。", "給模板中加入一頁面連結，可留空。"),
          placeholder: window.wgULS("仅限一个，勿使用网址、[[ ]]，可使用Special:Diff", "僅限一個，勿使用網址、[[ ]]，可使用Special:Diff")
        });
        form.append({
          type: "div",
          label: "",
          style: "color: #f00",
          id: "twinkle-warn-warning-messages"
        });
        const more = form.append({
          type: "field",
          name: "reasonGroup",
          label: window.wgULS("警告信息", "警告資訊")
        });
        more.append({
          type: "textarea",
          label: window.wgULS("可选信息：", "可選資訊："),
          name: "reason",
          tooltip: window.wgULS("理由或是附加信息", "理由或是附加資訊")
        });
        const previewlink = document.createElement("a");
        $(previewlink).on("click", () => {
          Twinkle.warn.callbacks.preview(result);
        });
        previewlink.style.cursor = "pointer";
        previewlink.textContent = window.wgULS("预览", "預覽");
        more.append({
          type: "div",
          id: "warningpreview",
          label: [previewlink]
        });
        more.append({
          type: "div",
          id: "twinklewarn-previewbox",
          style: "display: none"
        });
        more.append({
          type: "submit",
          label: "提交"
        });
        const result = form.render();
        dialog.setContent(result);
        dialog.display();
        result.main_group.root = result;
        result.previewer = new Morebits.wiki.preview($(result).find("div#twinklewarn-previewbox").last()[0]);
        let message = "";
        let query = {};
        const vanrevid = mw.util.getParamValue("vanarticlerevid");
        if (vanrevid) {
          if (!mw.util.getParamValue("noautowarn") && mw.util.getParamValue("vanarticle")) {
            query = {
              action: "query",
              titles: mw.util.getParamValue("vanarticle"),
              prop: "revisions",
              rvstartid: vanrevid,
              rvlimit: 2,
              rvdir: "newer",
              rvprop: "user"
            };
            new Morebits.wiki.api(window.wgULS("检查您是否成功回退该页面", "檢查您是否成功回退該頁面"), query, (apiobj) => {
              const revertUser = $(apiobj.getResponse()).find("revisions rev")[1].getAttribute("user");
              if (revertUser && revertUser !== mw.config.get("wgUserName")) {
                message += window.wgULS("其他人回退了该页面，并可能已经警告该用户。", "其他人回退了該頁面，並可能已經警告該使用者。");
                $body.find("#twinkle-warn-warning-messages").text("警告：".concat(message));
              }
            }).post();
          }
          const checkStale = (vantimestamp_) => {
            const revDate = new Morebits.date(vantimestamp_);
            if (vantimestamp_ && revDate.isValid() && revDate.add(24, "hours").isBefore(/* @__PURE__ */ new Date())) {
              message += window.wgULS("这笔编辑是在24小时前做出的，现在警告可能已过时。", "這筆編輯是在24小時前做出的，現在警告可能已過時。");
              $body.find("#twinkle-warn-warning-messages").text("警告：".concat(message));
            }
          };
          let vantimestamp = mw.util.getParamValue("vantimestamp");
          if (vantimestamp) {
            checkStale(vantimestamp);
          } else {
            query = {
              action: "query",
              prop: "revisions",
              rvprop: "timestamp",
              revids: vanrevid
            };
            new Morebits.wiki.api(window.wgULS("获取版本时间戳", "取得版本時間戳"), query, (apiobj) => {
              vantimestamp = $(apiobj.getResponse()).find("revisions rev").attr("timestamp");
              checkStale(vantimestamp);
            }).post();
          }
        }
        const init = () => {
          const evt = document.createEvent("Event");
          evt.initEvent("change", true, true);
          result.main_group.dispatchEvent(evt);
        };
        init();
      };
      Twinkle.warn.messages = {
        levels: [{
          category: window.wgULS("不同类型的非建设编辑", "不同類別的非建設編輯"),
          list: {
            "uw-addpaid": {
              level1: {
                label: window.wgULS("加入付费内容", "加入付費內容"),
                summary: window.wgULS("注意：加入付费内容", "注意：加入付費內容")
              },
              level2: {
                label: window.wgULS("多次加入付费内容", "多次加入付費內容"),
                summary: window.wgULS("警告：多次加入付费内容", "警告：多次加入付費內容")
              }
            },
            "uw-copyright": {
              level1: {
                label: window.wgULS("侵犯著作权", "侵犯版權"),
                summary: window.wgULS("注意：侵犯著作权", "注意：侵犯版權")
              },
              level2: {
                label: window.wgULS("多次侵犯著作权", "多次侵犯版權"),
                summary: window.wgULS("警告：多次侵犯著作权", "警告：多次侵犯版權")
              }
            },
            "uw-crystal": {
              level1: {
                label: window.wgULS("加入臆测或未确认的消息", "加入臆測或未確認的訊息"),
                summary: window.wgULS("注意：加入臆测或未确认的消息", "注意：加入臆測或未確認的訊息")
              },
              level2: {
                label: window.wgULS("多次加入臆测或未确认的消息", "多次加入臆測或未確認的訊息"),
                summary: window.wgULS("警告：多次加入臆测或未确认的消息", "警告：多次加入臆測或未確認的訊息")
              }
            },
            "uw-delete": {
              level1: {
                label: window.wgULS("不恰当地移除页面内容、模板或资料", "不恰當地移除頁面內容、模板或資料"),
                summary: window.wgULS("注意：不恰当地移除页面内容、模板或资料", "注意：不恰當地移除頁面內容、模板或資料")
              },
              level2: {
                label: window.wgULS("不恰当地移除页面内容、模板或资料", "不恰當地移除頁面內容、模板或資料"),
                summary: window.wgULS("警告：不恰当地移除页面内容、模板或资料", "警告：不恰當地移除頁面內容、模板或資料")
              }
            },
            "uw-image": {
              level1: {
                label: window.wgULS("在页面中加入不当图片", "在頁面中加入不當圖片"),
                summary: window.wgULS("注意：在页面中加入不当图片", "注意：在頁面中加入不當圖片")
              },
              level2: {
                label: window.wgULS("在页面中加入不当图片", "在頁面中加入不當圖片"),
                summary: window.wgULS("警告：在页面中加入不当图片", "警告：在頁面中加入不當圖片")
              }
            },
            "uw-newpage": {
              level1: {
                label: window.wgULS("创建不当页面", "建立不當頁面"),
                summary: window.wgULS("注意：创建不当页面", "注意：建立不當頁面")
              },
              level2: {
                label: window.wgULS("创建不当页面", "建立不當頁面"),
                summary: window.wgULS("警告：创建不当页面", "警告：建立不當頁面")
              }
            },
            "uw-nor": {
              level1: {
                label: window.wgULS("在条目中加入原创研究", "在條目中加入原創研究"),
                summary: window.wgULS("注意：在条目中加入原创研究", "注意：在條目中加入原創研究")
              },
              level2: {
                label: window.wgULS("在条目中加入原创研究", "在條目中加入原創研究"),
                summary: window.wgULS("警告：在条目中加入原创研究", "警告：在條目中加入原創研究")
              }
            },
            "uw-opov": {
              level1: {
                label: window.wgULS("违反客观原则", "違反客觀原則"),
                summary: window.wgULS("注意：违反客观原则", "注意：違反客觀原則")
              },
              level2: {
                label: window.wgULS("违反客观原则", "違反客觀原則"),
                summary: window.wgULS("警告：违反客观原则", "警告：違反客觀原則")
              }
            },
            "uw-redirect": {
              level1: {
                label: window.wgULS("创建破坏性的重定向", "建立破壞性的重定向"),
                summary: window.wgULS("注意：创建破坏性的重定向", "注意：建立破壞性的重定向")
              },
              level2: {
                label: window.wgULS("创建恶意重定向", "建立惡意重定向"),
                summary: window.wgULS("警告：创建恶意重定向", "警告：建立惡意重定向")
              }
            },
            "uw-upload": {
              level1: {
                label: window.wgULS("上传不当图像", "上傳不當圖像"),
                summary: window.wgULS("注意：上传不当图像", "注意：上傳不當圖像")
              },
              level2: {
                label: window.wgULS("上传不当图像", "上傳不當圖像"),
                summary: window.wgULS("警告：上传不当图像", "警告：上傳不當圖像")
              }
            },
            "uw-vandalism": {
              level1: {
                label: window.wgULS("明显的破坏", "明顯的破壞"),
                summary: window.wgULS("注意：明显破坏", "注意：明顯破壞")
              },
              level2: {
                label: window.wgULS("明显的破坏", "明顯的破壞"),
                summary: window.wgULS("警告：明显破坏", "警告：明顯破壞")
              }
            },
            "uw-tdel": {
              level1: {
                label: window.wgULS("在问题仍未解决的情况下移除维护性模板", "在問題仍未解決的情況下移除維護性模板"),
                summary: window.wgULS("注意：移除维护性模板", "注意：移除維護性模板")
              },
              level2: {
                label: window.wgULS("在问题仍未解决的情况下移除维护性模板", "在問題仍未解決的情況下移除維護性模板"),
                summary: window.wgULS("警告：移除维护性模板", "警告：移除維護性模板")
              }
            }
          }
        }, {
          category: window.wgULS("增加广告", "增加廣告"),
          list: {
            "uw-spam": {
              level1: {
                label: window.wgULS("增加不合适的外部链接", "增加不合適的外部連結"),
                summary: window.wgULS("注意：增加不合适的外部链接", "注意：增加不合適的外部連結")
              },
              level2: {
                label: window.wgULS("增加垃圾链接", "增加垃圾連結"),
                summary: window.wgULS("警告：增加垃圾链接", "警告：增加垃圾連結")
              }
            },
            "uw-advert": {
              level1: {
                label: window.wgULS("利用有兽档案馆来发布广告或推广", "利用有獸檔案館來發布廣告或推廣"),
                summary: window.wgULS("注意：利用有兽档案馆来发布广告或推广", "注意：利用有獸檔案館來發布廣告或推廣")
              },
              level2: {
                label: window.wgULS("利用有兽档案馆来发布广告或推广", "利用有獸檔案館來發布廣告或推廣"),
                summary: window.wgULS("警告：利用有兽档案馆来发布广告或推广", "警告：利用有獸檔案館來發布廣告或推廣")
              }
            }
          }
        }, {
          category: window.wgULS("加插不实、诽谤文字", "加插不實、誹謗文字"),
          list: {
            "uw-biog": {
              level1: {
                label: window.wgULS("在人物传记中加入没有可靠来源佐证而且可能引发争议的内容", "在人物傳記中加入沒有可靠來源佐證而且可能引發爭議的內容"),
                summary: window.wgULS("注意：在人物传记中加入没有可靠来源佐证而且可能引发争议的内容", "注意：在人物傳記中加入沒有可靠來源佐證而且可能引發爭議的內容")
              },
              level2: {
                label: window.wgULS("在人物传记中加入没有可靠来源佐证而且可能引发争议的内容", "在人物傳記中加入沒有可靠來源佐證而且可能引發爭議的內容"),
                summary: window.wgULS("警告：在人物传记中加入没有可靠来源佐证而且可能引发争议的内容", "警告：在人物傳記中加入沒有可靠來源佐證而且可能引發爭議的內容")
              }
            },
            "uw-error": {
              level1: {
                label: window.wgULS("故意加入不实内容", "故意加入不實內容"),
                summary: window.wgULS("注意：故意加入不实内容", "注意：故意加入不實內容")
              },
              level2: {
                label: window.wgULS("故意加入不实内容", "故意加入不實內容"),
                summary: window.wgULS("警告：故意加入不实内容", "警告：故意加入不實內容")
              }
            },
            "uw-unsourced": {
              level1: {
                label: window.wgULS("加入没有可靠来源佐证的内容", "加入沒有可靠來源佐證的內容"),
                summary: window.wgULS("注意：加入没有可靠来源佐证的内容", "注意：加入沒有可靠來源佐證的內容")
              },
              level2: {
                label: window.wgULS("加入没有可靠来源佐证的内容", "加入沒有可靠來源佐證的內容"),
                summary: window.wgULS("警告：加入没有可靠来源佐证的内容", "警告：加入沒有可靠來源佐證的內容")
              }
            }
          }
        }, {
          category: window.wgULS("翻译品质", "翻譯品質"),
          list: {
            "uw-roughtranslation": {
              level1: {
                label: window.wgULS("您翻译的质量有待改善", "您翻譯的質量有待改善"),
                summary: window.wgULS("注意：您翻译的质量有待改善", "注意：您翻譯的質量有待改善")
              },
              level2: {
                label: window.wgULS("粗劣翻译", "粗劣翻譯"),
                summary: window.wgULS("警告：粗劣翻译", "警告：粗劣翻譯")
              }
            }
          }
        }, {
          category: window.wgULS("非能接受且违反条例的单方面行为或操作", "非能接受且違反條例的單方面行為或操作"),
          list: {
            "uw-afd": {
              level1: {
                label: window.wgULS("移除{{afd}}（页面存废讨论）模板", "移除{{afd}}（頁面存廢討論）模板"),
                summary: window.wgULS("注意：移除{{afd}}（页面存废讨论）模板", "注意：移除{{afd}}（頁面存廢討論）模板")
              },
              level2: {
                label: window.wgULS("移除{{afd}}（页面存废讨论）模板", "移除{{afd}}（頁面存廢討論）模板"),
                summary: window.wgULS("警告：移除{{afd}}（页面存废讨论）模板", "警告：移除{{afd}}（頁面存廢討論）模板")
              }
            },
            "uw-mos": {
              level1: {
                label: window.wgULS("不恰当的条目格式、日期、语言等", "不恰當的條目格式、日期、語言等"),
                summary: window.wgULS("注意：不恰当的条目格式、日期、语言等", "注意：不恰當的條目格式、日期、語言等")
              },
              level2: {
                label: window.wgULS("不恰当的条目格式、日期、语言等", "不恰當的條目格式、日期、語言等"),
                summary: window.wgULS("警告：不恰当的条目格式、日期、语言等", "警告：不恰當的條目格式、日期、語言等")
              }
            },
            "uw-move": {
              level1: {
                label: window.wgULS("无故移动条目/新名称不符合命名规范", "無故移動條目/新名稱不符合命名規範"),
                summary: window.wgULS("注意：不恰当地移动页面", "注意：不恰當地移動頁面")
              },
              level2: {
                label: window.wgULS("把页面移动到不恰当、违反命名常规或违反共识的标题", "把頁面移動到不恰當、違反命名常規或違反共識的標題"),
                summary: window.wgULS("警告：不恰当地移动页面", "警告：不恰當地移動頁面")
              }
            },
            "uw-speedy": {
              level1: {
                label: window.wgULS("移除{{delete}}（快速删除）模板", "移除{{delete}}（快速刪除）模板"),
                summary: window.wgULS("注意：移除{{delete}}（快速删除）模板", "注意：移除{{delete}}（快速刪除）模板")
              },
              level2: {
                label: window.wgULS("移除{{delete}}（快速删除）模板", "移除{{delete}}（快速刪除）模板"),
                summary: window.wgULS("警告：移除{{delete}}（快速删除）模板", "警告：移除{{delete}}（快速刪除）模板")
              }
            },
            "uw-talkpage": {
              level1: {
                label: window.wgULS("违反讨论页规范", "違反討論頁規範"),
                summary: window.wgULS("注意：违反讨论页规范", "注意：違反討論頁規範")
              },
              level2: {
                label: window.wgULS("违反讨论页规范", "違反討論頁規範"),
                summary: window.wgULS("警告：违反讨论页规范", "警告：違反討論頁規範")
              }
            },
            "uw-tpv": {
              level1: {
                label: "修改他人留言",
                summary: "注意：修改他人留言"
              },
              level2: {
                label: "修改他人留言",
                summary: "警告：修改他人留言"
              }
            }
          }
        }, {
          category: window.wgULS("对其他用户和条目的态度", "對其他用戶和條目的態度"),
          list: {
            "uw-illegal": {
              level1: {
                label: window.wgULS("加入违法违规内容", "加入違法違規內容"),
                summary: window.wgULS("注意：加入违法违规内容", "注意：加入違法違規內容")
              },
              level2: {
                label: window.wgULS("加入违法违规内容", "加入違法違規內容"),
                summary: window.wgULS("警告：加入违法违规内容", "警告：加入違法違規內容")
              }
            },
            "uw-own": {
              level1: {
                label: window.wgULS("主张条目所有权", "主張條目所有權"),
                summary: window.wgULS("注意：主张条目所有权", "注意：主張條目所有權")
              },
              level2: {
                label: window.wgULS("主张条目的所有权", "主張條目的所有權"),
                summary: window.wgULS("警告：主张条目的所有权", "警告：主張條目的所有權")
              }
            },
            "uw-socialmedia": {
              level1: {
                label: window.wgULS("将有兽档案馆当作社交媒体使用", "將有獸檔案館當作社交媒體使用"),
                summary: window.wgULS("注意：将有兽档案馆当作社交媒体使用", "注意：將有獸檔案館當作社交媒體使用")
              },
              level2: {
                label: window.wgULS("将有兽档案馆当作社交媒体使用", "將有獸檔案館當作社交媒體使用"),
                summary: window.wgULS("警告：将有兽档案馆当作社交媒体使用", "警告：將有獸檔案館當作社交媒體使用")
              }
            }
          }
        }],
        singlenotice: {
          "uw-2redirect": {
            label: window.wgULS("在移动页面后应该修复双重重定向", "在移動頁面後應該修復雙重重定向"),
            summary: window.wgULS("注意：在移动页面后应该修复双重重定向", "注意：在移動頁面後應該修復雙重重定向")
          },
          "uw-aiv": {
            label: window.wgULS("举报事项并不是破坏行为", "舉報事項並不是破壞行为"),
            summary: window.wgULS("注意：不恰当地举报破坏", "注意：不恰當地舉報破壞")
          },
          "uw-articlesig": {
            label: window.wgULS("在条目中签名", "在條目中簽名"),
            summary: window.wgULS("注意：在条目中签名", "注意：在條目中簽名")
          },
          "uw-autobiography": {
            label: window.wgULS("创建自传", "建立自傳"),
            summary: window.wgULS("注意：创建自传", "注意：建立自傳")
          },
          "uw-badcat": {
            label: window.wgULS("加入错误的页面分类", "加入錯誤的頁面分類"),
            summary: window.wgULS("注意：加入错误的页面分类", "注意：加入錯誤的頁面分類")
          },
          "uw-bite": {
            label: window.wgULS("伤害新手", "傷害新手"),
            summary: window.wgULS("注意：伤害新手", "注意：傷害新手")
          },
          "uw-chinese": {
            label: window.wgULS("请使用标准汉语沟通", "請使用標準漢語溝通"),
            summary: window.wgULS("注意：请使用标准汉语沟通", "注意：請使用標準漢語溝通")
          },
          "uw-cpmove": {
            label: window.wgULS("剪贴移动", "剪貼移動"),
            summary: window.wgULS("注意：剪贴移动", "注意：剪貼移動")
          },
          "uw-dab": {
            label: window.wgULS("消歧义页格式错误", "消歧義頁格式錯誤"),
            summary: window.wgULS("注意：消歧义页格式错误", "注意：消歧義頁格式錯誤")
          },
          "uw-newpage-draft": {
            label: window.wgULS("最近创建的页面被移动到草稿", "最近建立的頁面被移動到草稿"),
            summary: window.wgULS("注意：最近创建的页面被移动到草稿", "注意：最近建立的頁面被移動到草稿")
          },
          "uw-selfrevert": {
            label: window.wgULS("感谢您自行回退自己的测试，以后不要再这样做了", "感謝您自行回退自己的測試，以後不要再這樣做了"),
            summary: window.wgULS("注意：回退个人的测试", "注意：回退個人的測試")
          },
          "uw-substub": {
            label: window.wgULS("创建小小作品", "建立小小作品"),
            summary: window.wgULS("警告：创建小小作品", "警告：建立小小作品")
          },
          "uw-talkinarticle": {
            label: window.wgULS("在条目页中留下意见", "在條目頁中留下意見"),
            summary: window.wgULS("注意：在条目页中留下意见", "注意：在條目頁中留下意見")
          },
          "uw-unsigned": {
            label: window.wgULS("没有在讨论页上签名", "沒有在討論頁上簽名"),
            summary: window.wgULS("注意：没有在讨论页上签名", "注意：沒有在討論頁上簽名")
          },
          "uw-wrongcsd": {
            label: window.wgULS("快速删除理由不当", "快速刪除理由不當"),
            summary: window.wgULS("注意：快速删除理由不当", "注意：快速刪除理由不當")
          },
          "uw-wrongsummary": {
            label: window.wgULS("在编辑摘要制造不适当的内容", "在編輯摘要製造不適當的內容"),
            summary: window.wgULS("警告：在编辑摘要制造不适当的内容", "警告：在編輯摘要製造不適當的內容")
          }
        },
        singlewarn: {
          "uw-3rr": {
            label: window.wgULS("用户潜在违反回退不过三原则的可能性", "用戶潛在違反回退不過三原則的可能性"),
            summary: window.wgULS("警告：用户潜在违反回退不过三原则的可能性", "警告：用戶潛在違反回退不過三原則的可能性")
          },
          "uw-attack": {
            label: window.wgULS("人身攻击", "人身攻擊"),
            summary: window.wgULS("警告：人身攻击", "警告：人身攻擊"),
            suppressArticleInSummary: true
          },
          "uw-coi": {
            label: window.wgULS("利益冲突", "利益衝突"),
            summary: window.wgULS("注意：利益冲突", "注意：利益衝突")
          },
          "uw-fakesource": {
            label: window.wgULS("虚构数据源或引文", "虛構資料來源或引文"),
            summary: window.wgULS("警告：虚构数据源或引文", "警告：虛構資料來源或引文")
          },
          "uw-pinfo": {
            label: window.wgULS("张贴他人隐私", "張貼他人隱私"),
            summary: window.wgULS("警告：张贴他人隐私", "警告：張貼他人隱私")
          },
          "uw-illegalavatar": {
            label: window.wgULS("头像违规", "頭像違規"),
            summary: window.wgULS("您近期上传的头像违规", "您近期上傳的頭像違規")
          }
        }
      };
      Twinkle.warn.prev_article = null;
      Twinkle.warn.prev_reason = null;
      Twinkle.warn.talkpageObj = null;
      Twinkle.warn.callback.change_category = function change_category(e) {
        const {
          value
        } = e.target;
        const {
          sub_group
        } = e.target.root;
        sub_group.main_group = value;
        let old_subvalue = sub_group.value;
        let old_subvalue_re;
        if (old_subvalue) {
          if (value === "kitchensink") {
            old_subvalue_re = new RegExp(mw.util.escapeRegExp(old_subvalue));
          } else {
            old_subvalue = old_subvalue.replace(/\d*(im)?$/, "");
            old_subvalue_re = new RegExp("".concat(mw.util.escapeRegExp(old_subvalue), "(\\d*?)$"));
          }
        }
        while (sub_group.hasChildNodes()) {
          sub_group.removeChild(sub_group.firstChild);
        }
        let selected = false;
        const createEntries = (contents, container, wrapInOptgroup, val = value) => {
          const level = val.replace(/^\D+/g, "");
          if (wrapInOptgroup && $.client.profile().platform === "iphone") {
            let wrapperOptgroup = new Morebits.quickForm.element({
              type: "optgroup",
              label: "可用模板"
            });
            wrapperOptgroup = wrapperOptgroup.render();
            container.appendChild(wrapperOptgroup);
            container = wrapperOptgroup;
          }
          for (var _i2 = 0, _Object$entries = Object.entries(contents); _i2 < _Object$entries.length; _i2++) {
            const [itemKey, itemProperties] = _Object$entries[_i2];
            if (!!level && !itemProperties[val]) {
              return;
            }
            const key = typeof itemKey === "string" ? itemKey : itemProperties.value;
            const template = key + level;
            const elem = new Morebits.quickForm.element({
              type: "option",
              label: "{{".concat(template, "}}: ").concat(level ? itemProperties[val].label : itemProperties.label),
              value: template
            });
            if (!selected && old_subvalue && old_subvalue_re.test(template)) {
              elem.data.selected = true;
              selected = true;
            }
            const elemRendered = container.appendChild(elem.render());
            $(elemRendered).data("messageData", itemProperties);
          }
        };
        switch (value) {
          case "singlenotice":
          case "singlewarn":
            createEntries(Twinkle.warn.messages[value], sub_group, true);
            break;
          case "singlecombined": {
            const unSortedSinglets = {
              ...Twinkle.warn.messages.singlenotice,
              ...Twinkle.warn.messages.singlewarn
            };
            const sortedSingletMessages = {};
            var _iterator3 = _createForOfIteratorHelper(Object.keys(unSortedSinglets).sort()), _step3;
            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                const key = _step3.value;
                sortedSingletMessages[key] = unSortedSinglets[key];
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
            createEntries(sortedSingletMessages, sub_group, true);
            break;
          }
          case "custom":
            createEntries(Twinkle.getPref("customWarningList"), sub_group, true);
            break;
          case "kitchensink":
            for (var _i3 = 0, _arr = ["level1", "level2"]; _i3 < _arr.length; _i3++) {
              const lvl = _arr[_i3];
              var _iterator4 = _createForOfIteratorHelper(Twinkle.warn.messages.levels), _step4;
              try {
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                  const levelGroup = _step4.value;
                  createEntries(levelGroup.list, sub_group, true, lvl);
                }
              } catch (err) {
                _iterator4.e(err);
              } finally {
                _iterator4.f();
              }
            }
            createEntries(Twinkle.warn.messages.singlenotice, sub_group, true);
            createEntries(Twinkle.warn.messages.singlewarn, sub_group, true);
            createEntries(Twinkle.getPref("customWarningList"), sub_group, true);
            break;
          case "level1":
          case "level2":
            var _iterator5 = _createForOfIteratorHelper(Twinkle.warn.messages.levels), _step5;
            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                const levelGroup = _step5.value;
                let optgroup = new Morebits.quickForm.element({
                  type: "optgroup",
                  label: levelGroup.category
                });
                optgroup = optgroup.render();
                sub_group.appendChild(optgroup);
                createEntries(levelGroup.list, optgroup, false);
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
            break;
          case "autolevel": {
            const autolevelProc = () => {
              const wikitext = Twinkle.warn.talkpageObj.getPageText();
              const [latest] = Twinkle.warn.callbacks.dateProcessing(wikitext);
              const params = {
                sub_group: old_subvalue,
                article: e.target.root.article.value
              };
              const lvl = "level".concat(Twinkle.warn.callbacks.autolevelParseWikitext(wikitext, params, latest)[1]);
              var _iterator6 = _createForOfIteratorHelper(Twinkle.warn.messages.levels), _step6;
              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                  const levelGroup = _step6.value;
                  let optgroup = new Morebits.quickForm.element({
                    type: "optgroup",
                    label: levelGroup.category
                  });
                  optgroup = optgroup.render();
                  sub_group.appendChild(optgroup);
                  createEntries(levelGroup.list, optgroup, false, lvl);
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }
              Twinkle.warn.callback.postCategoryCleanup(e);
            };
            if (Twinkle.warn.talkpageObj) {
              autolevelProc();
            } else {
              const usertalk_page = new Morebits.wiki.page("User_talk:".concat(relevantUserName), window.wgULS("加载上次警告", "載入上次警告"));
              usertalk_page.setFollowRedirect(true, false);
              usertalk_page.load((pageobj) => {
                Twinkle.warn.talkpageObj = pageobj;
                autolevelProc();
              }, () => {
                const $noTalkPageNode = $("<strong>").attr("id", "twinkle-warn-autolevel-message").css("color", "#f00").text(window.wgULS("无法加载用户讨论页，这可能是因为它是跨命名空间重定向，自动选择警告级别将不会运作。", "無法載入使用者討論頁，這可能是因為它是跨命名空間重新導向，自動選擇警告級別將不會運作。"));
                $noTalkPageNode.insertBefore($body.find("#twinkle-warn-warning-messages"));
                e.target.root.previewer.closePreview();
              });
            }
            break;
          }
          default:
            void mw.notify(window.wgULS("twinklewarn：未知的警告组", "twinklewarn：未知的警告組"), {
              type: "warn",
              tag: "twinklewarn"
            });
            break;
        }
        if (value !== "autolevel") {
          $body.find("#twinkle-warn-autolevel-message").remove();
          Twinkle.warn.callback.postCategoryCleanup(e);
        }
      };
      Twinkle.warn.callback.postCategoryCleanup = (e) => {
        Morebits.quickForm.setElementTooltipVisibility(e.target.root.article, true);
        Morebits.quickForm.resetElementLabel(e.target.root.article);
        Twinkle.warn.callback.change_subcategory(e);
        if (!Twinkle.getPref("oldSelect")) {
          $body.find("select[name=sub_group]").select2({
            width: "100%",
            matcher: Morebits.select2.matchers.optgroupFull,
            templateResult: Morebits.select2.highlightSearchMatches,
            language: {
              searching: Morebits.select2.queryInterceptor
            }
          }).change(Twinkle.warn.callback.change_subcategory);
          $body.find(".select2-selection").on("keydown", Morebits.select2.autoStart).trigger("focus");
          mw.util.addCSS(
            /* Increase height;
             * Reduce padding;
             * Adjust font size.
             * */
            ".select2-container .select2-dropdown .select2-results>.select2-results__options{max-height:350px}.select2-results .select2-results__group,.select2-results .select2-results__option{padding-top:1px;padding-bottom:1px}.select2-container .select2-dropdown .select2-results,.select2-container .selection .select2-selection__rendered{font-size:13px}"
          );
        }
      };
      Twinkle.warn.callback.change_subcategory = (e) => {
        const main_group = e.target.form.main_group.value;
        const {
          value
        } = e.target.form.sub_group;
        const notLinkedArticle = {
          "uw-bite": window.wgULS("被“咬到”的用户（不含User:） ", "被「咬到」的使用者（不含User:） "),
          "uw-aiv": window.wgULS("可选输入被警告的用户名（不含User:） ", "可選輸入被警告的使用者名稱（不含User:） ")
        };
        if (["singlenotice", "singlewarn", "singlecombined", "kitchensink"].includes(main_group)) {
          if (notLinkedArticle[value]) {
            if (Twinkle.warn.prev_article === null) {
              Twinkle.warn.prev_article = e.target.form.article.value;
            }
            e.target.form.article.notArticle = true;
            e.target.form.article.value = "";
            Morebits.quickForm.setElementTooltipVisibility(e.target.form.article, false);
            Morebits.quickForm.overrideElementLabel(e.target.form.article, notLinkedArticle[value]);
          } else if (e.target.form.article.notArticle) {
            if (Twinkle.warn.prev_article !== null) {
              e.target.form.article.value = Twinkle.warn.prev_article;
              Twinkle.warn.prev_article = null;
            }
            e.target.form.article.notArticle = false;
            Morebits.quickForm.setElementTooltipVisibility(e.target.form.article, true);
            Morebits.quickForm.resetElementLabel(e.target.form.article);
          }
        }
        $body.find("#tw-warn-red-notice").remove();
      };
      Twinkle.warn.callbacks = {
        getWarningWikitext: (templateName, article, reason, isCustom, noSign) => {
          let text = "{{".concat("subst:", templateName);
          if (article) {
            text += "|1=".concat(article);
          }
          if (reason) {
            text += "|2=".concat(reason);
          }
          text += "|subst=".concat("subst:");
          if (!noSign) {
            text += "|sig=~~".concat("~~");
          }
          text += "}}";
          return text;
        },
        showPreview: (form, templatename) => {
          const input = Morebits.quickForm.getInputData(form);
          templatename || (templatename = input.sub_group);
          const linkedarticle = input.article;
          const templatetext = Twinkle.warn.callbacks.getWarningWikitext(templatename, linkedarticle, input.reason, input.main_group === "custom");
          form.previewer.beginRender(templatetext, "User_talk:".concat(relevantUserName));
        },
        // Just a pass-through unless the autolevel option was selected
        preview: (form) => {
          if (form.main_group.value === "autolevel") {
            const usertalk_page = new Morebits.wiki.page("User_talk:".concat(relevantUserName), window.wgULS("加载上次警告", "載入上次警告"));
            usertalk_page.setFollowRedirect(true, false);
            usertalk_page.load((pageobj) => {
              Twinkle.warn.talkpageObj = pageobj;
              const wikitext = pageobj.getPageText();
              const [latest] = Twinkle.warn.callbacks.dateProcessing(wikitext);
              const params = {
                sub_group: form.sub_group.value,
                article: form.article.value,
                messageData: $(form.sub_group).find('option[value="'.concat($(form.sub_group).val(), '"]')).data("messageData")
              };
              const [template] = Twinkle.warn.callbacks.autolevelParseWikitext(wikitext, params, latest);
              Twinkle.warn.callbacks.showPreview(form, template);
              if (form.sub_group.value !== template) {
                const evt = document.createEvent("Event");
                evt.initEvent("change", true, true);
                form.main_group.dispatchEvent(evt);
              }
            });
          } else {
            Twinkle.warn.callbacks.showPreview(form);
          }
        },
        /**
         * Used in the main and autolevel loops to determine when to warn
         * about excessively recent, stale, or identical warnings.
         *
         * @param {string} wikitext  The text of a user's talk page, from getPageText()
         * @returns {Object[]} - Array of objects: latest contains most recent
         * warning and date; history lists all prior warnings
         */
        dateProcessing: (wikitext) => {
          const history_re = /<!--\s?Template:([uU]w-.*?)\s?-->.*?(\d{4})年(\d{1,2})月(\d{1,2})日 \([日一二三四五六]\) (\d{1,2}):(\d{1,2}) \(CST\)/g;
          const history = {};
          const latest = {
            date: new Morebits.date(0),
            type: ""
          };
          let current;
          while ((current = history_re.exec(wikitext)) !== null) {
            const [, template] = current;
            const current_date = new Morebits.date("".concat(current[2], "-").concat(current[3], "-").concat(current[4], " ").concat(current[5], ":").concat(current[6], " (CST)"));
            if (!(template in history) || history[template].isBefore(current_date)) {
              history[template] = current_date;
            }
            if (!latest.date.isAfter(current_date)) {
              latest.date = current_date;
              latest.type = template;
            }
          }
          return [latest, history];
        },
        /**
         * Main loop for deciding what the level should increment to. Most of
         * this is really just error catching and updating the subsequent data.
         * May produce up to two notices in a twinkle-warn-autolevel-messages div
         *
         * @param {string} wikitext  The text of a user's talk page, from getPageText() (required)
         * @param {Object} params  Params object: sub_group is the template (required);
         * article is the user-provided article (form.article) used to link ARV on recent level2 warnings;
         * messageData is only necessary if getting the full template, as it's
         * used to ensure a valid template of that level exists
         * @param {Object} latest  First element of the array returned from
         * dateProcessing. Provided here rather than processed within to avoid
         * repeated call to dateProcessing
         * @param {(Date|Morebits.date)} date  Date from which staleness is determined
         * @param {Morebits.status} statelem  Status element, only used for handling error in final execution
         *
         * @returns {Array} - Array that contains the full template and just the warning level
         */
        autolevelParseWikitext: (wikitext, params, latest, date, statelem) => {
          let level;
          if (/\d?$/.test(latest.type)) {
            level = Number.parseInt(latest.type.replace(/.*(\d)?$/, "$1"), 10);
          } else if (latest.type) {
            level = 1;
          }
          const $autolevelMessage = $("<div>").attr("id", "twinkle-warn-autolevel-message");
          if (Number.isNaN(level)) {
            level = 1;
          } else if (level > 2 || level < 1) {
            const message = window.wgULS("无法解析上次的警告层级，请手动选择一个警告层级。", "無法解析上次的警告層級，請手動選擇一個警告層級。");
            if (statelem) {
              statelem.error(message);
            } else {
              void mw.notify(message, {
                type: "warn",
                tag: "twinklewarn"
              });
            }
            return;
          } else {
            date || (date = /* @__PURE__ */ new Date());
            const autoTimeout = new Morebits.date(latest.date.getTime()).add(Number.parseInt(Twinkle.getPref("autolevelStaleDays"), 10), "day");
            if (autoTimeout.isAfter(date)) {
              if (level === 2) {
                level = 2;
                if (!statelem) {
                  const $link = $("<a>").attr("href", "#").text(window.wgULS("单击此处打开告状工具", "點擊此處打開告狀工具")).css("font-weight", "bold").on("click", () => {
                    Morebits.wiki.actionCompleted.redirect = null;
                    Twinkle.warn.dialog.close();
                    Twinkle.arv.callback(relevantUserName);
                    $body.find("input[name=page]").val(params.article);
                    $body.find("input[value=final]").prop("checked", true);
                  });
                  const statusNode = $("<div>").css("color", "#f00").text(relevantUserName + window.wgULS("最后收到了一个层级2警告（", "最後收到了一個層級2警告（") + latest.type + window.wgULS("），所以将其报告给管理人员会比较好；", "），所以將其報告給管理人員會比較好；"));
                  statusNode.append($link[0]);
                  $autolevelMessage.append(statusNode);
                }
              } else {
                level += 1;
              }
            } else {
              level = 1;
            }
          }
          $autolevelMessage.prepend($("<div>".concat(window.wgULS("将发送", "將發送"), '<span style="font-weight: bold;">').concat(window.wgULS("层级", "層級")).concat(level, "</span>警告模板。</div>")));
          $body.find("#twinkle-warn-autolevel-message").remove();
          $autolevelMessage.insertAfter($body.find("#twinkle-warn-warning-messages"));
          let template = params.sub_group.replace(/(.*)\d$/, "$1");
          if (params.messageData && !params.messageData["level".concat(level)]) {
            template = "uw-generic";
          }
          template += level;
          return [template, level];
        },
        main: (pageobj) => {
          const text = pageobj.getPageText();
          const statelem = pageobj.getStatusElement();
          const params = pageobj.getCallbackParameters();
          let {
            messageData
          } = params;
          const warningHistory = Twinkle.warn.callbacks.dateProcessing(text);
          const [latest, history] = warningHistory;
          const now = new Morebits.date(pageobj.getLoadTime());
          Twinkle.warn.talkpageObj = pageobj;
          if (params.main_group === "autolevel") {
            const templateAndLevel = Twinkle.warn.callbacks.autolevelParseWikitext(text, params, latest, now, statelem);
            if (params.sub_group !== templateAndLevel[0] && !confirm(window.wgULS("将发送给用户{{", "將發送給使用者{{") + templateAndLevel[0] + window.wgULS("}}模板，好吗？", "}}模板，好嗎？"))) {
              statelem.error(window.wgULS("用户取消", "使用者取消"));
              return;
            }
            [params.sub_group] = templateAndLevel;
            messageData = params.messageData["level".concat(templateAndLevel[1])];
          } else if (params.sub_group in history && new Morebits.date(history[params.sub_group]).add(1, "day").isAfter(now) && !confirm(window.wgULS("近24小时内一个同样的 ", "近24小時內一個同樣的 ") + params.sub_group + window.wgULS(" 模板已被发出。\n是否继续？", " 模板已被發出。\n是否繼續？"))) {
            statelem.error(window.wgULS("用户取消", "使用者取消"));
            return;
          }
          latest.date.add(1, "minute");
          if (latest.date.isAfter(now) && !confirm(window.wgULS("近1分钟内 ", "近1分鐘內 ") + latest.type + window.wgULS(" 模板已被发出。\n是否继续？", " 模板已被發出。\n是否繼續？"))) {
            statelem.error(window.wgULS("用户取消", "使用者取消"));
            return;
          }
          const customProcess = (template) => {
            [template] = template.split("|");
            let prefix;
            switch (template.slice(-1)) {
              case "1":
                prefix = "注意";
                break;
              case "2":
                prefix = "警告";
                break;
              // falls through
              default:
                prefix = "提醒";
                break;
            }
            return "".concat(prefix, "：").concat(Morebits.string.toUpperCaseFirstChar(messageData.label));
          };
          let summary;
          if (params.main_group === "custom") {
            summary = customProcess(params.sub_group);
          } else {
            if (params.main_group === "kitchensink" && !/^D+$/.test(params.sub_group)) {
              let sub = params.sub_group.slice(-1);
              if (sub === "m") {
                sub = params.sub_group.slice(-3);
              }
              if (/\d/.test(sub)) {
                params.main_group = "level".concat(sub);
              }
            }
            summary = messageData.summary || messageData[params.main_group] && messageData[params.main_group].summary;
            summary || (summary = customProcess(params.sub_group));
            if (messageData.suppressArticleInSummary !== true && params.article) {
              if (params.sub_group === "uw-aiv") {
                summary += "（".concat(window.wgULS("对于", "對於"), "[[User:").concat(params.article, "]]）");
              } else if (params.sub_group === "uw-bite") {
                summary += "，".concat(window.wgULS("于", "於"), "[[User talk:").concat(params.article, "]]");
              } else {
                summary += "".concat(window.wgULS("，于[[", "，於[[") + params.article, "]]");
              }
            }
          }
          pageobj.setEditSummary(summary);
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setWatchlist(Twinkle.getPref("watchWarnings"));
          const warningText = Twinkle.warn.callbacks.getWarningWikitext(params.sub_group, params.article, params.reason, params.main_group === "custom");
          let sectionExists = false;
          let sectionNumber = 0;
          if (!messageData.heading && text.length) {
            const sections = text.match(/^(==*).+\1/gm);
            if (sections && sections.length !== 0) {
              const dateHeaderRegex = now.monthHeaderRegex();
              sectionNumber = 0;
              sectionExists = sections.reverse().some((sec, idx) => {
                return /^(==)[^=].+\1/m.test(sec) && dateHeaderRegex.test(sec) && typeof (sectionNumber = sections.length - 1 - idx) === "number";
              });
            }
          }
          if (sectionExists) {
            pageobj.setPageSection(sectionNumber + 1);
            pageobj.setAppendText("\n\n".concat(warningText));
            pageobj.append();
          } else {
            if (messageData.heading) {
              pageobj.setNewSectionTitle(messageData.heading);
            } else {
              Morebits.status.info(window.wgULS("信息", "資訊"), window.wgULS("未找到当月的二级标题，将创建新的", "未找到當月的二級標題，將建立新的"));
              pageobj.setNewSectionTitle(now.monthHeader(0));
            }
            pageobj.setNewSectionText(warningText);
            pageobj.newSection();
          }
        }
      };
      Twinkle.warn.callback.evaluate = (e) => {
        const userTalkPage = "User_talk:".concat(relevantUserName);
        const params = Morebits.quickForm.getInputData(e.target);
        if (params.article) {
          if (/https?:\/\//.test(params.article)) {
            void mw.notify(window.wgULS("“页面链接”不能使用网址。", "「頁面連結」不能使用網址。"), {
              type: "warn",
              tag: "warn"
            });
            return;
          }
          try {
            const article = new mw.Title(params.article);
            params.article = article.getPrefixedText();
            if (article.getFragment()) {
              params.article += "#".concat(article.getFragment());
            }
          } catch {
            alert(window.wgULS("“页面链接”不合法，仅能输入一个页面名称，勿使用网址、[[ ]]，可使用Special:Diff。", "「頁面連結」不合法，僅能輸入一個頁面名稱，勿使用網址、[[ ]]，可使用Special:Diff。"));
            return;
          }
        }
        const $selectedEl = $(e.target.sub_group).find('option[value="'.concat($(e.target.sub_group).val(), '"]'));
        params.messageData = $selectedEl.data("messageData");
        if (params.messageData === void 0) {
          void mw.notify(window.wgULS("请选择警告模板。", "請選擇警告模板。"), {
            type: "warn",
            tag: "warn"
          });
          return;
        }
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(e.target);
        Morebits.wiki.actionCompleted.redirect = userTalkPage;
        Morebits.wiki.actionCompleted.notice = window.wgULS("警告完成，将在几秒后刷新", "警告完成，將在幾秒後重新整理");
        const ysarchives_page = new Morebits.wiki.page(userTalkPage, window.wgULS("用户讨论页修改", "使用者討論頁修改"));
        ysarchives_page.setCallbackParameters(params);
        ysarchives_page.setFollowRedirect(true, false);
        ysarchives_page.load(Twinkle.warn.callbacks.main);
      };
      Twinkle.addInitCallback(Twinkle.warn, "warn");
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinkleblock.js
var twinkleblock_exports = {};
var import_ext_gadget2;
var init_twinkleblock = __esm({
  "src/Twinkle/modules/twinkleblock.js"() {
    "use strict";
    init_api();
    import_ext_gadget2 = require("ext.gadget.Util");
    /*! Twinkle.js - twinkleblock.js */
    (function twinkleblock($) {
      const $body = $("body");
      let relevantUserName;
      let blockedUserName;
      const menuFormattedNamespaces = {
        ...mw.config.get("wgFormattedNamespaces")
      };
      menuFormattedNamespaces[0] = window.wgULS("（条目）", "（條目）");
      const blockActionText = {
        block: window.wgULS("封禁", "封鎖"),
        reblock: window.wgULS("重新封禁", "重新封鎖"),
        unblock: window.wgULS("解除封禁", "解除封鎖")
      };
      Twinkle.block = () => {
        relevantUserName = mw.config.get("wgRelevantUserName");
        if ((Morebits.userIsSysop || !mw.util.isIPAddress(relevantUserName, true)) && relevantUserName && (!Morebits.ip.isRange(relevantUserName) || Morebits.ip.validCIDR(relevantUserName))) {
          Twinkle.addPortletLink(Twinkle.block.callback, window.wgULS("封禁", "封鎖"), "tw-block", window.wgULS("封禁相关用户", "封鎖相關使用者"));
        }
      };
      Twinkle.block.callback = () => {
        if (relevantUserName === mw.config.get("wgUserName") && !confirm(window.wgULS("您即将对自己执行封禁相关操作！确认要继续吗？", "您即將對自己執行封鎖相關操作！確認要繼續嗎？"))) {
          return;
        }
        Twinkle.block.currentBlockInfo = void 0;
        Twinkle.block.field_block_options = {};
        Twinkle.block.field_template_options = {};
        const Window = new Morebits.simpleWindow(650, 530);
        Window.setTitle(window.wgULS("封禁或向", "封鎖或向") + relevantUserName + window.wgULS("发出封禁模板", "發出封鎖模板"));
        Window.setScriptName("Twinkle");
        Window.addFooterLink(window.wgULS("封禁条例", "封鎖條例"), "LIB:BLOCK");
        Window.addFooterLink(window.wgULS("封禁设置", "封鎖設定"), "H:TW/PREF#block");
        Window.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW/DOC#block");
        const form = new Morebits.quickForm(Twinkle.block.callback.evaluate);
        const actionfield = form.append({
          type: "field",
          label: window.wgULS("操作类型", "操作類別")
        });
        actionfield.append({
          type: "checkbox",
          name: "actiontype",
          event: Twinkle.block.callback.change_action,
          list: [{
            label: window.wgULS("封禁用户", "封鎖使用者"),
            value: "block",
            tooltip: window.wgULS("用选择的选项全站封禁相关用户，若未勾选部分封禁则为全站封禁。", "用選擇的選項全站封鎖相關使用者，若未勾選部分封鎖則為全站封鎖。"),
            hidden: !Morebits.userIsSysop,
            checked: Morebits.userIsSysop
          }, {
            label: window.wgULS("部分封禁", "部分封鎖"),
            value: "partial",
            tooltip: window.wgULS("启用部分封禁及部分封禁模板。", "啟用部分封鎖及部分封鎖模板。"),
            hidden: !Morebits.userIsSysop,
            checked: Twinkle.getPref("defaultToPartialBlocks")
            // Overridden if already blocked
          }, {
            label: window.wgULS("加入封禁模板到用户讨论页", "加入封鎖模板到使用者討論頁"),
            value: "template",
            tooltip: window.wgULS("若执行封禁的管理员忘记发出封禁模板，或你封禁了用户而没有给其发出模板，则你可以用此来发出合适的模板。勾选部分封禁以使用部分封禁模板。", "若執行封鎖的管理員忘記發出封鎖模板，或你封鎖了使用者而沒有給其發出模板，則你可以用此來發出合適的模板。勾選部分封鎖以使用部分封鎖模板。"),
            // Disallow when viewing the block dialog on an IP range
            hidden: !Morebits.userIsSysop,
            checked: Morebits.userIsSysop && !Morebits.ip.isRange(relevantUserName),
            disabled: Morebits.ip.isRange(relevantUserName)
          }, {
            label: window.wgULS("标记用户页", "標記使用者頁面"),
            value: "tag",
            tooltip: window.wgULS("将用户页替换成相关的标记模板，仅限永久封禁使用。", "將使用者頁面替換成相關的標記模板，僅限永久封鎖使用。"),
            hidden: true,
            checked: !Morebits.userIsSysop
          }, {
            label: window.wgULS("保护用户页", "保護使用者頁面"),
            value: "protect",
            tooltip: window.wgULS("全保护用户页，仅限永久封禁使用。", "全保護使用者頁面，僅限永久封鎖使用。"),
            hidden: true
          }, {
            label: window.wgULS("解除封禁用户", "解除封鎖使用者"),
            value: "unblock",
            tooltip: window.wgULS("解除封禁相关用户。", "解除封鎖相關使用者。"),
            hidden: !Morebits.userIsSysop
          }]
        });
        const sixtyFour = Morebits.ip.get64(mw.config.get("wgRelevantUserName"));
        if (sixtyFour && sixtyFour !== mw.config.get("wgRelevantUserName")) {
          const block64field = form.append({
            type: "field",
            label: window.wgULS("转换为/64段封禁", "轉換為/64段封鎖"),
            name: "field_64"
          });
          block64field.append({
            type: "div",
            style: "margin-bottom: 0.5em",
            label: [wgULS("直接封禁/64段有益无害。", "直接封鎖/64段有益無害。")]
          });
          block64field.append({
            type: "checkbox",
            name: "block64",
            event: Twinkle.block.callback.change_block64,
            list: [{
              checked: Twinkle.getPref("defaultToBlock64"),
              label: window.wgULS("改成封禁/64", "改成封鎖/64"),
              value: "block64",
              tooltip: Morebits.ip.isRange(mw.config.get("wgRelevantUserName")) ? window.wgULS("将不会发送模板通知。", "將不會發送模板通知。") : window.wgULS("任何模板将会发送给原始IP：", "任何模板將會發送給原始IP：") + mw.config.get("wgRelevantUserName")
            }]
          });
        }
        form.append({
          type: "field",
          label: window.wgULS("默认", "預設"),
          name: "field_preset"
        });
        form.append({
          type: "field",
          label: window.wgULS("模板选项", "模板選項"),
          name: "field_template_options"
        });
        form.append({
          type: "field",
          label: window.wgULS("封禁选项", "封鎖選項"),
          name: "field_block_options"
        });
        form.append({
          type: "field",
          label: window.wgULS("标记用户页", "標記使用者頁面"),
          name: "field_tag_options"
        });
        form.append({
          type: "field",
          label: window.wgULS("解除封禁选项", "解除封鎖選項"),
          name: "field_unblock_options"
        });
        form.append({
          type: "submit",
          label: "提交"
        });
        const result = form.render();
        Window.setContent(result);
        Window.display();
        result.root = result;
        Twinkle.block.fetchUserInfo(() => {
          if (Twinkle.block.isRegistered) {
            const $form = $(result);
            Morebits.quickForm.setElementVisibility($form.find("[name=actiontype][value=tag]").parent(), true);
            if (Morebits.userIsSysop) {
              Morebits.quickForm.setElementVisibility($form.find("[name=actiontype][value=protect]").parent(), true);
            }
          }
          if (blockedUserName === relevantUserName) {
            $(result).find("[name=actiontype][value=partial]").prop("checked", Twinkle.block.currentBlockInfo.partial === "");
          }
          Twinkle.block.transformBlockPresets();
          const evt = document.createEvent("Event");
          evt.initEvent("change", true, true);
          if (result.block64 && result.block64.checked) {
            result.block64.dispatchEvent(evt);
          } else {
            result.actiontype[0].dispatchEvent(evt);
          }
        });
      };
      Twinkle.block.fetchedData = {};
      Twinkle.block.processUserInfo = (data, fn) => {
        let [blockinfo] = data.query.blocks;
        const [userinfo] = data.query.users;
        if (data.query.blocks.length > 1 && blockinfo.user !== relevantUserName) {
          [, blockinfo] = data.query.blocks;
        }
        Twinkle.block.fetchedData[userinfo.name] = data;
        Twinkle.block.isRegistered = !!userinfo.userid;
        if (Twinkle.block.isRegistered) {
          Twinkle.block.userIsBot = !!userinfo.groupmemberships && userinfo.groupmemberships.map((e) => {
            return e.group;
          }).includes("bot");
        } else {
          Twinkle.block.userIsBot = false;
        }
        if (blockinfo) {
          blockinfo.disabletalk = blockinfo.allowusertalk === void 0;
          blockinfo.hardblock = blockinfo.anononly === void 0;
        }
        Twinkle.block.currentBlockInfo = blockinfo;
        blockedUserName = Twinkle.block.currentBlockInfo && Twinkle.block.currentBlockInfo.user;
        Twinkle.block.hasBlockLog = !!data.query.logevents.length;
        Twinkle.block.blockLog = Twinkle.block.hasBlockLog && data.query.logevents;
        Twinkle.block.blockLogId = Twinkle.block.hasBlockLog ? data.query.logevents[0].logid : false;
        if (typeof fn === "function") {
          return fn();
        }
      };
      Twinkle.block.fetchUserInfo = (fn) => {
        const query = {
          format: "json",
          action: "query",
          list: "blocks|users|logevents",
          letype: "block",
          lelimit: 2,
          letitle: "User:".concat(relevantUserName),
          bkprop: "expiry|reason|flags|restrictions|range|user",
          ususers: relevantUserName
        };
        if (mw.util.isIPAddress(relevantUserName, true)) {
          query.bkip = relevantUserName;
        } else {
          query.bkusers = relevantUserName;
          query.usprop = "groupmemberships";
        }
        void api.get(query).then((data) => {
          Twinkle.block.processUserInfo(data, fn);
        }, (error) => {
          Morebits.status.init($body.find('div[name="currentblock"] span').last()[0]);
          Morebits.status.warn(window.wgULS("抓取用户信息出错", "抓取使用者資訊出錯"), error);
        });
      };
      Twinkle.block.callback.saveFieldset = (fieldset) => {
        Twinkle.block[$(fieldset).prop("name")] = {};
        var _iterator7 = _createForOfIteratorHelper($(fieldset).serializeArray()), _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
            const el = _step7.value;
            Twinkle.block[$(fieldset).prop("name")][el.name] = el.value;
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
      };
      Twinkle.block.callback.change_block64 = (e) => {
        const $form = $(e.target.form);
        const $block64 = $form.find("[name=block64]");
        const priorName = relevantUserName;
        if ($block64.is(":checked")) {
          relevantUserName = Morebits.ip.get64(mw.config.get("wgRelevantUserName"));
        } else {
          relevantUserName = mw.config.get("wgRelevantUserName");
        }
        const originalIsRange = Morebits.ip.isRange(mw.config.get("wgRelevantUserName"));
        $form.find("[name=actiontype][value=template]").prop("disabled", originalIsRange).prop("checked", !originalIsRange);
        const regenerateForm = () => {
          const titleBar = document.querySelector(".ui-dialog-title").firstChild.nextSibling;
          titleBar.nodeValue = titleBar.nodeValue.replace(priorName, relevantUserName);
          $form.find("[name=actiontype][value=partial]").prop("checked", Twinkle.getPref("defaultToPartialBlocks"));
          if (blockedUserName === relevantUserName) {
            $form.find("[name=actiontype][value=partial]").prop("checked", Twinkle.block.currentBlockInfo.partial === "");
          }
          Twinkle.block.callback.change_action(e);
        };
        if (Twinkle.block.fetchedData[relevantUserName]) {
          Twinkle.block.processUserInfo(Twinkle.block.fetchedData[relevantUserName], regenerateForm);
        } else {
          Twinkle.block.fetchUserInfo(regenerateForm);
        }
      };
      Twinkle.block.callback.change_action = (e) => {
        let field_preset;
        let field_template_options;
        let field_block_options;
        let field_tag_options;
        let field_unblock_options;
        const $form = $(e.target.form);
        const $block = $form.find("[name=actiontype][value=block]");
        let blockBox = $block.is(":checked");
        const $template = $form.find("[name=actiontype][value=template]");
        let templateBox = $template.is(":checked");
        const $tag = $form.find("[name=actiontype][value=tag]");
        const tagBox = $tag.is(":checked");
        const $protect = $form.find("[name=actiontype][value=protect]");
        const $partial = $form.find("[name=actiontype][value=partial]");
        const partialBox = $partial.is(":checked");
        const $unblock = $form.find("[name=actiontype][value=unblock]");
        const unblockBox = $unblock.is(":checked");
        let blockGroup = partialBox ? Twinkle.block.blockGroupsPartial : Twinkle.block.blockGroups;
        if (e.target.value === "unblock") {
          if (!Twinkle.block.currentBlockInfo) {
            $unblock.prop("checked", false);
            void mw.notify(window.wgULS("用户没有被封禁", "使用者沒有被封鎖"), {
              type: "warn",
              tag: "twinkleblock"
            });
            return;
          }
          $block.prop("checked", false);
          blockBox = false;
          $template.prop("checked", false);
          templateBox = false;
          $tag.prop("checked", false);
          $protect.prop("checked", false);
          $partial.prop("checked", false);
        } else {
          $unblock.prop("checked", false);
        }
        $partial.prop("disabled", !blockBox && !templateBox);
        const prior = {
          label: window.wgULS("当前封禁", "目前封鎖")
        };
        if (blockedUserName === relevantUserName) {
          Twinkle.block.blockPresetsInfo.prior = Twinkle.block.currentBlockInfo;
          prior.list = [{
            label: window.wgULS("当前封禁设置", "目前封鎖設定"),
            value: "prior",
            selected: true
          }];
          if (!blockGroup.some((bg) => {
            return bg.label === prior.label;
          })) {
            blockGroup[blockGroup.length] = prior;
          }
          if (partialBox) {
            Twinkle.block.blockPresetsInfo.prior.templateName = Morebits.string.isInfinity(Twinkle.block.currentBlockInfo.expiry) ? "uw-pblockindef" : "uw-pblock";
          } else if (Twinkle.block.isRegistered) {
            Twinkle.block.blockPresetsInfo.prior.templateName = Morebits.string.isInfinity(Twinkle.block.currentBlockInfo.expiry) ? "uw-blockindef" : "uw-block";
          } else {
            Twinkle.block.blockPresetsInfo.prior.templateName = "uw-ablock";
          }
        } else {
          blockGroup = blockGroup.filter((bg) => {
            return bg.label !== prior.label;
          });
        }
        Twinkle.block.callback.saveFieldset($body.find("[name=field_block_options]"));
        Twinkle.block.callback.saveFieldset($body.find("[name=field_template_options]"));
        Twinkle.block.callback.saveFieldset($body.find("[name=field_tag_options]"));
        Twinkle.block.callback.saveFieldset($body.find("[name=field_unblock_options]"));
        if (blockBox) {
          field_preset = new Morebits.quickForm.element({
            type: "field",
            label: window.wgULS("默认", "預設"),
            name: "field_preset"
          });
          field_preset.append({
            type: "select",
            name: "preset",
            label: window.wgULS("选择默认：", "選擇預設："),
            event: Twinkle.block.callback.change_preset,
            list: Twinkle.block.callback.filtered_block_groups(blockGroup)
          });
          field_block_options = new Morebits.quickForm.element({
            type: "field",
            label: window.wgULS("封禁选项", "封鎖選項"),
            name: "field_block_options"
          });
          field_block_options.append({
            type: "div",
            name: "currentblock",
            label: " "
          });
          field_block_options.append({
            type: "div",
            name: "hasblocklog",
            label: " "
          });
          field_block_options.append({
            type: "select",
            name: "expiry_preset",
            label: window.wgULS("过期时间：", "過期時間："),
            event: Twinkle.block.callback.change_expiry,
            list: [{
              label: window.wgULS("自定义", "自訂"),
              value: "custom",
              selected: true
            }, {
              label: window.wgULS("无限期", "無限期"),
              value: "infinity"
            }, {
              label: window.wgULS("3小时", "3小時"),
              value: "3 hours"
            }, {
              label: window.wgULS("12小时", "12小時"),
              value: "12 hours"
            }, {
              label: "1天",
              value: "1 day"
            }, {
              label: window.wgULS("31小时", "31小時"),
              value: "31 hours"
            }, {
              label: "2天",
              value: "2 days"
            }, {
              label: "3天",
              value: "3 days"
            }, {
              label: window.wgULS("1周", "1週"),
              value: "1 week"
            }, {
              label: window.wgULS("2周", "2週"),
              value: "2 weeks"
            }, {
              label: window.wgULS("1个月", "1個月"),
              value: "1 month"
            }, {
              label: window.wgULS("3个月", "3個月"),
              value: "3 months"
            }, {
              label: window.wgULS("6个月", "6個月"),
              value: "6 months"
            }, {
              label: "1年",
              value: "1 year"
            }, {
              label: "2年",
              value: "2 years"
            }, {
              label: "3年",
              value: "3 years"
            }]
          });
          field_block_options.append({
            type: "input",
            name: "expiry",
            label: window.wgULS("自定义过期时间", "自訂過期時間"),
            tooltip: window.wgULS("您可以使用相对时间，如“1 minute”或“19 days”；或绝对时间，“yyyymmddhhmm”（如“200602011405”是2006年2月1日14:05 UTC。）", "您可以使用相對時間，如「1 minute」或「19 days」；或絕對時間，「yyyymmddhhmm」（如「200602011405」是2006年2月1日14:05 UTC。）"),
            value: Twinkle.block.field_block_options.expiry || Twinkle.block.field_template_options.template_expiry
          });
          if (partialBox) {
            field_block_options.append({
              type: "select",
              multiple: true,
              name: "pagerestrictions",
              label: window.wgULS("页面封禁", "頁面封鎖"),
              value: "",
              tooltip: window.wgULS("最多10个页面。", "最多10個頁面。")
            });
            const ns = field_block_options.append({
              type: "select",
              multiple: true,
              name: "namespacerestrictions",
              label: window.wgULS("命名空间封禁", "命名空間封鎖"),
              value: "",
              tooltip: window.wgULS("指定封禁的命名空间。", "指定封鎖的命名空間。")
            });
            for (var _i4 = 0, _Object$entries2 = Object.entries(menuFormattedNamespaces); _i4 < _Object$entries2.length; _i4++) {
              const [number, name] = _Object$entries2[_i4];
              if (number >= 0 && number < 830) {
                ns.append({
                  type: "option",
                  label: name,
                  value: number
                });
              }
            }
          }
          const blockoptions = [{
            checked: Twinkle.block.field_block_options.nocreate,
            label: window.wgULS("禁止创建账号", "禁止建立賬號"),
            name: "nocreate",
            value: "1"
          }, {
            checked: Twinkle.block.field_block_options.noemail,
            label: window.wgULS("电子邮件停用", "電子郵件停用"),
            name: "noemail",
            value: "1"
          }, {
            checked: Twinkle.block.field_block_options.disabletalk,
            label: window.wgULS("不能编辑自己的讨论页", "不能編輯自己的討論頁"),
            name: "disabletalk",
            value: "1",
            tooltip: partialBox ? window.wgULS("若使用部分封禁，不应选择此项，除非您也想要禁止编辑用户讨论页。", "若使用部分封鎖，不應選擇此項，除非您也想要禁止編輯使用者討論頁。") : ""
          }];
          if (Twinkle.block.isRegistered) {
            blockoptions[blockoptions.length] = {
              checked: Twinkle.block.field_block_options.autoblock,
              label: window.wgULS("自动封禁", "自動封鎖"),
              name: "autoblock",
              value: "1"
            };
          } else {
            blockoptions[blockoptions.length] = {
              checked: Twinkle.block.field_block_options.hardblock,
              label: window.wgULS("阻止登录用户使用该IP地址编辑", "阻止登入使用者使用該IP位址編輯"),
              name: "hardblock",
              value: "1"
            };
          }
          blockoptions[blockoptions.length] = ({
            checked: Twinkle.block.field_block_options.watchuser,
            label: window.wgULS("监视该用户的用户页和讨论页", "監視該使用者的使用者頁面和討論頁"),
            name: "watchuser",
            value: "1"
          }, {
            checked: true,
            label: window.wgULS("标记当前的破坏中的请求", "標記當前的破壞中的請求"),
            name: "closevip",
            value: "1"
          });
          field_block_options.append({
            type: "checkbox",
            name: "blockoptions",
            list: blockoptions
          });
          field_block_options.append({
            type: "textarea",
            label: window.wgULS("理由（用于封禁日志）：", "理由（用於封鎖日誌）："),
            name: "reason",
            tooltip: window.wgULS("请考虑在默认的消息中加入有用的详细信息。", "請考慮在預設的訊息中加入有用的詳細資訊。"),
            value: Twinkle.block.field_block_options.reason
          });
          field_block_options.append({
            type: "div",
            name: "filerlog_label",
            label: window.wgULS("参见：", "參見："),
            style: "display:inline-block;font-style:normal !important",
            tooltip: window.wgULS("在封禁理由中标清特殊情况以供其他管理员参考", "在封鎖理由中標清特殊情況以供其他管理員參考")
          });
          field_block_options.append({
            type: "checkbox",
            name: "filter_see_also",
            event: Twinkle.block.callback.toggle_see_alsos,
            style: "display:inline-block; margin-right:5px",
            list: [{
              label: window.wgULS("过滤器日志", "過濾器日誌"),
              checked: false,
              value: window.wgULS("过滤器日志", "過濾器日誌")
            }]
          });
          field_block_options.append({
            type: "checkbox",
            name: "deleted_see_also",
            event: Twinkle.block.callback.toggle_see_alsos,
            style: "display:inline-block; margin-right:5px",
            list: [{
              label: window.wgULS("已删除的编辑", "已刪除的編輯"),
              checked: false,
              value: window.wgULS("已删除的编辑", "已刪除的編輯")
            }]
          });
          field_block_options.append({
            type: "checkbox",
            name: "filter_see_also",
            event: Twinkle.block.callback.toggle_see_alsos,
            style: "display:inline-block; margin-right:5px",
            list: [{
              label: window.wgULS("用户讨论页", "使用者討論頁"),
              checked: false,
              value: window.wgULS("用户讨论页", "使用者討論頁")
            }]
          });
          field_block_options.append({
            type: "checkbox",
            name: "filter_see_also",
            event: Twinkle.block.callback.toggle_see_alsos,
            style: "display:inline-block; margin-right:5px",
            list: [{
              label: window.wgULS("过去的封禁记录", "過去的封鎖記錄"),
              checked: false,
              value: window.wgULS("过去的封禁记录", "過去的封鎖記錄")
            }]
          });
          if (blockedUserName === relevantUserName) {
            field_block_options.append({
              type: "hidden",
              name: "reblock",
              value: "1"
            });
          }
        }
        if (templateBox) {
          field_template_options = new Morebits.quickForm.element({
            type: "field",
            label: window.wgULS("模板选项", "模板選項"),
            name: "field_template_options"
          });
          field_template_options.append({
            type: "select",
            name: "template",
            label: window.wgULS("选择讨论页模板：", "選擇討論頁模板："),
            event: Twinkle.block.callback.change_template,
            list: Twinkle.block.callback.filtered_block_groups(blockGroup, true),
            value: Twinkle.block.field_template_options.template
          });
          field_template_options.append({
            type: "input",
            name: "article",
            label: window.wgULS("链接页面", "連結頁面"),
            value: "",
            tooltip: window.wgULS("可以随通知链接页面，例如破坏的目标。没有条目需要链接则请留空。", "可以隨通知連結頁面，例如破壞的目標。沒有條目需要連結則請留空。")
          });
          field_template_options.append({
            type: "input",
            name: "area",
            label: window.wgULS("封禁范围", "封鎖範圍"),
            value: "",
            tooltip: window.wgULS("阻止用户编辑的页面或命名空间的可选说明。", "阻止使用者編輯的頁面或命名空間的可選說明。")
          });
          if (!blockBox) {
            field_template_options.append({
              type: "input",
              name: "template_expiry",
              label: "封禁期限：",
              value: "",
              tooltip: window.wgULS("封禁时长，如24小时、2周、无限期等。", "封鎖時長，如24小時、2週、無限期等。")
            });
          }
          field_template_options.append({
            type: "input",
            name: "block_reason",
            label: window.wgULS("“由于……您已被封禁”", "「由於……您已被封鎖」"),
            tooltip: window.wgULS("可选的理由，用于替换默认理由。只在常规封禁模板中有效。", "可選的理由，用於替換預設理由。只在常規封鎖模板中有效。"),
            value: Twinkle.block.field_template_options.block_reason,
            size: 60
          });
          if (blockBox) {
            field_template_options.append({
              type: "checkbox",
              name: "blank_duration",
              list: [{
                label: window.wgULS("不在模板中包含封禁期限", "不在模板中包含封鎖期限"),
                checked: Twinkle.block.field_template_options.blank_duration,
                tooltip: window.wgULS("模板将会显示“一段时间”而不是具体时长", "模板將會顯示「一段時間」而不是具體時長")
              }]
            });
          } else {
            field_template_options.append({
              type: "checkbox",
              list: [{
                label: window.wgULS("不能编辑自己的讨论页", "不能編輯自己的討論頁"),
                name: "notalk",
                checked: Twinkle.block.field_template_options.notalk,
                tooltip: window.wgULS("用此在封禁模板中指明该用户编辑讨论页的权限已被移除", "用此在封鎖模板中指明該使用者編輯討論頁的權限已被移除")
              }, {
                label: window.wgULS("不能发送电子邮件", "不能傳送電子郵件"),
                name: "noemail_template",
                checked: Twinkle.block.field_template_options.noemail_template,
                tooltip: window.wgULS("用此在封禁模板中指明该用户发送电子邮件的权限已被移除", "用此在封鎖模板中指明該使用者傳送電子郵件的權限已被移除")
              }, {
                label: window.wgULS("不能创建账号", "不能建立賬號"),
                name: "nocreate_template",
                checked: Twinkle.block.field_template_options.nocreate_template,
                tooltip: window.wgULS("用此在封禁模板中指明该用户创建账号的权限已被移除", "用此在封鎖模板中指明該使用者建立賬號的權限已被移除")
              }]
            });
          }
          const $previewlink = $("<a>").attr("id", "twinkleblock-preview-link").text(window.wgULS("预览", "預覽"));
          $previewlink.off("click").on("click", () => {
            Twinkle.block.callback.preview($form[0]);
          });
          $previewlink.css({
            cursor: "pointer"
          });
          field_template_options.append({
            type: "div",
            id: "blockpreview",
            label: [$previewlink[0]]
          });
          field_template_options.append({
            type: "div",
            id: "twinkleblock-previewbox",
            style: "display: none"
          });
        }
        if (tagBox) {
          field_tag_options = new Morebits.quickForm.element({
            type: "field",
            label: window.wgULS("标记用户页", "標記使用者頁面"),
            name: "field_tag_options"
          });
          field_tag_options.append({
            type: "checkbox",
            name: "tag",
            label: window.wgULS("选择用户页模板：", "選擇使用者頁面模板："),
            list: [{
              label: "{{Blocked user}}：".concat(window.wgULS("一般永久封禁", "一般永久封鎖")),
              value: "Blocked user"
            }, {
              label: "{{Sockpuppet}}：".concat(window.wgULS("傀儡账号", "傀儡賬號")),
              value: "Sockpuppet",
              subgroup: [{
                name: "sppUsername",
                type: "input",
                label: window.wgULS("主账号用户名：", "主賬號使用者名稱：")
              }, {
                name: "sppType",
                type: "select",
                label: window.wgULS("状态：", "狀態："),
                list: [{
                  type: "option",
                  value: "blocked",
                  label: "blocked - ".concat(window.wgULS("仅依行为证据认定", "僅依行為證據認定")),
                  selected: true
                }, {
                  type: "option",
                  value: "proven",
                  label: "proven - ".concat(window.wgULS("经傀儡调查确认", "經傀儡調查確認"))
                }, {
                  type: "option",
                  value: "confirmed",
                  label: "confirmed - ".concat(window.wgULS("经查核确认", "經查核確認"))
                }]
              }, {
                name: "sppEvidence",
                type: "input",
                label: window.wgULS("根据……确定：", "根據……確定："),
                tooltip: window.wgULS("纯文字或是带[[]]的链接，例如：[[Special:固定链接/xxxxxxxx|用户查核]]", "純文字或是帶[[]]的連結，例如：[[Special:固定链接/xxxxxxxx|用戶查核]]")
              }]
            }, {
              label: "{{Sockpuppeteer|blocked}}：".concat(window.wgULS("傀儡主账号", "傀儡主賬號")),
              value: "Sockpuppeteer",
              subgroup: [{
                type: "checkbox",
                list: [{
                  name: "spmChecked",
                  value: "spmChecked",
                  label: window.wgULS("经用户查核确认", "經使用者查核確認")
                }]
              }, {
                name: "spmEvidence",
                type: "input",
                label: window.wgULS("额外理由：", "額外理由：")
              }]
            }]
          });
        }
        if (unblockBox) {
          field_unblock_options = new Morebits.quickForm.element({
            type: "field",
            label: window.wgULS("解除封禁选项", "解除封鎖選項"),
            name: "field_unblock_options"
          });
          field_unblock_options.append({
            type: "textarea",
            label: window.wgULS("理由（用于封禁日志）：", "理由（用於封鎖日誌）："),
            name: "reason",
            value: Twinkle.block.field_unblock_options.reason
          });
        }
        let oldfield;
        if (field_preset) {
          [oldfield] = $form.find('fieldset[name="field_preset"]');
          oldfield.replaceWith(field_preset.render());
        } else {
          $form.find('fieldset[name="field_preset"]').hide();
        }
        if (field_block_options) {
          [oldfield] = $form.find('fieldset[name="field_block_options"]');
          oldfield.replaceWith(field_block_options.render());
          $form.find('fieldset[name="field_64"]').show();
          $form.find("[name=pagerestrictions]").select2({
            width: "100%",
            placeholder: window.wgULS("输入要阻止用户编辑的页面", "輸入要阻止使用者編輯的頁面"),
            language: {
              errorLoading: () => {
                return window.wgULS("搜索词汇不完整或无效", "搜尋詞彙不完整或無效");
              }
            },
            maximumSelectionLength: 10,
            minimumInputLength: 1,
            ajax: {
              url: mw.util.wikiScript("api"),
              dataType: "json",
              delay: 100,
              data: (params) => {
                const title = mw.Title.newFromText(params.term);
                if (!title) {
                  return;
                }
                return {
                  action: "query",
                  format: "json",
                  list: "allpages",
                  apfrom: title.title,
                  apnamespace: title.namespace,
                  aplimit: "10"
                };
              },
              processResults: (data) => {
                return {
                  results: data.query.allpages.map((page) => {
                    const title = mw.Title.newFromText(page.title, page.ns).toText();
                    return {
                      id: title,
                      text: title
                    };
                  })
                };
              }
            },
            templateSelection: (choice) => {
              return $("<a>").text(choice.text).attr({
                href: mw.util.getUrl(choice.text),
                target: "_blank",
                rel: "noopener noreferrer"
              });
            }
          });
          $form.find("[name=namespacerestrictions]").select2({
            width: "100%",
            matcher: Morebits.select2.matchers.wordBeginning,
            language: {
              searching: Morebits.select2.queryInterceptor
            },
            templateResult: Morebits.select2.highlightSearchMatches,
            placeholder: window.wgULS("选择要禁止用户编辑的命名空间", "選擇要禁止使用者編輯的命名空間")
          });
          mw.util.addCSS(
            /* Reduce padding;
             * Adjust font size;
             * Remove black border;
             * Make the tiny cross larger
             */
            ".select2-results .select2-results__option{padding-top:1px;padding-bottom:1px}.select2-container .select2-dropdown .select2-results,.select2-container .selection .select2-selection__rendered{font-size:13px}.select2-container--default.select2-container--focus .select2-selection--multiple{border:1px solid #aaa}.select2-selection__choice__remove{font-size:125%}"
          );
        } else {
          $form.find('fieldset[name="field_block_options"]').hide();
          $form.find('fieldset[name="field_64"]').hide();
          $form.find("[name=pagerestrictions]").val(null).trigger("change");
          $form.find("[name=namespacerestrictions]").val(null).trigger("change");
        }
        if (field_template_options) {
          [oldfield] = $form.find('fieldset[name="field_template_options"]');
          oldfield.replaceWith(field_template_options.render());
          e.target.form.root.previewer = new Morebits.wiki.preview($(e.target.form.root).find("#twinkleblock-previewbox").last()[0]);
        } else {
          $form.find('fieldset[name="field_template_options"]').hide();
        }
        if (field_tag_options) {
          [oldfield] = $form.find('fieldset[name="field_tag_options"]');
          oldfield.replaceWith(field_tag_options.render());
        } else {
          $form.find('fieldset[name="field_tag_options"]').hide();
        }
        if (field_unblock_options) {
          [oldfield] = $form.find('fieldset[name="field_unblock_options"]');
          oldfield.replaceWith(field_unblock_options.render());
        } else {
          $form.find('fieldset[name="field_unblock_options"]').hide();
        }
        if (Twinkle.block.currentBlockInfo) {
          const sameUser = blockedUserName === relevantUserName;
          Morebits.status.init($body.find('div[name="currentblock"] span').last()[0]);
          let statusStr = "".concat(relevantUserName, "已被").concat(Twinkle.block.currentBlockInfo.partial === "" ? window.wgULS("部分封禁", "部分封鎖") : window.wgULS("全站封禁", "全站封鎖"));
          if (Twinkle.block.currentBlockInfo.rangestart !== Twinkle.block.currentBlockInfo.rangeend) {
            if (sameUser) {
              statusStr += window.wgULS("（段封禁）", "（段封鎖）");
            } else {
              const $rangeblockloglink = $("<span>").append($('<a rel="noopener" target="_blank" href="'.concat(mw.util.getUrl("Special:Log", {
                action: "view",
                page: blockedUserName,
                type: "block"
              }), '">').concat(Morebits.ip.get64(relevantUserName) === blockedUserName ? "/64" : blockedUserName, "</a>)")));
              statusStr += window.wgULS("（位于", "（位於") + $rangeblockloglink.html() + window.wgULS("段封禁内）", "段封鎖內）");
            }
          }
          if (Twinkle.block.currentBlockInfo.expiry === "infinity") {
            statusStr += window.wgULS("（无限期）", "（無限期）");
          } else if (new Morebits.date(Twinkle.block.currentBlockInfo.expiry).isValid()) {
            statusStr += "".concat(window.wgULS("（终止于", "（終止於") + new Morebits.date(Twinkle.block.currentBlockInfo.expiry).calendar("utc"), "）");
          }
          let infoStr = window.wgULS("此表单将", "此表單將");
          if (sameUser) {
            infoStr += window.wgULS("更改封禁", "變更封鎖");
            if (Twinkle.block.currentBlockInfo.partial === void 0 && partialBox) {
              infoStr += window.wgULS("为部分封禁", "為部分封鎖");
            } else if (Twinkle.block.currentBlockInfo.partial === "" && !partialBox) {
              infoStr += window.wgULS("为全站封禁", "為全站封鎖");
            }
            infoStr += "。";
          } else {
            infoStr += window.wgULS("加上额外的", "加上額外的") + (partialBox ? "部分" : "") + window.wgULS("封禁。", "封鎖。");
          }
          Morebits.status.warn(statusStr, infoStr);
          Twinkle.block.callback.update_form(e, Twinkle.block.currentBlockInfo);
        }
        if (Twinkle.block.hasBlockLog) {
          const blockloginfo = [];
          const $blockloglink = $("<span>").append($('<a rel="noopener" target="_blank" href="'.concat(mw.util.getUrl("Special:Log", {
            action: "view",
            page: relevantUserName,
            type: "block"
          }), '">').concat(window.wgULS("封禁日志", "封鎖日誌"), "</a>)")));
          if (Twinkle.block.currentBlockInfo) {
            blockloginfo[blockloginfo.length] = window.wgULS("封禁详情", "封鎖詳情");
          } else {
            const [lastBlockAction] = Twinkle.block.blockLog;
            const blockAction = lastBlockAction.action === "unblock" ? Twinkle.block.blockLog[1] : lastBlockAction;
            blockloginfo[blockloginfo.length] = ("此".concat(Morebits.ip.isRange(relevantUserName) ? window.wgULS("IP范围", "IP範圍") : window.wgULS("用户", "使用者"), "曾在"), $("<b>").text(new Morebits.date(blockAction.timestamp).calendar("utc"))[0], "被".concat(blockAction.user).concat(window.wgULS("封禁", "封鎖")), $("<b>").text(Morebits.string.formatTime(blockAction.params.duration))[0]);
            if (lastBlockAction.action === "unblock") {
              blockloginfo[blockloginfo.length] = "，".concat(new Morebits.date(lastBlockAction.timestamp).calendar("utc"), "解封");
            } else {
              blockloginfo[blockloginfo.length] = "，".concat(new Morebits.date(blockAction.params.expiry).calendar("utc")).concat(window.wgULS("过期", "過期"));
            }
          }
          Morebits.status.init($body.find('div[name="hasblocklog"] span').last()[0]);
          Morebits.status.warn(blockloginfo, $blockloglink[0]);
        }
        if (blockBox) {
          Twinkle.block.callback.change_preset(e);
        } else if (templateBox) {
          Twinkle.block.callback.change_template(e);
        }
      };
      Twinkle.block.blockPresetsInfo = {
        // uw-prefixed
        "uw-block": {
          autoblock: true,
          expiry: "1 day",
          forRegisteredOnly: true,
          nocreate: true,
          pageParam: true,
          reasonParam: true,
          summary: window.wgULS("封禁通知", "封鎖通知"),
          suppressArticleInSummary: true
        },
        "uw-blockindef": {
          autoblock: true,
          expiry: "infinity",
          forRegisteredOnly: true,
          nocreate: true,
          pageParam: true,
          reasonParam: true,
          summary: window.wgULS("封禁通知", "封鎖通知"),
          suppressArticleInSummary: true
        },
        "uw-blocknotalk": {
          disabletalk: true,
          pageParam: true,
          reasonParam: true,
          summary: window.wgULS("封禁通知：禁止编辑讨论页", "封鎖通知：禁止編輯討論頁"),
          suppressArticleInSummary: true
        },
        "uw-3block": {
          autoblock: true,
          expiry: "1 day",
          nocreate: true,
          pageParam: true,
          reason: window.wgULS("违反[[LIB:3RR|回退不过三原则]]", "違反[[LIB:3RR|回退不過三原則]]"),
          summary: window.wgULS("封禁通知：违反[[LIB:3RR|回退不过三原则]]", "封鎖通知：違反[[LIB:3RR|回退不過三原則]]")
        },
        "uw-adblock": {
          autoblock: true,
          nocreate: true,
          pageParam: true,
          reason: window.wgULS("散发[[LIB:SOAP|散发广告或宣传]]", "散發[[LIB:SOAP|散發廣告或宣傳]]"),
          summary: window.wgULS("封禁通知：散发[[LIB:SOAP|散发广告或宣传]]", "封鎖通知：散發[[LIB:SOAP|散發廣告或宣傳]]")
        },
        "uw-attackblock": {
          autoblock: true,
          expiry: "1 day",
          nocreate: true,
          reason: window.wgULS("[[LIB:CIV|行为无礼]]或[[LIB:NPA|人身攻击]]", "[[LIB:CIV|行為無禮]]或[[LIB:NPA|人身攻擊]]"),
          summary: window.wgULS("封禁通知：[[LIB:CIV|行为无礼]]或[[LIB:NPA|人身攻击]]", "封鎖通知：[[LIB:CIV|行為無禮]]或[[LIB:NPA|人身攻擊]]")
        },
        "uw-copyrightblock": {
          autoblock: true,
          expiry: "infinity",
          nocreate: true,
          pageParam: true,
          reason: window.wgULS("持续[[LIB:COPYVIO|侵犯著作权]]", "持續[[LIB:COPYVIO|侵犯著作權]]"),
          summary: window.wgULS("封禁通知：持续[[LIB:COPYVIO|侵犯著作权]]", "封鎖通知：持續[[LIB:COPYVIO|侵犯著作權]]"),
          templateName: "uw-blockindef"
        },
        "uw-dblock": {
          autoblock: true,
          nocreate: true,
          pageParam: true,
          reason: window.wgULS("持续[[LIB:VAN|删除内容]]", "持續[[LIB:VAN|刪除內容]]"),
          summary: window.wgULS("封禁通知：持续[[LIB:VAN|删除内容]]", "封鎖通知：持續[[LIB:VAN|刪除內容]]")
        },
        "uw-hblock": {
          autoblock: true,
          nocreate: true,
          pageParam: true,
          reason: window.wgULS("[[LIB:骚扰|骚扰]]其他用户", "[[LIB:騷擾|騷擾]]其他使用者"),
          summary: window.wgULS("封禁通知：[[LIB:骚扰|骚扰]]其他用户", "封鎖通知：[[LIB:騷擾|騷擾]]其他使用者")
        },
        "uw-vblock": {
          autoblock: true,
          expiry: "1 day",
          nocreate: true,
          pageParam: true,
          reason: window.wgULS("[[LIB:VAN|破坏]]", "[[LIB:VAN|破壞]]"),
          summary: window.wgULS("封禁通知：[[LIB:VAN|破坏]]", "封鎖通知：[[LIB:VAN|破壞]]")
        },
        "uw-illegalblock": {
          autoblock: true,
          expiry: "1 day",
          nocreate: true,
          pageParam: true,
          reason: window.wgULS("持续加入非法内容", "持續加入非法內容"),
          summary: window.wgULS("封禁通知：持续加入非法内容", "封鎖通知：持續加入非法內容")
        },
        "uw-sockblock": {
          autoblock: true,
          expiry: "1 week",
          forRegisteredOnly: true,
          nocreate: true,
          reason: window.wgULS("滥用[[LIB:SOCK|多个账号]]", "濫用[[LIB:SOCK|多個賬號]]"),
          summary: window.wgULS("封禁通知：滥用[[LIB:SOCK|多个账号]]", "封鎖通知：濫用[[LIB:SOCK|多個賬號]]"),
          templateName: "uw-block"
        },
        // uw-u-prefixed
        "uw-ublock": {
          expiry: "infinity",
          forRegisteredOnly: true,
          reason: "{{uw-ublock}}<!-- ".concat(window.wgULS("不当用户名、软封禁", "不當使用者名稱"), " -->"),
          summary: window.wgULS("封禁通知：您的用户名违反[[LIB:U|用户名条例]]", "封鎖通知：您的使用者名稱違反[[LIB:U|使用者名稱條例]]")
        },
        "uw-ublock-illegal": {
          autoblock: true,
          expiry: "infinity",
          forRegisteredOnly: true,
          nocreate: true,
          reason: "{{uw-ublock-illegal}}<!-- ".concat(window.wgULS("不合规的用户名", "不合規的使用者名稱"), " -->"),
          summary: window.wgULS("封禁通知：您的用户名违反[[LIB:U|用户名条例]]", "封鎖通知：您的使用者名稱違反[[LIB:U|使用者名稱條例]]")
        },
        "uw-ublock-suggestive": {
          autoblock: true,
          expiry: "infinity",
          forRegisteredOnly: true,
          nocreate: true,
          reason: "{{uw-ublock-suggestive}}<!-- ".concat(window.wgULS("误导、混淆性用户名", "誤導、混淆性使用者名稱"), " -->"),
          summary: window.wgULS("封禁通知：您的用户名违反[[LIB:U|用户名条例]]", "封鎖通知：您的使用者名稱違反[[LIB:U|使用者名稱條例]]")
        },
        "uw-ublock-spam": {
          autoblock: true,
          expiry: "infinity",
          forRegisteredOnly: true,
          nocreate: true,
          reason: "{{uw-ublock-spam}}<!-- ".concat(window.wgULS("宣传性用户名或宣传性编辑", "宣傳性使用者名稱或宣傳性編輯"), " -->"),
          summary: window.wgULS("封禁通知：您的用户名违反[[LIB:U|用户名条例]]", "封鎖通知：您的使用者名稱違反[[LIB:U|使用者名稱條例]]")
        },
        // other block templates
        "range block": {
          expiry: "1 week",
          reason: "{{range block}}",
          nocreate: true,
          nonstandard: true,
          forAnonOnly: true,
          sig: "~~".concat("~~")
        },
        "blocked proxy": {
          expiry: "2 years",
          forAnonOnly: true,
          nocreate: true,
          nonstandard: true,
          hardblock: true,
          reason: "{{blocked proxy}}",
          sig: null
        },
        checkuserblock: {
          expiry: "1 week",
          forAnonOnly: true,
          nocreate: true,
          nonstandard: true,
          reason: "{{checkuserblock}}",
          sig: "~~".concat("~~")
        },
        "checkuserblock-account": {
          autoblock: true,
          expiry: "infinity",
          forRegisteredOnly: true,
          nocreate: true,
          nonstandard: true,
          reason: "{{checkuserblock-account}}",
          sig: "~~".concat("~~")
        },
        "school block": {
          expiry: "1 week",
          forAnonOnly: true,
          nocreate: true,
          nonstandard: true,
          reason: "{{school block}}",
          sig: "~~".concat("~~")
        },
        "Bot block message": {
          expiry: "infinity",
          forRegisteredOnly: true,
          reason: window.wgULS("机器人故障", "機器人故障"),
          summary: window.wgULS("封禁通知：机器人故障", "封鎖通知：機器人故障"),
          sig: "~~".concat("~~")
        },
        // other block reasons
        bioblock: {
          autoblock: true,
          expiry: "1 day",
          nocreate: true,
          pageParam: true,
          reason: window.wgULS("违反生者传记条例", "違反生者傳記條例"),
          summary: window.wgULS("封禁通知：违反生者传记条例", "封鎖通知：違反生者傳記條例"),
          templateName: "uw-vblock"
        },
        ucblock: {
          autoblock: true,
          expiry: "1 day",
          nocreate: true,
          pageParam: true,
          reason: window.wgULS("屡次增加没有[[LIB:RS|可靠来源]]的资料", "屢次增加沒有[[LIB:RS|可靠來源]]的資料"),
          summary: window.wgULS("封禁通知：屡次增加没有[[LIB:RS|可靠来源]]的资料", "封鎖通知：屢次增加沒有[[LIB:RS|可靠來源]]的資料"),
          templateName: "uw-block"
        },
        npblock: {
          autoblock: true,
          expiry: "1 day",
          nocreate: true,
          pageParam: true,
          reason: window.wgULS("在条目中增加无意义文字", "在條目中增加無意義文字"),
          summary: window.wgULS("封禁通知：在条目中增加无意义文字", "封鎖通知：在條目中增加無意義文字"),
          templateName: "uw-vblock"
        },
        "point-block": {
          autoblock: true,
          expiry: "1 day",
          nocreate: true,
          pageParam: true,
          reasonParam: true,
          reason: window.wgULS("持续打制度擦边球", "持續打制度擦邊球"),
          summary: window.wgULS("封禁通知：持续打制度擦边球", "封鎖通知：持續打制度擦邊球"),
          templateName: "uw-block"
        },
        "sock-contribs": {
          autoblock: true,
          expiry: "infinity",
          forRegisteredOnly: true,
          nocreate: true,
          reasonParam: true,
          reason: window.wgULS("确认为[[LIB:SOCK|傀儡]]或真人傀儡 - 根据用户贡献确定", "確認為[[LIB:SOCK|傀儡]]或真人傀儡 - 根據使用者貢獻確定"),
          summary: window.wgULS("封禁通知：确认为[[LIB:SOCK|傀儡]]或真人傀儡", "封鎖通知：確認為[[LIB:SOCK|傀儡]]或真人傀儡"),
          templateName: "uw-blockindef"
        },
        "sock-cu": {
          autoblock: true,
          expiry: "infinity",
          forRegisteredOnly: true,
          nocreate: true,
          reasonParam: true,
          reason: window.wgULS("确认为[[LIB:SOCK|傀儡]]或真人傀儡 - 用户查核确认", "確認為[[LIB:SOCK|傀儡]]或真人傀儡 - 使用者查核確認"),
          summary: window.wgULS("封禁通知：确认为[[LIB:SOCK|傀儡]]或真人傀儡", "封鎖通知：確認為[[LIB:SOCK|傀儡]]或真人傀儡"),
          templateName: "uw-blockindef"
        },
        "uw-ublock-attack": {
          autoblock: true,
          expiry: "infinity",
          forRegisteredOnly: true,
          nocreate: true,
          reason: "{{uw-ublock-attack}}<!-- ".concat(window.wgULS("攻击性用户名", "攻擊性使用者名稱"), " -->"),
          summary: window.wgULS("封禁通知：攻击性用户名", "封鎖通知：攻擊性使用者名稱")
        },
        // Begin partial block templates, accessed in Twinkle.block.blockGroupsPartial
        "uw-pblock": {
          autoblock: true,
          expiry: "1 day",
          nocreate: false,
          pageParam: false,
          reasonParam: true,
          summary: window.wgULS("封禁通知：您已被禁止编辑有兽档案馆的部分区域", "封鎖通知：您已被禁止編輯有獸檔案館的部分區域")
        },
        "uw-pblockindef": {
          autoblock: true,
          expiry: "infinity",
          nocreate: false,
          pageParam: false,
          reasonParam: true,
          summary: window.wgULS("封禁通知：您已被永久禁止编辑有兽档案馆的部分区域", "封鎖通知：您已被永久禁止編輯有獸檔案館的部分區域")
        }
      };
      Twinkle.block.transformBlockPresets = () => {
        var _iterator8 = _createForOfIteratorHelper(Twinkle.getPref("customBlockReasonList")), _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
            const item = _step8.value;
            const newKey = "".concat(item.value, "|").concat(item.label);
            Twinkle.block.blockPresetsInfo[newKey] = {
              autoblock: true,
              nocreate: true,
              ...Twinkle.block.blockPresetsInfo[item.value],
              reason: item.label,
              templateName: item.value
            };
            if (Twinkle.block.blockPresetsInfo[item.value] === void 0) {
              Twinkle.block.blockPresetsInfo[item.value] = {
                pageParam: true,
                reasonParam: true,
                custom: true
              };
            }
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
        for (var _i5 = 0, _Object$entries3 = Object.entries(Twinkle.block.blockPresetsInfo); _i5 < _Object$entries3.length; _i5++) {
          const [preset, settings] = _Object$entries3[_i5];
          settings.summary || (settings.summary = settings.reason);
          settings.sig = settings.sig === void 0 ? "yes" : settings.sig;
          settings.indefinite || (settings.indefinite = Morebits.string.isInfinity(settings.expiry));
          if (!Twinkle.block.isRegistered && settings.indefinite) {
            settings.expiry = "1 day";
          } else {
            settings.expiry || (settings.expiry = "1 day");
          }
          Twinkle.block.blockPresetsInfo[preset] = settings;
        }
      };
      Twinkle.block.blockGroups = [{
        label: window.wgULS("普通封禁", "普通封鎖"),
        list: [
          {
            label: window.wgULS("通用封禁（自定义理由）", "通用封鎖（自訂理由）"),
            value: "uw-block"
          },
          {
            label: window.wgULS("无限期封禁（自定义理由）", "無限期封鎖（自訂理由）"),
            value: "uw-blockindef"
          },
          {
            label: window.wgULS("禁止编辑讨论页", "禁止編輯討論頁"),
            value: "uw-blocknotalk",
            meta: true
          },
          {
            label: window.wgULS("违反回退不过三原则", "違反回退不過三原則"),
            value: "uw-3block"
          },
          {
            label: window.wgULS("散发广告或宣传", "散發廣告或宣傳"),
            value: "uw-adblock"
          },
          {
            label: window.wgULS("行为无礼或人身攻击", "行為無禮或人身攻擊"),
            value: "uw-attackblock"
          },
          {
            label: window.wgULS("多次加入侵犯著作权的内容", "多次加入侵犯著作權的內容"),
            value: "uw-copyrightblock"
          },
          {
            label: window.wgULS("无故删除内容", "無故刪除內容"),
            value: "uw-dblock"
          },
          {
            label: window.wgULS("骚扰用户", "騷擾使用者"),
            value: "uw-hblock"
          },
          {
            label: window.wgULS("破坏", "破壞"),
            value: "uw-vblock",
            selected: true
          },
          {
            label: window.wgULS("持续加入非法内容", "持續加入非法內容"),
            value: "uw-illegalblock"
          },
          {
            label: window.wgULS("滥用多个账号", "濫用多個賬號"),
            value: "uw-sockblock"
          },
          // other block reasons
          {
            label: window.wgULS("违反生者传记条例", "違反生者傳記條例"),
            value: "bioblock"
          },
          {
            label: window.wgULS("屡次增加没有可靠来源的资料", "屢次增加沒有可靠來源的資料"),
            value: "ucblock"
          },
          {
            label: window.wgULS("在条目中增加无意义文字", "在條目中增加無意義文字"),
            value: "npblock"
          },
          {
            label: window.wgULS("持续打制度擦边球", "持續打制度擦邊球"),
            value: "point-block"
          },
          {
            label: window.wgULS("确认为傀儡或真人傀儡（根据用户贡献确定）", "確認為傀儡或真人傀儡（根據使用者貢獻確定）"),
            value: "sock-contribs"
          },
          {
            label: window.wgULS("确认为傀儡或真人傀儡（用户查核确认）", "確認為傀儡或真人傀儡（使用者查核確認）"),
            value: "sock-cu"
          },
          {
            label: window.wgULS("机器人发生故障并必须紧急停止", "機器人發生故障並必須緊急停止"),
            value: "Bot block message"
          }
        ]
      }, {
        custom: true,
        label: window.wgULS("自定义封禁理由", "自訂封鎖理由")
      }, {
        label: window.wgULS("用户名封禁", "使用者名稱封鎖"),
        list: [{
          label: window.wgULS("违反用户名条例", "違反使用者名稱條例"),
          value: "uw-ublock"
        }, {
          label: window.wgULS("不合规的用户名", "不合規的使用者名稱"),
          value: "uw-ublock-illegal"
        }, {
          label: window.wgULS("宣传性用户名", "宣傳性使用者名稱"),
          value: "uw-ublock-spam"
        }, {
          label: window.wgULS("攻击性用户名", "攻擊性使用者名稱"),
          value: "uw-ublock-attack"
        }, {
          label: window.wgULS("混淆性或误导性用户名", "混淆性或誤導性使用者名稱"),
          value: "uw-ublock-suggestive"
        }]
      }, {
        label: "其他模板",
        list: [{
          label: "range block",
          value: "range block",
          forAnonOnly: true
        }, {
          label: "school block",
          value: "school block",
          forAnonOnly: true
        }, {
          label: "blocked proxy",
          value: "blocked proxy",
          forAnonOnly: true
        }, {
          label: window.wgULS("用户查核封禁（主用户）", "使用者查核封鎖（主使用者）"),
          value: "checkuserblock",
          forAnonOnly: true
        }, {
          label: window.wgULS("用户查核封禁（子用户）", "使用者查核封鎖（子使用者）"),
          value: "checkuserblock-account",
          forRegisteredOnly: true
        }]
      }];
      Twinkle.block.blockGroupsPartial = [{
        label: window.wgULS("常见部分封禁理由", "常見部分封鎖理由"),
        list: [{
          label: window.wgULS("通用部分封禁（自定义理由）", "通用部分封鎖（自訂理由）"),
          value: "uw-pblock",
          selected: true
        }, {
          label: window.wgULS("无限期部分封禁（自定义理由）", "無限期部分封鎖（自訂理由）"),
          value: "uw-pblockindef"
        }]
      }];
      Twinkle.block.callback.filtered_block_groups = (group, show_template) => {
        return $.map(group, (blockGroup) => {
          if (blockGroup.custom) {
            if (show_template) {
              let templates = Array.prototype.map.call(Twinkle.getPref("customBlockReasonList"), (item) => {
                if (Twinkle.block.blockPresetsInfo[item.value].custom) {
                  return item.value;
                }
              });
              templates = Morebits.array.uniq(templates);
              blockGroup.list = Array.prototype.map.call(templates, (template) => {
                return {
                  label: window.wgULS("自定义模板", "自訂模板"),
                  value: template
                };
              });
            } else {
              blockGroup.list = Array.prototype.map.call(Twinkle.getPref("customBlockReasonList"), (item) => {
                return {
                  label: item.label,
                  value: "".concat(item.value, "|").concat(item.label)
                };
              });
            }
          }
          const list = $.map(blockGroup.list, (blockPreset) => {
            if (!show_template && blockPreset.meta) {
              return;
            }
            switch (blockPreset.value) {
              case "range block":
                if (!Morebits.ip.isRange(relevantUserName)) {
                  return;
                }
                blockPreset.selected = !Morebits.ip.get64(relevantUserName);
                break;
              default:
                break;
            }
            const blockSettings = Twinkle.block.blockPresetsInfo[blockPreset.value];
            let registrationRestrict;
            if (blockSettings.forRegisteredOnly) {
              registrationRestrict = Twinkle.block.isRegistered;
            } else if (blockSettings.forAnonOnly) {
              registrationRestrict = !Twinkle.block.isRegistered;
            } else {
              registrationRestrict = true;
            }
            if (!(blockSettings.templateName && show_template) && registrationRestrict) {
              const templateName = blockSettings.templateName || blockPreset.value;
              return {
                label: (show_template ? "{{".concat(templateName, "}}: ") : "") + blockPreset.label,
                value: blockPreset.value,
                data: [{
                  name: "template-name",
                  value: templateName
                }],
                selected: !!blockPreset.selected,
                disabled: !!blockPreset.disabled
              };
            }
          });
          if (list.length) {
            return {
              label: blockGroup.label,
              list
            };
          }
        });
      };
      Twinkle.block.callback.change_preset = (e) => {
        const {
          form
        } = e.target;
        const key = form.preset.value;
        if (!key) {
          return;
        }
        Twinkle.block.callback.update_form(e, Twinkle.block.blockPresetsInfo[key]);
        if (form.template) {
          form.template.value = Twinkle.block.blockPresetsInfo[key].templateName || key;
          Twinkle.block.callback.change_template(e);
        }
      };
      Twinkle.block.callback.change_expiry = (e) => {
        const {
          expiry
        } = e.target.form;
        if (e.target.value === "custom") {
          Morebits.quickForm.setElementVisibility(expiry.parentNode, true);
        } else {
          Morebits.quickForm.setElementVisibility(expiry.parentNode, false);
          expiry.value = e.target.value;
        }
      };
      Twinkle.block.seeAlsos = [];
      Twinkle.block.callback.toggle_see_alsos = function() {
        const reason = this.form.reason.value.replace(new RegExp("(<!-- )(参见|參見)".concat(Twinkle.block.seeAlsos.join("、"), "( -->)")), "");
        Twinkle.block.seeAlsos = Twinkle.block.seeAlsos.filter((el) => {
          return el !== this.value;
        });
        if (this.checked) {
          Twinkle.block.seeAlsos[Twinkle.block.seeAlsos.length] = this.value;
        }
        const seeAlsoMessage = Twinkle.block.seeAlsos.join("、");
        if (Twinkle.block.seeAlsos.length) {
          this.form.reason.value = "".concat(reason, "<!-- ").concat(window.wgULS("参见", "參見")).concat(seeAlsoMessage, " -->");
        } else {
          this.form.reason.value = reason;
        }
      };
      Twinkle.block.callback.update_form = (e, data) => {
        const {
          form
        } = e.target;
        let {
          expiry
        } = data;
        if (!data.useInitialOptions) {
          if (Date.parse(expiry)) {
            expiry = new Date(expiry).toGMTString();
            form.expiry_preset.value = "custom";
          } else {
            form.expiry_preset.value = data.expiry || "custom";
          }
          form.expiry.value = expiry;
          if (form.expiry_preset.value === "custom") {
            Morebits.quickForm.setElementVisibility(form.expiry.parentNode, true);
          } else {
            Morebits.quickForm.setElementVisibility(form.expiry.parentNode, false);
          }
        }
        data.disabletalk = data.disabletalk === void 0 ? false : data.disabletalk;
        data.hardblock = data.hardblock === void 0 ? false : data.hardblock;
        if (Twinkle.block.userIsBot || /bot\b/i.test(relevantUserName)) {
          data.autoblock = false;
        }
        $(form).find("[name=field_block_options]").find(":checkbox").each((_i, el) => {
          if (data.useInitialOptions && data[el.name] === void 0) {
            return;
          }
          if (el.name === "closevip") {
            return;
          }
          const check = data[el.name] === "" || !!data[el.name];
          $(el).prop("checked", check);
        });
        if (data.prependReason && data.reason) {
          form.reason.value = "".concat(data.reason, "；").concat(form.reason.value);
        } else {
          form.reason.value = data.reason || "";
        }
        if (form.pagerestrictions) {
          const $pageSelect = $(form).find("[name=pagerestrictions]");
          const $namespaceSelect = $(form).find("[name=namespacerestrictions]");
          if (!data.useInitialOptions) {
            $pageSelect.val(null).trigger("change");
            $namespaceSelect.val(null).trigger("change");
          }
          if (data.restrictions) {
            if (data.restrictions.pages && !$pageSelect.val().length) {
              const pages = data.restrictions.pages.map((pr) => {
                return pr.title;
              });
              var _iterator9 = _createForOfIteratorHelper(pages), _step9;
              try {
                for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
                  const page = _step9.value;
                  if (!$pageSelect.find("option[value='".concat($.escapeSelector(page), "']")).length) {
                    const newOption = new Option(page, page, true, true);
                    $pageSelect.append(newOption);
                  }
                }
              } catch (err) {
                _iterator9.e(err);
              } finally {
                _iterator9.f();
              }
              $pageSelect.val([...$pageSelect.val(), ...(0, import_ext_gadget2.generateArray)(pages)]).trigger("change");
            }
            if (data.restrictions.namespaces) {
              $namespaceSelect.val([...$namespaceSelect.val(), ...(0, import_ext_gadget2.generateArray)(data.restrictions.namespaces)]).trigger("change");
            }
          }
        }
      };
      Twinkle.block.callback.change_template = (e) => {
        const {
          form
        } = e.target;
        const {
          value
        } = form.template;
        const settings = Twinkle.block.blockPresetsInfo[value];
        const blockBox = $(form).find("[name=actiontype][value=block]").is(":checked");
        const partialBox = $(form).find("[name=actiontype][value=partial]").is(":checked");
        const templateBox = $(form).find("[name=actiontype][value=template]").is(":checked");
        if (!blockBox) {
          if (settings.indefinite || settings.nonstandard) {
            if (Twinkle.block.prev_template_expiry === null) {
              Twinkle.block.prev_template_expiry = form.template_expiry.value || "";
            }
            form.template_expiry.parentNode.style.display = "none";
            form.template_expiry.value = "infinity";
          } else if (form.template_expiry.parentNode.style.display === "none") {
            if (Twinkle.block.prev_template_expiry !== null) {
              form.template_expiry.value = Twinkle.block.prev_template_expiry;
              Twinkle.block.prev_template_expiry = null;
            }
            form.template_expiry.parentNode.style.display = "block";
          }
          if (Twinkle.block.prev_template_expiry) {
            form.expiry.value = Twinkle.block.prev_template_expiry;
          }
          Morebits.quickForm.setElementVisibility(form.notalk.parentNode, !settings.nonstandard);
          Morebits.quickForm.setElementVisibility(form.noemail_template.parentNode, partialBox);
          Morebits.quickForm.setElementVisibility(form.nocreate_template.parentNode, partialBox);
        } else if (templateBox) {
          Morebits.quickForm.setElementVisibility(form.blank_duration.parentNode, !settings.indefinite && !settings.nonstandard);
        }
        Morebits.quickForm.setElementVisibility(form.article.parentNode, settings && !!settings.pageParam);
        Morebits.quickForm.setElementVisibility(form.block_reason.parentNode, settings && !!settings.reasonParam);
        if (settings.reasonParam) {
          form.block_reason.value = Twinkle.block.blockPresetsInfo[form.preset.value].reason || "";
        } else {
          form.block_reason.value = "";
        }
        Morebits.quickForm.setElementVisibility(form.area.parentNode, partialBox && !blockBox);
        form.root.previewer.closePreview();
      };
      Twinkle.block.prev_template_expiry = null;
      Twinkle.block.callback.preview = (form) => {
        const params = {
          article: form.article.value,
          blank_duration: form.blank_duration ? form.blank_duration.checked : false,
          disabletalk: form.disabletalk.checked || (form.notalk ? form.notalk.checked : false),
          expiry: form.template_expiry ? form.template_expiry.value : form.expiry.value,
          hardblock: Twinkle.block.isRegistered ? form.autoblock.checked : form.hardblock.checked,
          indefinite: Morebits.string.isInfinity(form.template_expiry ? form.template_expiry.value : form.expiry.value),
          reason: form.block_reason.value,
          template: form.template.value,
          partial: $(form).find("[name=actiontype][value=partial]").is(":checked"),
          pagerestrictions: $(form.pagerestrictions).val() || [],
          namespacerestrictions: $(form.namespacerestrictions).val() || [],
          noemail: form.noemail.checked || (form.noemail_template ? form.noemail_template.checked : false),
          nocreate: form.nocreate.checked || (form.nocreate_template ? form.nocreate_template.checked : false),
          area: form.area.value
        };
        const templateText = Twinkle.block.callback.getBlockNoticeWikitext(params);
        form.previewer.beginRender(templateText, "User_talk:".concat(relevantUserName, "/Wikitext"));
      };
      Twinkle.block.callback.evaluate = (e) => {
        var _templateoptions;
        const params = Morebits.quickForm.getInputData(e.target);
        const $form = $(e.target);
        const toBlock = $form.find("[name=actiontype][value=block]").is(":checked");
        const toWarn = $form.find("[name=actiontype][value=template]").is(":checked");
        const toPartial = $form.find("[name=actiontype][value=partial]").is(":checked");
        const toTag = $form.find("[name=actiontype][value=tag]").is(":checked");
        const toProtect = $form.find("[name=actiontype][value=protect]").is(":checked");
        const toUnblock = $form.find("[name=actiontype][value=unblock]").is(":checked");
        let blockoptions = {};
        let templateoptions = {};
        let unblockoptions = {};
        Twinkle.block.callback.saveFieldset($form.find("[name=field_block_options]"));
        Twinkle.block.callback.saveFieldset($form.find("[name=field_template_options]"));
        Twinkle.block.callback.saveFieldset($form.find("[name=field_tag_options]"));
        Twinkle.block.callback.saveFieldset($form.find("[name=field_unblock_options]"));
        blockoptions = Twinkle.block.field_block_options;
        unblockoptions = Twinkle.block.field_unblock_options;
        const toClosevip = !!blockoptions.closevip;
        templateoptions = Twinkle.block.field_template_options;
        templateoptions.disabletalk = !!(templateoptions.disabletalk || blockoptions.disabletalk);
        templateoptions.hardblock = !!blockoptions.hardblock;
        delete blockoptions.expiry_preset;
        delete blockoptions.closevip;
        if (toPartial) {
          blockoptions.partial = true;
          templateoptions.partial = true;
        }
        templateoptions.pagerestrictions = $form.find("[name=pagerestrictions]").val() || [];
        templateoptions.namespacerestrictions = $form.find("[name=namespacerestrictions]").val() || [];
        blockoptions.pagerestrictions = templateoptions.pagerestrictions.join("|");
        blockoptions.namespacerestrictions = templateoptions.namespacerestrictions.join("|");
        (_templateoptions = templateoptions).summary || (_templateoptions.summary = blockoptions.reason);
        templateoptions.expiry = templateoptions.template_expiry || blockoptions.expiry;
        templateoptions.preset = toBlock ? params.preset : null;
        const checkIncompatible = (conflicts, extra) => {
          const count = conflicts.reduce((sum, tag) => {
            return sum += params.tag.includes(tag);
          }, 0);
          if (count > 1) {
            let message = "".concat(window.wgULS("请在以下标签中择一使用", "請在以下標籤中擇一使用"), "：{{").concat(conflicts.join("}}、{{"), "}}。");
            message += extra || "";
            void mw.notify(message, {
              type: "warn",
              tag: "twinkleblock"
            });
            return true;
          }
        };
        if (toTag) {
          if (params.tag.length === 0) {
            void mw.notify(window.wgULS("请至少选择一个用户页标记！", "請至少選擇一個使用者頁面標記！"), {
              type: "warn",
              tag: "twinkleblock"
            });
            return;
          }
          if (checkIncompatible(["Blocked user", "Sockpuppet"], window.wgULS("{{Sockpuppet}}已涵盖{{Blocked user}}的功能。", "{{Sockpuppet}}已涵蓋{{Blocked user}}的功能。"))) {
            return;
          }
          if (checkIncompatible(["Blocked user", "Sockpuppeteer"], window.wgULS("{{Sockpuppeteer}}已涵盖{{Blocked user}}的功能。", "{{Sockpuppeteer}}已涵蓋{{Blocked user}}的功能。"))) {
            return;
          }
          if (checkIncompatible(["Sockpuppet", "Sockpuppeteer"], window.wgULS("请从主账号和分身账号中选择一个。", "請從主賬號和分身賬號中選擇一個。"))) {
            return;
          }
          if (params.tag.includes("Sockpuppet") && params.sppUsername.trim() === "") {
            void mw.notify(window.wgULS("请提供傀儡账号的主账号用户名！", "請提供傀儡賬號的主賬號使用者名稱！"), {
              type: "warn",
              tag: "twinkleblock"
            });
            return;
          }
        }
        if (toBlock) {
          if (blockoptions.partial) {
            if (blockoptions.disabletalk && !blockoptions.namespacerestrictions.includes("3")) {
              void mw.notify(window.wgULS("部分封禁无法阻止编辑自己的讨论页，除非也封禁了User talk命名空间！", "部分封鎖無法阻止編輯自己的討論頁，除非也封鎖了User talk命名空間！"), {
                type: "warn",
                tag: "twinkleblock"
              });
              return;
            }
            if (!blockoptions.namespacerestrictions && !blockoptions.pagerestrictions) {
              if (!blockoptions.noemail && !blockoptions.nocreate) {
                void mw.notify(window.wgULS("没有选择页面或命名空间，也没有停用电子邮件或禁止创建账号；请选择至少一个选项以应用部分封禁！", "沒有選擇頁面或命名空間，也沒有停用電子郵件或禁止建立賬號；請選擇至少一個選項以應用部分封鎖！"), {
                  type: "warn",
                  tag: "twinkleblock"
                });
                return;
              } else if (!confirm(window.wgULS("您将要进行封禁，但没有阻止任何页面或命名空间的编辑，确定要继续？", "您將要進行封鎖，但沒有阻止任何頁面或命名空間的編輯，確定要繼續？"))) {
                return;
              }
            }
          }
          if (!blockoptions.expiry) {
            void mw.notify(window.wgULS("请提供过期时间！", "請提供過期時間！"), {
              type: "warn",
              tag: "twinkleblock"
            });
            return;
          } else if (Morebits.string.isInfinity(blockoptions.expiry) && !Twinkle.block.isRegistered) {
            void mw.notify(window.wgULS("禁止无限期封禁IP地址！", "禁止無限期封鎖IP位址！"), {
              type: "warn",
              tag: "twinkleblock"
            });
            return;
          }
          if (!blockoptions.reason) {
            void mw.notify(window.wgULS("请提供封禁理由！", "請提供封鎖理由！"), {
              type: "warn",
              tag: "twinkleblock"
            });
            return;
          }
          Morebits.simpleWindow.setButtonsEnabled(false);
          Morebits.status.init(e.target);
          const statusElement = new Morebits.status(window.wgULS("执行封禁", "執行封鎖"));
          blockoptions.action = "block";
          blockoptions.user = relevantUserName;
          blockoptions.anononly = blockoptions.hardblock ? void 0 : true;
          blockoptions.allowusertalk = blockoptions.disabletalk ? void 0 : true;
          const query = {
            format: "json",
            action: "query",
            list: "blocks|logevents",
            letype: "block",
            lelimit: 1,
            letitle: "User:".concat(blockoptions.user)
          };
          if (mw.util.isIPAddress(blockoptions.user, true)) {
            query.bkip = blockoptions.user;
          } else {
            query.bkusers = blockoptions.user;
            query.list += "|users";
            query.usprop = "groups";
            query.ususers = blockoptions.user;
            query.meta = "tokens";
            query.type = "userrights";
          }
          void api.get(query).then((data) => {
            let [block] = data.query.blocks;
            if (data.query.blocks.length > 1 && block.user !== relevantUserName) {
              [, block] = data.query.blocks;
            }
            const [logevents] = data.query.logevents;
            const user = data.query.users ? data.query.users[0] : null;
            const logid = data.query.logevents.length ? logevents.logid : false;
            if (logid !== Twinkle.block.blockLogId || !!block !== !!Twinkle.block.currentBlockInfo) {
              let message = blockoptions.user + window.wgULS("的封禁状态已被修改。", "的封鎖狀態已被修改。");
              if (block) {
                message += window.wgULS("新状态：", "新狀態：");
              } else {
                message += window.wgULS("最新日志：", "最新日誌：");
              }
              let logExpiry = "";
              if (logevents.params.duration) {
                if (logevents.params.duration === "infinity") {
                  logExpiry = window.wgULS("无限期", "無限期");
                } else {
                  const expiryDate = new Morebits.date(logevents.params.expiry);
                  logExpiry += (expiryDate.isBefore(/* @__PURE__ */ new Date()) ? window.wgULS("过期于", "過期於") : "直到") + expiryDate.calendar();
                }
              } else {
                logExpiry = "於".concat(new Morebits.date(logevents.timestamp).calendar());
              }
              message += "由".concat(logevents.user).concat(window.wgULS("以“", "以「")).concat(logevents.comment).concat(window.wgULS("”", "」")).concat(blockActionText[logevents.action]).concat(logExpiry).concat(window.wgULS("，你想要以你的设置更改封禁吗？", "，你想要以你的設定變更封鎖嗎？"));
              if (!confirm(message)) {
                Morebits.status.info(window.wgULS("执行封禁", "執行封鎖"), window.wgULS("用户取消操作", "使用者取消操作"));
                return;
              }
              blockoptions.reblock = 1;
            }
            const groupsCanBeRemoved = ["autopatrolled", "confirmed", "rnrsverify-exempt", "massmessage-sender", "patroller", "templateeditor", "importer"];
            let groupsToBeRemoved = [];
            if (user && Morebits.string.isInfinity(blockoptions.expiry)) {
              groupsToBeRemoved = user.groups.filter((group) => {
                return groupsCanBeRemoved.includes(group);
              });
            }
            blockoptions.tags = Twinkle.changeTags;
            blockoptions.token = mw.user.tokens.get("csrfToken");
            const mbApi = new Morebits.wiki.api(window.wgULS("执行封禁", "執行封鎖"), blockoptions, () => {
              statusElement.info("完成");
              if (toWarn) {
                Twinkle.block.callback.issue_template(templateoptions);
              }
              if (toClosevip) {
                const vipPage = new Morebits.wiki.page("LIB_talk:报告当前破坏", window.wgULS("关闭请求", "關閉請求"));
                vipPage.setFollowRedirect(true);
                vipPage.setCallbackParameters(blockoptions);
                vipPage.load(Twinkle.block.callback.closeRequest);
              }
              if (groupsToBeRemoved.length > 0) {
                const rightStatusElement = new Morebits.status(window.wgULS("移除权限", "移除權限"));
                if (confirm(window.wgULS("该用户有以下权限：", "該使用者有以下權限：") + groupsToBeRemoved.join("、") + window.wgULS("，您是否想要同时移除这些权限？", "，您是否想要同時移除這些權限？"))) {
                  const revokeOptions = {
                    action: "userrights",
                    user: blockoptions.user,
                    remove: groupsToBeRemoved.join("|"),
                    reason: window.wgULS("用户已被无限期封禁", "使用者已被無限期封鎖"),
                    token: data.query.tokens.userrightstoken,
                    tags: Twinkle.changeTags
                  };
                  const mrApi = new Morebits.wiki.api(window.wgULS("移除权限", "移除權限"), revokeOptions, () => {
                    rightStatusElement.info("已移除".concat(groupsToBeRemoved.join("、")));
                  });
                  mrApi.post();
                } else {
                  rightStatusElement.error(window.wgULS("用户取消操作。", "使用者取消操作。"));
                }
              }
            });
            mbApi.post();
          });
        } else if (toWarn) {
          Morebits.simpleWindow.setButtonsEnabled(false);
          Morebits.status.init(e.target);
          Twinkle.block.callback.issue_template(templateoptions);
        }
        if (toTag || toProtect) {
          Morebits.simpleWindow.setButtonsEnabled(false);
          Morebits.status.init(e.target);
          const userPage = "User:".concat(mw.config.get("wgRelevantUserName"));
          const ysarchives_page = new Morebits.wiki.page(userPage, window.wgULS("标记或保护用户页", "標記或保護使用者頁面"));
          ysarchives_page.setCallbackParameters(params);
          ysarchives_page.load(Twinkle.block.callback.taguserpage);
        }
        if (toUnblock) {
          if (!unblockoptions.reason) {
            void mw.notify(window.wgULS("请提供解除封禁理由！", "請提供解除封鎖理由！"), {
              type: "warn",
              tag: "twinkleblock"
            });
            return;
          }
          Morebits.simpleWindow.setButtonsEnabled(false);
          Morebits.status.init(e.target);
          const unblockStatusElement = new Morebits.status(window.wgULS("执行解除封禁", "執行解除封鎖"));
          unblockoptions.action = "unblock";
          unblockoptions.user = mw.config.get("wgRelevantUserName");
          unblockoptions.tags = Twinkle.changeTags;
          unblockoptions.token = mw.user.tokens.get("csrfToken");
          const unblockMbApi = new Morebits.wiki.api(window.wgULS("执行解除封禁", "執行解除封鎖"), unblockoptions, () => {
            unblockStatusElement.info("完成");
          });
          unblockMbApi.post();
        }
        if (!toBlock && !toWarn && !toTag && !toProtect && !toUnblock) {
          void mw.notify(window.wgULS("请给Twinkle点事做！", "請給Twinkle點事做！"), {
            type: "warn",
            tag: "twinkleblock"
          });
        }
      };
      Twinkle.block.callback.taguserpage = (pageobj) => {
        const params = pageobj.getCallbackParameters();
        const statelem = pageobj.getStatusElement();
        if (params.actiontype.includes("tag")) {
          const tags = [];
          var _iterator10 = _createForOfIteratorHelper(params.tag), _step10;
          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
              const tag = _step10.value;
              let tagtext = "{{".concat(tag);
              switch (tag) {
                case "Blocked user":
                  break;
                case "Sockpuppet":
                  tagtext += "\n| 1 = ".concat(params.sppUsername.trim());
                  tagtext += "\n| 2 = ".concat(params.sppType.trim());
                  if (params.sppEvidence.trim()) {
                    tagtext += "\n| evidence = ".concat(params.sppEvidence.trim());
                  }
                  tagtext += "\n| locked = no";
                  tagtext += "\n| notblocked = no";
                  tagtext += "\n";
                  break;
                case "Sockpuppeteer":
                  tagtext += "\n| 1 = blocked";
                  tagtext += "\n| checked = ".concat(params.spmChecked ? "yes" : "");
                  if (params.spmEvidence.trim()) {
                    tagtext += "\n| evidence = ".concat(params.spmEvidence.trim());
                  }
                  tagtext += "\n";
                  break;
                default:
                  void mw.notify(window.wgULS("未知的用户页模板！", "未知的使用者頁面模板！"), {
                    type: "warn",
                    tag: "twinkleblock"
                  });
                  continue;
              }
              tagtext += "}}";
              tags[tags.length] = tagtext;
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
          const text = tags.join("\n");
          pageobj.setPageText(text);
          pageobj.setEditSummary(window.wgULS("标记被永久封禁的用户页", "標記被永久封鎖的使用者頁面"));
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.save(() => {
            Morebits.status.info(window.wgULS("标记用户页", "標記使用者頁面"), "完成");
            statelem.status(window.wgULS("正在保护页面", "正在保護頁面"));
            pageobj.load(Twinkle.block.callback.protectuserpage);
          });
        } else {
          Twinkle.block.callback.protectuserpage(pageobj);
        }
      };
      Twinkle.block.callback.protectuserpage = (pageobj) => {
        const params = pageobj.getCallbackParameters();
        const statelem = pageobj.getStatusElement();
        if (params.actiontype.includes("protect")) {
          if (pageobj.exists()) {
            pageobj.setEditProtection("sysop", "indefinite");
            pageobj.setMoveProtection("sysop", "indefinite");
          } else {
            pageobj.setCreateProtection("sysop", "indefinite");
          }
          pageobj.setEditSummary(window.wgULS("被永久封禁的用户页", "被永久封鎖的使用者頁面"));
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.protect(() => {
            Morebits.status.info(window.wgULS("保护用户页", "保護使用者頁面"), pageobj.exists() ? window.wgULS("已全保护", "已全保護") : window.wgULS("已白纸保护", "已白紙保護"));
            statelem.info("全部完成");
          });
        } else {
          statelem.info("全部完成");
        }
      };
      Twinkle.block.callback.issue_template = (formData) => {
        const userTalkPage = "User_talk:".concat(mw.config.get("wgRelevantUserName"));
        const params = {
          ...formData,
          messageData: Twinkle.block.blockPresetsInfo[formData.template],
          usertalk_summary: Twinkle.block.blockPresetsInfo[formData.preset || formData.template].summary,
          reason: Twinkle.block.field_template_options.block_reason,
          disabletalk: Twinkle.block.field_template_options.notalk,
          noemail: Twinkle.block.field_template_options.noemail_template,
          nocreate: Twinkle.block.field_template_options.nocreate_template
        };
        Morebits.wiki.actionCompleted.redirect = userTalkPage;
        Morebits.wiki.actionCompleted.notice = window.wgULS("完成，将在几秒后加载用户讨论页", "完成，將在幾秒後載入使用者討論頁");
        const ysarchives_page = new Morebits.wiki.page(userTalkPage, window.wgULS("用户讨论页修改", "使用者討論頁修改"));
        ysarchives_page.setCallbackParameters(params);
        ysarchives_page.load(Twinkle.block.callback.main);
      };
      Twinkle.block.callback.closeRequest = (vipPage) => {
        const params = vipPage.getCallbackParameters();
        let text = vipPage.getPageText();
        const statusElement = vipPage.getStatusElement();
        const userName = mw.config.get("wgRelevantUserName");
        const expiryText = Morebits.string.formatTime(params.expiry);
        const comment = "{{Blocked|".concat(Morebits.string.isInfinity(params.expiry) ? "indef" : expiryText, "}}。");
        const requestList = text.split(/(?=\n===.+===\s*\n)/);
        let found = false;
        let hidename = false;
        const vipRe = new RegExp("{{\\s*[Vv]andal\\s*\\|\\s*(1\\s*=\\s*)?".concat(Morebits.pageNameRegex(userName), "\\s*(\\|\\s*hidename\\s*=[^|]+)?}}"), "m");
        var _iterator11 = _createForOfIteratorHelper(requestList), _step11;
        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
            let request = _step11.value;
            if (vipRe.exec(request)) {
              hidename = /\|\s*hidename\s*=[^|]+/.test(request);
              request = request.trimEnd();
              let newText = request.replace(/^(\*\s*处理：)[ \t]*(<!-- 非管理員僅可標記已執行的封禁，針對提報的意見請放在下一行 -->)?[ \t]*$/m, "$1".concat(comment, "--~~").concat("~~"));
              if (request === newText) {
                newText = "".concat(request, "\n* 处理：").concat(comment, "--~~").concat("~~");
              }
              request = "".concat(newText, "\n");
              found = true;
              break;
            }
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
        if (!found) {
          statusElement.warn(window.wgULS("没有找到相关的请求", "沒有找到相關的請求"));
          return;
        }
        text = requestList.join("");
        let summary;
        if (hidename) {
          summary = window.wgULS("标记为已处理", "標記為已處理");
        } else {
          summary = "/* ".concat(userName, " */ ");
          if (Morebits.string.isInfinity(params.expiry)) {
            summary += window.wgULS("不限期封禁", "不限期封鎖");
          } else {
            summary += window.wgULS("封禁", "封鎖") + expiryText;
          }
        }
        vipPage.setEditSummary(summary);
        vipPage.setChangeTags(Twinkle.changeTags);
        vipPage.setPageText(text);
        vipPage.save();
      };
      Twinkle.block.callback.getBlockNoticeWikitext = (params) => {
        let text = "{{";
        const settings = Twinkle.block.blockPresetsInfo[params.template];
        if (settings.nonstandard) {
          text += params.template;
        } else {
          text += "subst:".concat(params.template);
          if (params.article && settings.pageParam) {
            text += "|page=".concat(params.article);
          }
          if (!/te?mp|^\s*$|min/.exec(params.expiry)) {
            if (params.indefinite) {
              text += "|indef=yes";
            } else if (!params.blank_duration) {
              text += "|time=".concat(Morebits.string.formatTime(params.expiry));
            }
          }
          if (!Twinkle.block.isRegistered && !params.hardblock) {
            text += "|anon=yes";
          }
          if (params.reason) {
            text += "|reason=".concat(params.reason);
          }
          if (params.disabletalk) {
            text += "|notalk=yes";
          }
          if (params.partial) {
            if (params.pagerestrictions.length || params.namespacerestrictions.length) {
              const makeSentence = (array) => {
                if (array.length < 3) {
                  return array.join("和");
                }
                const last = array.pop();
                return "".concat(array.join("、"), "和").concat(last);
              };
              text += "|area=某些";
              if (params.pagerestrictions.length) {
                text += "頁面（".concat(makeSentence(params.pagerestrictions.map((p) => {
                  return "[[:".concat(p, "]]");
                })));
                text += params.namespacerestrictions.length ? "）和某些" : "）";
              }
              if (params.namespacerestrictions.length) {
                const namespaceNames = params.namespacerestrictions.map((id) => {
                  return menuFormattedNamespaces[id];
                });
                text += "".concat(window.wgULS("[[Help:命名空间|命名空间]]（", "[[Help:命名空間|命名空間]]（") + makeSentence(namespaceNames), "）");
              }
            } else if (params.area) {
              text += "|area=".concat(params.area);
            } else {
              if (params.noemail) {
                text += "|email=yes";
              }
              if (params.nocreate) {
                text += "|accountcreate=yes";
              }
            }
          }
        }
        if (settings.sig) {
          text += "|sig=".concat(settings.sig);
        }
        return "".concat(text, "}}");
      };
      Twinkle.block.callback.main = (pageobj) => {
        const params = pageobj.getCallbackParameters();
        const date = new Morebits.date(pageobj.getLoadTime());
        const {
          messageData
        } = params;
        let text;
        params.indefinite = Morebits.string.isInfinity(params.expiry);
        if (Twinkle.getPref("blankTalkpageOnIndefBlock") && params.template !== "uw-lblock" && params.indefinite) {
          Morebits.status.info(window.wgULS("信息", "資訊"), window.wgULS("根据参数设置清空讨论页并为日期创建新2级标题", "根據偏好設定清空討論頁並為日期建立新2級標題"));
          text = "".concat(date.monthHeader(), "\n");
        } else {
          text = pageobj.getPageText();
          const dateHeaderRegex = date.monthHeaderRegex();
          let dateHeaderRegexLast;
          let dateHeaderRegexResult;
          while ((dateHeaderRegexLast = dateHeaderRegex.exec(text)) !== null) {
            dateHeaderRegexResult = dateHeaderRegexLast;
          }
          const lastHeaderIndex = text.lastIndexOf("\n==") + 1;
          if (text.length > 0) {
            text += "\n\n";
          }
          if (!dateHeaderRegexResult || dateHeaderRegexResult.index !== lastHeaderIndex) {
            Morebits.status.info(window.wgULS("信息", "資訊"), window.wgULS("未找到当月的二级标题，将创建新的", "未找到當月的二級標題，將建立新的"));
            text += "".concat(date.monthHeader(), "\n");
          }
        }
        params.expiry = params.template_expiry === void 0 ? params.expiry : params.template_expiry;
        text += Twinkle.block.callback.getBlockNoticeWikitext(params);
        let summary = params.usertalk_summary;
        if (messageData.suppressArticleInSummary !== true && params.article) {
          summary += "".concat(window.wgULS("，于", "，於"), "[[:").concat(params.article, "]]");
        }
        pageobj.setPageText(text);
        pageobj.setEditSummary(summary);
        pageobj.setChangeTags(Twinkle.changeTags);
        pageobj.setWatchlist(Twinkle.getPref("watchBlockNotices"));
        pageobj.save();
      };
      Twinkle.addInitCallback(Twinkle.block, "block");
    })(jQuery);
  }
});
//! src/Twinkle/modules/friendlytalkback.js
var friendlytalkback_exports = {};
var init_friendlytalkback = __esm({
  "src/Twinkle/modules/friendlytalkback.js"() {
    "use strict";
    /*! Twinkle.js - friendlytalkback.js */
    (function friendlytalkback($) {
      const $body = $("body");
      Twinkle.talkback = () => {
        if (!mw.config.get("wgRelevantUserName")) {
          return;
        }
        Twinkle.addPortletLink(Twinkle.talkback.callback, "通告", "friendly-talkback", window.wgULS("回复通告", "回覆通告"));
      };
      Twinkle.talkback.callback = () => {
        if (mw.config.get("wgRelevantUserName") === mw.config.get("wgUserName") && !confirm(window.wgULS("您寂寞到了要自己回复自己的程度么？", "您寂寞到了要自己回覆自己的程度麼？"))) {
          return;
        }
        const Window = new Morebits.simpleWindow(600, 350);
        Window.setTitle(window.wgULS("回复通告", "回覆通告"));
        Window.setScriptName("Twinkle");
        Window.addFooterLink(window.wgULS("关于{{talkback}}", "關於{{talkback}}"), "Template:Talkback");
        Window.addFooterLink(window.wgULS("通告设置", "通告設定"), "H:TW/PREF#talkback");
        Window.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW/DOC#talkback");
        const form = new Morebits.quickForm(Twinkle.talkback.evaluate);
        form.append({
          type: "radio",
          name: "tbtarget",
          list: [{
            label: window.wgULS("回复：我的讨论页", "回覆：我的討論頁"),
            value: "mytalk",
            checked: "true"
          }, {
            label: window.wgULS("回复：其他用户的讨论页", "回覆：其他使用者的討論頁"),
            value: "usertalk"
          }, {
            label: window.wgULS("回复：其它页面", "回覆：其它頁面"),
            value: "other"
          }, {
            label: window.wgULS("邀请讨论", "邀請討論"),
            value: "see"
          }, {
            label: "通告板通知",
            value: "notice"
          }, {
            label: window.wgULS("“有新邮件”", "「有新郵件」"),
            value: "mail"
          }],
          event: Twinkle.talkback.changeTarget
        });
        form.append({
          type: "field",
          label: "工作区",
          name: "work_area"
        });
        const previewlink = document.createElement("a");
        $(previewlink).on("click", () => {
          Twinkle.talkback.preview(result);
        });
        previewlink.style.cursor = "pointer";
        previewlink.textContent = window.wgULS("预览", "預覽");
        form.append({
          type: "div",
          id: "talkbackpreview",
          label: [previewlink]
        });
        form.append({
          type: "div",
          id: "friendlytalkback-previewbox",
          style: "display: none"
        });
        form.append({
          type: "submit"
        });
        const result = form.render();
        Window.setContent(result);
        Window.display();
        result.previewer = new Morebits.wiki.preview($(result).find("div#friendlytalkback-previewbox").last()[0]);
        const evt = document.createEvent("Event");
        evt.initEvent("change", true, true);
        result.tbtarget[0].dispatchEvent(evt);
        const query = {
          action: "query",
          prop: "extlinks",
          titles: "User talk:".concat(mw.config.get("wgRelevantUserName")),
          elquery: "userjs.invalid/noTalkback",
          ellimit: "1"
        };
        const ysarchives_api = new Morebits.wiki.api(window.wgULS("抓取退出通告信息", "抓取退出通告資訊"), query, Twinkle.talkback.callback.optoutStatus);
        ysarchives_api.post();
      };
      Twinkle.talkback.optout = "";
      Twinkle.talkback.callback.optoutStatus = (apiobj) => {
        const $el = $(apiobj.getXML()).find("el");
        if ($el.length) {
          Twinkle.talkback.optout = mw.config.get("wgRelevantUserName") + window.wgULS("不希望收到回复通告", "不希望收到回覆通告");
          const url = $el.text();
          const reason = mw.util.getParamValue("reason", url);
          Twinkle.talkback.optout += reason ? "：".concat(Morebits.string.appendPunctuation(reason)) : "。";
        }
        $body.find("#twinkle-talkback-optout-message").text(Twinkle.talkback.optout);
      };
      let prev_page = "";
      let prev_section = "";
      let prev_message = "";
      Twinkle.talkback.changeTarget = (e) => {
        const value = e.target.values;
        const root = e.target.form;
        const [old_area] = Morebits.quickForm.getElements(root, "work_area");
        if (root.section) {
          prev_section = root.section.value;
        }
        if (root.message) {
          prev_message = root.message.value;
        }
        if (root.page) {
          prev_page = root.page.value;
        }
        let work_area = new Morebits.quickForm.element({
          type: "field",
          label: window.wgULS("回复通告信息", "回覆通告資訊"),
          name: "work_area"
        });
        root.previewer.closePreview();
        switch (value) {
          case "usertalk":
            work_area.append({
              type: "div",
              label: "",
              style: "color: #f00",
              id: "twinkle-talkback-optout-message"
            });
            work_area.append({
              type: "input",
              name: "page",
              label: window.wgULS("用户（必填）", "使用者（必填）"),
              tooltip: window.wgULS("您留言页面的用户名，必填。", "您留言頁面的使用者名稱，必填。"),
              value: prev_page,
              required: true
            });
            work_area.append({
              type: "input",
              name: "section",
              label: window.wgULS("章节（可选）", "章節（可選）"),
              tooltip: window.wgULS("您留言的章节标题，留空则不会产生章节链接。", "您留言的章節標題，留空則不會產生章節連結。"),
              value: prev_section
            });
            break;
          case "notice": {
            const noticeboard = work_area.append({
              type: "select",
              name: "noticeboard",
              label: "通告板："
            });
            for (var _i6 = 0, _Object$entries4 = Object.entries(Twinkle.talkback.noticeboards); _i6 < _Object$entries4.length; _i6++) {
              const [nbname, data] = _Object$entries4[_i6];
              noticeboard.append({
                type: "option",
                label: data.label,
                value: nbname,
                selected: !!data.defaultSelected
              });
            }
            work_area.append({
              type: "input",
              name: "section",
              label: window.wgULS("章节（可选）", "章節（可選）"),
              tooltip: window.wgULS("章节标题，留空则不会产生章节链接。", "章節標題，留空則不會產生章節連結。"),
              value: prev_section
            });
            break;
          }
          case "other":
            work_area.append({
              type: "div",
              label: "",
              style: "color: #f00",
              id: "twinkle-talkback-optout-message"
            });
            work_area.append({
              type: "input",
              name: "page",
              label: window.wgULS("完整页面名", "完整頁面名"),
              tooltip: window.wgULS("您留下消息的完整页面名，例如“LIB_talk:首页”。", "您留下訊息的完整頁面名，例如「LIB_talk:首頁」。"),
              value: prev_page,
              required: true
            });
            work_area.append({
              type: "input",
              name: "section",
              label: window.wgULS("章节（可选）", "章節（可選）"),
              tooltip: window.wgULS("您留言的章节标题，留空则不会产生章节链接。", "您留言的章節標題，留空則不會產生章節連結。"),
              value: prev_section
            });
            break;
          case "mail":
            work_area.append({
              type: "input",
              name: "section",
              label: window.wgULS("电子邮件主题（可选）", "電子郵件主題（可選）"),
              tooltip: window.wgULS("您发出的电子邮件的主题。", "您發出的電子郵件的主題。")
            });
            break;
          case "see":
            work_area.append({
              type: "input",
              name: "page",
              label: window.wgULS("完整页面名", "完整頁面名"),
              tooltip: window.wgULS("您留下消息的完整页面名，例如“LIB_talk:首页”。", "您留下訊息的完整頁面名，例如「LIB_talk:首頁」。"),
              value: prev_page,
              required: true
            });
            work_area.append({
              type: "input",
              name: "section",
              label: window.wgULS("章节（可选）", "章節（可選）"),
              tooltip: window.wgULS("您留言的章节标题，留空则不会产生章节链接。", "您留言的章節標題，留空則不會產生章節連結。"),
              value: prev_section
            });
            break;
          /* case 'mytalk': */
          /* falls through */
          default:
            work_area.append({
              type: "div",
              label: "",
              style: "color: #f00",
              id: "twinkle-talkback-optout-message"
            });
            work_area.append({
              type: "input",
              name: "section",
              label: window.wgULS("章节（可选）", "章節（可選）"),
              tooltip: window.wgULS("您留言的章节标题，留空则不会产生章节链接。", "您留言的章節標題，留空則不會產生章節連結。"),
              value: prev_section
            });
            break;
        }
        if (value !== "notice") {
          work_area.append({
            type: "textarea",
            label: window.wgULS("附加信息（可选）：", "附加資訊（可選）："),
            name: "message",
            tooltip: window.wgULS("会在回复通告模板下出现的消息，您的签名会被加在最后。", "會在回覆通告模板下出現的訊息，您的簽名會被加在最後。")
          });
        }
        work_area = work_area.render();
        root.replaceChild(work_area, old_area);
        if (root.message) {
          root.message.value = prev_message;
        }
        $body.find("#twinkle-talkback-optout-message").text(Twinkle.talkback.optout);
      };
      Twinkle.talkback.noticeboards = {
        affp: {
          label: "LIB:AF/FP（".concat(window.wgULS("过滤器处理/报告", "過濾器處理/報告"), "）"),
          title: window.wgULS("过滤器错误报告有新回应", "過濾器錯誤報告有新回應"),
          content: "".concat(window.wgULS("您的[[LIB_talk:过滤器处理/报告|过滤器错误报告]]已有回应，请前往查看。", "您的[[LIB_talk:过滤器处理/报告|過濾器錯誤報告]]已有回應，請前往查看。"), "--~~").concat("~~"),
          editSummary: window.wgULS("有关[[LIB_talk:过滤器处理/报告|过滤器错误报告]]的通知", "有關[[LIB_talk:过滤器处理/报告|過濾器錯誤報告]]的通知"),
          defaultSelected: true
        },
        sbl: {
          label: "Spam-blacklist",
          title: window.wgULS("垃圾链接黑名单请求有新回应", "垃圾連結黑名單請求有新回應"),
          content: "".concat(window.wgULS("您的[[LIB_talk:管理员告示板|垃圾链接黑名单请求]]已有回应，请前往查看。", "您的[[LIB_talk:管理员告示板|垃圾連結黑名單請求]]已有回應，請前往查看。"), "--~~").concat("~~"),
          editSummary: window.wgULS("有关[[LIB_talk:管理员告示板|垃圾链接黑名单请求]]的通知", "有關[[LIB_talk:管理员告示板|垃圾連結黑名單請求]]的通知")
        },
        shl: {
          label: "Spam-whitelist",
          title: window.wgULS("垃圾链接白名单请求有新回应", "垃圾連結白名單請求有新回應"),
          content: "".concat(window.wgULS("您的[[LIB_talk:管理员告示板|垃圾链接白名单请求]]已有回应，请前往查看。", "您的[[LIB_talk:管理员告示板|垃圾連結白名單請求]]已有回應，請前往查看。"), "--~~").concat("~~"),
          editSummary: window.wgULS("有关[[LIB_talk:管理员告示板|垃圾链接白名单请求]]的通知", "有關[[LIB_talk:管理员告示板|垃圾連結白名單請求]]的通知")
        }
      };
      Twinkle.talkback.evaluate = (e) => {
        const form = e.target;
        const [tbtarget] = form.getChecked("tbtarget");
        let page;
        let message;
        const section = form.section.value;
        let editSummary;
        if (tbtarget === "notice") {
          page = form.noticeboard.value;
          ({
            editSummary
          } = Twinkle.talkback.noticeboards[page]);
        } else {
          page = form.page ? form.page.value : mw.config.get("wgUserName");
          if (form.message) {
            message = form.message.value.trim();
          }
          if (tbtarget === "mail") {
            editSummary = window.wgULS("通知：有新邮件", "通知：有新郵件");
          } else if (tbtarget === "see") {
            editSummary = "".concat(window.wgULS("请看看", "請看看"), "[[:").concat(page).concat(section ? "#".concat(section) : "", "]]").concat(window.wgULS("上的讨论", "上的討論"));
          } else {
            editSummary = "".concat(window.wgULS("回复通告", "回覆通告"), "（[[:");
            if (tbtarget !== "other" && !new RegExp("^\\s*".concat(Morebits.namespaceRegex(3), ":"), "i").test(page)) {
              editSummary += "User talk:";
            }
            editSummary += "".concat(page + (section ? "#".concat(section) : ""), "]])");
          }
        }
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(form);
        const fullUserTalkPageName = "".concat(mw.config.get("wgFormattedNamespaces")[mw.config.get("wgNamespaceIds").user_talk], ":").concat(mw.config.get("wgRelevantUserName"));
        Morebits.wiki.actionCompleted.redirect = fullUserTalkPageName;
        Morebits.wiki.actionCompleted.notice = window.wgULS("回复通告完成，将在几秒内刷新页面", "回覆通告完成，將在幾秒內重新整理頁面");
        const text = "\n\n".concat(Twinkle.talkback.getNoticeWikitext(tbtarget, page, section, message)[0]);
        const talkpage = new Morebits.wiki.page(fullUserTalkPageName, window.wgULS("加入回复通告", "加入回覆通告"));
        talkpage.setEditSummary(editSummary);
        talkpage.setChangeTags(Twinkle.changeTags);
        talkpage.setAppendText(text);
        talkpage.setCreateOption("recreate");
        talkpage.setMinorEdit(Twinkle.getPref("markTalkbackAsMinor"));
        talkpage.setFollowRedirect(true);
        talkpage.append();
      };
      Twinkle.talkback.preview = (form) => {
        const [tbtarget] = form.getChecked("tbtarget");
        const section = form.section.value;
        let page;
        let message;
        if (tbtarget === "notice") {
          page = form.noticeboard.value;
        } else {
          page = form.page ? form.page.value : mw.config.get("wgUserName");
          if (form.message) {
            message = form.message.value.trim();
          }
        }
        const [noticetext] = Twinkle.talkback.getNoticeWikitext(tbtarget, page, section, message);
        form.previewer.beginRender(noticetext, "User_talk:".concat(mw.config.get("wgRelevantUserName")));
      };
      Twinkle.talkback.getNoticeWikitext = (tbtarget, page, section, message) => {
        let text;
        let title;
        let content;
        if (tbtarget === "notice") {
          ({
            title
          } = Twinkle.talkback.noticeboards[page]);
          content = Morebits.string.safeReplace(Twinkle.talkback.noticeboards[page].content, "$SECTION", section);
          text = "== ".concat(title, " ==\n").concat(content);
        } else if (tbtarget === "see") {
          title = page + window.wgULS("的相关讨论", "的相關討論");
          content = "{{".concat("subst:", "Please see|location=".concat(page).concat(section ? "#".concat(section) : "", "|more=").concat(message.trim(), "}}"));
          text = "{{".concat("subst:", "Please see|location=".concat(page).concat(section ? "#".concat(section) : "", "|more=").concat(message.trim(), "}}"));
        } else {
          text = "==";
          if (tbtarget === "mail") {
            title = Twinkle.getPref("mailHeading");
            content = "{{You've got mail|subject=".concat(section, "|ts=~~").concat("~", "~~}}");
            text += "".concat(Twinkle.getPref("mailHeading"), "==\n{{You've got mail|subject=").concat(section);
          } else {
            title = Twinkle.getPref("talkbackHeading").replace(/^\s*=+\s*(.*?)\s*=+$\s*/, "$1");
            content = "{{talkback|".concat(page).concat(section ? "|".concat(section) : "");
            text += "".concat(Twinkle.getPref("talkbackHeading").replace(/^\s*=+\s*(.*?)\s*=+$\s*/, "$1"), "==\n{{talkback|").concat(page).concat(section ? "|".concat(section) : "");
          }
          content += "|ts=~~".concat("~", "~~}}");
          text += "|ts=~~".concat("~", "~~}}");
          if (message) {
            content += "\n".concat(message);
            text += "\n".concat(message, "  ~~").concat("~~");
          } else if (Twinkle.getPref("insertTalkbackSignature")) {
            text += "\n~~".concat("~~");
          }
        }
        return [text, title, content];
      };
      Twinkle.addInitCallback(Twinkle.talkback, "talkback");
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinklespeedy.js
var twinklespeedy_exports = {};
var import_ext_gadget3;
var init_twinklespeedy = __esm({
  "src/Twinkle/modules/twinklespeedy.js"() {
    "use strict";
    import_ext_gadget3 = require("ext.gadget.Util");
    /*! Twinkle.js - twinklespeedy.js */
    (function twinklespeedy($) {
      const $body = $("body");
      Twinkle.speedy = () => {
        if (mw.config.get("wgNamespaceNumber") < 0 || !mw.config.get("wgArticleId")) {
          return;
        }
        Twinkle.addPortletLink(Twinkle.speedy.callback, window.wgULS("速删", "速刪"), "tw-csd", Morebits.userIsSysop ? window.wgULS("快速删除", "快速刪除") : window.wgULS("请求快速删除", "請求快速刪除"));
      };
      Twinkle.speedy.callback = () => {
        Twinkle.speedy.initDialog(Morebits.userIsSysop ? Twinkle.speedy.callback.evaluateSysop : Twinkle.speedy.callback.evaluateUser, true);
      };
      Twinkle.speedy.dialog = null;
      Twinkle.speedy.hasCSD = !!document.querySelector("#delete-reason");
      Twinkle.speedy.mode = {
        sysopSingleSubmit: 1,
        // radio buttons, no subgroups, submit when "Submit" button is clicked
        sysopRadioClick: 2,
        // radio buttons, no subgroups, submit when a radio button is clicked
        sysopMultipleSubmit: 3,
        // check boxes, subgroups, "Submit" button already present
        sysopMultipleRadioClick: 4,
        // check boxes, subgroups, need to add a "Submit" button
        userMultipleSubmit: 5,
        // check boxes, subgroups, "Submit" button already pressent
        userMultipleRadioClick: 6,
        // check boxes, subgroups, need to add a "Submit" button
        userSingleSubmit: 7,
        // radio buttons, subgroups, submit when "Submit" button is clicked
        userSingleRadioClick: 8,
        // radio buttons, subgroups, submit when a radio button is clicked
        // are we in "delete page" mode?
        // (sysops can access both "delete page" [sysop] and "tag page only" [user] modes)
        isSysop: (mode) => {
          return mode === Twinkle.speedy.mode.sysopSingleSubmit || mode === Twinkle.speedy.mode.sysopMultipleSubmit || mode === Twinkle.speedy.mode.sysopRadioClick || mode === Twinkle.speedy.mode.sysopMultipleRadioClick;
        },
        // do we have a "Submit" button once the form is created?
        hasSubmitButton: (mode) => {
          return mode === Twinkle.speedy.mode.sysopSingleSubmit || mode === Twinkle.speedy.mode.sysopMultipleSubmit || mode === Twinkle.speedy.mode.sysopMultipleRadioClick || mode === Twinkle.speedy.mode.userMultipleSubmit || mode === Twinkle.speedy.mode.userMultipleRadioClick || mode === Twinkle.speedy.mode.userSingleSubmit;
        },
        // is db-multiple the outcome here?
        isMultiple: (mode) => {
          return mode === Twinkle.speedy.mode.userMultipleSubmit || mode === Twinkle.speedy.mode.sysopMultipleSubmit || mode === Twinkle.speedy.mode.userMultipleRadioClick || mode === Twinkle.speedy.mode.sysopMultipleRadioClick;
        }
      };
      Twinkle.speedy.initDialog = (callbackfunc) => {
        Twinkle.speedy.dialog = new Morebits.simpleWindow(Twinkle.getPref("speedyWindowWidth"), Twinkle.getPref("speedyWindowHeight"));
        const {
          dialog
        } = Twinkle.speedy;
        dialog.setTitle(window.wgULS("选择快速删除理由", "選擇快速刪除理由"));
        dialog.setScriptName("Twinkle");
        dialog.addFooterLink(window.wgULS("快速删除条例", "快速刪除條例"), "LIB:CSD");
        dialog.addFooterLink(window.wgULS("速删设置", "速刪設定"), "H:TW/PREF#speedy");
        dialog.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW/DOC#speedy");
        const form = new Morebits.quickForm(callbackfunc, Twinkle.getPref("speedySelectionStyle") === "radioClick" ? "change" : null);
        if (Morebits.userIsSysop) {
          form.append({
            type: "checkbox",
            list: [{
              label: window.wgULS("只标记，不删除", "只標記，不刪除"),
              value: "tag_only",
              name: "tag_only",
              tooltip: window.wgULS("若您只想标记此页面而不是将其删除", "若您只想標記此頁面而不是將其刪除"),
              checked: !(Twinkle.speedy.hasCSD || Twinkle.getPref("deleteSysopDefaultToDelete")),
              event: (event) => {
                const cForm = event.target.form;
                const cChecked = event.target.checked;
                if (cForm.talkpage) {
                  cForm.talkpage.disabled = cChecked;
                  cForm.talkpage.checked = !cChecked && Twinkle.getPref("deleteTalkPageOnDelete");
                }
                cForm.redirects.disabled = cChecked;
                cForm.redirects.checked = !cChecked;
                cForm.delmultiple.disabled = cChecked;
                cForm.delmultiple.checked = false;
                cForm.openusertalk.disabled = cChecked;
                cForm.openusertalk.checked = false;
                cForm.notify.disabled = !cChecked;
                cForm.notify.checked = cChecked;
                cForm.multiple.disabled = !cChecked;
                cForm.multiple.checked = false;
                cForm.salting.checked = false;
                Twinkle.speedy.callback.modeChanged(cForm);
                event.stopPropagation();
              }
            }]
          });
          const deleteOptions = form.append({
            type: "div",
            name: "delete_options"
          });
          deleteOptions.append({
            type: "header",
            label: window.wgULS("删除相关选项", "刪除相關選項")
          });
          if (mw.config.get("wgNamespaceNumber") % 2 === 0 && mw.config.get("wgNamespaceNumber") !== 2) {
            deleteOptions.append({
              type: "checkbox",
              list: [{
                label: window.wgULS("删除讨论页", "刪除討論頁"),
                value: "talkpage",
                name: "talkpage",
                tooltip: window.wgULS("删除时附带删除此页面的讨论页。", "刪除時附帶刪除此頁面的討論頁。"),
                checked: Twinkle.getPref("deleteTalkPageOnDelete"),
                event: (event) => {
                  event.stopPropagation();
                }
              }]
            });
          }
          deleteOptions.append({
            type: "checkbox",
            list: [{
              label: window.wgULS("删除重定向", "刪除重新導向"),
              value: "redirects",
              name: "redirects",
              tooltip: window.wgULS("删除到此页的重定向。", "刪除到此頁的重新導向。"),
              checked: Twinkle.getPref("deleteRedirectsOnDelete"),
              event: (event) => {
                event.stopPropagation();
              }
            }]
          });
          deleteOptions.append({
            type: "checkbox",
            list: [{
              label: window.wgULS("应用多个理由删除", "應用多個理由刪除"),
              value: "delmultiple",
              name: "delmultiple",
              tooltip: window.wgULS("您可选择应用于该页的多个理由。", "您可選擇應用於該頁的多個理由。"),
              event: (event) => {
                Twinkle.speedy.callback.modeChanged(event.target.form);
                event.stopPropagation();
              }
            }]
          });
          deleteOptions.append({
            type: "checkbox",
            list: [{
              label: window.wgULS("开启用户讨论页", "開啟使用者討論頁"),
              value: "openusertalk",
              name: "openusertalk",
              tooltip: window.wgULS("此项的默认值为您的开启讨论页设置。在您选择应用多条理由删除时此项将保持不变。", "此項的預設值為您的開啟討論頁設定。在您選擇應用多條理由刪除時此項將保持不變。"),
              checked: false
            }]
          });
        }
        const tagOptions = form.append({
          type: "div",
          name: "tag_options"
        });
        if (Morebits.userIsSysop) {
          tagOptions.append({
            type: "header",
            label: window.wgULS("标记相关选项", "標記相關選項")
          });
        }
        tagOptions.append({
          type: "checkbox",
          list: [{
            label: window.wgULS("如可能，通知创建者", "如可能，通知建立者"),
            value: "notify",
            name: "notify",
            tooltip: window.wgULS("一个通知模板将会被加入创建者的讨论页，若您启用了该理据的通知。", "一個通知模板將會被加入建立者的討論頁，若您啟用了該理據的通知。"),
            checked: !Morebits.userIsSysop || !(Twinkle.speedy.hasCSD || Twinkle.getPref("deleteSysopDefaultToDelete")),
            event: (event) => {
              event.stopPropagation();
            }
          }, {
            label: window.wgULS("清空页面", "清空頁面"),
            value: "blank",
            name: "blank",
            tooltip: window.wgULS("在标记模板前，先清空页面，适用于严重破坏或负面生者传记等。", "在標記模板前，先清空頁面，適用於嚴重破壞或負面生者傳記等。")
          }, {
            label: window.wgULS("同时标记以请求白纸保护", "同時標記以請求白紙保護"),
            value: "salting",
            name: "salting",
            tooltip: window.wgULS("选取后，快速删除模板后将附带 {{salt}} 标签，以请求执行删除的管理员进行白纸保护，仅在页面创建3次以上才选择此项。", "選取後，快速刪除模板後將附帶 {{salt}} 標籤，以請求執行刪除的管理員進行白紙保護，僅在頁面建立3次以上才選擇此項。")
          }, {
            label: window.wgULS("应用多个理由", "應用多個理由"),
            value: "multiple",
            name: "multiple",
            tooltip: window.wgULS("您可选择应用于该页的多个理由。", "您可選擇應用於該頁的多個理由。"),
            event: (event) => {
              Twinkle.speedy.callback.modeChanged(event.target.form);
              event.stopPropagation();
            }
          }]
        });
        form.append({
          type: "div",
          id: "prior-deletion-count"
        });
        form.append({
          type: "div",
          name: "work_area",
          label: window.wgULS("初始化CSD模块失败，请重试，或将这报告给Twinkle开发者。", "初始化CSD模組失敗，請重試，或將這報告給Twinkle開發者。")
        });
        if (Twinkle.getPref("speedySelectionStyle") !== "radioClick") {
          form.append({
            type: "submit",
            className: "tw-speedy-submit"
          });
        }
        const result = form.render();
        dialog.setContent(result);
        dialog.display();
        Twinkle.speedy.callback.modeChanged(result);
        Twinkle.speedy.callback.priorDeletionCount();
      };
      Twinkle.speedy.callback.getMode = (form) => {
        let mode = Twinkle.speedy.mode.userSingleSubmit;
        if (form.tag_only && !form.tag_only.checked) {
          if (form.delmultiple.checked) {
            mode = Twinkle.speedy.mode.sysopMultipleSubmit;
          } else {
            mode = Twinkle.speedy.mode.sysopSingleSubmit;
          }
        } else if (form.multiple.checked) {
          mode = Twinkle.speedy.mode.userMultipleSubmit;
        } else {
          mode = Twinkle.speedy.mode.userSingleSubmit;
        }
        if (Twinkle.getPref("speedySelectionStyle") === "radioClick") {
          mode++;
        }
        return mode;
      };
      Twinkle.speedy.callback.modeChanged = (form) => {
        const namespace = mw.config.get("wgNamespaceNumber");
        const mode = Twinkle.speedy.callback.getMode(form);
        const isSysopMode = Twinkle.speedy.mode.isSysop(mode);
        if (isSysopMode) {
          $body.find("[name=delete_options]").show();
          $body.find("[name=tag_options]").hide();
          $body.find("button.tw-speedy-submit").text(window.wgULS("删除页面", "刪除頁面"));
        } else {
          $body.find("[name=delete_options]").hide();
          $body.find("[name=tag_options]").show();
          $body.find("button.tw-speedy-submit").text(window.wgULS("标记页面", "標記頁面"));
        }
        const work_area = new Morebits.quickForm.element({
          type: "div",
          name: "work_area"
        });
        if (mode === Twinkle.speedy.mode.userMultipleRadioClick || mode === Twinkle.speedy.mode.sysopMultipleRadioClick) {
          const evaluateType = Twinkle.speedy.mode.isSysop(mode) ? "evaluateSysop" : "evaluateUser";
          work_area.append({
            type: "div",
            label: window.wgULS("当选择完成后，单击：", "當選擇完成後，點擊：")
          });
          work_area.append({
            type: "button",
            name: "submit-multiple",
            label: isSysopMode ? window.wgULS("删除页面", "刪除頁面") : window.wgULS("标记页面", "標記頁面"),
            event: (event) => {
              Twinkle.speedy.callback[evaluateType](event);
              event.stopPropagation();
            }
          });
        }
        const radioOrCheckbox = Twinkle.speedy.mode.isMultiple(mode) ? "checkbox" : "radio";
        if (isSysopMode) {
          work_area.append({
            type: "header",
            label: window.wgULS("自定义理由", "自訂理由")
          });
          work_area.append({
            type: radioOrCheckbox,
            name: "csd",
            list: Twinkle.speedy.generateCsdList(Twinkle.speedy.customRationale, mode)
          });
        }
        switch (namespace) {
          case 0:
            work_area.append({
              type: "header",
              label: window.wgULS("条目", "條目")
            });
            work_area.append({
              type: radioOrCheckbox,
              name: "csd",
              list: Twinkle.speedy.generateCsdList(Twinkle.speedy.articleList, mode)
            });
            break;
          case 2:
            work_area.append({
              type: "header",
              label: window.wgULS("用户页", "使用者頁面")
            });
            work_area.append({
              type: radioOrCheckbox,
              name: "csd",
              list: Twinkle.speedy.generateCsdList(Twinkle.speedy.userList, mode)
            });
            break;
          case 3:
            if (mw.util.isIPAddress(mw.config.get("wgRelevantUserName"))) {
              work_area.append({
                type: "header",
                label: window.wgULS("用户讨论页", "使用者討論頁")
              });
              work_area.append({
                type: radioOrCheckbox,
                name: "csd",
                list: Twinkle.speedy.generateCsdList(Twinkle.speedy.usertalkList, mode)
              });
            }
            break;
          case 6:
            work_area.append({
              type: "header",
              label: window.wgULS("文件", "檔案")
            });
            work_area.append({
              type: radioOrCheckbox,
              name: "csd",
              list: Twinkle.speedy.generateCsdList(Twinkle.speedy.fileList, mode)
            });
            if (!Twinkle.speedy.mode.isSysop(mode)) {
              work_area.append({
                type: "div",
                label: window.wgULS("标记CSD F1、F3、F5，请使用Twinkle的“图权”功能。", "標記CSD F1、F3、F5，請使用Twinkle的「圖權」功能。")
              });
            }
            break;
          case 14:
            work_area.append({
              type: "header",
              label: window.wgULS("分类", "分類")
            });
            work_area.append({
              type: radioOrCheckbox,
              name: "csd",
              list: Twinkle.speedy.generateCsdList(Twinkle.speedy.categoryList, mode)
            });
            break;
          case 302:
            work_area.append({
              type: "header",
              label: "草稿"
            });
            work_area.append({
              type: radioOrCheckbox,
              name: "csd",
              list: Twinkle.speedy.generateCsdList(Twinkle.speedy.draftList, mode)
            });
            break;
          case (namespace % 2 === 1 && namespace !== 3):
            work_area.append({
              type: "header",
              label: window.wgULS("讨论页", "討論頁")
            });
            work_area.append({
              type: radioOrCheckbox,
              name: "csd",
              list: Twinkle.speedy.generateCsdList(Twinkle.speedy.talkList, mode)
            });
            break;
          default:
            break;
        }
        let generalCriteria = Twinkle.speedy.generalList;
        if (!Twinkle.speedy.mode.isSysop(mode)) {
          generalCriteria = [...Twinkle.speedy.customRationale, ...(0, import_ext_gadget3.generateArray)(generalCriteria)];
        }
        work_area.append({
          type: "header",
          label: window.wgULS("常规", "常規")
        });
        work_area.append({
          type: radioOrCheckbox,
          name: "csd",
          list: Twinkle.speedy.generateCsdList(generalCriteria, mode)
        });
        if (!Twinkle.speedy.mode.isSysop(mode)) {
          work_area.append({
            type: "div",
            label: window.wgULS("提报侵权页面，请使用Twinkle的“侵权”功能。", "提報侵權頁面，請使用Twinkle的「侵權」功能。")
          });
        }
        if (mw.config.get("wgIsRedirect") || Morebits.userIsSysop) {
          work_area.append({
            type: "header",
            label: "重定向"
          });
          work_area.append({
            type: radioOrCheckbox,
            name: "csd",
            list: Twinkle.speedy.generateCsdList(Twinkle.speedy.redirectList, mode)
          });
        }
        const [old_area] = Morebits.quickForm.getElements(form, "work_area");
        form.replaceChild(work_area.render(), old_area);
        if (isSysopMode && Twinkle.speedy.hasCSD) {
          const [customOption] = $body.find("input[name=csd][value=reason]");
          if (customOption) {
            if (Twinkle.getPref("speedySelectionStyle") !== "radioClick") {
              customOption.click();
              customOption.parentNode.appendChild(customOption.subgroup);
            }
            customOption.subgroup.querySelector("input").value = decodeURIComponent($body.find("#delete-reason").text()).replace(/\+/g, " ");
          }
        }
        if (document.querySelector('input[value="g7"]') && Twinkle.getPref("enlargeG7Input")) {
          document.querySelector('input[value="g7"]').style = "height: 2em; width: 2em; height: -moz-initial; width: -moz-initial; -moz-transform: scale(2); -o-transform: scale(2);";
          document.querySelector('input[value="g7"]').labels[0].style = "font-size: 1.5em; line-height: 1.5em;";
        }
        if (!isSysopMode && mw.config.get("wgPageContentModel") !== "wikitext") {
          $body.find("[name=tag_options]").hide();
          $body.find("[name=work_area]").empty();
          const message = [window.wgULS("Twinkle不支持在页面内容模型为", "Twinkle不支援在頁面內容模型為"), mw.config.get("wgPageContentModel"), window.wgULS("的页面上挂上快速删除模板，请参见", "的頁面上掛上快速刪除模板，請參見"), $("<a>").attr({
            target: "_blank",
            rel: "noopener noreferrer",
            href: mw.util.getUrl("LIB:SPECIALSD")
          }).text(window.wgULS("手动放置模板时的注意事项", "手動放置模板時的注意事項"))[0], "。"];
          $body.find("[name=work_area]").append(message);
          Morebits.simpleWindow.setButtonsEnabled(false);
        } else {
          Morebits.simpleWindow.setButtonsEnabled(true);
        }
      };
      Twinkle.speedy.callback.priorDeletionCount = () => {
        const query = {
          action: "query",
          format: "json",
          list: "logevents",
          letype: "delete",
          leaction: "delete/delete",
          // Just pure page deletion, no redirect overwrites or revdel
          letitle: mw.config.get("wgPageName"),
          leprop: "",
          // We're just counting we don't actually care about the entries
          lelimit: 5
          // A little bit goes a long way
        };
        new Morebits.wiki.api(window.wgULS("检查之前的删除", "檢查之前的刪除"), query, (apiobj) => {
          const response = apiobj.getResponse();
          const delCount = response.query.logevents.length;
          if (delCount) {
            let message = window.wgULS("被删除", "被刪除");
            if (response.continue) {
              message += window.wgULS("超过", "超過");
            }
            message += "".concat(delCount, "次");
            if (delCount >= 3) {
              $body.find("#prior-deletion-count").css("color", "#ff0000");
            }
            const link = Morebits.htmlNode("a", window.wgULS("（日志）", "（日誌）"));
            link.setAttribute("href", mw.util.getUrl("Special:Log", {
              page: mw.config.get("wgPageName")
            }));
            link.setAttribute("target", "_blank");
            link.setAttribute("rel", "noopener noreferrer");
            $body.find("#prior-deletion-count").text(message);
            $body.find("#prior-deletion-count").append(link);
          }
        }).post();
      };
      Twinkle.speedy.generateCsdList = (list, mode) => {
        const isSysopMode = Twinkle.speedy.mode.isSysop(mode);
        const multiple = Twinkle.speedy.mode.isMultiple(mode);
        const hasSubmitButton = Twinkle.speedy.mode.hasSubmitButton(mode);
        const openSubgroupHandler = (e) => {
          $(e.target.form).find("input").prop("disabled", true);
          $(e.target.form).children().css("color", "gray");
          $(e.target).parent().css("color", "black").find("input").prop("disabled", false);
          $(e.target).parent().find("input:text")[0].focus();
          e.stopPropagation();
        };
        const submitSubgroupHandler = (e) => {
          const evaluateType = Twinkle.speedy.mode.isSysop(mode) ? "evaluateSysop" : "evaluateUser";
          Twinkle.speedy.callback[evaluateType](e);
          e.stopPropagation();
        };
        return Array.prototype.map.call(list, (critElement) => {
          const criterion = {
            ...critElement
          };
          if (multiple) {
            if (criterion.hideWhenMultiple) {
              return null;
            }
            if (criterion.hideSubgroupWhenMultiple) {
              criterion.subgroup = null;
            }
          } else {
            if (criterion.hideWhenSingle) {
              return null;
            }
            if (criterion.hideSubgroupWhenSingle) {
              criterion.subgroup = null;
            }
          }
          if (isSysopMode) {
            if (criterion.hideWhenSysop) {
              return null;
            }
            if (criterion.hideSubgroupWhenSysop) {
              criterion.subgroup = null;
            }
          } else {
            if (criterion.hideWhenUser) {
              return null;
            }
            if (criterion.hideSubgroupWhenUser) {
              criterion.subgroup = null;
            }
          }
          if (mw.config.get("wgIsRedirect") && criterion.hideWhenRedirect) {
            return null;
          }
          if (criterion.showInNamespaces && !criterion.showInNamespaces.includes(mw.config.get("wgNamespaceNumber"))) {
            return null;
          } else if (criterion.hideInNamespaces && criterion.hideInNamespaces.includes(mw.config.get("wgNamespaceNumber"))) {
            return null;
          }
          if (criterion.subgroup && !hasSubmitButton) {
            criterion.subgroup = (0, import_ext_gadget3.generateArray)(criterion.subgroup, {
              type: "button",
              name: "submit",
              label: isSysopMode ? window.wgULS("删除页面", "刪除頁面") : window.wgULS("标记页面", "標記頁面"),
              event: submitSubgroupHandler
            });
            criterion.event = openSubgroupHandler;
          }
          if (isSysopMode) {
            const originalEvent = criterion.event;
            criterion.event = (e) => {
              if (multiple) {
                return originalEvent(e);
              }
              const normalizedCriterion = Twinkle.speedy.normalizeHash[e.target.value];
              $body.find("[name=openusertalk]").prop("checked", Twinkle.getPref("openUserTalkPageOnSpeedyDelete").includes(normalizedCriterion));
              if (originalEvent) {
                return originalEvent(e);
              }
            };
          }
          return criterion;
        });
      };
      Twinkle.speedy.customRationale = [{
        label: "自定义理由".concat(Morebits.userIsSysop ? "（自定义删除理由）" : ""),
        value: "reason",
        tooltip: "该页至少应该符合一条快速删除的标准，并且您必须在理由中提到。",
        subgroup: {
          name: "reason_1",
          type: "input",
          label: "理由：",
          size: 60
        }
      }];
      Twinkle.speedy.fileList = [{
        label: "F1：明显不符合本站著作权条例的文件",
        value: "f1",
        tooltip: "包括以下情况：1.上传后3天内仍然来源不明、著作权不明的文件。2.上传者宣称拥有，而在其他来源找到的文件。3.文件宣称由某作者依据某自由著作权协议发布，但找不到该自由协议的声明。4.其他明显侵权的文件，可附加侵权理由。"
      }, {
        label: "F2：重复且不再被使用的文件",
        value: "f2",
        tooltip: "包括以下情况：与现有文件完全相同（或与现有文件内容一致但尺寸较小），且没有客观需要（如某些场合需使用小尺寸图片）的文件。或是被更加清晰的文件、SVG格式文件所取代的文件。请提报者确定文件没有任何页面使用后再提报删除，并附注对应质量更好的文件名。",
        subgroup: {
          name: "f2_filename",
          type: "input",
          label: "新文件名：",
          tooltip: "可不含“File:”前缀。"
        }
      }];
      Twinkle.speedy.articleList = [{
        label: "A1：内容空泛或完全没有内容。",
        value: "a1",
        tooltip: "条目的内容笼统，或甚至根本没有提及条目主体，使条目不能用以区分其他事物；或条目只包括外部链接、参见、参考来源、分类、模板，而没有文字描述。消歧义页、重定向页不适用此条。请注意有些用户可能会多次保存，若此类页面的最后一次编辑时间超过24小时，则可提请快速删除。"
      }, {
        label: "A2：与其他条目或其历史版本重复，且不适合作为其重定向。",
        value: "a2",
        tooltip: "条目创建时的内容，与其他现有条目（或其历史版本）内容完全相同或非常相似，且名称不适合作为后者的重定向。不包括拆分、合并、重组后产生的条目。如有疑虑，可转交删除讨论。若后创建的条目名称可作为重定向，可直接改为重定向；若先创建的条目宜作为后创建条目的重定向，请提请移动请求。",
        subgroup: {
          name: "a2_pagename",
          type: "input",
          label: "现有条目名：",
          tooltip: "不自动加上链接，若需要请自行加上[[]]。",
          size: 60
        }
      }, {
        label: "A3：非现代汉语或翻译拙劣的条目",
        value: "a3",
        tooltip: "条目内容绝大部分非现代汉语，包括未翻译的外语、方言及文言文；或翻译质量低下，以至于难以理解或出现较多错误。"
      }];
      Twinkle.speedy.categoryList = [{
        label: "O2：空分类。",
        value: "o2",
        tooltip: "没有收录任何页面、文件、子分类的分类。Category:请勿删除的分类中的分类不适用。"
      }];
      Twinkle.speedy.draftList = [{
        label: "O3：废弃草稿。",
        value: "o3",
        tooltip: "草稿名字空间内六个月内无编辑的页面。"
      }];
      Twinkle.speedy.userList = [{
        label: "O1：用户请求删除自己的用户页。",
        value: "o1",
        tooltip: "管理员需查看编辑历史，确认该页面不是从其他名字空间移动而来。"
      }];
      Twinkle.speedy.generalList = [{
        label: "G1：明显违反法律法规或违背公序良俗的页面",
        value: "g1",
        tooltip: "明显违反服务器所在地的法律法规及有关规定，或突破社会公序良俗底线，按照中华人民共和国互联网管理规定应予删除的页面。"
      }, {
        label: "G2：没有实际内容的页面",
        value: "g2",
        tooltip: "仅包括无意义字符串而没有实际内容的页面。由用户本人创建的用户页、用户讨论页，及专为测试提供的沙盒，不适用此准则。"
      }, {
        label: "G3：纯粹破坏",
        value: "g3",
        tooltip: "包括但不限于明显的恶作剧、错误信息、人身攻击等，以及清理移动破坏时留下的重定向。若收到或发现严重的人身攻击与诋毁，管理员及其他用户应通知监督员进行监督隐藏。"
      }, {
        label: "G4：重新创建已被删除的页面",
        value: "g4",
        tooltip: "若现有页面与曾在删除讨论（含页面存废讨论、文件存废讨论和侵权审核，不含快速删除）中被删除内容相同或非常相似，且现有内容仍然适用删除讨论中的结论，无论标题是否相同，都适用本标准。若现有页面标题与已删版本不一致，则提请速删者应一并注明已删版本的页面名；若该页面之前被快速删除，请以相同理由重新提请速删。若现有内容不适用删除讨论中的结论，应重新提出删除讨论。",
        subgroup: [{
          name: "g4_pagename",
          type: "input",
          label: "已删版此页面名：",
          size: 60
        }],
        hideSubgroupWhenMultiple: true
      }, {
        label: "G5：因技术原因删除页面",
        value: "g5",
        tooltip: "包括以下情形：因移动请求而删除页面；以覆盖删除重定向；删除无用的MediaWiki页面，及其他技术团队或界面管理员认为有必要执行的快速删除情形。"
      }, {
        label: "G6：原作者提请删除或清空页面，且页面原作者仅有一人",
        value: "g6",
        tooltip: "页面原作者持合理理由提出的快速删除；或页面原作者（实际贡献者）清空页面，其他用户提交的快速删除。页面原作者（实际贡献者）仅一人时满足本准则。若页面实际贡献者多于一人，请持合理理由提交删除讨论。后一情形不包括用户页、用户讨论页，且应在页面最后一次编辑6小时后提出。被导入的页面，导入者视为原作者。",
        subgroup: {
          name: "g6_rationale",
          type: "input",
          label: "删除原因：",
          size: 60
        },
        hideSubgroupWhenSysop: true
      }, {
        label: "G7：明显的广告宣传",
        value: "g7",
        tooltip: "应用于明显的广告宣传，或只有相关人物、组织等事物联系方法（包括但不限于电话、地址、电子邮箱、即时通讯软件联系方式（如QQ号、微信号）、社交媒体链接）。若宣传语气不明显，建议转交删除讨论。"
      }, {
        label: "G8：未列明可靠来源且语调负面的生者传记",
        value: "g8",
        tooltip: "本情况下有的页面严重侵犯他人名誉权，有时可能侵犯隐私权，可能需要提请监督。"
      }, {
        label: "G9：孤立页面",
        value: "g9",
        tooltip: "包括以下几种类型：1.没有对应文件的文件页面；2.没有对应母页面的子页面（用户页子页面除外）；3.指向不存在页面的重定向；4.没有对应内容页面的讨论页（讨论页存档、用户讨论页，以及在主页面挂有{{CSD Placeholder}}模板的讨论页除外）；5.不存在注册用户的用户页及用户页子页面（随用户更名产生的用户页重定向除外）。请在删除时注意有无将内容移至他处的必要。"
      }];
      Twinkle.speedy.redirectList = [{
        label: "R1：不能发挥实际作用的重定向。",
        value: "r1",
        tooltip: "包括以下情况：1.指向本身或循环的重定向，如A→B→C→……→A或A→A（繁简重定向不适用此项）；2.格式错误的重定向，包括标题仅为繁体、繁简混用、消歧义使用的括弧或空格错误、间隔号使用错误（因类推简化字未收录至《通用规范汉字表》导致的繁简混杂情形，或系统无法自动进行繁简处理的情形，则不适用）。若重定向页面标题，与合乎命名常规的目标页面标题之间，仅存在繁简字体的区别，而不存在词语用法区别，则不保留该重定向。因系统无法自动繁简转换而必须保留的重定向页面除外。对于其他未列出的情况，若用户认为该重定向无法发挥实际作用，且依据常识没有任何争议，可凭合理理由提请速删，由管理员判断。指向不存在页面的重定向，适用G5准则。",
        subgroup: {
          name: "r1_type",
          type: "select",
          label: "适用类型：",
          list: [{
            label: "请选择",
            value: ""
          }, {
            label: "指向本身或循环的重定向",
            value: "指向本身或循环的重定向。"
          }, {
            label: "标题繁简混用",
            value: "标题繁简混用。"
          }, {
            label: "消歧义使用的括号或空格错误",
            value: "消歧义使用的括号或空格错误。"
          }, {
            label: "间隔号使用错误",
            value: "间隔号使用错误。"
          }, {
            label: "其他理由（请勾选上方“应用多个理由”，并填写自定义理由）",
            value: ""
          }]
        }
      }, {
        label: "R2：名称与导向目标代表事物不一致或不完全一致的重定向。",
        value: "r2",
        tooltip: "包括但不限于以下情况：1.由任何非条目页面（除用户页）导向条目页的重定向，以及由条目页导向任何非条目页面的重定向。2.明显笔误的重定向，如出现不常见的错别字等。（别称重定向不适用此项。若含错别字或有笔误的重定向使用频率高，此类重定向有助于帮助用户寻找到正确的页面，不适用此标准。有争议的此类重定向宜提交删除讨论。）3.明显与导向目标所涵盖的主题无关，或比导向目标所涵盖的主题更广泛的重定向。（若不明显，可改为提交删除讨论。）",
        subgroup: {
          name: "r2_type",
          type: "select",
          label: "适用类型：",
          list: [{
            label: "请选择",
            value: ""
          }, {
            label: "由非条目页面（除用户页）导向条目页的重定向",
            value: "由非条目页面（除用户页）导向条目页的重定向。"
          }, {
            label: "由条目页导向非条目页面的重定向",
            value: "由条目页导向任何非条目页面的重定向。"
          }, {
            label: "明显笔误的重定向",
            value: "明显笔误的重定向。"
          }, {
            label: "与导向目标无关或比其范围更广泛的重定向",
            value: "与导向目标无关或比其范围更广泛的重定向。"
          }, {
            label: "其他理由（请勾选上方“应用多个理由”，并填写自定义理由）",
            value: ""
          }]
        }
      }];
      Twinkle.speedy.normalizeHash = {
        reason: "db",
        multiple: "multiple",
        "multiple-finish": "multiple-finish",
        g1: "g1",
        g2: "g2",
        g3: "g3",
        g4: "g4",
        g5: "g5",
        g6: "g6",
        g7: "g7",
        g8: "g8",
        g9: "g9",
        a1: "a1",
        a2: "a2",
        a3: "a3",
        r1: "r1",
        r2: "r2",
        f1: "f1",
        f2: "f2",
        f3: "f3",
        f4: "f4",
        f5: "f5",
        o1: "o1",
        o2: "o2",
        o3: "o3"
      };
      Twinkle.speedy.callbacks = {
        getTemplateCodeAndParams: (params) => {
          let code;
          let parameters;
          let i;
          if (params.normalizeds.length > 1) {
            code = "{{delete";
            params.utparams = {};
            var _iterator12 = _createForOfIteratorHelper(params.normalizeds.entries()), _step12;
            try {
              for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {
                const [index, norm] = _step12.value;
                if (norm !== "db") {
                  code += "|".concat(norm.toUpperCase());
                }
                parameters = params.templateParams[index] || [];
                for (const i_ in parameters) {
                  if (typeof parameters[i_] === "string") {
                    code += "|".concat(parameters[i_]);
                  }
                }
                params.utparams = {
                  ...params.utparams,
                  ...Twinkle.speedy.getUserTalkParameters(norm, parameters)
                };
              }
            } catch (err) {
              _iterator12.e(err);
            } finally {
              _iterator12.f();
            }
            code += "}}";
          } else {
            parameters = params.templateParams[0] || [];
            code = "{{delete";
            if (params.values[0] !== "reason") {
              code += "|".concat(params.values[0]);
            }
            for (i in parameters) {
              if (typeof parameters[i] === "string") {
                code += "|".concat(parameters[i]);
              }
            }
            code += "}}";
            params.utparams = Twinkle.speedy.getUserTalkParameters(params.normalizeds[0], parameters);
          }
          return [code, params.utparams];
        },
        parseWikitext: (title, wikitext, callback) => {
          const query = {
            action: "parse",
            prop: "text",
            pst: "true",
            text: wikitext,
            contentmodel: "wikitext",
            title
          };
          const statusIndicator = new Morebits.status(window.wgULS("构造删除理由", "構造刪除理由"));
          const api2 = new Morebits.wiki.api(window.wgULS("解析删除模板", "解析刪除模板"), query, (apiObj) => {
            const reason = decodeURIComponent($(apiObj.getXML().querySelector("text").childNodes[0].nodeValue).find("#delete-reason").text().replace(/\+/g, " "));
            if (reason) {
              statusIndicator.info("完成");
            } else {
              statusIndicator.warn(window.wgULS("未能从删除模板生成删除理由", "未能從刪除模板生成刪除理由"));
            }
            callback(reason);
          }, statusIndicator);
          api2.post();
        },
        sysop: {
          main: (params) => {
            let reason;
            if (!params.normalizeds.length && params.normalizeds[0] === "db") {
              reason = prompt(window.wgULS("输入删除理由：", "輸入刪除理由："), "");
              Twinkle.speedy.callbacks.sysop.deletePage(reason, params);
            } else {
              const [code] = Twinkle.speedy.callbacks.getTemplateCodeAndParams(params);
              Twinkle.speedy.callbacks.parseWikitext(mw.config.get("wgPageName"), code, (deleteReason) => {
                if (params.promptForSummary) {
                  deleteReason = prompt(window.wgULS("输入删除理由，或单击确定以接受自动生成的：", "輸入刪除理由，或點擊確定以接受自動生成的："), deleteReason);
                }
                Twinkle.speedy.callbacks.sysop.deletePage(deleteReason, params);
              });
            }
          },
          deletePage: (reason, params) => {
            const thispage = new Morebits.wiki.page(mw.config.get("wgPageName"), window.wgULS("删除页面", "刪除頁面"));
            if (reason === null) {
              return Morebits.status.error(window.wgULS("询问理由", "詢問理由"), window.wgULS("用户取消操作。", "使用者取消操作。"));
            } else if (!reason || !reason.trim()) {
              return Morebits.status.error(window.wgULS("询问理由", "詢問理由"), window.wgULS("你不给我理由…我就…不管了…", "你不給我理由…我就…不管了…"));
            }
            const deleteMain = () => {
              thispage.setEditSummary(reason);
              thispage.setChangeTags(Twinkle.changeTags);
              thispage.setWatchlist(params.watch);
              thispage.deletePage(() => {
                thispage.getStatusElement().info("完成");
                Twinkle.speedy.callbacks.sysop.deleteTalk(params);
              });
            };
            if (params.openUserTalk) {
              thispage.setCallbackParameters(params);
              thispage.lookupCreation(() => {
                Twinkle.speedy.callbacks.sysop.openUserTalkPage(thispage);
                deleteMain();
              });
            } else {
              deleteMain();
            }
          },
          deleteTalk: (params) => {
            if (params.deleteTalkPage && params.normalized !== "o1" && !document.querySelector("#ca-talk").classList.contains("new")) {
              const talkpage = new Morebits.wiki.page("".concat(mw.config.get("wgFormattedNamespaces")[mw.config.get("wgNamespaceNumber") + 1], ":").concat(mw.config.get("wgTitle")), window.wgULS("删除讨论页", "刪除討論頁"));
              talkpage.setEditSummary("[[LIB:CSD#G9|G9]]: 孤立页面：已删除页面“".concat(Morebits.pageNameNorm, "”的讨论页"));
              talkpage.setChangeTags(Twinkle.changeTags);
              talkpage.deletePage();
              setTimeout(() => {
                Twinkle.speedy.callbacks.sysop.deleteRedirects(params);
              }, 1800);
            } else {
              Twinkle.speedy.callbacks.sysop.deleteRedirects(params);
            }
          },
          deleteRedirects: (params) => {
            if (params.deleteRedirects) {
              const query = {
                action: "query",
                titles: mw.config.get("wgPageName"),
                prop: "redirects",
                rdlimit: 5e3
                // 500 is max for normal users, 5000 for bots and sysops
              };
              const ysarchives_api = new Morebits.wiki.api(window.wgULS("获取重定向列表…", "取得重新導向列表…"), query, Twinkle.speedy.callbacks.sysop.deleteRedirectsMain, new Morebits.status(window.wgULS("删除重定向", "刪除重新導向")));
              ysarchives_api.params = params;
              ysarchives_api.post();
            }
            let $link;
            let $bigtext;
            if (params.normalized === "g7") {
              $link = $("<a>").attr("href", "#").text(window.wgULS("单击这里施行保护", "點擊這裡施行保護")).css({
                "font-size": "125%",
                "font-weight": "bold"
              }).on("click", () => {
                Morebits.wiki.actionCompleted.redirect = null;
                Twinkle.speedy.dialog.close();
                mw.config.set("wgArticleId", 0);
                Twinkle.protect.callback();
              });
              $bigtext = $("<span>").css({
                "font-size": "125%",
                "font-weight": "bold"
              }).text(window.wgULS("白纸保护该页", "白紙保護該頁"));
              Morebits.status.info($bigtext[0], $link[0]);
            }
            if (mw.config.get("wgNamespaceNumber") === 6) {
              $link = $("<a>").attr("href", "#").text(window.wgULS("单击这里前往取消链入工具", "點擊這裡前往取消連入工具")).css({
                "font-weight": "bold"
              }).on("click", () => {
                Morebits.wiki.actionCompleted.redirect = null;
                Twinkle.speedy.dialog.close();
                Twinkle.unlink.callback("".concat(window.wgULS("取消对已删除文件 ", "取消對已刪除檔案 ") + Morebits.pageNameNorm, " 的使用"));
              });
              $bigtext = $("<span>").css({
                "font-weight": "bold"
              }).text(window.wgULS("取消对已删除文件的使用", "取消對已刪除檔案的使用"));
              Morebits.status.info($bigtext[0], $link[0]);
            } else {
              $link = $("<a>").attr("href", "#").text(window.wgULS("单击这里前往取消链入工具", "點擊這裡前往取消連入工具")).css({
                "font-weight": "bold"
              }).on("click", () => {
                Morebits.wiki.actionCompleted.redirect = null;
                Twinkle.speedy.dialog.close();
                Twinkle.unlink.callback(window.wgULS("取消对已删除页面 ", "取消對已刪除頁面 ") + Morebits.pageNameNorm + window.wgULS(" 的链接", " 的連結"));
              });
              $bigtext = $("<span>").text(window.wgULS("取消对已删除页面的链接", "取消對已刪除頁面的連結")).css({
                "font-weight": "bold"
              });
              Morebits.status.info($bigtext[0], $link[0]);
            }
            $link = $("<a>").attr("href", mw.util.getUrl("Special:RandomInCategory/快速删除候选")).text(window.wgULS("单击前往下一个快速删除候选", "點擊前往下一個快速刪除候選"));
            Morebits.status.info("工具", $link[0]);
          },
          openUserTalkPage: (pageobj) => {
            pageobj.getStatusElement().unlink();
            const user = pageobj.getCreator();
            const params = pageobj.getCallbackParameters();
            const query = {
              action: "edit",
              preview: "yes",
              vanarticle: Morebits.pageNameNorm
            };
            const title = "User talk:".concat(user);
            if (params.normalized === "db" || Twinkle.getPref("promptForSpeedyDeletionSummary").includes(params.normalized)) {
              const $link = $("<a>").attr({
                href: mw.util.getUrl(title, query),
                target: "_blank",
                rel: "noopener noreferrer"
              }).css({
                "font-size": "125%",
                "font-weight": "bold"
              }).text(window.wgULS("点此打开User talk:", "點此打開User talk:") + user);
              const $bigtext = $("<span>").css({
                "font-size": "125%",
                "font-weight": "bold"
              }).text(window.wgULS("通知页面创建者", "通知頁面建立者"));
              Morebits.status.info($bigtext[0], $link[0]);
            } else {
              const statusIndicator = new Morebits.status(window.wgULS("打开用户", "打開使用者") + user + window.wgULS("的讨论页编辑窗口", "的討論頁編輯視窗"), window.wgULS("打开中…", "打開中…"));
              switch (Twinkle.getPref("userTalkPageMode")) {
                case "tab":
                  window.open(mw.util.getUrl(title, query), "_blank", "noopener,noreferrer");
                  break;
                case "blank":
                  window.open(mw.util.getUrl(title, query), "_blank", "noopener,noreferrer,location=no,toolbar=no,status=no,directories=no,scrollbars=yes,width=1200,height=800");
                  break;
                /* case 'window': */
                /* falls through */
                default:
                  window.open(mw.util.getUrl(title, query), window.name === "twinklewarnwindow" ? "_blank" : "twinklewarnwindow", window.name === "twinklewarnwindow" ? "noopener,noreferrer," : "location=no,toolbar=no,status=no,directories=no,scrollbars=yes,width=1200,height=800");
                  break;
              }
              statusIndicator.info("完成");
            }
          },
          deleteRedirectsMain: (apiobj) => {
            const xmlDoc = apiobj.getXML();
            const $snapshot = $(xmlDoc).find("redirects rd");
            const total = $snapshot.length;
            const statusIndicator = apiobj.statelem;
            if (!total) {
              statusIndicator.info(window.wgULS("未发现重定向", "未發現重新導向"));
              return;
            }
            statusIndicator.status("0%");
            let current = 0;
            const onsuccess = (apiobjInner) => {
              const now = "".concat(Number.parseInt(100 * ++current / total, 10), "%");
              statusIndicator.update(now);
              apiobjInner.statelem.unlink();
              if (current >= total) {
                statusIndicator.info("".concat(now, "（完成）"));
                Morebits.wiki.removeCheckpoint();
              }
            };
            Morebits.wiki.addCheckpoint();
            $snapshot.each((_key, value) => {
              const title = $(value).attr("title");
              const page = new Morebits.wiki.page(title, "".concat(window.wgULS('删除重定向 "', '刪除重新導向 "') + title, '"'));
              page.setEditSummary("[[LIB:CSD#G9|G9]]: 孤立页面：重定向到已删除页面“".concat(Morebits.pageNameNorm, "”"));
              page.setChangeTags(Twinkle.changeTags);
              page.deletePage(onsuccess);
            });
          }
        },
        user: {
          main: (pageobj) => {
            const statelem = pageobj.getStatusElement();
            if (!pageobj.exists()) {
              statelem.error(window.wgULS("页面不存在，可能已被删除", "頁面不存在，可能已被刪除"));
              return;
            }
            let text = pageobj.getPageText();
            const params = pageobj.getCallbackParameters();
            statelem.status(window.wgULS("检查页面已有标记…", "檢查頁面已有標記…"));
            const textNoSd = text.replace(/\{\{\s*(db(-\w*)?|d|delete|deletebecause|speedy|csd|速刪|速删|快删|快刪)\s*(\|(?:\{\{[^{}]*\}\}|[^{}])*)?\}\}\s*/gi, "");
            if (text !== textNoSd && !confirm(window.wgULS("在页面上找到快速删除模板，要移除并加入新的吗？", "在頁面上找到快速刪除模板，要移除並加入新的嗎？"))) {
              statelem.error(window.wgULS("快速删除模板已被置于页面中。", "快速刪除模板已被置於頁面中。"));
              return;
            }
            text = textNoSd;
            const copyvio = /(?:\{\{\s*(copyvio|侵权|侵權)[^{}]*?\}\})/i.exec(text);
            if (copyvio && !confirm(window.wgULS("著作权验证模板已被置于页面中，您是否仍想加入一个快速删除模板？", "著作權驗證模板已被置於頁面中，您是否仍想加入一個快速刪除模板？"))) {
              statelem.error(window.wgULS("页面中已有著作权验证模板。", "頁面中已有著作權驗證模板。"));
              return;
            }
            const xfd = /(?:\{\{([rsaiftcmv]fd|md1|proposed deletion)[^{}]*?\}\})/i.exec(text);
            if (xfd && !confirm(window.wgULS("删除相关模板{{", "刪除相關模板{{") + xfd[1] + window.wgULS("}}已被置于页面中，您是否仍想加入一个快速删除模板？", "}}已被置於頁面中，您是否仍想加入一個快速刪除模板？"))) {
              statelem.error(window.wgULS("页面已被提交至存废讨论。", "頁面已被提交至存廢討論。"));
              return;
            }
            const buildData = Twinkle.speedy.callbacks.getTemplateCodeAndParams(params);
            let [code] = buildData;
            [, params.utparams] = buildData;
            const thispage = new Morebits.wiki.page(mw.config.get("wgPageName"));
            if (Twinkle.getPref("markSpeedyPagesAsPatrolled")) {
              thispage.patrol();
            }
            if (mw.config.get("wgNamespaceNumber") === 10) {
              code = "<noinclude>".concat(code, "</noinclude>");
            }
            text = text.replace(/\{\{\s*([Nn]ew unreviewed article|[Uu]nreviewed|[Uu]serspace draft)\s*(\|(?:\{\{[^{}]*\}\}|[^{}])*)?\}\}\s*/g, "");
            if (mw.config.get("wgNamespaceNumber") === 6) {
              text = text.replace(/\{\{(mtc|(copy |move )?to ?(share|commons)|move to (ysarchives share|wikimedia commons)|copy to (ysarchives share|ysarchives commons))[^}]*\}\}/gi, "");
            }
            if (params.requestsalt) {
              code = "{{salt}}\n".concat(code);
            }
            let editsummary;
            if (params.normalizeds.length > 1) {
              editsummary = window.wgULS("请求快速删除（", "請求快速刪除（");
              var _iterator13 = _createForOfIteratorHelper(params.normalizeds), _step13;
              try {
                for (_iterator13.s(); !(_step13 = _iterator13.n()).done; ) {
                  const norm = _step13.value;
                  if (norm !== "db") {
                    editsummary += "[[LIB:CSD#".concat(norm.toUpperCase(), "|CSD ").concat(norm.toUpperCase(), "]]、");
                  }
                }
              } catch (err) {
                _iterator13.e(err);
              } finally {
                _iterator13.f();
              }
              editsummary = editsummary.slice(0, Math.max(0, editsummary.length - 1));
              editsummary += "）";
            } else if (params.normalizeds[0] === "db") {
              editsummary = window.wgULS("请求[[LIB:CSD|快速删除]]：", "請求[[LIB:CSD|快速刪除]]：") + params.templateParams[0]["1"];
            } else {
              editsummary = "".concat(window.wgULS("请求快速删除", "請求快速刪除"), "（[[LIB:CSD#").concat(params.normalizeds[0].toUpperCase(), "|CSD ").concat(params.normalizeds[0].toUpperCase(), "]]）");
            }
            if (params.blank) {
              text = code;
            } else {
              const ysarchives_page = new Morebits.wikitext.page(text);
              text = ysarchives_page.insertAfterTemplates("".concat(code, "\n"), Twinkle.hatnoteRegex).getText();
            }
            pageobj.setPageText(text);
            pageobj.setEditSummary(editsummary);
            pageobj.setChangeTags(Twinkle.changeTags);
            pageobj.setWatchlist(params.watch);
            pageobj.save(Twinkle.speedy.callbacks.user.tagComplete);
          },
          tagComplete: (pageobj) => {
            const params = pageobj.getCallbackParameters();
            if (params.usertalk) {
              const callback = (pageObj) => {
                let initialContrib = pageObj.getCreator();
                if (initialContrib === mw.config.get("wgUserName")) {
                  Morebits.status.warn("您（".concat(initialContrib).concat(window.wgULS("）创建了该页，跳过通知", "）建立了該頁，跳過通知")));
                  initialContrib = null;
                } else if (initialContrib === mw.config.get("wgTitle") && mw.config.get("wgNamespaceNumber") === 3) {
                  Morebits.status.warn(window.wgULS("通知页面创建者：用户创建了自己的讨论页", "通知頁面建立者：使用者建立了自己的討論頁"));
                  initialContrib = null;
                } else if (initialContrib === "A2093064-bot" && params.normalizeds[0] === "g15") {
                  Morebits.status.warn(window.wgULS("通知页面创建者：由机器人创建，跳过通知", "通知頁面建立者：由機器人建立，跳過通知"));
                  initialContrib = null;
                } else {
                  const talkPageName = "User talk:".concat(initialContrib);
                  const usertalkpage = new Morebits.wiki.page(talkPageName, "".concat(window.wgULS("通知页面创建者（", "通知頁面建立者（") + initialContrib, "）"));
                  let notifytext;
                  notifytext = "\n{{".concat("subst:", "db-notice|target=".concat(Morebits.pageNameNorm));
                  notifytext += "|nowelcome=yes'}}--~~".concat("~~");
                  let editsummary = "通知：";
                  if (params.normalizeds.includes("g3")) {
                    editsummary += "一攻击性页面";
                  } else {
                    editsummary += "页面[[".concat(Morebits.pageNameNorm, "]]");
                  }
                  editsummary += "快速删除提名";
                  usertalkpage.setAppendText(notifytext);
                  usertalkpage.setEditSummary(editsummary);
                  usertalkpage.setChangeTags(Twinkle.changeTags);
                  usertalkpage.setCreateOption("recreate");
                  usertalkpage.setFollowRedirect(true, false);
                  usertalkpage.append();
                }
                if (params.lognomination) {
                  Twinkle.speedy.callbacks.user.addToLog(params, initialContrib);
                }
              };
              const thispage = new Morebits.wiki.page(Morebits.pageNameNorm);
              thispage.lookupCreation(callback);
            } else if (params.lognomination) {
              Twinkle.speedy.callbacks.user.addToLog(params, null);
            }
          },
          // note: this code is also invoked from twinkleimage
          // the params used are:
          //   for CSD: params.values, params.normalizeds  (note: normalizeds is an array)
          //   for DI: params.fromDI = true, params.templatename, params.normalized  (note: normalized is a string)
          addToLog: (params, initialContrib) => {
            const usl = new Morebits.userspaceLogger(Twinkle.getPref("speedyLogPageName"));
            usl.initialText = "这是该用户使用[[H:TW|Twinkle]]的速删模块做出的[[LIB:CSD|快速删除]]提名列表。\n\n若您不再想保留此日志，请在[[".concat(Twinkle.getPref("configPage"), "|参数设置]]中关掉，并使用[[LIB:CSD#O1|CSD O1]]提交快速删除。").concat(Morebits.userIsSysop ? "\n\n此日志并不记录用Twinkle直接执行的删除。" : "");
            let appendText = "# [[:".concat(Morebits.pageNameNorm, "]]：");
            if (params.fromDI) {
              appendText += "图版[[LIB:CSD#".concat(params.normalized.toUpperCase(), "|CSD ").concat(params.normalized.toUpperCase(), "]]（{{tl|").concat(params.templatename, "}}）");
            } else if (params.normalizeds.length > 1) {
              appendText += "多个理由（";
              var _iterator14 = _createForOfIteratorHelper(params.normalizeds), _step14;
              try {
                for (_iterator14.s(); !(_step14 = _iterator14.n()).done; ) {
                  const norm = _step14.value;
                  appendText += "[[LIB:CSD#".concat(norm.toUpperCase(), "|").concat(norm.toUpperCase(), "]]、");
                }
              } catch (err) {
                _iterator14.e(err);
              } finally {
                _iterator14.f();
              }
              appendText = appendText.slice(0, Math.max(0, appendText.length - 1));
              appendText += "）";
            } else if (params.normalizeds[0] === "db") {
              appendText += "自定义理由";
            } else {
              appendText += "[[LIB:CSD#".concat(params.normalizeds[0].toUpperCase(), "|CSD ").concat(params.normalizeds[0].toUpperCase(), "]]");
            }
            if (params.requestsalt) {
              appendText += window.wgULS("；请求白纸保护", "；請求白紙保護");
            }
            if (initialContrib) {
              appendText += "；通知{{user|".concat(initialContrib, "}}");
            }
            appendText += " ~~".concat("~", "~~\n");
            usl.changeTags = Twinkle.changeTags;
            usl.log(appendText, window.wgULS("记录对[[", "記錄對[[") + Morebits.pageNameNorm + window.wgULS("]]的快速删除提名", "]]的快速刪除提名"));
          }
        }
      };
      Twinkle.speedy.getParameters = (form, values) => {
        let parameters = [];
        var _iterator15 = _createForOfIteratorHelper(values), _step15;
        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done; ) {
            const value = _step15.value;
            const currentParams = [];
            let redimage;
            switch (value) {
              case "reason":
                if (form["csd.reason_1"]) {
                  const dbrationale = form["csd.reason_1"].value;
                  if (!dbrationale || !dbrationale.trim()) {
                    void mw.notify(window.wgULS("自定义理由：请指定理由。", "自訂理由：請指定理由。"), {
                      type: "warn",
                      tag: "twinklespeedy"
                    });
                    parameters = null;
                    continue;
                  }
                  currentParams["1"] = dbrationale;
                }
                break;
              case "a2":
                if (form["csd.a2_pagename"]) {
                  const otherpage = form["csd.a2_pagename"].value;
                  if (!otherpage || !otherpage.trim()) {
                    void mw.notify(window.wgULS("CSD A2：请提供现有条目的名称。", "CSD A2：請提供現有條目的名稱。"), {
                      type: "warn",
                      tag: "twinklespeedy"
                    });
                    parameters = null;
                    continue;
                  }
                  currentParams.pagename = otherpage;
                }
                break;
              case "g4":
                if (form["csd.g4_pagename"]) {
                  const pagename = form["csd.g4_pagename"].value;
                  if (!pagename || !pagename.trim()) {
                    void mw.notify(window.wgULS("CSD G4：请提供页面名称。", "CSD G4：請提供頁面名稱。"), {
                      type: "warn",
                      tag: "twinklespeedy"
                    });
                    parameters = null;
                    continue;
                  }
                  currentParams.pagename = pagename;
                }
                break;
              case "f2":
                if (form["csd.f2_filename"]) {
                  redimage = form["csd.f2_filename"].value;
                  if (!redimage || !redimage.trim()) {
                    void mw.notify(window.wgULS("CSD F2：请提供另一文件的名称。", "CSD F2：請提供另一檔案的名稱。"), {
                      type: "warn",
                      tag: "twinklespeedy"
                    });
                    parameters = null;
                    continue;
                  }
                  currentParams.filename = redimage.replace(new RegExp("^\\s*".concat(Morebits.namespaceRegex(6), ":"), "i"), "");
                }
                break;
              case "r1":
                if (form["csd.r1_type"]) {
                  const redirtype = form["csd.r1_type"].value;
                  if (!redirtype) {
                    void mw.notify(window.wgULS("CSD R1：请选择适用类型。", "CSD R1：請選擇適用類別。"), {
                      type: "warn",
                      tag: "twinklespeedy"
                    });
                    parameters = null;
                    continue;
                  }
                  currentParams["1"] = redirtype;
                }
                break;
              case "r2":
                if (form["csd.r2_type"]) {
                  const redirtype = form["csd.r2_type"].value;
                  if (!redirtype) {
                    void mw.notify(window.wgULS("CSD R2：请选择适用类型。", "CSD R2：請選擇適用類別。"), {
                      type: "warn",
                      tag: "twinklespeedy"
                    });
                    parameters = null;
                    continue;
                  }
                  currentParams["1"] = redirtype;
                }
                break;
              default:
                break;
            }
            parameters[parameters.length] = currentParams;
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }
        return parameters;
      };
      Twinkle.speedy.getUserTalkParameters = (normalized) => {
        const utparams = [];
        switch (normalized) {
          default:
            break;
        }
        return utparams;
      };
      Twinkle.speedy.resolveCsdValues = (e) => {
        var _e$target$form;
        const values = ((_e$target$form = e.target.form) !== null && _e$target$form !== void 0 ? _e$target$form : e.target).getChecked("csd");
        if (values.length === 0) {
          void mw.notify(window.wgULS("请选择一个理据！", "請選擇一個理據！"), {
            type: "warn",
            tag: "twinklespeedy"
          });
          return null;
        }
        return values;
      };
      Twinkle.speedy.callback.evaluateSysop = (e) => {
        var _e$target$form2;
        const form = (_e$target$form2 = e.target.form) !== null && _e$target$form2 !== void 0 ? _e$target$form2 : e.target;
        if (e.target.type === "checkbox" || e.target.type === "text" || e.target.type === "select") {
          return;
        }
        const {
          tag_only
        } = form;
        if (tag_only && tag_only.checked) {
          Twinkle.speedy.callback.evaluateUser(e);
          return;
        }
        const values = Twinkle.speedy.resolveCsdValues(e);
        if (!values) {
          return;
        }
        const normalizeds = values.map((value) => {
          return Twinkle.speedy.normalizeHash[value];
        });
        let watchPage;
        let promptForSummary;
        var _iterator16 = _createForOfIteratorHelper(normalizeds), _step16;
        try {
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done; ) {
            const norm = _step16.value;
            if (Twinkle.getPref("watchSpeedyPages").includes(norm)) {
              watchPage = Twinkle.getPref("watchSpeedyExpiry");
            }
            if (Twinkle.getPref("promptForSpeedyDeletionSummary").includes(norm)) {
              promptForSummary = true;
            }
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }
        const params = {
          values,
          normalizeds,
          watch: watchPage,
          deleteTalkPage: form.talkpage && form.talkpage.checked,
          deleteRedirects: form.redirects.checked,
          openUserTalk: form.openusertalk.checked,
          promptForSummary,
          templateParams: Twinkle.speedy.getParameters(form, values)
        };
        if (!params.templateParams) {
          return;
        }
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(form);
        Twinkle.speedy.callbacks.sysop.main(params);
      };
      Twinkle.speedy.callback.evaluateUser = (e) => {
        var _e$target$form3;
        const form = (_e$target$form3 = e.target.form) !== null && _e$target$form3 !== void 0 ? _e$target$form3 : e.target;
        if (e.target.type === "checkbox" || e.target.type === "text" || e.target.type === "select") {
          return;
        }
        const values = Twinkle.speedy.resolveCsdValues(e);
        if (!values) {
          return;
        }
        const normalizeds = [];
        var _iterator17 = _createForOfIteratorHelper(values), _step17;
        try {
          for (_iterator17.s(); !(_step17 = _iterator17.n()).done; ) {
            const value = _step17.value;
            const norm = Twinkle.speedy.normalizeHash[value];
            normalizeds[normalizeds.length] = norm;
          }
        } catch (err) {
          _iterator17.e(err);
        } finally {
          _iterator17.f();
        }
        let watchPage = false;
        for (var _i7 = 0, _normalizeds = normalizeds; _i7 < _normalizeds.length; _i7++) {
          const norm = _normalizeds[_i7];
          if (Twinkle.getPref("watchSpeedyPages").includes(norm)) {
            watchPage = Twinkle.getPref("watchSpeedyExpiry");
            continue;
          }
        }
        let notifyuser = false;
        if (form.notify.checked) {
          var _iterator18 = _createForOfIteratorHelper(normalizeds), _step18;
          try {
            for (_iterator18.s(); !(_step18 = _iterator18.n()).done; ) {
              const norm = _step18.value;
              if (Twinkle.getPref("notifyUserOnSpeedyDeletionNomination").includes(norm)) {
                notifyuser = true;
                continue;
              }
            }
          } catch (err) {
            _iterator18.e(err);
          } finally {
            _iterator18.f();
          }
        }
        let csdlog = false;
        if (Twinkle.getPref("logSpeedyNominations")) {
          var _iterator19 = _createForOfIteratorHelper(normalizeds), _step19;
          try {
            for (_iterator19.s(); !(_step19 = _iterator19.n()).done; ) {
              const norm = _step19.value;
              if (!Twinkle.getPref("noLogOnSpeedyNomination").includes(norm)) {
                csdlog = true;
                continue;
              }
            }
          } catch (err) {
            _iterator19.e(err);
          } finally {
            _iterator19.f();
          }
        }
        const params = {
          values,
          normalizeds,
          watch: watchPage,
          usertalk: notifyuser,
          lognomination: csdlog,
          blank: form.blank.checked,
          requestsalt: form.salting.checked,
          templateParams: Twinkle.speedy.getParameters(form, values)
        };
        if (!params.templateParams) {
          return;
        }
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(form);
        Morebits.wiki.actionCompleted.redirect = mw.config.get("wgPageName");
        Morebits.wiki.actionCompleted.notice = window.wgULS("标记完成", "標記完成");
        const ysarchives_page = new Morebits.wiki.page(mw.config.get("wgPageName"), window.wgULS("标记页面", "標記頁面"));
        ysarchives_page.setCallbackParameters(params);
        ysarchives_page.load(Twinkle.speedy.callbacks.user.main);
      };
      Twinkle.addInitCallback(Twinkle.speedy, "speedy");
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinklecopyvio.js
var twinklecopyvio_exports = {};
var init_twinklecopyvio = __esm({
  "src/Twinkle/modules/twinklecopyvio.js"() {
    "use strict";
    /*! Twinkle.js - twinklecopyvio.js */
    (function twinklecopyvio() {
      Twinkle.copyvio = () => {
        if (mw.config.get("wgNamespaceNumber") < 0 || !mw.config.get("wgArticleId") || mw.config.get("wgNamespaceNumber") === 6 && (document.querySelector("#mw-sharedupload") || !document.querySelector("#mw-imagepage-section-filehistory") && !Morebits.isPageRedirect())) {
          return;
        }
        Twinkle.addPortletLink(Twinkle.copyvio.callback, window.wgULS("侵权", "侵權"), "tw-copyvio", window.wgULS("提报侵权页面", "提報侵權頁面"), "");
      };
      Twinkle.copyvio.callback = () => {
        const Window = new Morebits.simpleWindow(600, 350);
        Window.setTitle(window.wgULS("提报侵权页面", "提報侵權頁面"));
        Window.setScriptName("Twinkle");
        Window.addFooterLink(window.wgULS("侵权设置", "侵權設定"), "H:TW/PREF#copyvio");
        Window.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW/DOC#copyvio");
        const form = new Morebits.quickForm(Twinkle.copyvio.callback.evaluate);
        form.append({
          type: "textarea",
          label: window.wgULS("侵权来源：", "侵權來源："),
          name: "source"
        });
        form.append({
          type: "checkbox",
          list: [{
            label: window.wgULS("CSD G4: 曾经根据侵权审核删除后又重新创建的内容", "CSD G4: 曾經根據侵權審核刪除後又重新建立的內容"),
            value: "g4",
            name: "g4",
            tooltip: window.wgULS("同时以G4准则提报快速删除", "同時以G4準則提報快速刪除"),
            subgroup: [{
              name: "g4_pagename",
              type: "input",
              label: window.wgULS("前次删除的页面名称", "前次刪除的頁面名稱"),
              tooltip: window.wgULS("选填，若前次删除的页面名称不同，请提供", "選填，若前次刪除的頁面名稱不同，請提供")
            }]
          }, {
            label: window.wgULS("通知页面创建者", "通知頁面建立者"),
            value: "notify",
            name: "notify",
            tooltip: window.wgULS("在页面创建者讨论页上放置一通知模板。", "在頁面建立者討論頁上放置一通知模板。"),
            checked: true
          }]
        });
        form.append({
          type: "submit"
        });
        const result = form.render();
        Window.setContent(result);
        Window.display();
      };
      Twinkle.copyvio.callbacks = {
        tryTagging: (pageobj) => {
          const text = pageobj.getPageText();
          if (text.includes("{{Copyvio|")) {
            Morebits.status.error(window.wgULS("错误", "錯誤"), window.wgULS("页面已经标记侵权，请人工确认是否已经提报。", "頁面已經標記侵權，請人工確認是否已經提報。"));
          } else {
            Twinkle.copyvio.callbacks.taggingArticle(pageobj);
            const ysarchives_page = new Morebits.wiki.page(mw.config.get("wgPageName"));
            ysarchives_page.setCallbackParameters(pageobj.getCallbackParameters());
            ysarchives_page.lookupCreation(Twinkle.copyvio.callbacks.main);
          }
        },
        main: (pageobj) => {
          const params = pageobj.getCallbackParameters();
          const initialContrib = pageobj.getCreator();
          const ysarchives_page = new Morebits.wiki.page(params.logpage, window.wgULS("加入侵权记录项", "加入侵權記錄項"));
          ysarchives_page.setFollowRedirect(true);
          ysarchives_page.setCallbackParameters(params);
          ysarchives_page.load(Twinkle.copyvio.callbacks.copyvioList);
          if (params.notify) {
            const usertalkpage = new Morebits.wiki.page("User talk:".concat(initialContrib), "".concat(window.wgULS("通知页面创建者（", "通知頁面建立者（") + initialContrib, "）"));
            const notifytext = "\n{{".concat("subst:", "CopyvioNotice|".concat(mw.config.get("wgPageName"), "}}"));
            usertalkpage.setAppendText(notifytext);
            usertalkpage.setEditSummary(window.wgULS("通知：页面[[", "通知：頁面[[") + mw.config.get("wgPageName") + window.wgULS("]]疑似侵犯著作权", "]]疑似侵犯版權"));
            usertalkpage.setChangeTags(Twinkle.changeTags);
            usertalkpage.setCreateOption("recreate");
            usertalkpage.setWatchlist(Twinkle.getPref("copyvioWatchUser"));
            usertalkpage.setFollowRedirect(true, false);
            usertalkpage.append();
          }
        },
        taggingArticle: (pageobj) => {
          const params = pageobj.getCallbackParameters();
          const revisionId = mw.config.get("wgRevisionId") || mw.config.get("wgDiffNewId") || mw.config.get("wgCurRevisionId");
          let tag = "{{".concat("subst:", "Copyvio/auto|url=".concat(params.source.replace(/http/g, "&#104;ttp").replace(/\n+/g, "\n").replace(/^\s*([^*])/gm, "* $1").replace(/^\* $/m, ""), "|OldRevision=").concat(revisionId, "}}"));
          const text = pageobj.getPageText();
          const oldcsd = text.match(/\{\{\s*(db(-\w*)?|d|delete)\s*(\|(?:\{\{[^{}]*\}\}|[^{}])*)?\}\}/i);
          if (oldcsd && confirm(window.wgULS("在页面上找到快速删除模板，要保留吗？\n\n当页面同时侵犯著作权又符合快速删除标准时，应该优先走快速删除程序。\n单击“确认”以保留快速删除模板，若您认为快速删除理由不合，单击“取消”以移除快速删除模板。", "在頁面上找到快速刪除模板，要保留嗎？\n\n當頁面同時侵犯版權又符合快速刪除標準時，應該優先走快速刪除程序。\n點擊「確認」以保留快速刪除模板，若您認為快速刪除理由不合，點擊「取消」以移除快速刪除模板。"))) {
            tag = "".concat(oldcsd[0], "\n").concat(tag);
          }
          if (params.g4) {
            let speedyTag = "{{delete";
            speedyTag += "|g4";
            if (params.g4_pagename) {
              speedyTag += "|".concat(params.g4_pagename, "|c1=[[Special:Undelete/").concat(params.g4_pagename, "]]");
            } else {
              speedyTag += "|c1=[[Special:Undelete/".concat(mw.config.get("wgPageName"), "]]");
            }
            speedyTag += "}}";
            tag = "".concat(speedyTag, "\n").concat(tag);
          }
          pageobj.setPageText(tag);
          pageobj.setEditSummary(window.wgULS("此页面疑似侵犯著作权", "此頁面疑似侵犯版權"));
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setWatchlist(Twinkle.getPref("copyvioWatchPage"));
          pageobj.save();
          if (Twinkle.getPref("markCopyvioPagesAsPatrolled")) {
            pageobj.patrol();
          }
        },
        copyvioList: (pageobj) => {
          const text = pageobj.getPageText();
          let output = "";
          const date = /* @__PURE__ */ new Date();
          const dateHeaderRegex = new RegExp("^==+\\s*".concat(date.getUTCMonth() + 1, "月").concat(date.getUTCDate(), "日\\s*==+"), "mg");
          if (!dateHeaderRegex.exec(text)) {
            output = "\n\n==".concat(date.getUTCMonth() + 1, "月").concat(date.getUTCDate(), "日==");
          }
          output += "\n{{".concat("subst:", "CopyvioVFDRecord|".concat(mw.config.get("wgPageName"), "}}"));
          pageobj.setAppendText(output);
          pageobj.setEditSummary("加入[[".concat(mw.config.get("wgPageName"), "]]"));
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setCreateOption("recreate");
          pageobj.append();
        }
      };
      Twinkle.copyvio.callback.evaluate = (e) => {
        const params = Morebits.quickForm.getInputData(e.target);
        if (!params.source.trim()) {
          void mw.notify(window.wgULS("请指定侵权来源", "請指定侵權來源"), {
            type: "warn",
            tag: "twinklecopyvio"
          });
          return;
        }
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(e.target);
        params.logpage = "LIB_talk:侵权提报";
        Morebits.wiki.addCheckpoint();
        Morebits.wiki.actionCompleted.redirect = mw.config.get("wgPageName");
        Morebits.wiki.actionCompleted.notice = window.wgULS("提报完成，将在几秒内刷新页面", "提報完成，將在幾秒內重新整理頁面");
        const ysarchives_page = new Morebits.wiki.page(mw.config.get("wgPageName"), window.wgULS("加入侵权模板到页面", "加入侵權模板到頁面"));
        ysarchives_page.setCallbackParameters(params);
        ysarchives_page.load(Twinkle.copyvio.callbacks.tryTagging);
        Morebits.wiki.removeCheckpoint();
      };
      Twinkle.addInitCallback(Twinkle.copyvio, "copyvio");
    })();
  }
});
//! src/Twinkle/modules/twinklexfd.js
var twinklexfd_exports = {};
var init_twinklexfd = __esm({
  "src/Twinkle/modules/twinklexfd.js"() {
    "use strict";
    /*! Twinkle.js - twinklexfd.js */
    (function twinklexfd() {
      Twinkle.xfd = () => {
        if (mw.config.get("wgNamespaceNumber") < 0 || !mw.config.get("wgArticleId") || mw.config.get("wgNamespaceNumber") === 6 && (document.querySelector("#mw-sharedupload") || !document.querySelector("#mw-imagepage-section-filehistory") && !Morebits.isPageRedirect())) {
          return;
        }
        Twinkle.addPortletLink(Twinkle.xfd.callback, window.wgULS("提删", "提刪"), "tw-xfd", window.wgULS("提交删除讨论", "提交刪除討論"));
      };
      Twinkle.xfd.currentRationale = null;
      Twinkle.xfd.printRationale = () => {
        if (Twinkle.xfd.currentRationale) {
          Morebits.status.printUserText(Twinkle.xfd.currentRationale, window.wgULS("您的理由已在下方提供，若您想重新提交，请将其复制到一新窗口中：", "您的理由已在下方提供，若您想重新提交，請將其複製到一新視窗中："));
          Twinkle.xfd.currentRationale = null;
        }
      };
      Twinkle.xfd.callback = () => {
        const Window = new Morebits.simpleWindow(600, 350);
        Window.setTitle(window.wgULS("提交存废讨论", "提交存廢討論"));
        Window.setScriptName("Twinkle");
        Window.addFooterLink(window.wgULS("提删设置", "提刪設定"), "H:TW/PREF#xfd");
        Window.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW/DOC#xfd");
        const form = new Morebits.quickForm(Twinkle.xfd.callback.evaluate);
        const categories = form.append({
          type: "select",
          name: "category",
          label: window.wgULS("提交类型：", "提交類別："),
          event: Twinkle.xfd.callback.change_category
        });
        categories.append({
          type: "option",
          label: window.wgULS("页面存废讨论", "頁面存廢討論"),
          selected: mw.config.get("wgNamespaceNumber") === 0,
          value: "afd"
        });
        categories.append({
          type: "option",
          label: window.wgULS("文件存废讨论", "檔案存廢討論"),
          selected: mw.config.get("wgNamespaceNumber") === 6,
          value: "ffd"
        });
        form.append({
          type: "checkbox",
          list: [{
            label: window.wgULS("如可能，通知页面创建者", "如可能，通知頁面建立者"),
            value: "notify",
            name: "notify",
            tooltip: window.wgULS("在页面创建者讨论页上放置一通知模板。", "在頁面建立者討論頁上放置一通知模板。"),
            checked: true
          }]
        });
        form.append({
          type: "field",
          label: "工作区",
          name: "work_area"
        });
        form.append({
          type: "submit"
        });
        const result = form.render();
        Window.setContent(result);
        Window.display();
        const evt = document.createEvent("Event");
        evt.initEvent("change", true, true);
        result.category.dispatchEvent(evt);
      };
      Twinkle.xfd.callback.change_category = (e) => {
        const {
          value
        } = e.target;
        const {
          form
        } = e.target;
        const [old_area] = Morebits.quickForm.getElements(e.target.form, "work_area");
        let work_area = null;
        const oldreasontextbox = form.querySelector("textarea");
        let oldreason = oldreasontextbox ? oldreasontextbox.value : "";
        const appendReasonBox = (xfd_cat) => {
          switch (xfd_cat) {
            case "fwdcsd":
              oldreason = decodeURIComponent(document.querySelector("#delete-reason").textContent).replace(/\+/g, " ");
              break;
            case "fame":
              oldreason = Twinkle.getPref("afdFameDefaultReason");
              break;
            case "substub":
              oldreason = Twinkle.getPref("afdSubstubDefaultReason");
              break;
            default:
              break;
          }
          work_area.append({
            type: "textarea",
            name: "xfdreason",
            label: window.wgULS("提删理由：", "提刪理由："),
            value: oldreason,
            tooltip: window.wgULS("您可以使用wikitext，Twinkle将自动为您加入签名。若您使用批量提删功能，存废讨论页只会使用第一次提交的理由，但之后您仍需提供以用于删除通告模板的参数。", "您可以使用wikitext，Twinkle將自動為您加入簽名。若您使用批次提刪功能，存廢討論頁只會使用第一次提交的理由，但之後您仍需提供以用於刪除通告模板的參數。"),
            placeholder: window.wgULS("此值亦显示于页面的删除通告模板内，故务必提供此值，避免使用“同上”等用语。", "此值亦顯示於頁面的刪除通告模板內，故務必提供此值，避免使用「同上」等用語。")
          });
        };
        switch (value) {
          case "afd": {
            work_area = new Morebits.quickForm.element({
              type: "field",
              label: window.wgULS("页面存废讨论", "頁面存廢討論"),
              name: "work_area"
            });
            work_area.append({
              type: "checkbox",
              list: [{
                label: "使用&lt;noinclude&gt;包裹模板",
                value: "noinclude",
                name: "noinclude",
                checked: mw.config.get("wgNamespaceNumber") === 10 && mw.config.get("wgPageContentModel") !== "Scribunto",
                // Template namespace
                tooltip: window.wgULS("使其不会在被包含时出现。", "使其不會在被包含時出現。"),
                disabled: mw.config.get("wgPageContentModel") === "Scribunto"
              }]
            });
            const afd_category = work_area.append({
              type: "select",
              name: "xfdcat",
              label: window.wgULS("选择提删类型：", "選擇提刪類別："),
              event: Twinkle.xfd.callback.change_afd_category
            });
            let afd_cat = "delete";
            if (Twinkle.getPref("afdDefaultCategory") === "same") {
              if (localStorage.Twinkle_afdCategory === void 0) {
                localStorage.Twinkle_afdCategory = "delete";
              } else {
                afd_cat = localStorage.Twinkle_afdCategory;
              }
            }
            afd_category.append({
              type: "option",
              label: window.wgULS("删除", "刪除"),
              value: "delete",
              selected: afd_cat === "delete"
            });
            afd_category.append({
              type: "option",
              label: window.wgULS("合并", "合併"),
              value: "merge",
              selected: afd_cat === "merge"
            });
            if (Twinkle.getPref("FwdCsdToXfd")) {
              afd_category.append({
                type: "option",
                label: window.wgULS("转交自快速删除候选", "轉交自快速刪除候選"),
                value: "fwdcsd",
                selected: afd_cat === "fwdcsd"
              });
            }
            afd_category.append({
              type: "option",
              label: window.wgULS("批量关注度提删", "批次關注度提刪"),
              value: "fame",
              selected: afd_cat === "fame"
            });
            afd_category.append({
              type: "option",
              label: window.wgULS("批量小小作品提删", "批次小小作品提刪"),
              value: "substub",
              selected: afd_cat === "substub"
            });
            afd_category.append({
              type: "option",
              label: window.wgULS("批量其他提删", "批次其他提刪"),
              value: "batch",
              selected: afd_cat === "batch"
            });
            work_area.append({
              type: "input",
              name: "mergeinto",
              label: window.wgULS("合并到：", "合併到："),
              hidden: true
            });
            appendReasonBox(afd_cat);
            work_area.append({
              type: "textarea",
              name: "fwdcsdreason",
              label: window.wgULS("转交理由：", "轉交理由："),
              tooltip: window.wgULS("您可以使用wikitext，Twinkle将自动为您加入签名。", "您可以使用wikitext，Twinkle將自動為您加入簽名。"),
              hidden: true
            });
            work_area = work_area.render();
            old_area.replaceWith(work_area);
            const evt = document.createEvent("Event");
            evt.initEvent("change", true, true);
            form.xfdcat.dispatchEvent(evt);
            break;
          }
          case "ffd":
            work_area = new Morebits.quickForm.element({
              type: "field",
              label: window.wgULS("文件存废讨论", "檔案存廢討論"),
              name: "work_area"
            });
            appendReasonBox("ffd");
            work_area = work_area.render();
            old_area.replaceWith(work_area);
            break;
          default:
            work_area = new Morebits.quickForm.element({
              type: "field",
              label: window.wgULS("未定义", "未定義"),
              name: "work_area"
            });
            work_area = work_area.render();
            old_area.replaceWith(work_area);
            break;
        }
        form.notify.checked = true;
        form.notify.disabled = false;
      };
      Twinkle.xfd.callback.change_afd_category = (e) => {
        switch (e.target.value) {
          case "merge":
            e.target.form.mergeinto.parentElement.removeAttribute("hidden");
            e.target.form.fwdcsdreason.parentElement.setAttribute("hidden", "");
            e.target.form.mergeinto.previousElementSibling.innerHTML = window.wgULS("合并到：", "合併到：");
            break;
          case "fwdcsd":
            e.target.form.mergeinto.parentElement.removeAttribute("hidden");
            e.target.form.fwdcsdreason.parentElement.removeAttribute("hidden");
            e.target.form.mergeinto.previousElementSibling.innerHTML = "提交人：";
            e.target.form.xfdreason.value = decodeURIComponent(document.querySelector("#delete-reason").textContent).replace(/\+/g, " ");
            break;
          case "fame":
            e.target.form.mergeinto.parentElement.setAttribute("hidden", "");
            e.target.form.fwdcsdreason.parentElement.setAttribute("hidden", "");
            e.target.form.xfdreason.value = Twinkle.getPref("afdFameDefaultReason");
            break;
          case "substub":
            e.target.form.mergeinto.parentElement.setAttribute("hidden", "");
            e.target.form.fwdcsdreason.parentElement.setAttribute("hidden", "");
            e.target.form.xfdreason.value = Twinkle.getPref("afdSubstubDefaultReason");
            break;
          default:
            e.target.form.mergeinto.parentElement.setAttribute("hidden", "");
            e.target.form.fwdcsdreason.parentElement.setAttribute("hidden", "");
        }
        if (Twinkle.getPref("afdDefaultCategory") === "same") {
          localStorage.Twinkle_afdCategory = e.target.value;
        }
      };
      Twinkle.xfd.callbacks = {
        afd: {
          main: (tagging_page) => {
            const params = tagging_page.getCallbackParameters();
            Twinkle.xfd.callbacks.afd.taggingArticle(tagging_page);
            const discussion_page = new Morebits.wiki.page(params.logpage, window.wgULS("加入讨论到当日列表", "加入討論到當日列表"));
            discussion_page.setFollowRedirect(true);
            discussion_page.setCallbackParameters(params);
            discussion_page.load(Twinkle.xfd.callbacks.afd.todaysList);
            if (params.notify) {
              if (params.creator === mw.config.get("wgUserName")) {
                Morebits.status.warn("".concat(window.wgULS("通知页面创建者（", "通知頁面建立者（") + params.creator, "）"), window.wgULS("您创建了该页，跳过通知", "您建立了該頁，跳過通知"));
                params.creator = null;
              } else {
                const talkPageName = "User talk:".concat(params.creator);
                const usertalkpage = new Morebits.wiki.page(talkPageName, "".concat(window.wgULS("通知页面创建者（", "通知頁面建立者（") + params.creator, "）"));
                const notifytext = "\n{{".concat("subst:").concat("AFDNote|".concat(Morebits.pageNameNorm, "}}--~~"), "~~");
                usertalkpage.setAppendText(notifytext);
                usertalkpage.setEditSummary("通知：页面[[".concat(Morebits.pageNameNorm, "]]存废讨论提名"));
                usertalkpage.setChangeTags(Twinkle.changeTags);
                usertalkpage.setCreateOption("recreate");
                usertalkpage.setWatchlist(Twinkle.getPref("xfdWatchUser"));
                usertalkpage.setFollowRedirect(true, false);
                usertalkpage.append();
              }
              if (params.lognomination) {
                Twinkle.xfd.callbacks.addToLog(params, params.creator);
              }
            } else if (params.lognomination) {
              Twinkle.xfd.callbacks.addToLog(params, null);
            }
          },
          taggingArticle: (pageobj) => {
            let text = pageobj.getPageText();
            const params = pageobj.getCallbackParameters();
            let tag = "{{vfd|".concat(Morebits.string.formatReasonText(params.xfdreason));
            if (Morebits.isPageRedirect()) {
              tag += "|r";
            }
            tag += "|date={{".concat("subst:", "#time:Y/m/d}}}}");
            if (params.noinclude) {
              tag = "<noinclude>".concat(tag, "</noinclude>");
              if (text.indexOf("{|") === 0) {
                tag += "\n";
              }
            } else {
              tag += "\n";
            }
            const textNoSd = text.replace(/\{\{\s*(db(-\w*)?|d|delete|(?:hang|hold)[- ]?on)\s*(\|(?:\{\{[^{}]*\}\}|[^{}])*)?\}\}\s*/gi, "");
            if (text !== textNoSd && confirm(window.wgULS("在页面上找到快速删除模板，要移除吗？", "在頁面上找到快速刪除模板，要移除嗎？"))) {
              text = textNoSd;
            }
            const textNoNotMandarin = text.replace(/\{\{\s*(NotMandarin|Notchinese|非中文|非現代漢語|非现代汉语|非現代標準漢語|非现代标准汉语)\s*(\|(?:\{\{[^{}]*\}\}|[^{}])*)?\}\}\s*/gi, "");
            if (text !== textNoNotMandarin && confirm(window.wgULS("在页面上找到非现代标准汉语模板，要移除吗？", "在頁面上找到非現代標準漢語模板，要移除嗎？"))) {
              text = textNoNotMandarin;
            }
            const textNoAfc = text.replace(/{{\s*AFC submission\s*\|\s*\|[^}]*?}}\s*/gi, "");
            if (text !== textNoAfc && confirm(window.wgULS("在页面上找到AFC提交模板，要移除吗？", "在頁面上找到AFC提交模板，要移除嗎？"))) {
              text = textNoAfc;
            }
            if (Twinkle.getPref("markXfdPagesAsPatrolled")) {
              pageobj.patrol();
            }
            const ysarchives_page = new Morebits.wikitext.page(text);
            text = ysarchives_page.insertAfterTemplates(tag, Twinkle.hatnoteRegex).getText();
            pageobj.setPageText(text);
            pageobj.setEditSummary("".concat(window.wgULS("页面存废讨论：[[", "頁面存廢討論：[[") + params.logpage, "#").concat(Morebits.pageNameNorm, "]]"));
            pageobj.setChangeTags(Twinkle.changeTags);
            pageobj.setWatchlist(Twinkle.getPref("xfdWatchPage"));
            pageobj.save();
          },
          todaysList: (pageobj) => {
            let text = pageobj.getPageText();
            const params = pageobj.getCallbackParameters();
            let type = "";
            let to = "";
            switch (params.xfdcat) {
              case "fwdcsd":
              case "merge":
                to = params.mergeinto;
              /* Fall through */
              default:
                type = params.xfdcat;
                break;
            }
            let append = true;
            switch (type) {
              case "fame":
              case "substub":
              case "batch": {
                const commentText = "<!-- Twinkle: User:".concat(mw.config.get("wgUserName"), " 的 ").concat(type, " 提删插入点，请勿更改或移除此行，除非不再于此页面提删 -->");
                let newText = "===[[:".concat(Morebits.pageNameNorm, "]]===");
                if (type === "fame") {
                  newText += "\n{{Findsources|".concat(Morebits.pageNameNorm, "}}");
                }
                if (text.includes(commentText)) {
                  text = text.replace(commentText, "".concat(newText, "\n\n").concat(commentText));
                  pageobj.setPageText(text);
                  append = false;
                } else {
                  const safesubst = "safesubst";
                  const appendText = "\n{{".concat(safesubst).concat(":SafeAfdHead}}\n".concat({
                    fame: '== 30天后仍挂有{{tl|notability}}模板的条目 ==\n<span style="font-size: smaller;">（已挂[[Template:notability|不符收录标准模板]]30天）</span>',
                    substub: '== 30天后仍挂有{{tl|substub}}模板的条目 ==\n<span style="font-size: smaller;">（已挂[[Template:substub|小小条目模板]]30天）</span>',
                    batch: "== 批量提删 =="
                  }[type], "\n").concat(newText, "\n\n").concat(commentText, "\n----\n:建议：删除前述页面；理由：").concat(Morebits.string.formatReasonText(params.xfdreason), "\n提报以上").concat({
                    fame: "<u>不符合收录标准</u>条目",
                    substub: "<u>长度过短</u>条目",
                    batch: "页面"
                  }[type], '的求闻编者及时间：<br id="no-new-title">~~').concat("~~"));
                  pageobj.setAppendText(appendText);
                }
                break;
              }
              default:
                pageobj.setAppendText("\n{{".concat("subst:", "DRItem|Type=".concat(type, "|DRarticles=").concat(Morebits.pageNameNorm, "|Reason=").concat(Morebits.string.formatReasonText(params.xfdreason)).concat(params.fwdcsdreason.trim() === "" ? "" : "<br>\n转交理由：".concat(params.fwdcsdreason), "|To=").concat(to, "}}~~").concat("~~")));
                break;
            }
            pageobj.setEditSummary("加入[[".concat(Morebits.pageNameNorm, "]]"));
            pageobj.setChangeTags(Twinkle.changeTags);
            pageobj.setWatchlist(Twinkle.getPref("xfdWatchDiscussion"));
            pageobj.setCreateOption("recreate");
            if (append) {
              pageobj.append();
            } else {
              pageobj.save();
            }
            Twinkle.xfd.currentRationale = null;
          },
          lookupCreation: (target_page) => {
            target_page.getStatusElement().info("完成");
            const params = target_page.getCallbackParameters();
            params.creator = target_page.getCreator();
            const tagging_page = new Morebits.wiki.page(mw.config.get("wgPageName"), window.wgULS("加入存废讨论模板到页面", "加入存廢討論模板到頁面"));
            tagging_page.setFollowRedirect(false);
            tagging_page.setCallbackParameters(params);
            tagging_page.load(Twinkle.xfd.callbacks.afd.tryTagging);
          },
          tryTagging: (tagging_page) => {
            const statelem = tagging_page.getStatusElement();
            if (!tagging_page.exists()) {
              statelem.error(window.wgULS("页面不存在，可能已被删除", "頁面不存在，可能已被刪除"));
              return;
            }
            const text = tagging_page.getPageText();
            const xfd = /(?:\{\{([rsaiftcmv]fd|md1|proposed deletion)[^{}]*?\}\})/i.exec(text);
            if (xfd && !confirm(window.wgULS("删除相关模板{{", "刪除相關模板{{") + xfd[1] + window.wgULS("}}已被置于页面中，您是否仍想继续提报？", "}}已被置於頁面中，您是否仍想繼續提報？"))) {
              statelem.error(window.wgULS("页面已被提交至存废讨论。", "頁面已被提交至存廢討論。"));
              return;
            }
            const copyvio = /(?:\{\{\s*(copyvio)[^{}]*?\}\})/i.exec(text);
            if (copyvio) {
              statelem.error(window.wgULS("页面中已有著作权验证模板。", "頁面中已有著作權驗證模板。"));
              return;
            }
            Twinkle.xfd.callbacks.afd.main(tagging_page);
          }
        },
        ffd: {
          main: (tagging_page) => {
            const params = tagging_page.getCallbackParameters();
            Twinkle.xfd.callbacks.ffd.taggingImage(tagging_page);
            const ysarchives_page = new Morebits.wiki.page(params.logpage, window.wgULS("加入讨论到当日列表", "加入討論到當日列表"));
            ysarchives_page.setFollowRedirect(true);
            ysarchives_page.setCallbackParameters(params);
            ysarchives_page.load(Twinkle.xfd.callbacks.ffd.todaysList);
            if (params.notify) {
              if (params.creator === mw.config.get("wgUserName")) {
                Morebits.status.warn("".concat(window.wgULS("通知页面创建者（", "通知頁面建立者（") + params.creator, "）"), window.wgULS("您创建了该页，跳过通知", "您建立了該頁，跳過通知"));
                return;
              }
              const talkPageName = "User talk:".concat(params.creator);
              const usertalkpage = new Morebits.wiki.page(talkPageName, "".concat(window.wgULS("通知页面创建者（", "通知頁面建立者（") + params.creator, "）"));
              const notifytext = "\n{{".concat("subst:", "idw|File:".concat(mw.config.get("wgTitle"), "}}"), "--~~", "~~");
              usertalkpage.setAppendText(notifytext);
              usertalkpage.setEditSummary("通知：文件[[".concat(Morebits.pageNameNorm, "]]存废讨论提名"));
              usertalkpage.setChangeTags(Twinkle.changeTags);
              usertalkpage.setCreateOption("recreate");
              usertalkpage.setWatchlist(Twinkle.getPref("xfdWatchUser"));
              usertalkpage.setFollowRedirect(true, false);
              usertalkpage.append();
              if (params.lognomination) {
                Twinkle.xfd.callbacks.addToLog(params, params.creator);
              }
            } else if (params.lognomination) {
              Twinkle.xfd.callbacks.addToLog(params, null);
            }
          },
          taggingImage: (pageobj) => {
            const text = pageobj.getPageText();
            const params = pageobj.getCallbackParameters();
            pageobj.setPageText("{{ifd|".concat(Morebits.string.formatReasonText(params.xfdreason), "|date={{").concat("subst:", "#time:c}}}}\n".concat(text)));
            pageobj.setEditSummary("".concat(window.wgULS("文件存废讨论：[[", "檔案存廢討論：[[") + params.logpage, "#").concat(Morebits.pageNameNorm, "]]"));
            pageobj.setChangeTags(Twinkle.changeTags);
            pageobj.setWatchlist(Twinkle.getPref("xfdWatchPage"));
            pageobj.setCreateOption("recreate");
            pageobj.save();
          },
          todaysList: (pageobj) => {
            const params = pageobj.getCallbackParameters();
            pageobj.setAppendText("\n{{".concat("subst:", "IfdItem|Filename=".concat(mw.config.get("wgTitle"), "|Uploader=").concat(params.creator, "|Reason=").concat(Morebits.string.formatReasonText(params.xfdreason), "}}--~~").concat("~~")));
            pageobj.setEditSummary("加入[[".concat(Morebits.pageNameNorm, "]]"));
            pageobj.setChangeTags(Twinkle.changeTags);
            pageobj.setWatchlist(Twinkle.getPref("xfdWatchDiscussion"));
            pageobj.setCreateOption("recreate");
            pageobj.append(() => {
              Twinkle.xfd.currentRationale = null;
            });
          },
          lookupCreation: (target_page) => {
            target_page.getStatusElement().info("完成");
            const params = target_page.getCallbackParameters();
            params.creator = target_page.getCreator();
            const tagging_page = new Morebits.wiki.page(mw.config.get("wgPageName"), window.wgULS("加入存废讨论模板到文件描述页", "加入存廢討論模板到檔案描述頁"));
            tagging_page.setFollowRedirect(false);
            tagging_page.setCallbackParameters(params);
            tagging_page.load(Twinkle.xfd.callbacks.ffd.tryTagging);
          },
          tryTagging: (tagging_page) => {
            const statelem = tagging_page.getStatusElement();
            if (!tagging_page.exists()) {
              statelem.error(window.wgULS("页面不存在，可能已被删除", "頁面不存在，可能已被刪除"));
              return;
            }
            const text = tagging_page.getPageText();
            const xfd = /(?:\{\{([rsaiftcmv]fd|md1|proposed deletion)[^{}]*?\}\})/i.exec(text);
            if (xfd && !confirm(window.wgULS("删除相关模板{{", "刪除相關模板{{") + xfd[1] + window.wgULS("}}已被置于页面中，您是否仍想继续提报？", "}}已被置於頁面中，您是否仍想繼續提報？"))) {
              statelem.error(window.wgULS("页面已被提交至存废讨论。", "頁面已被提交至存廢討論。"));
              return;
            }
            Twinkle.xfd.callbacks.ffd.main(tagging_page);
          }
        },
        addToLog: (params, initialContrib) => {
          const editsummary = window.wgULS("记录对[[", "記錄對[[") + Morebits.pageNameNorm + window.wgULS("]]的存废讨论提名", "]]的存廢討論提名");
          const usl = new Morebits.userspaceLogger(Twinkle.getPref("xfdLogPageName"));
          usl.initialText = window.wgULS("这是该用户使用[[H:TW|Twinkle]]的提删模块做出的[[LIB:XFD|存废讨论]]提名列表。\n\n若您不再想保留此日志，请在[[".concat(Twinkle.getPref("configPage"), "|参数设置]]中关掉，并使用[[LIB:CSD#O1|CSD O1]]提交快速删除。"), "這是該使用者使用[[H:TW|Twinkle]]的提刪模塊做出的[[LIB:XFD|存廢討論]]提名列表。\n\n若您不再想保留此日誌，請在[[".concat(Twinkle.getPref("configPage"), "|偏好設定]]中關掉，並使用[[LIB:CSD#O1|CSD O1]]提交快速刪除。"));
          let xfdCatName;
          switch (params.xfdcat) {
            case "delete":
              xfdCatName = window.wgULS("删除", "刪除");
              break;
            case "merge":
              xfdCatName = window.wgULS("合并到", "合併到");
              break;
            case "fwdcsd":
              xfdCatName = window.wgULS("转交自快速删除候选", "轉交自快速刪除候選");
              break;
            case "fame":
              xfdCatName = window.wgULS("批量关注度提删", "批次關注度提刪");
              break;
            case "substub":
              xfdCatName = window.wgULS("批量小小作品提删", "批次小小作品提刪");
              break;
            case "batch":
              xfdCatName = window.wgULS("批量其他提删", "批次其他提刪");
              break;
            default:
              xfdCatName = window.wgULS("文件存废讨论", "檔案存廢討論");
              break;
          }
          let appendText = "# [[:".concat(Morebits.pageNameNorm, "]]");
          if (mw.config.get("wgNamespaceNumber") === 6) {
            appendText += "（[{{fullurl:Special:Log|page=".concat(mw.util.wikiUrlencode(mw.config.get("wgPageName")), "}} ").concat(window.wgULS("日志", "日誌"), "]）");
          }
          appendText += "：".concat(xfdCatName);
          if (params.xfdcat === "merge") {
            appendText += "[[:".concat(params.mergeinto, "]]");
          }
          appendText += "。";
          if (params.xfdreason) {
            appendText += "'''".concat(params.xfdcat === "fwdcsd" ? window.wgULS("原删除理据", "原刪除理據") : window.wgULS("理据", "理據"), "'''：").concat(Morebits.string.formatReasonForLog(params.xfdreason));
            appendText = Morebits.string.appendPunctuation(appendText);
          }
          if (params.fwdcsdreason) {
            appendText += "'''".concat(params.xfdcat === "fwdcsd" ? window.wgULS("转交理据", "轉交理據") : window.wgULS("理据", "理據"), "'''：").concat(Morebits.string.formatReasonForLog(params.fwdcsdreason));
            appendText = Morebits.string.appendPunctuation(appendText);
          }
          if (initialContrib) {
            appendText += "；通知{{user|".concat(initialContrib, "}}");
          }
          appendText += " ~~".concat("~~", "~\n");
          usl.changeTags = Twinkle.changeTags;
          usl.log(appendText, editsummary);
        }
      };
      Twinkle.xfd.callback.evaluate = (e) => {
        const params = Morebits.quickForm.getInputData(e.target);
        if (params.xfdcat === "merge" && params.mergeinto.trim() === "") {
          void mw.notify(window.wgULS("请提供合并目标！", "請提供合併目標！"), {
            type: "warn",
            tag: "twinklexfd"
          });
          return;
        }
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(e.target);
        Twinkle.xfd.currentRationale = params.xfdreason;
        Morebits.status.onError(Twinkle.xfd.printRationale);
        if (!params.category) {
          Morebits.status.error("错误", "未定义的动作");
          return;
        }
        let target_page;
        const date = new Morebits.date();
        switch (params.category) {
          case "afd":
            params.logpage = "LIB_talk:存废讨论/记录/".concat(date.format("YYYY/MM/DD", "utc"));
            params.lognomination = Twinkle.getPref("logXfdNominations") && !Twinkle.getPref("noLogOnXfdNomination").includes(params.xfdcat);
            Morebits.wiki.addCheckpoint();
            Morebits.wiki.actionCompleted.redirect = params.logpage;
            Morebits.wiki.actionCompleted.notice = window.wgULS("提名完成，重定向到讨论页", "提名完成，重新導向到討論頁");
            target_page = new Morebits.wiki.page(mw.config.get("wgPageName"), window.wgULS("获取页面创建信息", "取得頁面建立資訊"));
            target_page.setCallbackParameters(params);
            if (mw.config.get("wgPageContentModel") === "wikitext") {
              target_page.setLookupNonRedirectCreator(true);
            }
            target_page.lookupCreation(Twinkle.xfd.callbacks.afd.lookupCreation);
            Morebits.wiki.removeCheckpoint();
            break;
          case "ffd": {
            params.logpage = "LIB_talk:存废讨论/记录/".concat(date.format("YYYY/MM/DD", "utc"));
            params.lognomination = Twinkle.getPref("logXfdNominations") && !Twinkle.getPref("noLogOnXfdNomination").includes("ffd");
            Morebits.wiki.addCheckpoint();
            Morebits.wiki.actionCompleted.redirect = params.logpage;
            Morebits.wiki.actionCompleted.notice = window.wgULS("提名完成，重定向到讨论页", "提名完成，重新導向到討論頁");
            const ysarchives_page = new Morebits.wiki.page(mw.config.get("wgPageName"), window.wgULS("获取页面创建信息", "取得頁面建立資訊"));
            ysarchives_page.setCallbackParameters(params);
            ysarchives_page.setLookupNonRedirectCreator(true);
            ysarchives_page.lookupCreation(Twinkle.xfd.callbacks.ffd.lookupCreation);
            Morebits.wiki.removeCheckpoint();
            break;
          }
          default:
            void mw.notify("twinklexfd：未定义的类别", {
              type: "warn",
              tag: "twinklexfd"
            });
            break;
        }
      };
      Twinkle.addInitCallback(Twinkle.xfd, "xfd");
    })();
  }
});
//! src/Twinkle/modules/twinkleimage.js
var twinkleimage_exports = {};
var init_twinkleimage = __esm({
  "src/Twinkle/modules/twinkleimage.js"() {
    "use strict";
    /*! Twinkle.js - twinkleimage.js */
    (function twinkleimage() {
      Twinkle.image = () => {
        if (mw.config.get("wgNamespaceNumber") === 6 && !document.querySelector("#mw-sharedupload") && document.querySelector("#mw-imagepage-section-filehistory")) {
          Twinkle.addPortletLink(Twinkle.image.callback, window.wgULS("图权", "圖權"), "tw-di", window.wgULS("提交文件快速删除", "提交檔案快速刪除"));
        }
      };
      Twinkle.image.callback = () => {
        const Window = new Morebits.simpleWindow(600, 330);
        Window.setTitle(window.wgULS("文件快速删除候选", "檔案快速刪除候選"));
        Window.setScriptName("Twinkle");
        Window.addFooterLink(window.wgULS("快速删除条例", "快速刪除條例"), "LIB:CSD");
        Window.addFooterLink(window.wgULS("图权设置", "圖權設定"), "H:TW/PREF#image");
        Window.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW/DOC#image");
        const form = new Morebits.quickForm(Twinkle.image.callback.evaluate);
        form.append({
          type: "checkbox",
          list: [{
            label: window.wgULS("通知上传者", "通知上傳者"),
            value: "notify",
            name: "notify",
            tooltip: window.wgULS("若您在标记同一用户的很多文件，请取消此复选框以避免发送过多消息。CSD F5永远不会通知。", "若您在標記同一使用者的很多檔案，請取消此核取方塊以避免發送過多訊息。CSD F5永遠不會通知。"),
            checked: Twinkle.getPref("notifyUserOnDeli")
          }]
        });
        const field = form.append({
          type: "field",
          label: window.wgULS("需要的动作", "需要的動作")
        });
        field.append({
          type: "radio",
          name: "type",
          list: [{
            label: window.wgULS("明显侵权之文件（CSD F1）", "明顯侵權之檔案（CSD F1）"),
            value: "no permission",
            tooltip: window.wgULS("上传者宣称拥有，而在其他来源找到的文件，或从侵权的来源获取的文件。", "上傳者宣稱擁有，而在其他來源找到的檔案，或從侵權的來源取得的檔案。"),
            subgroup: {
              name: "f1_source",
              type: "textarea",
              label: window.wgULS("侵权来源：", "侵權來源：")
            }
          }, {
            label: window.wgULS("来源不明（CSD F3）", "來源不明（CSD F3）"),
            value: "no source",
            checked: true,
            tooltip: window.wgULS("本文件并未注明原始出处", "本檔案並未註明原始出處")
          }, {
            label: window.wgULS("未知著作权信息（CSD F3）", "未知著作權資訊（CSD F3）"),
            value: "no license",
            tooltip: window.wgULS("本文件缺少著作权信息", "本檔案缺少著作權資訊")
          }, {
            label: window.wgULS("著作权无法被查证（CSD F3）", "著作權無法被查證（CSD F3）"),
            value: "no license",
            tooltip: window.wgULS("本文件声称的著作权信息无法被查证", "本檔案聲稱的著作權資訊無法被查證")
          }, {
            label: window.wgULS("可被替代的非自由著作权文件（CSD F4）", "可被替代的非自由著作權檔案（CSD F4）"),
            value: "replaceable fair use",
            tooltip: window.wgULS("文件仅用于描述、识别或评论文件中展示的事物，或仅用作插图，且满足以下四个条件之一。若给出了其他合理使用依据，不适用本条。如对文件的可替代性存在争议，应交文件存废讨论处理。本条也不适用于正在或曾经由文件存废讨论处理过的文件。", "檔案僅用於描述、辨識或評論檔案中展示的事物，或僅用作插圖，且滿足以下四個條件之一。若給出了其他合理使用依據，不適用本條。如對檔案的可替代性存在爭議，應交檔案存廢討論處理。本條也不適用於正在或曾經由檔案存廢討論處理過的檔案。"),
            subgroup: {
              name: "f4_type",
              type: "select",
              label: window.wgULS("适用类型：", "適用類別："),
              style: "width: 85%;",
              list: [{
                type: "option",
                label: window.wgULS("请选择", "請選擇"),
                value: ""
              }, {
                type: "option",
                label: window.wgULS("有其他自由著作权文件展示相同的事物", "有其他自由著作權檔案展示相同的事物"),
                value: "1"
              }, {
                type: "option",
                label: window.wgULS("文件描述的是在世或假定在世人物、仍然存在的建筑、室外雕塑或仍然在售的商品，且预计自行拍摄的照片不受他人著作权保护", "檔案描述的是在世或假定在世人物、仍然存在的建築、室外雕塑或仍然在售的商品，且預計自行拍攝的相片不受他人著作權保護"),
                value: "2"
              }, {
                type: "option",
                label: window.wgULS("文件为可自行绘制的地图或图表", "檔案為可自行繪製的地圖或圖表"),
                value: "3"
              }, {
                type: "option",
                label: window.wgULS("文件来自商业图片机构（如Getty）", "檔案來自商業圖片機構（如Getty）"),
                value: "4"
              }]
            }
          }, {
            label: window.wgULS("没有被条目使用的非自由著作权文件（CSD F5）", "沒有被條目使用的非自由著作權檔案（CSD F5）"),
            value: "orphaned fair use",
            tooltip: window.wgULS("本文件为非自由著作权且没有被条目使用", "本檔案為非自由著作權且沒有被條目使用")
          }, {
            label: window.wgULS("没有填写任何合理使用依据的非自由著作权文件（CSD F5）", "沒有填寫任何合理使用依據的非自由著作權檔案（CSD F5）"),
            value: "no fair use rationale",
            tooltip: window.wgULS("不适用于有争议但完整的合理使用依据。若非自由著作权文件只有部分条目的使用依据，但同时被使用于未提供合理使用依据的条目，则本条例也不适用。", "不適用於有爭議但完整的合理使用依據。若非自由著作權檔案只有部分條目的使用依據，但同時被使用於未提供合理使用依據的條目，則本條例也不適用。")
          }]
        });
        form.append({
          type: "submit"
        });
        const result = form.render();
        Window.setContent(result);
        Window.display();
        const evt = document.createEvent("Event");
        evt.initEvent("change", true, true);
        result.type[0].dispatchEvent(evt);
      };
      Twinkle.image.callback.evaluate = (event) => {
        let type;
        let notify = event.target.notify.checked;
        const types = event.target.type;
        var _iterator20 = _createForOfIteratorHelper(types), _step20;
        try {
          for (_iterator20.s(); !(_step20 = _iterator20.n()).done; ) {
            const type_ = _step20.value;
            if (type_.checked) {
              type = type_.values;
              break;
            }
          }
        } catch (err) {
          _iterator20.e(err);
        } finally {
          _iterator20.f();
        }
        let csdcrit;
        switch (type) {
          case "no source":
            csdcrit = "f3";
            break;
          case "no license":
            csdcrit = "f3";
            break;
          case "orphaned fair use":
            csdcrit = "f5";
            notify = false;
            break;
          case "no permission":
            csdcrit = "f1";
            break;
          case "no fair use rationale":
            csdcrit = "f5";
            break;
          case "replaceable fair use":
            csdcrit = "f4";
            break;
          default:
            throw new Error("Twinkle.image.callback.evaluate：未知条款");
        }
        const lognomination = Twinkle.getPref("logSpeedyNominations") && !Twinkle.getPref("noLogOnSpeedyNomination").includes(csdcrit.toLowerCase());
        const templatename = type;
        const params = {
          type,
          templatename,
          normalized: csdcrit,
          lognomination
        };
        if (csdcrit === "f1") {
          params.f1_source = event.target["type.f1_source"].value;
        }
        if (csdcrit === "f4") {
          const f4_type = event.target["type.f4_type"].value;
          if (!f4_type) {
            void mw.notify(window.wgULS("CSD F4：请选择适用类型。", "CSD F4：請選擇適用類別。"), {
              type: "warn",
              tag: "twinkleimage"
            });
            return false;
          }
          params.f4_type = f4_type;
        }
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(event.target);
        Morebits.wiki.actionCompleted.redirect = mw.config.get("wgPageName");
        Morebits.wiki.actionCompleted.notice = window.wgULS("标记完成", "標記完成");
        const ysarchives_page = new Morebits.wiki.page(mw.config.get("wgPageName"), window.wgULS("加入删除标记", "加入刪除標記"));
        ysarchives_page.setCallbackParameters(params);
        ysarchives_page.load(Twinkle.image.callbacks.taggingImage);
        if (notify) {
          ysarchives_page.lookupCreation(Twinkle.image.callbacks.userNotification);
        } else {
          if (lognomination) {
            params.fromDI = true;
            Twinkle.speedy.callbacks.user.addToLog(params, null);
          }
          if (type !== "orphaned fair use") {
            const noteData = document.createElement("pre");
            noteData.appendChild(document.createTextNode("{{".concat("subst:", "Uploadvionotice|".concat(Morebits.pageNameNorm, "}}--~~"), "~~")));
            Morebits.status.info("提示", [window.wgULS("这些内容应贴进上传者对话页：", "這些內容應貼進上傳者討論頁："), noteData]);
          }
        }
      };
      Twinkle.image.callbacks = {
        taggingImage: (pageobj) => {
          let text = pageobj.getPageText();
          const params = pageobj.getCallbackParameters();
          text = text.replace(/\{\{(mtc|(copy |move )?to ?(share|commons)|move to (qiuwen share|wikimedia commons)|copy to (qiuwen share|wikimedia commons))[^}]*\}\}/gi, "");
          if (params.type !== "orphaned fair use") {
            const ysarchives_page = new Morebits.wiki.page("LIB_talk:存废讨论/文件快速删除提报", window.wgULS("加入快速删除记录项", "加入快速刪除記錄項"));
            ysarchives_page.setFollowRedirect(true);
            ysarchives_page.setCallbackParameters(params);
            ysarchives_page.load(Twinkle.image.callbacks.imageList);
          }
          let tag = "";
          switch (params.type) {
            case "orphaned fair use":
              tag = "{{".concat("subst:", "orphaned fair use}}\n");
              break;
            case "no permission":
              tag = "{{".concat("subst:", "".concat(params.templatename, "/auto|1=").concat(params.f1_source.replace(/http/g, "&#104;ttp").replace(/\n+/g, "\n").replace(/^\s*([^*])/gm, "* $1").replace(/^\* $/m, ""), "}}\n"));
              break;
            case "replaceable fair use":
              tag = "{{".concat("subst:", "".concat(params.templatename, "/auto|1=").concat(params.f4_type, "}}\n"));
              break;
            default:
              tag = "{{".concat("subst:", "".concat(params.templatename, "/auto}}\n"));
              break;
          }
          const textNoSd = text.replace(/\{\{\s*(db(-\w*)?|d|delete|(?:hang|hold)[- ]?on)\s*(\|(?:\{\{[^{}]*\}\}|[^{}])*)?\}\}\s*/gi, "");
          if (text !== textNoSd && confirm(window.wgULS("在页面上找到快速删除模板，要移除吗？", "在頁面上找到快速刪除模板，要移除嗎？"))) {
            text = textNoSd;
          }
          pageobj.setPageText(tag + text);
          let editSummary = window.wgULS("请求快速删除（", "請求快速刪除（");
          editSummary += "[[QW:CSD#".concat(params.normalized.toUpperCase(), "|CSD ").concat(params.normalized.toUpperCase(), "]]");
          editSummary += "）";
          pageobj.setEditSummary(editSummary);
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setWatchlist(Twinkle.getPref("deliWatchPage"));
          pageobj.setCreateOption("nocreate");
          pageobj.save();
        },
        userNotification: (pageobj) => {
          const params = pageobj.getCallbackParameters();
          const initialContrib = pageobj.getCreator();
          if (initialContrib === mw.config.get("wgUserName")) {
            pageobj.getStatusElement().warn("您（".concat(initialContrib, "）").concat(window.wgULS("创建了该页，跳过通知", "建立了該頁，跳過通知")));
          } else {
            const talkPageName = "User talk:".concat(initialContrib);
            const usertalkpage = new Morebits.wiki.page(talkPageName, "".concat(window.wgULS("通知上传者", "通知上傳者"), "（").concat(initialContrib, "）"));
            const notifytext = "\n{{".concat("subst:", "Di-".concat(params.templatename, "-notice|1=").concat(Morebits.pageNameNorm, "}}--~~"), "~~");
            usertalkpage.setAppendText(notifytext);
            usertalkpage.setEditSummary(window.wgULS("通知：文件[[", "通知：檔案[[") + Morebits.pageNameNorm + window.wgULS("]]快速删除提名", "]]快速刪除提名"));
            usertalkpage.setChangeTags(Twinkle.changeTags);
            usertalkpage.setCreateOption("recreate");
            usertalkpage.setWatchlist(Twinkle.getPref("deliWatchUser"));
            usertalkpage.setFollowRedirect(true, false);
            usertalkpage.append();
          }
          if (params.lognomination) {
            params.fromDI = true;
            Twinkle.speedy.callbacks.user.addToLog(params, initialContrib);
          }
        },
        imageList: (pageobj) => {
          const text = pageobj.getPageText();
          pageobj.setPageText("".concat(text, "\n* [[:").concat(Morebits.pageNameNorm, "]]--~~").concat("~~"));
          pageobj.setEditSummary("加入[[".concat(Morebits.pageNameNorm, "]]"));
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setCreateOption("recreate");
          pageobj.save();
        }
      };
      Twinkle.addInitCallback(Twinkle.image, "image");
    })();
  }
});
//! src/Twinkle/modules/twinkleprotect.js
var twinkleprotect_exports = {};
var init_twinkleprotect = __esm({
  "src/Twinkle/modules/twinkleprotect.js"() {
    "use strict";
    init_api();
    /*! Twinkle.js - twinkleprotect.js */
    (function twinkleprotect($) {
      const $body = $("body");
      Twinkle.protect = () => {
        if (mw.config.get("wgNamespaceNumber") < 0 || mw.config.get("wgNamespaceNumber") === 8) {
          return;
        }
        Twinkle.addPortletLink(Twinkle.protect.callback, window.wgULS("保护", "保護"), "tw-rpp", Morebits.userIsSysop ? window.wgULS("保护页面", "保護頁面") : window.wgULS("请求保护页面", "請求保護頁面"));
      };
      Twinkle.protect.callback = () => {
        const Window = new Morebits.simpleWindow(620, 530);
        Window.setTitle(Morebits.userIsSysop ? window.wgULS("施行或请求保护页面", "施行或請求保護頁面") : window.wgULS("请求保护页面", "請求保護頁面"));
        Window.setScriptName("Twinkle");
        Window.addFooterLink(window.wgULS("保护条例", "保護條例"), "LIB:PROT");
        Window.addFooterLink(window.wgULS("保护设置", "保護設定"), "H:TW/PREF#protect");
        Window.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW/DOC#protect");
        const form = new Morebits.quickForm(Twinkle.protect.callback.evaluate);
        const actionfield = form.append({
          type: "field",
          label: window.wgULS("操作类型", "操作類別")
        });
        if (Morebits.userIsSysop) {
          actionfield.append({
            type: "radio",
            name: "actiontype",
            event: Twinkle.protect.callback.changeAction,
            list: [{
              label: window.wgULS("保护页面", "保護頁面"),
              value: "protect",
              checked: true
            }]
          });
        }
        actionfield.append({
          type: "radio",
          name: "actiontype",
          event: Twinkle.protect.callback.changeAction,
          list: [{
            label: window.wgULS("请求保护页面", "請求保護頁面"),
            value: "request",
            tooltip: window.wgULS("若您想在LIB:RFPP请求保护此页", "若您想在LIB:RFPP請求保護此頁") + (Morebits.userIsSysop ? "而不是自行完成。" : "。"),
            checked: !Morebits.userIsSysop
          }, {
            label: window.wgULS("用保护模板标记此页", "用保護模板標記此頁"),
            value: "tag",
            tooltip: window.wgULS("可以用此为页面加上合适的保护模板。", "可以用此為頁面加上合適的保護模板。"),
            disabled: mw.config.get("wgArticleId") === 0 || mw.config.get("wgPageContentModel") === "Scribunto"
          }]
        });
        form.append({
          type: "field",
          label: window.wgULS("默认", "預設"),
          name: "field_preset"
        });
        form.append({
          type: "field",
          label: "1",
          name: "field1"
        });
        form.append({
          type: "field",
          label: "2",
          name: "field2"
        });
        form.append({
          type: "submit"
        });
        const result = form.render();
        Window.setContent(result);
        Window.display();
        const evt = document.createEvent("Event");
        evt.initEvent("change", true, true);
        result.actiontype[0].dispatchEvent(evt);
        Twinkle.protect.fetchProtectionLevel();
      };
      const isTemplate = mw.config.get("wgNamespaceNumber") === 10 || mw.config.get("wgNamespaceNumber") === 828;
      Twinkle.protect.currentProtectionLevels = {};
      Twinkle.protect.previousProtectionLevels = {};
      Twinkle.protect.fetchProtectionLevel = () => {
        const params = {
          format: "json",
          indexpageids: true,
          action: "query",
          list: "logevents",
          letype: "protect",
          letitle: mw.config.get("wgPageName"),
          prop: "info",
          inprop: "protection|watched",
          titles: mw.config.get("wgPageName")
        };
        void api.get(params).then((protectData) => {
          const [pageid] = protectData.query.pageids;
          const page = protectData.query.pages[pageid];
          const current = {};
          const previous = {};
          Twinkle.protect.watched = page.watchlistexpiry || page.watched === "";
          var _iterator21 = _createForOfIteratorHelper(page.protection), _step21;
          try {
            for (_iterator21.s(); !(_step21 = _iterator21.n()).done; ) {
              const protection = _step21.value;
              if (protection.type !== "aft") {
                current[protection.type] = {
                  level: protection.level,
                  expiry: protection.expiry,
                  cascade: protection.cascade === ""
                };
              }
            }
          } catch (err) {
            _iterator21.e(err);
          } finally {
            _iterator21.f();
          }
          if (protectData.query.logevents.length >= 1 && protectData.query.logevents[0].action !== "unprotect") {
            [Twinkle.protect.previousProtectionLog] = protectData.query.logevents;
          } else if (protectData.query.logevents.length >= 2) {
            [, Twinkle.protect.previousProtectionLog] = protectData.query.logevents;
          }
          if (Twinkle.protect.previousProtectionLog) {
            var _iterator22 = _createForOfIteratorHelper(Twinkle.protect.previousProtectionLog.params.details), _step22;
            try {
              for (_iterator22.s(); !(_step22 = _iterator22.n()).done; ) {
                const protection = _step22.value;
                if (protection.type !== "aft") {
                  previous[protection.type] = {
                    level: protection.level,
                    expiry: protection.expiry,
                    cascade: protection.cascade === ""
                  };
                }
              }
            } catch (err) {
              _iterator22.e(err);
            } finally {
              _iterator22.f();
            }
          }
          Twinkle.protect.hasProtectLog = !!protectData.query.logevents.length;
          Twinkle.protect.currentProtectionLevels = current;
          Twinkle.protect.previousProtectionLevels = previous;
          Twinkle.protect.callback.showLogAndCurrentProtectInfo();
        });
      };
      Twinkle.protect.callback.showLogAndCurrentProtectInfo = () => {
        const currentlyProtected = Object.keys(Twinkle.protect.currentProtectionLevels).length !== 0;
        if (Twinkle.protect.hasProtectLog || Twinkle.protect.hasStableLog) {
          const $linkMarkup = $("<span>");
          if (Twinkle.protect.hasProtectLog) {
            $linkMarkup.append($('<a rel="noopener" target="_blank" href="'.concat(mw.util.getUrl("Special:Log", {
              action: "view",
              page: mw.config.get("wgPageName"),
              type: "protect"
            }), '">').concat(window.wgULS("保护日志", "保護日誌"), "</a>")), Twinkle.protect.hasStableLog ? $("<span>").html(" &bull; ") : null);
          }
          Morebits.status.init($body.find('div[name="hasprotectlog"] span')[0]);
          Morebits.status.warn(currentlyProtected ? window.wgULS("先前保护", "先前保護") : [window.wgULS("此页面曾在", "此頁面曾在"), $("<b>".concat(new Morebits.date(Twinkle.protect.previousProtectionLog.timestamp).calendar("utc"), "</b>"))[0], "被".concat(Twinkle.protect.previousProtectionLog.user).concat(window.wgULS("保护", "保護"), "："), ...Twinkle.protect.formatProtectionDescription(Twinkle.protect.previousProtectionLevels)], $linkMarkup[0]);
        }
        Morebits.status.init($body.find('div[name="currentprot"] span')[0]);
        let protectionNode = [];
        let statusLevel = "info";
        protectionNode = Twinkle.protect.formatProtectionDescription(Twinkle.protect.currentProtectionLevels);
        if (currentlyProtected) {
          statusLevel = "warn";
        }
        Morebits.status[statusLevel](window.wgULS("当前保护等级", "目前保護等級"), protectionNode);
      };
      Twinkle.protect.callback.changeAction = (e) => {
        let field_preset;
        let field1;
        let field2;
        switch (e.target.values) {
          case "protect":
            field_preset = new Morebits.quickForm.element({
              type: "field",
              label: window.wgULS("默认", "預設"),
              name: "field_preset"
            });
            field_preset.append({
              type: "select",
              name: "category",
              label: window.wgULS("选择默认：", "選擇預設："),
              event: Twinkle.protect.callback.changePreset,
              list: mw.config.get("wgArticleId") ? Twinkle.protect.protectionTypesAdmin : Twinkle.protect.protectionTypesCreate
            });
            field2 = new Morebits.quickForm.element({
              type: "field",
              label: window.wgULS("保护选项", "保護選項"),
              name: "field2"
            });
            field2.append({
              type: "div",
              name: "currentprot",
              label: " "
            });
            field2.append({
              type: "div",
              name: "hasprotectlog",
              label: " "
            });
            if (mw.config.get("wgArticleId")) {
              field2.append({
                type: "checkbox",
                event: Twinkle.protect.formevents.editmodify,
                list: [{
                  label: window.wgULS("修改编辑权限", "修改編輯權限"),
                  name: "editmodify",
                  tooltip: window.wgULS("若此项关闭，编辑权限将不会修改。", "若此項關閉，編輯權限將不會修改。"),
                  checked: true
                }]
              });
              field2.append({
                type: "select",
                name: "editlevel",
                label: window.wgULS("编辑权限：", "編輯權限："),
                event: Twinkle.protect.formevents.editlevel,
                list: Twinkle.protect.protectionLevels.filter(
                  // Filter TE outside of templates and modules
                  (level) => {
                    return isTemplate || level.value !== "templateeditor";
                  }
                )
              });
              field2.append({
                type: "select",
                name: "editexpiry",
                label: window.wgULS("终止时间：", "終止時間："),
                event: (event) => {
                  if (event.target.value === "custom") {
                    Twinkle.protect.doCustomExpiry(event.target);
                  }
                  $("input[name=small]", $(event.target).closest("form"))[0].checked = event.target.selectedIndex >= 4;
                },
                // default expiry selection (2 days) is conditionally set in Twinkle.protect.callback.changePreset
                list: Twinkle.protect.protectionLengths
              });
              field2.append({
                type: "checkbox",
                event: Twinkle.protect.formevents.movemodify,
                list: [{
                  label: window.wgULS("修改移动权限", "修改移動權限"),
                  name: "movemodify",
                  tooltip: window.wgULS("若此项被关闭，移动权限将不被修改。", "若此項被關閉，移動權限將不被修改。"),
                  checked: true
                }]
              });
              field2.append({
                type: "select",
                name: "movelevel",
                label: window.wgULS("移动权限：", "移動權限："),
                event: Twinkle.protect.formevents.movelevel,
                list: Twinkle.protect.protectionLevels.filter(
                  // Autoconfirmed is required for a move, redundant
                  (level) => {
                    return level.value !== "autoconfirmed" && (isTemplate || level.value !== "templateeditor");
                  }
                )
              });
              field2.append({
                type: "select",
                name: "moveexpiry",
                label: window.wgULS("终止时间：", "終止時間："),
                event: (event) => {
                  if (event.target.value === "custom") {
                    Twinkle.protect.doCustomExpiry(event.target);
                  }
                },
                // default expiry selection (2 days) is conditionally set in Twinkle.protect.callback.changePreset
                list: Twinkle.protect.protectionLengths
              });
            } else {
              field2.append({
                type: "select",
                name: "createlevel",
                label: window.wgULS("创建权限：", "建立權限："),
                event: Twinkle.protect.formevents.createlevel,
                list: Twinkle.protect.protectionLevels.filter(
                  // Filter TE always, and autoconfirmed in mainspace
                  (level) => {
                    return level.value !== "templateeditor";
                  }
                )
              });
              field2.append({
                type: "select",
                name: "createexpiry",
                label: window.wgULS("终止时间：", "終止時間："),
                event: (event) => {
                  if (event.target.value === "custom") {
                    Twinkle.protect.doCustomExpiry(event.target);
                  }
                },
                // default expiry selection (indefinite) is conditionally set in Twinkle.protect.callback.changePreset
                list: Twinkle.protect.protectionLengths
              });
            }
            field2.append({
              type: "checkbox",
              list: [{
                name: "close",
                label: window.wgULS("标记请求保护页面中的请求", "標記請求保護頁面中的請求"),
                checked: true
              }]
            });
            field2.append({
              type: "textarea",
              name: "protectReason",
              label: window.wgULS("理由（保护日志）：", "理由（保護日誌）：")
            });
            if (!mw.config.get("wgArticleId") || mw.config.get("wgPageContentModel") === "Scribunto") {
              break;
            }
          /* falls through */
          case "tag":
            field1 = new Morebits.quickForm.element({
              type: "field",
              label: window.wgULS("标记选项", "標記選項"),
              name: "field1"
            });
            field1.append({
              type: "div",
              name: "currentprot",
              label: " "
            });
            field1.append({
              type: "div",
              name: "hasprotectlog",
              label: " "
            });
            field1.append({
              type: "select",
              name: "tagtype",
              label: window.wgULS("选择保护模板：", "選擇保護模板："),
              list: Twinkle.protect.protectionTags,
              event: Twinkle.protect.formevents.tagtype
            });
            field1.append({
              type: "checkbox",
              list: [{
                name: "small",
                label: window.wgULS("使用图标（small=yes）", "使用圖示（small=yes）"),
                tooltip: window.wgULS("将给模板加上|small=yes参数，显示成右上角的一把挂锁。", "將給模板加上|small=yes參數，顯示成右上角的一把掛鎖。")
              }, {
                name: "noinclude",
                label: window.wgULS("用&lt;noinclude&gt;包裹保护模板", "用&lt;noinclude&gt;包裹保護模板"),
                tooltip: window.wgULS("将保护模板包裹在&lt;noinclude&gt;中", "將保護模板包裹在&lt;noinclude&gt;中"),
                checked: mw.config.get("wgNamespaceNumber") === 10
              }, {
                name: "showexpiry",
                label: window.wgULS("在模板显示到期时间", "在模板顯示到期時間"),
                tooltip: window.wgULS("将给模板加上|expiry参数", "將給模板加上|expiry參數"),
                checked: true,
                hidden: e.target.values === "tag"
              }]
            });
            break;
          case "request":
            field_preset = new Morebits.quickForm.element({
              type: "field",
              label: window.wgULS("保护类型", "保護類別"),
              name: "field_preset"
            });
            field_preset.append({
              type: "select",
              name: "category",
              label: window.wgULS("类型和理由：", "類別和理由："),
              event: Twinkle.protect.callback.changePreset,
              list: mw.config.get("wgArticleId") ? Twinkle.protect.protectionTypes : Twinkle.protect.protectionTypesCreate
            });
            field1 = new Morebits.quickForm.element({
              type: "field",
              label: window.wgULS("选项", "選項"),
              name: "field1"
            });
            field1.append({
              type: "div",
              name: "currentprot",
              label: " "
            });
            field1.append({
              type: "div",
              name: "hasprotectlog",
              label: " "
            });
            field1.append({
              type: "select",
              name: "expiry",
              label: window.wgULS("时长：", "時長："),
              list: [{
                label: "",
                selected: true,
                value: ""
              }, {
                label: window.wgULS("临时", "臨時"),
                value: "temporary"
              }, {
                label: "永久",
                value: "infinity"
              }]
            });
            field1.append({
              type: "textarea",
              name: "reason",
              label: "理由："
            });
            break;
          default:
            void mw.notify(window.wgULS("这玩意儿被海豚吃掉了！", "這玩意兒被海豚吃掉了！"), {
              type: "warn",
              tag: "twinkleprotect"
            });
            break;
        }
        let oldfield;
        if (field_preset) {
          [oldfield] = $(e.target.form).find('fieldset[name="field_preset"]');
          oldfield.replaceWith(field_preset.render());
        } else {
          $(e.target.form).find('fieldset[name="field_preset"]').css("display", "none");
        }
        if (field1) {
          [oldfield] = $(e.target.form).find('fieldset[name="field1"]');
          oldfield.replaceWith(field1.render());
        } else {
          $(e.target.form).find('fieldset[name="field1"]').css("display", "none");
        }
        if (field2) {
          [oldfield] = $(e.target.form).find('fieldset[name="field2"]');
          oldfield.replaceWith(field2.render());
        } else {
          $(e.target.form).find('fieldset[name="field2"]').css("display", "none");
        }
        if (e.target.values === "protect") {
          const evt = document.createEvent("Event");
          evt.initEvent("change", true, true);
          e.target.form.category.dispatchEvent(evt);
          $(e.target.form).find('fieldset[name="field2"] select').parent().css({
            display: "inline-block",
            marginRight: "0.5em"
          });
        }
        Twinkle.protect.callback.showLogAndCurrentProtectInfo();
      };
      Twinkle.protect.formevents = {
        editmodify: (e) => {
          e.target.form.editlevel.disabled = !e.target.checked;
          e.target.form.editexpiry.disabled = !e.target.checked || e.target.form.editlevel.value === "all";
          e.target.form.editlevel.style.color = e.target.checked ? "" : "transparent";
          e.target.form.editexpiry.style.color = e.target.checked ? "" : "transparent";
        },
        editlevel: (e) => {
          e.target.form.editexpiry.disabled = e.target.value === "all";
        },
        movemodify: (e) => {
          if (e.target.form.movelevel.disabled && !e.target.form.editlevel.disabled) {
            e.target.form.movelevel.value = e.target.form.editlevel.value;
            e.target.form.moveexpiry.value = e.target.form.editexpiry.value;
          } else if (e.target.form.editlevel.disabled) {
            e.target.form.movelevel.value = "sysop";
            e.target.form.moveexpiry.value = "infinity";
          }
          e.target.form.movelevel.disabled = !e.target.checked;
          e.target.form.moveexpiry.disabled = !e.target.checked || e.target.form.movelevel.value === "all";
          e.target.form.movelevel.style.color = e.target.checked ? "" : "transparent";
          e.target.form.moveexpiry.style.color = e.target.checked ? "" : "transparent";
        },
        movelevel: (e) => {
          e.target.form.moveexpiry.disabled = e.target.value === "all";
        },
        createlevel: (e) => {
          e.target.form.createexpiry.disabled = e.target.value === "all";
        },
        tagtype: (e) => {
          e.target.form.small.disabled = e.target.value === "none" || e.target.value === "noop";
          e.target.form.noinclude.disabled = e.target.value === "none" || e.target.value === "noop";
          e.target.form.showexpiry.disabled = e.target.value === "none" || e.target.value === "noop";
        }
      };
      Twinkle.protect.doCustomExpiry = (target) => {
        const custom = prompt(window.wgULS("输入自定义终止时间。\n您可以使用相对时间，如“1 minute”或“19 days”，或绝对时间“yyyymmddhhmm”（如“200602011405”是2006年02月01日14：05（UTC））", "輸入自訂終止時間。\n您可以使用相對時間，如「1 minute」或「19 days」，或絕對時間「yyyymmddhhmm」（如「200602011405」是2006年02月01日14：05（UTC））"), "");
        if (custom) {
          const option = document.createElement("option");
          option.setAttribute("value", custom);
          option.textContent = custom;
          target.appendChild(option);
          target.value = custom;
        } else {
          target.selectedIndex = 0;
        }
      };
      Twinkle.protect.protectionLevels = [{
        label: "全部",
        value: "all"
      }, {
        label: window.wgULS("仅允许自动确认用户", "僅允許自動確認使用者"),
        value: "autoconfirmed"
      }, {
        label: window.wgULS("仅模板编辑员和管理员", "僅模板編輯員和管理員"),
        value: "templateeditor"
      }, {
        label: window.wgULS("仅管理员", "僅管理員"),
        value: "sysop",
        selected: true
      }, {
        label: window.wgULS("仅允许档案理事员", "僅允許檔案理事員"),
        value: "officialprotected"
      }];
      Twinkle.protect.protectionLengths = [{
        label: "1天",
        value: "1 day"
      }, {
        label: "3天",
        value: "3 days"
      }, {
        label: window.wgULS("1周", "1週"),
        value: "1 week"
      }, {
        label: window.wgULS("2周", "2週"),
        value: "2 weeks"
      }, {
        label: window.wgULS("1个月", "1個月"),
        value: "1 month"
      }, {
        label: window.wgULS("3个月", "3個月"),
        value: "3 months"
      }, {
        label: window.wgULS("6个月", "6個月"),
        value: "6 months"
      }, {
        label: "1年",
        value: "1 year"
      }, {
        label: window.wgULS("无限期", "無限期"),
        value: "infinity"
      }, {
        label: window.wgULS("自定义……", "自訂……"),
        value: "custom"
      }];
      Twinkle.protect.protectionTypesAdmin = [{
        label: window.wgULS("解除保护", "解除保護"),
        value: "unprotect"
      }, {
        label: window.wgULS("全保护", "全保護"),
        list: [{
          label: window.wgULS("常规（全）", "常規（全）"),
          value: "pp-protected"
        }, {
          label: window.wgULS("争议、编辑战（全）", "爭議、編輯戰（全）"),
          value: "pp-dispute"
        }]
      }, {
        label: window.wgULS("模板保护", "模板保護"),
        list: [{
          label: window.wgULS("高风险模板（模板）", "高風險模板（模板）"),
          value: "pp-template"
        }]
      }, {
        label: window.wgULS("半保护", "半保護"),
        list: [{
          label: window.wgULS("常规（半）", "常規（半）"),
          value: "pp-semi-protected"
        }, {
          label: window.wgULS("持续破坏（半）", "持續破壞（半）"),
          value: "pp-semi-vandalism"
        }, {
          label: window.wgULS("违反生者传记条例（半）", "違反生者傳記條例（半）"),
          value: "pp-semi-blp"
        }, {
          label: window.wgULS("傀儡破坏（半）", "傀儡破壞（半）"),
          value: "pp-semi-sock"
        }, {
          label: window.wgULS("高风险模板（半）", "高風險模板（半）"),
          value: "pp-semi-template"
        }, {
          label: window.wgULS("被封禁用户滥用讨论页（半）", "被封禁使用者濫用討論頁（半）"),
          value: "pp-semi-usertalk"
        }]
      }, {
        label: window.wgULS("移动保护", "移動保護"),
        list: [{
          label: window.wgULS("常规（移动）", "常規（移動）"),
          value: "pp-move"
        }, {
          label: window.wgULS("争议、移动战（移动）", "爭議、移動戰（移動）"),
          value: "pp-move-dispute"
        }, {
          label: window.wgULS("移动破坏（移动）", "移動破壞（移動）"),
          value: "pp-move-vandalism"
        }, {
          label: window.wgULS("高风险页面（移动）", "高風險頁面（移動）"),
          value: "pp-move-indef"
        }]
      }].filter(({
        label
      }) => {
        return isTemplate || label !== "模板保护" && label !== "模板保護";
      });
      Twinkle.protect.protectionTypesCreateOnly = [{
        label: window.wgULS("白纸保护", "白紙保護"),
        list: [{
          label: window.wgULS("常规（白纸）", "常規（白紙）"),
          value: "pp-create"
        }, {
          label: window.wgULS("多次重复创建（白纸）", "多次重複建立（白紙）"),
          value: "pp-create-repeat"
        }, {
          label: window.wgULS("持续破坏（白纸）", "持續破壞（白紙）"),
          value: "pp-create-vandalism"
        }, {
          label: window.wgULS("已封禁用户的用户页（白纸）", "已封禁使用者的使用者頁（白紙）"),
          value: "pp-create-userpage"
        }]
      }];
      Twinkle.protect.protectionTypes = [...Twinkle.protect.protectionTypesAdmin, ...Twinkle.protect.protectionTypesCreateOnly];
      Twinkle.protect.protectionTypesCreate = [{
        label: "解除保护",
        value: "unprotect"
      }, ...Twinkle.protect.protectionTypesCreateOnly];
      Twinkle.protect.protectionPresetsInfo = {
        "pp-protected": {
          edit: "sysop",
          move: "sysop",
          reason: null
        },
        "pp-dispute": {
          edit: "sysop",
          move: "sysop",
          reason: window.wgULS("编辑战", "編輯戰")
        },
        "pp-template": {
          edit: "templateeditor",
          move: "templateeditor",
          expiry: "infinity",
          reason: window.wgULS("[[LIB:HRT|高风险模板]]", "[[LIB:HRT|高風險模板]]"),
          template: "noop"
        },
        "pp-vandalism": {
          edit: "sysop",
          move: "sysop",
          reason: window.wgULS("被自动确认用户破坏", "被自動確認使用者破壞")
        },
        "pp-sock": {
          edit: "sysop",
          move: "sysop",
          reason: window.wgULS("持续的傀儡破坏", "持續的傀儡破壞")
        },
        "pp-semi-vandalism": {
          edit: "autoconfirmed",
          reason: window.wgULS("被新用户破坏", "被新使用者破壞"),
          template: "pp-vandalism"
        },
        "pp-semi-blp": {
          edit: "autoconfirmed",
          reason: window.wgULS("新用户违反生者传记条例", "新使用者違反生者傳記條例")
        },
        "pp-semi-usertalk": {
          edit: "autoconfirmed",
          reason: window.wgULS("被封禁用户滥用其讨论页", "被封禁使用者濫用其討論頁")
        },
        "pp-semi-template": {
          // removed for now
          edit: "autoconfirmed",
          expiry: "infinity",
          reason: window.wgULS("[[LIB:HRT|高风险模板]]", "[[LIB:HRT|高風險模板]]"),
          template: "noop"
        },
        "pp-semi-sock": {
          edit: "autoconfirmed",
          reason: window.wgULS("持续的傀儡破坏", "持續的傀儡破壞"),
          template: "pp-sock"
        },
        "pp-semi-protected": {
          edit: "autoconfirmed",
          reason: null,
          template: "pp-protected"
        },
        "pp-move": {
          move: "sysop",
          reason: null
        },
        "pp-move-dispute": {
          move: "sysop",
          reason: window.wgULS("页面移动战", "頁面移動戰")
        },
        "pp-move-vandalism": {
          move: "sysop",
          reason: window.wgULS("移动破坏", "移動破壞")
        },
        "pp-move-indef": {
          move: "sysop",
          expiry: "infinity",
          reason: window.wgULS("高风险页面", "高風險頁面")
        },
        unprotect: {
          edit: "all",
          move: "all",
          create: "all",
          reason: null,
          template: "none"
        },
        "pp-create": {
          create: "autoconfirmed",
          reason: null
        },
        "pp-create-repeat": {
          create: "autoconfirmed",
          reason: window.wgULS("多次重复创建", "多次重複建立")
        },
        "pp-create-vandalism": {
          create: "autoconfirmed",
          reason: window.wgULS("被新用户破坏", "被新使用者破壞")
        },
        "pp-create-userpage": {
          create: "sysop",
          expiry: "infinity",
          reason: window.wgULS("被永久封禁的用户页", "被永久封禁的使用者頁面")
        }
      };
      Twinkle.protect.protectionTags = [{
        label: window.wgULS("无（移除现有模板）", "無（移除現有模板）"),
        value: "none"
      }, {
        label: window.wgULS("无（不移除现有模板）", "無（不移除現有模板）"),
        value: "noop"
      }, {
        label: "通用模板",
        list: [{
          label: "{{pp-dispute}}: ".concat(window.wgULS("争议", "爭議")),
          value: "pp-dispute"
        }, {
          label: "{{pp-vandalism}}: ".concat(window.wgULS("破坏", "破壞")),
          value: "pp-vandalism",
          selected: true
        }, {
          label: "{{pp-sock}}: 傀儡",
          value: "pp-sock"
        }, {
          label: "{{pp-template}}: ".concat(window.wgULS("高风险模板", "高風險模板")),
          value: "pp-template"
        }, {
          label: "{{pp-protected}}: ".concat(window.wgULS("常规", "常規")),
          value: "pp-protected"
        }]
      }, {
        label: window.wgULS("半保护模板", "半保護模板"),
        list: [{
          label: "{{pp-semi-usertalk}}: ".concat(window.wgULS("封禁的用户", "封禁的使用者")),
          value: "pp-semi-usertalk"
        }, {
          label: "{{pp-semi-blp}}: ".concat(window.wgULS("生者传记", "生者傳記")),
          value: "pp-semi-blp"
        }, {
          label: "{{pp-semi-indef}}: ".concat(window.wgULS("长期", "長期")),
          value: "pp-semi-indef"
        }]
      }, {
        label: window.wgULS("移动保护模板", "移動保護模板"),
        list: [{
          label: "{{pp-move-dispute}}: ".concat(window.wgULS("争议", "爭議")),
          value: "pp-move-dispute"
        }, {
          label: "{{pp-move-vandalism}}: ".concat(window.wgULS("破坏", "破壞")),
          value: "pp-move-vandalism"
        }, {
          label: "{{pp-move-indef}}: ".concat(window.wgULS("长期", "長期")),
          value: "pp-move-indef"
        }, {
          label: "{{pp-move}}: ".concat(window.wgULS("常规", "常規")),
          value: "pp-move"
        }]
      }];
      Twinkle.protect.callback.changePreset = (e) => {
        const {
          form
        } = e.target;
        const actiontypes = form.actiontype;
        let actiontype;
        var _iterator23 = _createForOfIteratorHelper(actiontypes), _step23;
        try {
          for (_iterator23.s(); !(_step23 = _iterator23.n()).done; ) {
            const action_type_value = _step23.value;
            if (!action_type_value.checked) {
              continue;
            }
            actiontype = action_type_value.values;
            break;
          }
        } catch (err) {
          _iterator23.e(err);
        } finally {
          _iterator23.f();
        }
        if (actiontype === "protect") {
          const item = Twinkle.protect.protectionPresetsInfo[form.category.value];
          if (mw.config.get("wgArticleId")) {
            if (item.edit) {
              form.editmodify.checked = true;
              Twinkle.protect.formevents.editmodify({
                target: form.editmodify
              });
              form.editlevel.value = item.edit;
              Twinkle.protect.formevents.editlevel({
                target: form.editlevel
              });
            } else {
              form.editmodify.checked = false;
              Twinkle.protect.formevents.editmodify({
                target: form.editmodify
              });
            }
            if (item.move) {
              form.movemodify.checked = true;
              Twinkle.protect.formevents.movemodify({
                target: form.movemodify
              });
              form.movelevel.value = item.move;
              Twinkle.protect.formevents.movelevel({
                target: form.movelevel
              });
            } else {
              form.movemodify.checked = false;
              Twinkle.protect.formevents.movemodify({
                target: form.movemodify
              });
            }
            form.editexpiry.value = item.expiry || "1 week";
            form.moveexpiry.value = item.expiry || "1 week";
          } else {
            if (item.create) {
              form.createlevel.value = item.create;
              Twinkle.protect.formevents.createlevel({
                target: form.createlevel
              });
              form.createexpiry.value = item.createexpiry || "1 week";
            }
            form.createexpiry.value = item.expiry || "1 week";
          }
          const reasonField = actiontype === "protect" ? form.protectReason : form.reason;
          if (item.reason) {
            reasonField.value = item.reason;
          } else {
            reasonField.value = "";
          }
          if (mw.config.get("wgArticleId") && mw.config.get("wgPageContentModel") !== "Scribunto") {
            if (form.category.value === "unprotect") {
              form.tagtype.value = "none";
            } else {
              var _item$template;
              form.tagtype.value = (_item$template = item.template) !== null && _item$template !== void 0 ? _item$template : form.category.value;
            }
            Twinkle.protect.formevents.tagtype({
              target: form.tagtype
            });
            if (/template/.test(form.category.value)) {
              form.noinclude.checked = true;
            } else if (mw.config.get("wgNamespaceNumber") !== 10) {
              form.noinclude.checked = false;
            }
          }
        } else if (form.category.value === "unprotect") {
          form.expiry.value = "";
          form.expiry.disabled = true;
        } else {
          form.expiry.value = "";
          form.expiry.disabled = false;
        }
      };
      Twinkle.protect.callback.evaluate = (e) => {
        const form = e.target;
        const input = Morebits.quickForm.getInputData(form);
        let tagparams;
        if (input.actiontype === "tag" || input.actiontype === "protect" && mw.config.get("wgArticleId") && mw.config.get("wgPageContentModel") !== "Scribunto") {
          tagparams = {
            tag: input.tagtype,
            reason: (input.tagtype === "pp-protected" || input.tagtype === "pp-semi-protected" || input.tagtype === "pp-move") && input.protectReason ? input.protectReason : null,
            showexpiry: input.actiontype === "protect" ? input.showexpiry : null,
            small: input.small,
            noinclude: input.noinclude
          };
          if (input.actiontype === "protect") {
            if (input.editmodify) {
              tagparams.expiry = input.editexpiry;
            } else if (input.movemodify) {
              tagparams.expiry = input.moveexpiry;
            }
          }
        }
        const closeparams = {};
        if (input.close) {
          if (input.category === "unprotect") {
            closeparams.type = "unprotect";
          } else if (mw.config.get("wgArticleId")) {
            if (input.editmodify) {
              switch (input.editlevel) {
                case "officialprotected":
                  closeparams.type = "officialprotected";
                  closeparams.expiry = input.editexpiry;
                  break;
                case "revisionprotected":
                  closeparams.type = "revisionprotected";
                  closeparams.expiry = input.editexpiry;
                  break;
                case "sysop":
                  closeparams.type = "full";
                  closeparams.expiry = input.editexpiry;
                  break;
                case "templateeditor":
                  closeparams.type = "temp";
                  closeparams.expiry = input.editexpiry;
                  break;
                case "autoconfirmed":
                  closeparams.type = "semi";
                  closeparams.expiry = input.editexpiry;
                  break;
              }
            } else if (input.movemodify && ["officialprotected", "revisionprotected", "sysop", "templateeditor"].includes(input.movelevel)) {
              closeparams.type = "move";
              closeparams.expiry = input.moveexpiry;
            }
          } else if (input.createlevel !== "all") {
            closeparams.type = "salt";
            closeparams.expiry = input.createexpiry;
          }
        }
        switch (input.actiontype) {
          case "protect": {
            Morebits.wiki.actionCompleted.redirect = mw.config.get("wgPageName");
            Morebits.wiki.actionCompleted.notice = window.wgULS("保护完成", "保護完成");
            let statusInited = false;
            let thispage;
            const allDone = () => {
              if (thispage) {
                thispage.getStatusElement().info("完成");
              }
              if (tagparams) {
                Twinkle.protect.callbacks.taggingPageInitial(tagparams);
              }
              if (closeparams && closeparams.type) {
                const rppPage = new Morebits.wiki.page("LIB_talk:页面保护请求", window.wgULS("关闭请求", "關閉請求"));
                rppPage.setFollowRedirect(true);
                rppPage.setCallbackParameters(closeparams);
                rppPage.load(Twinkle.protect.callbacks.closeRequest);
              }
            };
            const protectIt = (next) => {
              thispage = new Morebits.wiki.page(mw.config.get("wgPageName"), window.wgULS("保护页面", "保護頁面"));
              if (mw.config.get("wgArticleId")) {
                if (input.editmodify) {
                  thispage.setEditProtection(input.editlevel, input.editexpiry);
                }
                if (input.movemodify) {
                  if (input.movelevel) {
                    thispage.setMoveProtection(input.movelevel, input.moveexpiry);
                  } else {
                    void mw.notify(window.wgULS("您需要选择保护层级！", "您需要選擇保護層級！"), {
                      type: "warn",
                      tag: "twinkleprotect"
                    });
                    return;
                  }
                }
                thispage.setWatchlist(Twinkle.getPref("watchProtectedPages"));
              } else {
                thispage.setCreateProtection(input.createlevel, input.createexpiry);
                thispage.setWatchlist(false);
              }
              if (input.protectReason) {
                thispage.setEditSummary(input.protectReason);
                thispage.setChangeTags(Twinkle.changeTags);
              } else {
                void mw.notify(window.wgULS("您必须输入保护理由，这将被记录在保护日志中。", "您必須輸入保護理由，這將被記錄在保護日誌中。"), {
                  type: "warn",
                  tag: "twinkleprotect"
                });
                return;
              }
              if (!statusInited) {
                Morebits.simpleWindow.setButtonsEnabled(false);
                Morebits.status.init(form);
                statusInited = true;
              }
              thispage.setChangeTags(Twinkle.changeTags);
              thispage.protect(next);
            };
            if (input.editmodify || input.movemodify || !mw.config.get("wgArticleId")) {
              protectIt(allDone);
            } else {
              void mw.notify(window.wgULS("请告诉Twinkle要做什么！\n若您只是想标记该页，请选择上面的“用保护模板标记此页”选项。", "請告訴Twinkle要做什麼！\n若您只是想標記該頁，請選擇上面的「用保護模板標記此頁」選項。"), {
                type: "warn",
                tag: "twinkleprotect"
              });
            }
            break;
          }
          case "tag":
            Morebits.simpleWindow.setButtonsEnabled(false);
            Morebits.status.init(form);
            Morebits.wiki.actionCompleted.redirect = mw.config.get("wgPageName");
            Morebits.wiki.actionCompleted.followRedirect = false;
            Morebits.wiki.actionCompleted.notice = window.wgULS("标记完成", "標記完成");
            Twinkle.protect.callbacks.taggingPageInitial(tagparams);
            break;
          case "request": {
            let typename;
            let typereason;
            switch (input.category) {
              case "pp-dispute":
              case "pp-protected":
                typename = window.wgULS("全保护", "全保護");
                break;
              case "pp-template":
                typename = window.wgULS("模板保护", "模板保護");
                break;
              case "pp-vandalism":
              case "pp-semi-disruptive":
              case "pp-semi-unsourced":
              case "pp-semi-vandalism":
              case "pp-semi-usertalk":
              case "pp-semi-template":
              // removed for now
              case "pp-semi-sock":
              case "pp-semi-blp":
              case "pp-semi-protected":
                typename = window.wgULS("半保护", "半保護");
                break;
              case "pp-move":
              case "pp-move-dispute":
              case "pp-move-indef":
              case "pp-move-vandalism":
                typename = window.wgULS("移动保护", "移動保護");
                break;
              case "pp-create":
              case "pp-create-offensive":
              case "pp-create-blp":
              case "pp-create-salt":
              case "pp-create-userpage":
              case "pp-create-repeat":
              case "pp-create-vandalism":
                typename = window.wgULS("白纸保护", "白紙保護");
                break;
              /* case 'unprotect': */
              /* falls through */
              default:
                typename = window.wgULS("解除保护", "解除保護");
                break;
            }
            switch (input.category) {
              case "pp-dispute":
                typereason = window.wgULS("争议、编辑战", "爭議、編輯戰");
                break;
              case "pp-vandalism":
              case "pp-semi-vandalism":
              case "pp-create-vandalism":
                typereason = window.wgULS("持续破坏", "持續破壞");
                break;
              case "pp-template":
              case "pp-semi-template":
                typereason = window.wgULS("高风险模板", "高風險模板");
                break;
              case "pp-create-userpage":
                typereason = window.wgULS("被永久封禁的用户页", "被永久封鎖的使用者頁面");
                break;
              case "pp-semi-usertalk":
                typereason = window.wgULS("已封禁用户的讨论页", "已封鎖使用者的討論頁");
                break;
              case "pp-semi-sock":
                typereason = window.wgULS("傀儡破坏", "傀儡破壞");
                break;
              case "pp-semi-blp":
                typereason = window.wgULS("违反生者传记条例", "違反生者傳記條例");
                break;
              case "pp-move-dispute":
                typereason = window.wgULS("争议、移动战", "爭議、移動戰");
                break;
              case "pp-move-vandalism":
                typereason = window.wgULS("移动破坏", "移動破壞");
                break;
              case "pp-move-indef":
                typereason = window.wgULS("高风险页面", "高風險頁面");
                break;
              case "pp-create-repeat":
                typereason = window.wgULS("多次重复创建", "多次重複建立");
                break;
              default:
                typereason = "";
                break;
            }
            let reason = typereason;
            if (input.reason !== "") {
              if (typereason !== "") {
                reason += "：";
              }
              reason += input.reason;
            }
            if (reason !== "") {
              reason = Morebits.string.appendPunctuation(reason);
            }
            const rppparams = {
              reason,
              typename,
              category: input.category,
              expiry: input.expiry
            };
            Morebits.simpleWindow.setButtonsEnabled(false);
            Morebits.status.init(form);
            const rppName = "LIB_talk:页面保护请求";
            Morebits.wiki.actionCompleted.redirect = rppName;
            Morebits.wiki.actionCompleted.notice = window.wgULS("提名完成，重定向到讨论页", "提名完成，重新導向到討論頁");
            const rppPage = new Morebits.wiki.page(rppName, window.wgULS("请求保护页面", "請求保護頁面"));
            rppPage.setFollowRedirect(true);
            rppPage.setCallbackParameters(rppparams);
            rppPage.load(Twinkle.protect.callbacks.fileRequest);
            break;
          }
          default:
            void mw.notify("twinkleprotect: 未知操作类型", {
              type: "warn",
              tag: "twinkleprotect"
            });
            break;
        }
      };
      Twinkle.protect.callbacks = {
        taggingPageInitial: (tagparams) => {
          if (tagparams.tag === "noop") {
            Morebits.status.info(window.wgULS("应用保护模板", "應用保護模板"), window.wgULS("没什么要做的", "沒什麼要做的"));
            return;
          }
          const pageName = mw.config.get("wgPageName");
          const protectedPage = new Morebits.wiki.page(pageName, window.wgULS("标记页面", "標記頁面"));
          protectedPage.setCallbackParameters(tagparams);
          protectedPage.load(Twinkle.protect.callbacks.taggingPage);
        },
        getTaggedPage: (params, text) => {
          let tag;
          let summary;
          const oldtag_re = /(?:<noinclude>)?[ \t]*\{\{\s*(pp-[^{}]*?|protected|(?:t|v|s|p-|usertalk-v|usertalk-s|sb|move)protected(?:2)?|protected template|privacy protection)\s*?\}\}\s*(?:<\/noinclude>)?\s*/gi;
          const re_result = oldtag_re.exec(text);
          if (re_result && (params.tag === "none" || confirm(window.wgULS("在页面上找到{{", "在頁面上找到{{") + re_result[1] + window.wgULS("}}\n单击确定以移除，或单击取消以取消操作。", "}}\n點擊確定以移除，或點擊取消以取消操作。")))) {
            text = text.replace(oldtag_re, "");
          }
          if (params.tag === "none") {
            summary = window.wgULS("移除保护模板", "移除保護模板");
          } else {
            ({
              tag
            } = params);
            if (params.reason) {
              tag += "|reason=".concat(params.reason);
            }
            if (params.showexpiry && params.expiry && !Morebits.string.isInfinity(params.expiry)) {
              tag += "|expiry={{".concat("subst:", "#time:c|".concat(params.expiry, "}}"));
            }
            if (params.small) {
              tag += "|small=yes";
            }
            if (/^\s*#(?:redirect|重定向|重新導向)/i.test(text)) {
              if (text.match(/{{(?:Redirect[ _]category shell|Rcat[ _]shell|This[ _]is a redirect|多种类型重定向|多種類型重定向|多種類型重新導向|多种类型重新导向|R0|其他重定向|RCS|Redirect[ _]shell)/i)) {
                Morebits.status.info("已存在Redirect category shell", window.wgULS("没什么可做的", "沒什麼可做的"));
                return;
              }
              text = text.replace(/#(?:redirect|重定向|重新導向) ?(\[\[.*?\]\])(.*)/i, "#REDIRECT $1$2\n\n{{".concat(tag, "}}"));
            } else {
              if (params.noinclude) {
                tag = "<noinclude>{{".concat(tag, "}}</noinclude>");
                if (text.indexOf("{|") === 0) {
                  tag += "\n";
                }
              } else {
                tag = "{{".concat(tag, "}}\n");
              }
              const ysarchives_page = new Morebits.wikitext.page(text);
              text = ysarchives_page.insertAfterTemplates(tag, Twinkle.hatnoteRegex).getText();
            }
            summary = "加入{{".concat(params.tag, "}}");
          }
          return {
            text,
            summary
          };
        },
        taggingPage: (protectedPage) => {
          const params = protectedPage.getCallbackParameters();
          const text = protectedPage.getPageText();
          const newVersion = Twinkle.protect.callbacks.getTaggedPage(params, text);
          if (newVersion === void 0) {
            protectedPage.getStatusElement().info("完成");
            return;
          }
          protectedPage.setEditSummary(newVersion.summary);
          protectedPage.setChangeTags(Twinkle.changeTags);
          protectedPage.setWatchlist(Twinkle.getPref("watchPPTaggedPages"));
          protectedPage.setPageText(newVersion.text);
          protectedPage.setCreateOption("nocreate");
          protectedPage.suppressProtectWarning();
          protectedPage.save();
        },
        fileRequest: (rppPage) => {
          const params = rppPage.getCallbackParameters();
          let text = rppPage.getPageText();
          const statusElement = rppPage.getStatusElement();
          const rppRe = new RegExp("===\\s*(\\[\\[)?\\s*:?\\s*".concat(Morebits.string.escapeRegExp(Morebits.pageNameNorm), "\\s*(\\]\\])?\\s*==="), "m");
          const tag = rppRe.exec(text);
          const rppLink = document.createElement("a");
          rppLink.setAttribute("href", mw.util.getUrl(rppPage.getPageName()));
          rppLink.appendChild(document.createTextNode(rppPage.getPageName()));
          if (tag) {
            statusElement.error([rppLink, window.wgULS("已有对此页面的保护提名，取消操作。", "已有對此頁面的保護提名，取消操作。")]);
            return;
          }
          let newtag = "=== [[:".concat(Morebits.pageNameNorm, "]] ===\n");
          if (new RegExp("^".concat(mw.util.escapeRegExp(newtag).replace(/\s+/g, String.raw(_templateObject || (_templateObject = _taggedTemplateLiteral(["s*"], ["\\s*"]))))), "m").test(text)) {
            statusElement.error([rppLink, window.wgULS("已有对此页面的保护提名，取消操作。", "已有對此頁面的保護提名，取消操作。")]);
            return;
          }
          let words;
          switch (params.expiry) {
            case "temporary":
              words = window.wgULS("临时", "臨時");
              break;
            case "infinity":
              words = "永久";
              break;
            default:
              words = "";
              break;
          }
          words += params.typename;
          newtag += '* <span style="font-size: 90%">'.concat(window.wgULS("当前保护状态", "目前保護狀態"), "：{{protection status|").concat(/[=]/.test(Morebits.pageNameNorm) ? "1=" : "").concat(Morebits.pageNameNorm, "}}</span>\n");
          newtag += "".concat(window.wgULS("请求", "請求") + Morebits.string.toUpperCaseFirstChar(words) + (params.reason === "" ? "。" : "：".concat(Morebits.string.formatReasonText(params.reason))), "--~~").concat("~~");
          let reg;
          if (params.category === "unprotect") {
            reg = /(==\s*请求解除保护\s*==)/;
          } else {
            reg = /({{\s*\/header\s*}})/;
          }
          const originalTextLength = text.length;
          text = text.replace(reg, "$1\n".concat(newtag, "\n"));
          if (text.length === originalTextLength) {
            const linknode = document.createElement("a");
            linknode.setAttribute("href", mw.util.getUrl("Help:Twinkle/修复RFPP"));
            linknode.appendChild(document.createTextNode(window.wgULS("如何修复RFPP", "如何修復RFPP")));
            statusElement.error([window.wgULS("无法在LIB:RFPP上找到相关定位点标记，要修复此问题，请参见", "無法在LIB:RFPP上找到相關定位點標記，要修復此問題，請參見"), linknode, "。"]);
            return;
          }
          statusElement.status("加入新提名…");
          rppPage.setEditSummary("/* ".concat(Morebits.pageNameNorm, " */ ").concat(window.wgULS("请求对", "請求對"), "[[").concat(Morebits.pageNameNorm, "]]").concat(params.typename));
          rppPage.setChangeTags(Twinkle.changeTags);
          rppPage.setPageText(text);
          rppPage.setCreateOption("recreate");
          rppPage.save(() => {
            const watchPref = Twinkle.getPref("watchRequestedPages");
            const watch = watchPref !== "no" && (watchPref !== "default" || !!Number.parseInt(mw.user.options.get("watchdefault"), 10));
            if (watch) {
              const watch_query = {
                action: "watch",
                titles: mw.config.get("wgPageName"),
                token: mw.user.tokens.get("watchToken")
              };
              if (Twinkle.protect.watched !== true && watchPref !== "default" && watchPref !== "yes") {
                watch_query.expiry = watchPref;
              }
              new Morebits.wiki.api(window.wgULS("将请求保护的页面加入到监视列表", "將請求保護的頁面加入到監視清單"), watch_query).post();
            }
          });
        },
        closeRequest: (rppPage) => {
          const params = rppPage.getCallbackParameters();
          let text = rppPage.getPageText();
          const statusElement = rppPage.getStatusElement();
          const sections = text.split(/(?=\n==\s*请求解除保护\s*==)/);
          if (sections.length !== 2) {
            const linknode2 = document.createElement("a");
            linknode2.setAttribute("href", mw.util.getUrl("Help:Twinkle/修复RFPP"));
            linknode2.appendChild(document.createTextNode("如何修复RFPP"));
            statusElement.error([window.wgULS("无法在LIB:RFPP上找到相关定位点标记，要修复此问题，请参见", "無法在LIB:RFPP上找到相關定位點標記，要修復此問題，請參見"), linknode2, "。"]);
            return;
          }
          let sectionText;
          let expiryText = "";
          if (params.type === "unprotect") {
            [, sectionText] = sections;
          } else {
            [sectionText] = sections;
            expiryText = Morebits.string.formatTime(params.expiry);
          }
          const requestList = sectionText.split(/(?=\n===.+===\s*\n)/);
          let found = false;
          const rppRe = new RegExp("===\\s*(\\[\\[)?\\s*:?\\s*".concat(Morebits.pageNameRegex(Morebits.pageNameNorm), "\\s*(\\]\\])?\\s*==="), "m");
          var _iterator24 = _createForOfIteratorHelper(requestList), _step24;
          try {
            for (_iterator24.s(); !(_step24 = _iterator24.n()).done; ) {
              let request = _step24.value;
              if (rppRe.exec(request)) {
                request = request.trimEnd();
                if (params.type === "unprotect") {
                  request += "\n: {{RFPP|isun}}。--~~".concat("~~\n");
                } else {
                  request += "\n: {{RFPP|".concat(params.type, "|").concat(Morebits.string.isInfinity(params.expiry) ? "infinity" : expiryText, "}}。--~~").concat("~~\n");
                }
                found = true;
                break;
              }
            }
          } catch (err) {
            _iterator24.e(err);
          } finally {
            _iterator24.f();
          }
          if (!found) {
            statusElement.warn(window.wgULS("没有找到相关的请求", "沒有找到相關的請求"));
            return;
          }
          if (params.type === "unprotect") {
            text = sections[0] + requestList.join("");
          } else {
            text = requestList.join("") + sections[1];
          }
          let summary = "";
          if (params.type === "unprotect") {
            [, sectionText] = sections;
          } else {
            [sectionText] = sections;
          }
          switch (params.type) {
            case "semi":
              summary = window.wgULS("半保护", "半保護");
              break;
            case "temp":
              summary = window.wgULS("模板保护", "模板保護");
              break;
            case "ecp":
              summary = window.wgULS("延伸确认保护", "延伸確認保護");
              break;
            case "full":
              summary = window.wgULS("全保护", "全保護");
              break;
            case "revisionprotected":
              summary = window.wgULS("版本保护", "版本保護");
              break;
            case "officialprotected":
              summary = window.wgULS("裁委会保护", "裁委會保護");
              break;
            case "move":
              summary = window.wgULS("移动保护", "移動保護");
              break;
            case "salt":
              summary = window.wgULS("白纸保护", "白紙保護");
              break;
            case "unprotect":
              summary = window.wgULS("解除保护", "解除保護");
              break;
            default:
              statusElement.warn(window.wgULS("未知保护类型", "未知保護類別"));
              return;
          }
          if (Morebits.string.isInfinity(params.expiry)) {
            summary = expiryText + summary;
          } else {
            summary += expiryText;
          }
          rppPage.setEditSummary("/* ".concat(Morebits.pageNameNorm, " */ ").concat(summary));
          rppPage.setChangeTags(Twinkle.changeTags);
          rppPage.setPageText(text);
          rppPage.save();
        }
      };
      Twinkle.protect.formatProtectionDescription = (protectionLevels) => {
        const protectionNode = [];
        if (Object.keys(protectionLevels).length === 0) {
          [protectionNode[protectionNode.length]] = $("<b>").text(window.wgULS("无保护", "無保護"));
        } else {
          for (var _i8 = 0, _Object$entries5 = Object.entries(protectionLevels); _i8 < _Object$entries5.length; _i8++) {
            const [type, settings] = _Object$entries5[_i8];
            let label;
            switch (type) {
              case "edit":
                label = window.wgULS("编辑", "編輯");
                break;
              case "move":
                label = window.wgULS("移动", "移動");
                break;
              case "create":
                label = window.wgULS("创建", "建立");
                break;
              case "upload":
                label = window.wgULS("上传", "上傳");
                break;
              default:
                label = type;
                break;
            }
            let level;
            switch (settings.level) {
              case "officialprotected":
                level = window.wgULS("仅允许档案理事员", "僅允許檔案理事員");
                break;
              case "autoconfirmed":
                level = window.wgULS("仅允许自动确认用户", "僅允許自動確認使用者");
                break;
              case "templateeditor":
                level = window.wgULS("仅模板编辑员和管理员", "僅模板編輯員和管理員");
                break;
              case "sysop":
                level = window.wgULS("仅管理员", "僅管理員");
                break;
              default:
                ({
                  level
                } = settings);
                break;
            }
            [protectionNode[protectionNode.length]] = $("<b>").text("".concat(label, "：").concat(level));
            if (Morebits.string.isInfinity(settings.expiry)) {
              protectionNode[protectionNode.length] = window.wgULS("（无限期）", "（無限期）");
            } else {
              protectionNode[protectionNode.length] = "".concat(window.wgULS("（过期：", "（過期：") + new Morebits.date(settings.expiry).calendar("utc"), "）");
            }
            if (settings.cascade) {
              protectionNode[protectionNode.length] = window.wgULS("（连锁）", "（連鎖）");
            }
          }
        }
        return protectionNode;
      };
      Twinkle.addInitCallback(Twinkle.protect, "protect");
    })(jQuery);
  }
});
//! src/Twinkle/modules/friendlytag.js
var friendlytag_exports = {};
var init_friendlytag = __esm({
  "src/Twinkle/modules/friendlytag.js"() {
    "use strict";
    /*! Twinkle.js - friendlytag.js */
    (function friendlytag($) {
      const $body = $("body");
      Twinkle.tag = () => {
        if (Morebits.isPageRedirect()) {
          Twinkle.tag.mode = window.wgULS("重定向", "重新導向");
          Twinkle.tag.modeEn = "redirect";
          Twinkle.addPortletLink(Twinkle.tag.callback, window.wgULS("标记", "標記"), "friendly-tag", window.wgULS("标记重定向", "標記重新導向"));
        } else if (mw.config.get("wgNamespaceNumber") === 6 && !document.querySelector("#mw-sharedupload") && document.querySelector("#mw-imagepage-section-filehistory")) {
          Twinkle.tag.mode = window.wgULS("文件", "檔案");
          Twinkle.tag.modeEn = "file";
          Twinkle.addPortletLink(Twinkle.tag.callback, window.wgULS("标记", "標記"), "friendly-tag", window.wgULS("标记文件", "標記檔案"));
        } else if ([0, 118].includes(mw.config.get("wgNamespaceNumber")) && mw.config.get("wgCurRevisionId") || Morebits.pageNameNorm === Twinkle.getPref("sandboxPage")) {
          Twinkle.tag.mode = window.wgULS("条目", "條目");
          Twinkle.tag.modeEn = "article";
          Twinkle.tag.canRemove = mw.config.get("wgCurRevisionId") === mw.config.get("wgRevisionId") && // Disabled on latest diff because the diff slider could be used to slide
          // away from the latest diff without causing the script to reload
          !mw.config.get("wgDiffNewId");
          Twinkle.addPortletLink(Twinkle.tag.callback, window.wgULS("标记", "標記"), "friendly-tag", window.wgULS("标记条目", "標記條目"));
        }
      };
      Twinkle.tag.checkedTags = [];
      Twinkle.tag.callback = () => {
        const Window = new Morebits.simpleWindow(630, Twinkle.tag.modeEn === "article" ? 500 : 400);
        Window.setScriptName("Twinkle");
        Window.addFooterLink(window.wgULS("标记设置", "標記設定"), "H:TW/PREF#tag");
        Window.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW/DOC#tag");
        const form = new Morebits.quickForm(Twinkle.tag.callback.evaluate);
        form.append({
          type: "input",
          label: window.wgULS("筛选标记列表：", "篩選標記列表："),
          name: "quickfilter",
          size: "30",
          event: function event() {
            $allCheckboxDivs.find(".search-hit").each((_i, e) => {
              const label_element = e.parentElement;
              label_element.innerHTML = label_element.textContent;
            });
            if (this.value) {
              $allCheckboxDivs.hide();
              $allHeaders.hide();
              const searchString = this.value;
              const searchRegex = new RegExp(mw.util.escapeRegExp(searchString), "i");
              $allCheckboxDivs.find("label").each((_index, element) => {
                const label_text = element.textContent;
                const searchHit = searchRegex.exec(label_text);
                if (searchHit) {
                  const range = document.createRange();
                  const [textnode] = element.childNodes;
                  range.selectNodeContents(textnode);
                  range.setStart(textnode, searchHit.index);
                  range.setEnd(textnode, searchHit.index + searchString.length);
                  const [underline_span] = $("<span>").addClass("search-hit").css("text-decoration", "underline");
                  range.surroundContents(underline_span);
                  element.parentElement.style.display = "block";
                }
              });
            } else {
              $allCheckboxDivs.show();
              $allHeaders.show();
            }
          }
        });
        switch (Twinkle.tag.modeEn) {
          case "article":
            Window.setTitle(window.wgULS("条目维护标记", "條目維護標記"));
            Twinkle.tag.article.flatObject = {};
            var _iterator25 = _createForOfIteratorHelper(Twinkle.tag.article.tagList), _step25;
            try {
              for (_iterator25.s(); !(_step25 = _iterator25.n()).done; ) {
                const group = _step25.value;
                var _iterator26 = _createForOfIteratorHelper(group.value), _step26;
                try {
                  for (_iterator26.s(); !(_step26 = _iterator26.n()).done; ) {
                    const subgroup = _step26.value;
                    if (subgroup.value) {
                      var _iterator27 = _createForOfIteratorHelper(subgroup.value), _step27;
                      try {
                        for (_iterator27.s(); !(_step27 = _iterator27.n()).done; ) {
                          const item = _step27.value;
                          Twinkle.tag.article.flatObject[item.tag] = {
                            description: item.description,
                            excludeMI: !!item.excludeMI
                          };
                        }
                      } catch (err) {
                        _iterator27.e(err);
                      } finally {
                        _iterator27.f();
                      }
                    } else {
                      Twinkle.tag.article.flatObject[subgroup.tag] = {
                        description: subgroup.description,
                        excludeMI: !!subgroup.excludeMI
                      };
                    }
                  }
                } catch (err) {
                  _iterator26.e(err);
                } finally {
                  _iterator26.f();
                }
              }
            } catch (err) {
              _iterator25.e(err);
            } finally {
              _iterator25.f();
            }
            form.append({
              type: "select",
              name: "sortorder",
              label: window.wgULS("查看列表：", "檢視列表："),
              tooltip: window.wgULS("您可以在Twinkle参数设置（H:TW/PREF）中更改此项。", "您可以在Twinkle偏好設定（H:TW/PREF）中更改此項。"),
              event: Twinkle.tag.updateSortOrder,
              list: [{
                type: "option",
                value: "cat",
                label: window.wgULS("按类型", "按類別"),
                selected: Twinkle.getPref("tagArticleSortOrder") === "cat"
              }, {
                type: "option",
                value: "alpha",
                label: "按字母",
                selected: Twinkle.getPref("tagArticleSortOrder") === "alpha"
              }]
            });
            if (!Twinkle.tag.canRemove) {
              const divElement = document.createElement("div");
              divElement.innerHTML = window.wgULS("要移除现有维护标记，请从当前条目版本中打开“标记”菜单", "要移除現有維護標記，請從目前條目版本中打開「標記」選單");
              form.append({
                type: "div",
                name: "untagnotice",
                label: divElement
              });
            }
            form.append({
              type: "div",
              id: "tagWorkArea",
              className: "morebits-scrollbox",
              style: "max-height: 28em"
            });
            form.append({
              type: "checkbox",
              list: [{
                label: window.wgULS("如可能，合并入{{multiple issues}}", "如可能，合併入{{multiple issues}}"),
                value: "group",
                name: "group",
                tooltip: window.wgULS("若加入{{multiple issues}}支持的三个以上的模板，所有支持的模板都会被合并入{{multiple issues}}模板中。", "若加入{{multiple issues}}支援的三個以上的模板，所有支援的模板都會被合併入{{multiple issues}}模板中。"),
                checked: Twinkle.getPref("groupByDefault")
              }]
            });
            form.append({
              type: "input",
              label: "理由：",
              name: "reason",
              tooltip: window.wgULS("附加于编辑摘要的可选理由，例如指出条目内容的哪些部分有问题或移除模板的理由，但若理由很长则应该发表在讨论页。", "附加於編輯摘要的可選理由，例如指出條目內容的哪些部分有問題或移除模板的理由，但若理由很長則應該發表在討論頁。"),
              size: "80"
            });
            break;
          case "file":
            Window.setTitle(window.wgULS("文件维护标记", "檔案維護標記"));
            var _iterator28 = _createForOfIteratorHelper(Twinkle.tag.fileList), _step28;
            try {
              for (_iterator28.s(); !(_step28 = _iterator28.n()).done; ) {
                const group = _step28.value;
                if (group.buildFilename) {
                  var _iterator29 = _createForOfIteratorHelper(group.value), _step29;
                  try {
                    for (_iterator29.s(); !(_step29 = _iterator29.n()).done; ) {
                      const el = _step29.value;
                      el.subgroup = {
                        type: "input",
                        label: window.wgULS("替换的文件：", "替換的檔案："),
                        tooltip: window.wgULS("输入替换此文件的文件名称（必填）", "輸入替換此檔案的檔案名稱（必填）"),
                        name: "".concat(el.value.replace(/ /g, "_"), "File")
                      };
                    }
                  } catch (err) {
                    _iterator29.e(err);
                  } finally {
                    _iterator29.f();
                  }
                }
                form.append({
                  type: "header",
                  label: group.key
                });
                form.append({
                  type: "checkbox",
                  name: "tags",
                  list: group.value
                });
              }
            } catch (err) {
              _iterator28.e(err);
            } finally {
              _iterator28.f();
            }
            if (Twinkle.getPref("customFileTagList").length) {
              form.append({
                type: "header",
                label: window.wgULS("自定义模板", "自訂模板")
              });
              form.append({
                type: "checkbox",
                name: "tags",
                list: Twinkle.getPref("customFileTagList")
              });
            }
            break;
          case "redirect": {
            Window.setTitle(window.wgULS("重定向标记", "重新導向標記"));
            const i = 1;
            var _iterator30 = _createForOfIteratorHelper(Twinkle.tag.redirectList), _step30;
            try {
              for (_iterator30.s(); !(_step30 = _iterator30.n()).done; ) {
                const group = _step30.value;
                form.append({
                  type: "header",
                  id: "tagHeader".concat(i),
                  label: group.key
                });
                form.append({
                  type: "checkbox",
                  name: "tags",
                  list: group.value.map((item) => {
                    return {
                      value: item.tag,
                      label: "{{".concat(item.tag, "}}：").concat(item.description),
                      subgroup: item.subgroup
                    };
                  })
                });
              }
            } catch (err) {
              _iterator30.e(err);
            } finally {
              _iterator30.f();
            }
            if (Twinkle.getPref("customRedirectTagList").length) {
              form.append({
                type: "header",
                label: window.wgULS("自定义模板", "自訂模板")
              });
              form.append({
                type: "checkbox",
                name: "tags",
                list: Twinkle.getPref("customRedirectTagList")
              });
            }
            break;
          }
          default:
            void mw.notify("Twinkle.tag：未知模式 ".concat(Twinkle.tag.mode), {
              type: "warn",
              tag: "friendlytag"
            });
            break;
        }
        if (document.querySelector(".patrollink")) {
          form.append({
            type: "checkbox",
            list: [{
              label: window.wgULS("标记页面为已巡查", "標記頁面為已巡查"),
              value: "patrol",
              name: "patrol",
              checked: Twinkle.getPref("markTaggedPagesAsPatrolled")
            }]
          });
        }
        form.append({
          type: "submit",
          className: "tw-tag-submit"
        });
        const result = form.render();
        Window.setContent(result);
        Window.display();
        $allCheckboxDivs = $(result).find("[name$=tags]").parent();
        $allHeaders = $(result).find("h5");
        result.quickfilter.focus();
        result.quickfilter.autocomplete = "off";
        result.quickfilter.addEventListener("keypress", (e) => {
          if (e.key === "Enter") {
            e.preventDefault();
            return false;
          }
        });
        if (Twinkle.tag.modeEn === "article") {
          Twinkle.tag.alreadyPresentTags = [];
          if (Twinkle.tag.canRemove) {
            $body.find(".mw-parser-output").children().each((_i, e) => {
              if (e.tagName === "H2") {
                return false;
              }
              if (e.className.indexOf("box-") === 0) {
                if (e.classList[0] === "box-问题条目") {
                  $(e).find(".ambox").each((_index, element) => {
                    if (element.classList[0].indexOf("box-") === 0) {
                      const boxTag = element.classList[0].slice("box-".length).replace(/_/g, " ");
                      Twinkle.tag.alreadyPresentTags[Twinkle.tag.alreadyPresentTags.length] = boxTag;
                    }
                  });
                  return true;
                }
                const tag = e.classList[0].slice("box-".length).replace(/_/g, " ");
                Twinkle.tag.alreadyPresentTags[Twinkle.tag.alreadyPresentTags.length] = tag;
              }
            });
            if ($body.find(".box-Uncategorized").length) {
              Twinkle.tag.alreadyPresentTags[Twinkle.tag.alreadyPresentTags.length] = "Uncategorized";
            }
            if ($body.find(".box-Improve_categories").length) {
              Twinkle.tag.alreadyPresentTags[Twinkle.tag.alreadyPresentTags.length] = "Improve categories";
            }
          }
          const statusNode = document.createElement("span");
          statusNode.style.fontSize = "90%";
          statusNode.id = "tw-tag-status";
          Twinkle.tag.status = {
            // initial state; defined like this because these need to be available for reference
            // in the click event handler
            numAdded: 0,
            numRemoved: 0
          };
          $body.find("button.tw-tag-submit").after(statusNode);
          const evt = document.createEvent("Event");
          evt.initEvent("change", true, true);
          result.sortorder.dispatchEvent(evt);
        } else {
          var _iterator31 = _createForOfIteratorHelper(Morebits.quickForm.getElements(result, "tags")), _step31;
          try {
            for (_iterator31.s(); !(_step31 = _iterator31.n()).done; ) {
              const checkbox = _step31.value;
              generateLinks(checkbox);
            }
          } catch (err) {
            _iterator31.e(err);
          } finally {
            _iterator31.f();
          }
        }
      };
      let $allCheckboxDivs;
      let $allHeaders;
      Twinkle.tag.updateSortOrder = (e) => {
        const {
          form
        } = e.target;
        const sortorder = e.target.value;
        Twinkle.tag.checkedTags = form.getChecked("tags");
        const container = new Morebits.quickForm.element({
          type: "fragment"
        });
        const makeCheckbox = (tag, description) => {
          const checkbox = {
            value: tag,
            label: "{{".concat(tag, "}}: ").concat(description)
          };
          if (Twinkle.tag.checkedTags.includes(tag)) {
            checkbox.checked = true;
          }
          switch (tag) {
            case "Expert needed":
              checkbox.subgroup = [{
                name: "expert",
                type: "input",
                label: window.wgULS("哪个领域的专家（必填）：", "哪個領域的專家（必填）："),
                tooltip: window.wgULS("必填，可参考 Category:需要专业人士关注的页面 使用现存的分类。", "必填，可參考 Category:需要專業人士關注的頁面 使用現存的分類。")
              }, {
                name: "expert2",
                type: "input",
                label: window.wgULS("哪个领域的专家：", "哪個領域的專家："),
                tooltip: window.wgULS("可选，可参考 Category:需要专业人士关注的页面 使用现存的分类。", "可選，可參考 Category:需要專業人士關注的頁面 使用現存的分類。")
              }, {
                name: "expert3",
                type: "input",
                label: window.wgULS("哪个领域的专家：", "哪個領域的專家："),
                tooltip: window.wgULS("可选，可参考 Category:需要专业人士关注的页面 使用现存的分类。", "可選，可參考 Category:需要專業人士關注的頁面 使用現存的分類。")
              }];
              break;
            case "Merge":
            case "Merge from":
            case "Merge to": {
              let otherTagName = "Merge";
              switch (tag) {
                case "Merge from":
                  otherTagName = "Merge to";
                  break;
                case "Merge to":
                  otherTagName = "Merge from";
                  break;
              }
              checkbox.subgroup = [{
                name: "mergeTarget",
                type: "input",
                label: window.wgULS("其他条目：", "其他條目："),
                tooltip: window.wgULS("如指定多个条目，请用管道符分隔：条目甲|条目乙", "如指定多個條目，請用管道符分隔：條目甲|條目乙")
              }, {
                type: "checkbox",
                list: [{
                  name: "mergeTagOther",
                  label: "用{{".concat(otherTagName).concat(window.wgULS("}}标记其他条目", "}}標記其他條目")),
                  checked: true,
                  tooltip: window.wgULS("仅在只输入了一个条目名时可用", "僅在只輸入了一個條目名時可用")
                }]
              }];
              if (mw.config.get("wgNamespaceNumber") === 0) {
                checkbox.subgroup[checkbox.subgroup.length] = {
                  name: "mergeReason",
                  type: "textarea",
                  label: window.wgULS("合并理由（会被贴上".concat(tag === "Merge to" ? "其他" : "这", "条目的讨论页）："), "合併理由（會被貼上".concat(tag === "Merge to" ? "其他" : "這", "條目的討論頁）：")),
                  tooltip: window.wgULS("可选，但强烈推荐。如不需要请留空。仅在只输入了一个条目名时可用。", "可選，但強烈推薦。如不需要請留空。僅在只輸入了一個條目名時可用。")
                };
              }
              break;
            }
            case "Missing information":
              checkbox.subgroup = {
                name: "missingInformation",
                type: "input",
                label: window.wgULS("缺少的内容（必填）：", "缺少的內容（必填）："),
                tooltip: window.wgULS("必填，显示为“缺少有关……的信息。”", "必填，顯示為「缺少有關……的資訊。」")
              };
              break;
            case "Notability":
              checkbox.subgroup = {
                name: "notability",
                type: "select",
                list: [{
                  label: "{{Notability}}：".concat(window.wgULS("通用的关注度指引", "通用的關注度指引")),
                  value: "none"
                }, {
                  label: "{{Notability|Astro}}：".concat(window.wgULS("天体", "天體")),
                  value: "Astro"
                }, {
                  label: "{{Notability|Biographies}}：".concat(window.wgULS("人物传记", "人物傳記")),
                  value: "Biographies"
                }, {
                  label: "{{Notability|Book}}：".concat(window.wgULS("书籍", "書籍")),
                  value: "Book"
                }, {
                  label: "{{Notability|Cyclone}}：".concat(window.wgULS("气旋", "氣旋")),
                  value: "Cyclone"
                }, {
                  label: "{{Notability|Fiction}}：".concat(window.wgULS("虚构事物", "虛構事物")),
                  value: "Fiction"
                }, {
                  label: "{{Notability|Geographic}}：".concat(window.wgULS("地理特征", "地理特徵")),
                  value: "Geographic"
                }, {
                  label: "{{Notability|Geometry}}：".concat(window.wgULS("几何图形", "幾何圖形")),
                  value: "Geometry"
                }, {
                  label: "{{Notability|Invention}}：".concat(window.wgULS("发明、研究", "發明、研究")),
                  value: "Invention"
                }, {
                  label: "{{Notability|Music}}：".concat(window.wgULS("音乐", "音樂")),
                  value: "Music"
                }, {
                  label: "{{Notability|Numbers}}：".concat(window.wgULS("数字", "數字")),
                  value: "Numbers"
                }, {
                  label: "{{Notability|Organizations}}：".concat(window.wgULS("组织", "組織")),
                  value: "Organizations"
                }, {
                  label: "{{Notability|Property}}：".concat(window.wgULS("性质表", "性質表")),
                  value: "Property"
                }, {
                  label: "{{Notability|Traffic}}：交通",
                  value: "Traffic"
                }, {
                  label: "{{Notability|Web}}：".concat(window.wgULS("网站、网络内容", "網站、網路內容"), "（非正式指引）"),
                  value: "Web"
                }]
              };
              break;
            case "Requested move":
              checkbox.subgroup = [{
                name: "moveTarget",
                type: "input",
                label: window.wgULS("新名称：", "新名稱：")
              }, {
                name: "moveReason",
                type: "textarea",
                label: window.wgULS("移动理由（会被粘贴该条目的讨论页）：", "移動理由（會被貼上該條目的討論頁）："),
                tooltip: window.wgULS("可选，但强烈推荐。如不需要请留空。", "可選，但強烈推薦。如不需要請留空。")
              }];
              break;
            case "Split":
              checkbox.subgroup = [{
                name: "target1",
                type: "input",
                label: window.wgULS("页面名1：", "頁面名1："),
                tooltip: window.wgULS("可选。", "可選。")
              }, {
                name: "target2",
                type: "input",
                label: window.wgULS("页面名2：", "頁面名2："),
                tooltip: window.wgULS("可选。", "可選。")
              }, {
                name: "target3",
                type: "input",
                label: window.wgULS("页面名3：", "頁面名3："),
                tooltip: window.wgULS("可选。", "可選。")
              }];
              break;
            case "Cleanup":
              checkbox.subgroup = [{
                name: "cleanupReason",
                type: "input",
                label: "需要清理的理由",
                tooltip: window.wgULS("可选，但强烈推荐。如不需要请留空。", "可選，但強烈推薦。如不需要請留空。")
              }];
              break;
            default:
              break;
          }
          return checkbox;
        };
        const makeCheckboxesForAlreadyPresentTags = () => {
          container.append({
            type: "header",
            id: "tagHeader0",
            label: window.wgULS("已放置的维护标记", "已放置的維護標記")
          });
          const subdiv = container.append({
            type: "div",
            id: "tagSubdiv0"
          });
          const checkboxes = [];
          const unCheckedTags = e.target.form.getUnchecked("existingTags");
          var _iterator32 = _createForOfIteratorHelper(Twinkle.tag.alreadyPresentTags), _step32;
          try {
            for (_iterator32.s(); !(_step32 = _iterator32.n()).done; ) {
              const tag = _step32.value;
              const checkbox = {
                value: tag,
                label: "{{".concat(tag, "}}").concat(Twinkle.tag.article.flatObject[tag] ? ": ".concat(Twinkle.tag.article.flatObject[tag].description) : ""),
                checked: !unCheckedTags.includes(tag)
              };
              checkboxes[checkboxes.length] = checkbox;
            }
          } catch (err) {
            _iterator32.e(err);
          } finally {
            _iterator32.f();
          }
          subdiv.append({
            type: "checkbox",
            name: "existingTags",
            list: checkboxes
          });
        };
        if (sortorder === "cat") {
          const doCategoryCheckboxes = (subdiv, subgroup) => {
            const checkboxes = [];
            var _iterator33 = _createForOfIteratorHelper(subgroup), _step33;
            try {
              for (_iterator33.s(); !(_step33 = _iterator33.n()).done; ) {
                const item = _step33.value;
                if (!Twinkle.tag.alreadyPresentTags.includes(item.tag)) {
                  checkboxes[checkboxes.length] = makeCheckbox(item.tag, item.description);
                }
              }
            } catch (err) {
              _iterator33.e(err);
            } finally {
              _iterator33.f();
            }
            subdiv.append({
              type: "checkbox",
              name: "tags",
              list: checkboxes
            });
          };
          if (Twinkle.tag.alreadyPresentTags.length > 0) {
            makeCheckboxesForAlreadyPresentTags();
          }
          let i = 1;
          var _iterator34 = _createForOfIteratorHelper(Twinkle.tag.article.tagList), _step34;
          try {
            for (_iterator34.s(); !(_step34 = _iterator34.n()).done; ) {
              const group = _step34.value;
              container.append({
                type: "header",
                id: "tagHeader".concat(i),
                label: group.key
              });
              const subdiv = container.append({
                type: "div",
                id: "tagSubdiv".concat(i++)
              });
              if (group.value[0].tag) {
                doCategoryCheckboxes(subdiv, group.value);
              } else {
                var _iterator35 = _createForOfIteratorHelper(group.value), _step35;
                try {
                  for (_iterator35.s(); !(_step35 = _iterator35.n()).done; ) {
                    const subgroup = _step35.value;
                    subdiv.append({
                      type: "div",
                      label: [Morebits.htmlNode("b", subgroup.key)]
                    });
                    doCategoryCheckboxes(subdiv, subgroup.value);
                  }
                } catch (err) {
                  _iterator35.e(err);
                } finally {
                  _iterator35.f();
                }
              }
            }
          } catch (err) {
            _iterator34.e(err);
          } finally {
            _iterator34.f();
          }
        } else {
          var _Twinkle$tag$article;
          if (Twinkle.tag.alreadyPresentTags.length > 0) {
            makeCheckboxesForAlreadyPresentTags();
            container.append({
              type: "header",
              id: "tagHeader1",
              label: window.wgULS("可用的维护标记", "可用的維護標記")
            });
          }
          (_Twinkle$tag$article = Twinkle.tag.article).alphabeticalList || (_Twinkle$tag$article.alphabeticalList = Object.keys(Twinkle.tag.article.flatObject).sort());
          const checkboxes = [];
          var _iterator36 = _createForOfIteratorHelper(Twinkle.tag.article.alphabeticalList), _step36;
          try {
            for (_iterator36.s(); !(_step36 = _iterator36.n()).done; ) {
              const tag = _step36.value;
              if (!Twinkle.tag.alreadyPresentTags.includes(tag)) {
                checkboxes[checkboxes.length] = makeCheckbox(tag, Twinkle.tag.article.flatObject[tag].description);
              }
            }
          } catch (err) {
            _iterator36.e(err);
          } finally {
            _iterator36.f();
          }
          container.append({
            type: "checkbox",
            name: "tags",
            list: checkboxes
          });
        }
        if (Twinkle.getPref("customTagList").length) {
          container.append({
            type: "header",
            label: window.wgULS("自定义模板", "自訂模板")
          });
          container.append({
            type: "checkbox",
            name: "tags",
            list: Twinkle.getPref("customTagList").map((el) => {
              el.checked = Twinkle.tag.checkedTags.includes(el.value);
              return el;
            })
          });
        }
        const $workarea = $(form).find("#tagWorkArea");
        const rendered = container.render();
        $workarea.empty().append(rendered);
        $allCheckboxDivs = $workarea.find("[name=tags], [name=existingTags]").parent();
        $allHeaders = $workarea.find("h5, .quickformDescription");
        form.quickfilter.value = "";
        form.quickfilter.focus();
        $workarea.find("h5").css({
          "font-size": "110%"
        });
        $workarea.find("h5:not(:first-child)").css({
          "margin-top": "1em"
        });
        $workarea.find("div").filter(":has(span.quickformDescription)").css({
          "margin-top": "0.4em"
        });
        var _iterator37 = _createForOfIteratorHelper(Morebits.quickForm.getElements(form, "existingTags")), _step37;
        try {
          for (_iterator37.s(); !(_step37 = _iterator37.n()).done; ) {
            const checkbox = _step37.value;
            generateLinks(checkbox);
          }
        } catch (err) {
          _iterator37.e(err);
        } finally {
          _iterator37.f();
        }
        var _iterator38 = _createForOfIteratorHelper(Morebits.quickForm.getElements(form, "tags")), _step38;
        try {
          for (_iterator38.s(); !(_step38 = _iterator38.n()).done; ) {
            const checkbox = _step38.value;
            generateLinks(checkbox);
          }
        } catch (err) {
          _iterator38.e(err);
        } finally {
          _iterator38.f();
        }
        const statusNode = document.querySelector("#tw-tag-status");
        $body.find("[name=tags], [name=existingTags]").on("click", function() {
          if (this.name === "tags") {
            Twinkle.tag.status.numAdded += this.checked ? 1 : -1;
          } else if (this.name === "existingTags") {
            Twinkle.tag.status.numRemoved += this.checked ? -1 : 1;
          }
          const firstPart = "加入".concat(Twinkle.tag.status.numAdded).concat(window.wgULS("个标记", "個標記"));
          const secondPart = "移除".concat(Twinkle.tag.status.numRemoved).concat(window.wgULS("个标记", "個標記"));
          statusNode.textContent = (Twinkle.tag.status.numAdded ? "  ".concat(firstPart) : "") + (Twinkle.tag.status.numRemoved ? (Twinkle.tag.status.numAdded ? "；" : "  ") + secondPart : "");
        });
      };
      const generateLinks = (checkbox) => {
        const link = Morebits.htmlNode("a", ">");
        link.setAttribute("class", "tag-template-link");
        const tagname = checkbox.values;
        link.setAttribute("href", mw.util.getUrl((tagname.includes(":") ? "" : "Template:") + (tagname.includes("|") ? tagname.slice(0, tagname.indexOf("|")) : tagname)));
        link.setAttribute("target", "_blank");
        link.setAttribute("rel", "noopener noreferrer");
        $(checkbox).parent().append([" ", link]);
      };
      Twinkle.tag.article = {};
      Twinkle.tag.article.tagList = [{
        key: window.wgULS("清理和维护模板", "清理和維護模板"),
        value: [{
          key: window.wgULS("常规清理", "常規清理"),
          value: [{
            tag: "Cleanup",
            description: window.wgULS("可能需要进行清理，以符合有兽档案馆的质量标准", "可能需要進行清理，以符合有獸檔案館的質量標準")
          }, {
            tag: "Cleanup rewrite",
            description: window.wgULS("不符合有兽档案馆的质量标准，需要完全重写", "不符合有獸檔案館的質量標準，需要完全重寫")
          }, {
            tag: "Cleanup-jargon",
            description: window.wgULS("包含过多行话或专业术语，可能需要简化或提出进一步解释", "包含過多行話或專業術語，可能需要簡化或提出進一步解釋")
          }, {
            tag: "Copy edit",
            description: window.wgULS("需要编修，以确保文法、用词、语气、格式、标点等使用恰当", "需要編修，以確保文法、用詞、語氣、格式、標點等使用恰當")
          }]
        }, {
          key: window.wgULS("可能多余的内容", "可能多餘的內容"),
          value: [{
            tag: "Copypaste",
            description: window.wgULS("内容可能是从某个来源处拷贝后粘贴", "內容可能是從某個來源處拷貝後貼上")
          }, {
            tag: "External links",
            description: window.wgULS("使用外部链接的方式可能不符合有兽档案馆的条例", "使用外部連結的方式可能不符合有獸檔案館的條例")
          }, {
            tag: "Non-free",
            description: window.wgULS("可能过多或不当地使用了受著作权保护的文字、图像或多媒体文件", "可能過多或不當地使用了受版權保護的文字、圖像或多媒體檔案")
          }]
        }, {
          key: window.wgULS("结构和导言", "結構和導言"),
          value: [{
            tag: "Lead too long",
            description: window.wgULS("导言部分也许过于冗长", "導言部分也許過於冗長")
          }, {
            tag: "Lead too short",
            description: window.wgULS("导言部分也许不足以概括其内容", "導言部分也許不足以概括其內容")
          }, {
            tag: "Very long",
            description: window.wgULS("可能过于冗长", "可能過於冗長")
          }]
        }, {
          key: window.wgULS("虚构作品相关清理", "虛構作品相關清理"),
          value: [{
            tag: "In-universe",
            description: window.wgULS("使用小说故事内的观点描述一个虚构事物", "使用小說故事內的觀點描述一個虛構事物")
          }, {
            tag: "Long plot",
            description: window.wgULS("可能包含过于详细的剧情摘要", "可能包含過於詳細的劇情摘要")
          }]
        }]
      }, {
        key: window.wgULS("常规条目问题", "常規條目問題"),
        value: [{
          key: "重要性和知名度",
          value: [{
            tag: "Notability",
            description: window.wgULS("可能不符合通用关注度指引", "可能不符合通用關注度指引"),
            excludeMI: true
          }, {
            tag: "Notability Unreferenced",
            description: window.wgULS("可能具备关注度，但需要来源加以彰显", "可能具備關注度，但需要來源加以彰顯")
          }]
        }, {
          key: window.wgULS("写作风格", "寫作風格"),
          value: [{
            tag: "Advert",
            description: window.wgULS("类似广告或宣传性内容", "類似廣告或宣傳性內容")
          }, {
            tag: "Fanpov",
            description: window.wgULS("类似爱好者网页", "類似愛好者網頁")
          }, {
            tag: "How-to",
            description: window.wgULS("包含指南或教学内容", "包含指南或教學內容")
          }, {
            tag: "Inappropriate person",
            description: window.wgULS("使用不适当的第一人称和第二人称", "使用不適當的第一人稱和第二人稱")
          }, {
            tag: "Newsrelease",
            description: window.wgULS("阅读起来像是新闻稿及包含过度的宣传性语调", "閱讀起來像是新聞稿及包含過度的宣傳性語調")
          }, {
            tag: "Prose",
            description: window.wgULS("使用了日期或时间列表式记述，需要改写为连贯的叙述性文字", "使用了日期或時間列表式記述，需要改寫為連貫的敘述性文字")
          }, {
            tag: "Review",
            description: window.wgULS("阅读起来类似评论，需要清理", "閱讀起來類似評論，需要清理")
          }, {
            tag: "Tone",
            description: window.wgULS("语调或风格可能不适合百科全书的写作方式", "語調或風格可能不適合百科全書的寫作方式")
          }]
        }, {
          key: window.wgULS("内容", "內容"),
          value: [
            {
              tag: "Missing information",
              description: "缺少必要的信息"
            },
            // these three have a subgroup with several options
            {
              tag: "Substub",
              description: window.wgULS("过于短小", "過於短小"),
              excludeMI: true
            },
            {
              tag: "Unencyclopedic",
              description: window.wgULS("可能不适合写入百科全书", "可能不適合寫入百科全書")
            }
          ]
        }, {
          key: window.wgULS("信息和细节", "資訊和細節"),
          value: [{
            tag: "Expert needed",
            description: window.wgULS("需要精通或熟悉本主题的专业人士（专家）参与及协助编辑", "需要精通或熟悉本主題的專業人士（專家）參與及協助編輯")
          }, {
            tag: "Overly detailed",
            description: window.wgULS("包含太多过度细节内容", "包含太多過度細節內容")
          }, {
            tag: "Trivia",
            description: window.wgULS("应避免有陈列杂项、琐碎资料的部分", "應避免有陳列雜項、瑣碎資料的部分")
          }]
        }, {
          key: window.wgULS("时间性", "時間性"),
          value: [{
            tag: "Current",
            description: window.wgULS("记述新闻动态", "記述新聞動態"),
            excludeMI: true
          }, {
            tag: "Update",
            description: window.wgULS("当前条目或章节需要更新", "當前條目或章節需要更新")
          }]
        }, {
          key: window.wgULS("客观性和事实准确性", "客觀性和事實準確性"),
          value: [{
            tag: "Autobiography",
            description: window.wgULS("类似一篇自传，或内容主要由条目描述的当事人或组织撰写、编辑", "類似一篇自傳，或內容主要由條目描述的當事人或組織撰寫、編輯")
          }, {
            tag: "COI",
            description: window.wgULS("主要贡献者与本条目所宣扬的内容可能存在利益冲突", "主要貢獻者與本條目所宣揚的內容可能存在利益衝突")
          }, {
            tag: "Disputed",
            description: window.wgULS("内容疑欠准确，有待查证", "內容疑欠準確，有待查證")
          }, {
            tag: "Globalize",
            description: window.wgULS("仅具有一部分地区的信息或观点", "僅具有一部分地區的資訊或觀點")
          }, {
            tag: "Hoax",
            description: window.wgULS("真实性被质疑", "真實性被質疑")
          }, {
            tag: "POV",
            description: window.wgULS("客观性有争议。内容、语调可能带有明显的个人观点或地方色彩", "客觀性有爭議。內容、語調可能帶有明顯的個人觀點或地方色彩")
          }, {
            tag: "Self-contradictory",
            description: window.wgULS("内容自相矛盾", "內容自相矛盾")
          }, {
            tag: "Weasel",
            description: window.wgULS("语义模棱两可而损及其客观性或准确性", "語意模棱兩可而損及其客觀性或準確性")
          }]
        }, {
          key: window.wgULS("可供查证和来源", "可供查證和來源"),
          value: [{
            tag: "BLPdispute",
            description: window.wgULS("可能违反了有兽档案馆关于生者传记的条例", "可能違反了有獸檔案館關於生者傳記的條例")
          }, {
            tag: "BLPsources",
            description: window.wgULS("生者传记需要补充更多可供查证的来源", "生者傳記需要補充更多可供查證的來源")
          }, {
            tag: "BLP unsourced",
            description: window.wgULS("生者传记没有列出任何参考或来源", "生者傳記沒有列出任何參考或來源")
          }, {
            tag: "Citecheck",
            description: window.wgULS("可能包含不适用或被曲解的引用资料，部分内容的准确性无法被证实", "可能包含不適用或被曲解的引用資料，部分內容的準確性無法被證實")
          }, {
            tag: "More footnotes needed",
            description: window.wgULS("因为文内引用不足，部分字句的来源仍然不明", "因為文內引用不足，部分字句的來源仍然不明")
          }, {
            tag: "No footnotes",
            description: window.wgULS("因为没有内文引用而来源仍然不明", "因為沒有內文引用而來源仍然不明")
          }, {
            tag: "Onesource",
            description: window.wgULS("极大或完全地依赖于某个单一的来源", "極大或完全地依賴於某個單一的來源")
          }, {
            tag: "Original research",
            description: window.wgULS("可能包含原创研究或未查证内容", "可能包含原創研究或未查證內容")
          }, {
            tag: "Primarysources",
            description: window.wgULS("依赖第一手来源", "依賴第一手來源")
          }, {
            tag: "Refimprove",
            description: window.wgULS("需要补充更多来源", "需要補充更多來源")
          }, {
            tag: "Unreferenced",
            description: window.wgULS("没有列出任何参考或来源", "沒有列出任何參考或來源")
          }]
        }]
      }, {
        key: window.wgULS("具体内容问题", "具體內容問題"),
        value: [{
          key: window.wgULS("语言", "語言"),
          value: [{
            tag: "NotMandarin",
            description: window.wgULS("包含过多不是现代标准汉语的内容", "包含過多不是現代標準漢語的內容"),
            excludeMI: true
          }, {
            tag: "Rough translation",
            description: window.wgULS("翻译品质不佳", "翻譯品質不佳")
          }]
        }, {
          key: window.wgULS("链接", "連結"),
          value: [{
            tag: "Dead end",
            description: window.wgULS("需要加上内部链接以构筑百科全书的链接网络", "需要加上內部連結以構築百科全書的連結網絡")
          }, {
            tag: "Orphan",
            description: window.wgULS("没有或只有很少链入页面", "沒有或只有很少連入頁面")
          }, {
            tag: "Overlinked",
            description: window.wgULS("含有过多、重复、或不必要的内部链接", "含有過多、重複、或不必要的內部連結")
          }, {
            tag: "Underlinked",
            description: window.wgULS("需要更多内部链接以构筑百科全书的链接网络", "需要更多內部連結以構築百科全書的連結網絡")
          }]
        }, {
          key: window.wgULS("参考技术", "參考技術"),
          value: [{
            tag: "Citation style",
            description: window.wgULS("引用需要进行清理", "引用需要進行清理")
          }]
        }, {
          key: window.wgULS("分类", "分類"),
          value: [{
            tag: "Improve categories",
            description: window.wgULS("需要更多页面分类", "需要更多頁面分類"),
            excludeMI: true
          }, {
            tag: "Uncategorized",
            description: window.wgULS("缺少页面分类", "缺少頁面分類"),
            excludeMI: true
          }]
        }]
      }, {
        key: window.wgULS("合并、拆分、移动", "合併、拆分、移動"),
        value: [{
          tag: "Merge from",
          description: window.wgULS("建议将页面并入此页面", "建議將頁面併入此頁面"),
          excludeMI: true
        }, {
          tag: "Merge to",
          description: window.wgULS("建议将此页面并入页面", "建議將此頁面併入頁面"),
          excludeMI: true
        }, {
          tag: "Merge",
          description: window.wgULS("建议此页面与页面合并", "建議此頁面與頁面合併"),
          excludeMI: true
        }, {
          tag: "Requested move",
          description: window.wgULS("建议将此页面移动到新名称", "建議將此頁面移動到新名稱"),
          excludeMI: true
        }, {
          tag: "Split",
          description: window.wgULS("建议将此页面分割为多个页面", "建議將此頁面分割為多個頁面"),
          excludeMI: true
        }]
      }];
      Twinkle.tag.redirectList = [{
        key: "常用模板",
        value: [{
          tag: window.wgULS("合并重定向", "合併重定向"),
          description: window.wgULS("保持页面题名至相应主条目，令页面内容在合并后仍能保存其编辑历史", "保持頁面題名至相應主條目，令頁面內容在合併後仍能儲存其編輯歷史")
        }, {
          tag: window.wgULS("简繁重定向", "簡繁重定向"),
          description: window.wgULS("引导简体至繁体，或繁体至简体", "引導簡體至繁體，或繁體至簡體")
        }, {
          tag: window.wgULS("关注度重定向", "關注度重定向"),
          description: window.wgULS("缺乏关注度的子主题向有关注度的母主题的重定向", "缺乏關注度的子主題向有關注度的母主題的重定向")
        }, {
          tag: "模板重定向",
          description: window.wgULS("指向模板的重定向页面", "指向模板的重定向頁面")
        }, {
          tag: window.wgULS("别名重定向", "別名重定向"),
          description: window.wgULS("标题的其他名称、笔名、绰号、同义字等", "標題的其他名稱、筆名、綽號、同義字等")
        }, {
          tag: window.wgULS("译名重定向", "譯名重定向"),
          description: window.wgULS("人物、作品等各项事物的其他翻译名称", "人物、作品等各項事物的其他翻譯名稱")
        }, {
          tag: window.wgULS("缩写重定向", "縮寫重定向"),
          description: window.wgULS("标题缩写", "標題縮寫")
        }, {
          tag: window.wgULS("拼写重定向", "拼寫重定向"),
          description: window.wgULS("标题的其他不同拼写", "標題的其他不同拼寫")
        }, {
          tag: window.wgULS("错字重定向", "錯字重定向"),
          description: window.wgULS("纠正标题的常见错误拼写或误植", "糾正標題的常見錯誤拼寫或誤植")
        }, {
          tag: window.wgULS("旧名重定向", "舊名重定向"),
          description: window.wgULS("将事物早前的名称引导至更改后的主题", "將事物早前的名稱引導至更改後的主題")
        }, {
          tag: "全名重定向",
          description: window.wgULS("标题的完整或更完整名称", "標題的完整或更完整名稱")
        }, {
          tag: "短名重定向",
          description: window.wgULS("完整标题名称或人物全名的部分、不完整的名称或简称", "完整標題名稱或人物全名的部分、不完整的名稱或簡稱")
        }, {
          tag: "姓氏重定向",
          description: "人物姓氏"
        }, {
          tag: "名字重定向",
          description: "人物人名"
        }, {
          tag: "本名重定向",
          description: "人物本名"
        }, {
          tag: "非中文重定向",
          description: window.wgULS("非中文标题", "非中文標題"),
          subgroup: [{
            name: "altLangFrom",
            type: "input",
            label: "本重新導向的語言（可選）",
            tooltip: "輸入重新導向名稱所使用語言的ISO 639代碼，例如en代表英語，代碼可參見 Template:ISO_639_name"
          }]
        }, {
          tag: "日文重定向",
          description: window.wgULS("日语名称", "日語名稱")
        }]
      }, {
        key: "偶用模板",
        value: [{
          tag: "角色重定向",
          description: window.wgULS("电视剧、电影、书籍等作品的角色", "電視劇、電影、書籍等作品的角色")
        }, {
          tag: window.wgULS("章节重定向", "章節重定向"),
          description: window.wgULS("导向至较高密度组织的页面", "導向至較高密度組織的頁面")
        }, {
          tag: "列表重定向",
          description: window.wgULS("导向至低密度的列表", "導向至低密度的列表")
        }, {
          tag: "可能性重定向",
          description: window.wgULS("导向至当前提供内容更为详尽的目标页面", "導向至當前提供內容更為詳盡的目標頁面")
        }, {
          tag: window.wgULS("关联字重定向", "關聯字重定向"),
          description: window.wgULS("标题名称关联字", "標題名稱關聯字")
        }, {
          tag: window.wgULS("条目请求重定向", "條目請求重定向"),
          description: window.wgULS("需要独立条目的页面", "需要獨立條目的頁面"),
          subgroup: [{
            name: "reqArticleLang",
            type: "input",
            label: "外語語言代碼：",
            tooltip: "使用ISO 639代碼，可參見 Template:ISO_639_name"
          }, {
            name: "reqArticleTitle",
            type: "input",
            label: "外語頁面名稱：",
            size: 60
          }]
        }, {
          tag: window.wgULS("快捷方式重定向", "捷徑重定向"),
          description: window.wgULS("有兽档案馆快捷方式", "有獸檔案館快捷方式")
        }]
      }, {
        key: window.wgULS("鲜用模板", "鮮用模板"),
        value: [{
          tag: window.wgULS("词组重定向", "詞組重定向"),
          description: window.wgULS("将词组/词组/成语指向切题的条目及恰当章节", "將詞組/詞組/成語指向切題的條目及恰當章節")
        }, {
          tag: window.wgULS("消歧义页重定向", "消歧義頁重定向"),
          description: window.wgULS("指向消歧义页", "指向消歧義頁")
        }, {
          tag: "域名重定向",
          description: window.wgULS("域名", "網域名稱")
        }, {
          tag: "年代重定向",
          description: window.wgULS("于年份条目导向至年代条目", "於年份條目導向至年代條目")
        }, {
          tag: window.wgULS("用户框模板重定向", "用戶框模板重定向"),
          description: window.wgULS("用户框模板", "用戶框模板")
        }, {
          tag: "重定向模板用重定向",
          description: window.wgULS("导向至重定向模板", "導向至重定向模板")
        }, {
          tag: "EXIF重定向",
          description: window.wgULS("JPEG图像文件包含EXIF信息", "JPEG圖檔包含EXIF資訊")
        }]
      }];
      Twinkle.tag.fileList = [{
        key: window.wgULS("著作权和来源问题标签", "著作權和來源問題標籤"),
        value: [{
          label: "{{Non-free reduce}}：".concat(window.wgULS("非低分辨率的合理使用图像（或过长的音频剪辑等）", "非低解析度的合理使用圖像（或過長的音頻剪輯等）")),
          value: "Non-free reduce"
        }]
      }, {
        key: window.wgULS("清理标签", "清理標籤"),
        value: [{
          label: "{{Watermark}}：".concat(window.wgULS("图像包含了水印", "圖像包含了浮水印")),
          value: "Watermark"
        }, {
          label: "{{Rename media}}：".concat(window.wgULS("文件应该根据文件名称指引被重命名", "檔案應該根據檔案名稱指引被重新命名")),
          value: "Rename media",
          subgroup: [{
            type: "input",
            name: "renamemediaNewname",
            label: window.wgULS("新名称：", "新名稱："),
            tooltip: window.wgULS("输入图像的新名称（可选）", "輸入圖像的新名稱（可選）")
          }, {
            type: "input",
            name: "renamemediaReason",
            label: "原因：",
            tooltip: window.wgULS("输入重命名的原因（可选）", "輸入重新命名的原因（可選）")
          }]
        }, {
          label: "{{Should be SVG}}：".concat(window.wgULS("PNG、GIF、JPEG文件应该重制成矢量图形", "PNG、GIF、JPEG檔案應該重製成向量圖形")),
          value: "Should be SVG"
        }]
      }, {
        key: window.wgULS("文件取代标签", "檔案取代標籤"),
        value: [{
          label: "{{Obsolete}}：".concat(window.wgULS("有新版本可用的过时文件", "有新版本可用的過時檔案")),
          value: "Obsolete"
        }, {
          label: "{{Vector version available}}：".concat(window.wgULS("有矢量图形可用的非矢量图形文件", "有向量圖形可用的非向量圖形檔案")),
          value: "Vector version available"
        }],
        buildFilename: true
      }];
      Twinkle.tag.callbacks = {
        article: (pageobj) => {
          let pageText = pageobj.getPageText().replace(/\{\{\s*([Nn]ew unreviewed article|[Uu]nreviewed|[Uu]serspace draft)\s*(\|(?:\{\{[^{}]*\}\}|[^{}])*)?\}\}\s*/g, "");
          const params = pageobj.getCallbackParameters();
          const postRemoval = () => {
            if (params.tagsToRemove.length) {
              pageText = pageText.replace(/\{\{(multiple ?issues|article ?issues|mi|ai|issues|多個問題|多个问题|問題條目|问题条目|數個問題|数个问题)\s*\|\s*\}\}\n?/im, "");
              pageText = pageText.replace(/\{\{(?:multiple ?issues|article ?issues|mi|ai|issues|多個問題|多个问题|問題條目|问题条目|數個問題|数个问题)\s*\|\s*(\{\{(?:\{\{[^{}]*\}\}|[^{}])+\}\})\s*\}\}/im, "$1");
            }
            const makeSentence = (array) => {
              if (array.length < 3) {
                return array.join("和");
              }
              const last = array.pop();
              return "".concat(array.join("、"), "和").concat(last);
            };
            const makeTemplateLink = (tag) => {
              let text = "{{[[";
              if (tag.includes("|")) {
                tag = tag.slice(0, tag.indexOf("|"));
              }
              text += tag.includes(":") ? tag : "Template:".concat(tag, "|").concat(tag);
              return "".concat(text, "]]}}");
            };
            let summaryText;
            const addedTags = params.tags.map(makeTemplateLink);
            const removedTags = params.tagsToRemove.map(makeTemplateLink);
            if (addedTags.length) {
              summaryText = "加入".concat(makeSentence(addedTags));
              summaryText += removedTags.length ? "並移除".concat(makeSentence(removedTags)) : "";
            } else {
              summaryText = "移除".concat(makeSentence(removedTags));
            }
            summaryText += window.wgULS("标记", "標記");
            if (params.reason) {
              summaryText += "：".concat(params.reason);
            }
            if (summaryText.length > 499) {
              summaryText = summaryText.replace(/\[\[[^|]+\|([^\]]+)\]\]/g, "$1");
            }
            pageobj.setPageText(pageText);
            pageobj.setEditSummary(summaryText);
            pageobj.setChangeTags(Twinkle.changeTags);
            pageobj.setWatchlist(Twinkle.getPref("watchTaggedPages"));
            pageobj.setMinorEdit(Twinkle.getPref("markTaggedPagesAsMinor"));
            pageobj.setCreateOption("nocreate");
            pageobj.save(() => {
              if (params.mergeReason) {
                const talkpage = new Morebits.wiki.page("Talk:".concat(params.discussArticle), window.wgULS("将理由贴进讨论页", "將理由貼進討論頁"));
                talkpage.setNewSectionText("".concat(params.mergeReason.trim(), " ~~").concat("~~"));
                talkpage.setNewSectionTitle("请求与[[".concat(params.nonDiscussArticle, "]]合并"));
                talkpage.setChangeTags(Twinkle.changeTags);
                talkpage.setWatchlist(Twinkle.getPref("watchMergeDiscussions"));
                talkpage.setCreateOption("recreate");
                talkpage.newSection();
              }
              if (params.mergeTagOther) {
                let otherTagName = "Merge";
                if (params.mergeTag === "Merge from") {
                  otherTagName = "Merge to";
                } else if (params.mergeTag === "Merge to") {
                  otherTagName = "Merge from";
                }
                const newParams = {
                  tags: [otherTagName],
                  tagsToRemove: [],
                  tagsToRemain: [],
                  mergeTarget: Morebits.pageNameNorm,
                  discussArticle: params.discussArticle,
                  talkDiscussionTitle: params.talkDiscussionTitle,
                  talkDiscussionTitleLinked: params.talkDiscussionTitleLinked
                };
                const otherpage = new Morebits.wiki.page(params.mergeTarget, "".concat(window.wgULS("标记其他页面（", "標記其他頁面（") + params.mergeTarget, "）"));
                otherpage.setCallbackParameters(newParams);
                otherpage.load(Twinkle.tag.callbacks.article);
              }
              if (params.moveReason) {
                let moveTalkpageText = "\n\n{{".concat("subst:", "RM|1=".concat(params.moveReason.trim()));
                if (params.moveTarget) {
                  moveTalkpageText += "|2=".concat(params.moveTarget);
                }
                moveTalkpageText += "}}";
                const moveTalkpage = new Morebits.wiki.page("Talk:".concat(params.discussArticle), window.wgULS("将理由贴进讨论页", "將理由貼進討論頁"));
                moveTalkpage.setAppendText(moveTalkpageText);
                moveTalkpage.setEditSummary(window.wgULS("请求移动", "請求移動") + (params.moveTarget ? "至[[".concat(params.moveTarget, "]]") : ""));
                moveTalkpage.setChangeTags(Twinkle.changeTags);
                moveTalkpage.setCreateOption("recreate");
                moveTalkpage.append();
              }
            });
            if (params.patrol) {
              pageobj.patrol();
            }
          };
          const removeTags = () => {
            if (params.tagsToRemove.length === 0) {
              postRemoval();
              return;
            }
            Morebits.status.info(window.wgULS("信息", "資訊"), window.wgULS("移除取消选择的已存在标记", "移除取消選擇的已存在標記"));
            const getRedirectsFor = [];
            var _iterator39 = _createForOfIteratorHelper(params.tagsToRemove), _step39;
            try {
              for (_iterator39.s(); !(_step39 = _iterator39.n()).done; ) {
                const tag = _step39.value;
                const tag_re = new RegExp("\\{\\{".concat(Morebits.pageNameRegex(tag), "\\s*(\\|[^}]+)?\\}\\}\\n?"));
                if (tag_re.test(pageText)) {
                  pageText = pageText.replace(tag_re, "");
                } else {
                  getRedirectsFor[getRedirectsFor.length] = "Template:".concat(tag);
                }
              }
            } catch (err) {
              _iterator39.e(err);
            } finally {
              _iterator39.f();
            }
            if (!getRedirectsFor.length) {
              postRemoval();
              return;
            }
            const api2 = new Morebits.wiki.api(window.wgULS("获取模板重定向", "取得模板重新導向"), {
              action: "query",
              prop: "linkshere",
              titles: getRedirectsFor.join("|"),
              redirects: 1,
              lhnamespace: "10",
              lhshow: "redirect",
              lhlimit: "max"
              // 500 is max for normal users, 5000 for bots and sysops
            }, (apiobj) => {
              $(apiobj.responseXML).find("page").each((_idx, page) => {
                let removed = false;
                $(page).find("lh").each((_index, element) => {
                  const tag = $(element).attr("title").slice(9);
                  const tag_re = new RegExp("\\{\\{".concat(Morebits.pageNameRegex(tag), "\\s*(\\|(?:\\{\\{[^{}]*\\}\\}|[^{}])*)?\\}\\}\\n?"));
                  if (tag_re.test(pageText)) {
                    pageText = pageText.replace(tag_re, "");
                    removed = true;
                    return false;
                  }
                });
                if (!removed) {
                  Morebits.status.warn(window.wgULS("信息", "資訊"), window.wgULS("无法在页面上找到{{", "無法在頁面上找到{{") + $(page).attr("title").slice(9) + window.wgULS("}}……跳过", "}}……跳過"));
                }
              });
              postRemoval();
            });
            api2.post();
          };
          if (!params.tags.length) {
            removeTags();
            return;
          }
          let tagRe;
          let tagText = "";
          let tags = [];
          const groupableTags = [];
          const groupableExistingTags = [];
          const addTag = (tagName) => {
            let currentTag = "";
            if (tagName === "Uncategorized" || tagName === "Improve categories") {
              pageText += "\n\n{{".concat(tagName, "|time={{").concat("subst:", "#time:c}}}}");
            } else {
              currentTag += "{{".concat(tagName);
              switch (tagName) {
                case "Expert needed":
                  currentTag += "|subject=".concat(params.expert);
                  if (params.expert2) {
                    currentTag += "|subject2=".concat(params.expert2);
                  }
                  if (params.expert3) {
                    currentTag += "|subject3=".concat(params.expert3);
                  }
                  break;
                case "Merge":
                case "Merge to":
                case "Merge from":
                  if (params.mergeTarget) {
                    params.mergeTarget = Morebits.string.toUpperCaseFirstChar(params.mergeTarget.replace(/_/g, " "));
                    currentTag += "|".concat(params.mergeTarget);
                    if (mw.config.get("wgNamespaceNumber") === 0 && (params.mergeReason || params.discussArticle)) {
                      if (!params.discussArticle) {
                        params.discussArticle = tagName === "Merge to" ? params.mergeTarget : mw.config.get("wgTitle");
                        params.nonDiscussArticle = tagName === "Merge to" ? mw.config.get("wgTitle") : params.mergeTarget;
                        params.talkDiscussionTitle = window.wgULS("请求与", "請求與") + params.nonDiscussArticle + window.wgULS("合并", "合併");
                      }
                      currentTag += "|discuss=Talk:".concat(params.discussArticle, "#").concat(params.talkDiscussionTitle);
                    }
                  }
                  break;
                case "Missing information":
                  currentTag += "|1=".concat(params.missingInformation);
                  break;
                case "Notability":
                  if (params.notability !== "none") {
                    currentTag += "|3=".concat(params.notability);
                  }
                  break;
                case "Requested move":
                  if (params.moveTarget) {
                    params.moveTarget = Morebits.string.toUpperCaseFirstChar(params.moveTarget.replace(/_/g, " "));
                    params.discussArticle = mw.config.get("wgTitle");
                    currentTag += "|".concat(params.moveTarget);
                  }
                  break;
                case "Split":
                  if (params.target1) {
                    currentTag += "|1=".concat(params.target1);
                  }
                  if (params.target2) {
                    currentTag += "|2=".concat(params.target2);
                  }
                  if (params.target3) {
                    currentTag += "|3=".concat(params.target3);
                  }
                  break;
                case "Cleanup":
                  if (params.cleanupReason) {
                    currentTag += "|reason=".concat(params.cleanupReason);
                  }
                  break;
                default:
                  break;
              }
              currentTag += "|time={{".concat("subst:", "#time:c}}}}\n");
              tagText += currentTag;
            }
          };
          const addUngroupedTags = () => {
            for (var _i9 = 0, _tags = tags; _i9 < _tags.length; _i9++) {
              const tag = _tags[_i9];
              addTag(tag);
            }
            const ysarchives_page = new Morebits.wikitext.page(pageText);
            const templatesAfter = (
              // Protection templates
              // CSD
              // AfD
              "".concat(Twinkle.hatnoteRegex, "pp|pp-.*?|(?:Delete|Db-reason|D|Deletebecause|Db|速删|速刪|Speedy|SD|快删|快刪|CSD)|[rsaiftcmv]fd|vfd-(?:b|q|s|source|v|wikt)|(?:移动到维基|移動到維基)(?:教科书|教科書|语录|語錄|文库|文庫|导游|導遊|词典|詞典)")
            );
            pageText = ysarchives_page.insertAfterTemplates(tagText, templatesAfter).getText();
            removeTags();
          };
          var _iterator40 = _createForOfIteratorHelper(params.tags), _step40;
          try {
            for (_iterator40.s(); !(_step40 = _iterator40.n()).done; ) {
              const tag = _step40.value;
              tagRe = new RegExp("\\{\\{".concat(tag, "(\\||\\}\\})"), "im");
              if (Twinkle.tag.canRemove || !tagRe.exec(pageText)) {
                if (tag === "Notability" && (mw.config.get("wgNamespaceNumber") === 0 || confirm(window.wgULS("该页面不是条目，您仍要提报到关注度提报吗？", "該頁面不是條目，您仍要提報到關注度提報嗎？")))) {
                  const ysarchives_page = new Morebits.wiki.page("LIB_talk:存废讨论/关注度提报", window.wgULS("加入关注度记录项", "加入關注度記錄項"));
                  ysarchives_page.setFollowRedirect(true);
                  ysarchives_page.setCallbackParameters(params);
                  ysarchives_page.load(Twinkle.tag.callbacks.notabilityList);
                }
                if (Twinkle.tag.article.flatObject[tag] && !Twinkle.tag.article.flatObject[tag].excludeMI) {
                  groupableTags[groupableTags.length] = tag;
                } else {
                  tags[tags.length] = tag;
                }
              } else if (tag === "Merge from") {
                tags[tags.length] = tag;
              } else {
                Morebits.status.warn(window.wgULS("信息", "資訊"), window.wgULS("在页面上找到{{", "在頁面上找到{{") + tag + window.wgULS("}}……跳过", "}}……跳過"));
                if (["Merge", "Merge to"].includes(tag)) {
                  params.mergeTarget = null;
                  params.mergeReason = null;
                  params.mergeTagOther = null;
                }
              }
            }
          } catch (err) {
            _iterator40.e(err);
          } finally {
            _iterator40.f();
          }
          var _iterator41 = _createForOfIteratorHelper(params.tagsToRemain), _step41;
          try {
            for (_iterator41.s(); !(_step41 = _iterator41.n()).done; ) {
              const tag = _step41.value;
              if (Twinkle.tag.article.flatObject[tag] && !Twinkle.tag.article.flatObject[tag].excludeMI) {
                groupableExistingTags[groupableExistingTags.length] = tag;
              }
            }
          } catch (err) {
            _iterator41.e(err);
          } finally {
            _iterator41.f();
          }
          const miTest = /\{\{(multiple ?issues|article ?issues|mi|ai|issues|多個問題|多个问题|問題條目|问题条目|數個問題|数个问题)\s*\|[^}]+\{/im.exec(pageText);
          if (miTest && groupableTags.length > 0) {
            Morebits.status.info(window.wgULS("信息", "資訊"), window.wgULS("加入支持的标记入已存在的{{multiple issues}}", "加入支援的標記入已存在的{{multiple issues}}"));
            tagText = "";
            var _iterator42 = _createForOfIteratorHelper(groupableTags), _step42;
            try {
              for (_iterator42.s(); !(_step42 = _iterator42.n()).done; ) {
                const tag = _step42.value;
                addTag(tag);
              }
            } catch (err) {
              _iterator42.e(err);
            } finally {
              _iterator42.f();
            }
            const miRegex = new RegExp("(\\{\\{\\s*".concat(miTest[1], "\\s*(?:\\|(?:\\{\\{[^{}]*\\}\\}|[^{}])*)?)\\}\\}\\s*"), "im");
            pageText = pageText.replace(miRegex, "$1".concat(tagText, "}}\n"));
            tagText = "";
            addUngroupedTags();
          } else if (params.group && !miTest && groupableExistingTags.length + groupableTags.length >= 2) {
            Morebits.status.info(window.wgULS("信息", "資訊"), window.wgULS("加入支持的标记入{{multiple issues}}", "加入支援的標記入{{multiple issues}}"));
            tagText += "{{Multiple issues|\n";
            const addNewTagsToMI = () => {
              var _iterator43 = _createForOfIteratorHelper(groupableTags), _step43;
              try {
                for (_iterator43.s(); !(_step43 = _iterator43.n()).done; ) {
                  const tag = _step43.value;
                  addTag(tag);
                }
              } catch (err) {
                _iterator43.e(err);
              } finally {
                _iterator43.f();
              }
              tagText += "}}\n";
              addUngroupedTags();
            };
            const getRedirectsFor = [];
            var _iterator44 = _createForOfIteratorHelper(groupableExistingTags), _step44;
            try {
              for (_iterator44.s(); !(_step44 = _iterator44.n()).done; ) {
                const tag = _step44.value;
                const tag_re = new RegExp("(\\{\\{".concat(Morebits.pageNameRegex(tag), "\\s*(\\|[^}]+)?\\}\\}\\n?)"));
                if (tag_re.test(pageText)) {
                  tagText += tag_re.exec(pageText)[1];
                  pageText = pageText.replace(tag_re, "");
                } else {
                  getRedirectsFor[getRedirectsFor.length] = "Template:".concat(tag);
                }
              }
            } catch (err) {
              _iterator44.e(err);
            } finally {
              _iterator44.f();
            }
            if (!getRedirectsFor.length) {
              addNewTagsToMI();
              return;
            }
            const api2 = new Morebits.wiki.api(window.wgULS("获取模板重定向", "取得模板重新導向"), {
              action: "query",
              prop: "linkshere",
              titles: getRedirectsFor.join("|"),
              redirects: 1,
              lhnamespace: "10",
              lhshow: "redirect",
              lhlimit: "max"
              // 500 is max for normal users, 5000 for bots and sysops
            }, (apiobj) => {
              $(apiobj.responseXML).find("page").each((_idx, page) => {
                let found = false;
                $(page).find("lh").each((_index, element) => {
                  const tag = $(element).attr("title").slice(9);
                  const tag_re = new RegExp("(\\{\\{".concat(Morebits.pageNameRegex(tag), "\\s*(\\|[^}]*)?\\}\\}\\n?)"));
                  if (tag_re.test(pageText)) {
                    tagText += tag_re.exec(pageText)[1];
                    pageText = pageText.replace(tag_re, "");
                    found = true;
                    return false;
                  }
                });
                if (!found) {
                  Morebits.status.warn(window.wgULS("信息", "資訊"), window.wgULS("无法在页面上找到{{", "無法在頁面上找到{{") + $(page).attr("title").slice(9) + window.wgULS("}}……跳过", "}}……跳過"));
                }
              });
              addNewTagsToMI();
            });
            api2.post();
          } else {
            tags = [...tags, ...groupableTags];
            addUngroupedTags();
          }
        },
        notabilityList: (pageobj) => {
          pageobj.setAppendText("\n{{".concat("subst:", "Fameitem|title=".concat(Morebits.pageNameNorm, "}}")));
          pageobj.setEditSummary("加入[[".concat(Morebits.pageNameNorm, "]]"));
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setCreateOption("recreate");
          pageobj.append();
        },
        redirect: (pageobj) => {
          const params = pageobj.getCallbackParameters();
          let pageText = pageobj.getPageText();
          let tagRe;
          let tagText = "";
          let summaryText = "加入";
          const tags = [];
          let i;
          for (i = 0; i < params.tags.length; i++) {
            tagRe = new RegExp("(\\{\\{".concat(params.tags[i], "(\\||\\}\\}))"), "im");
            if (tagRe.exec(pageText)) {
              Morebits.status.warn(window.wgULS("信息", "資訊"), window.wgULS("在重定向上找到{{", "在重新導向上找到{{") + params.tags[i] + window.wgULS("}}……跳过", "}}……跳過"));
            } else {
              tags[tags.length] = params.tags[i];
            }
          }
          const addTag = (tagName, tagIndex) => {
            tagText += "\n{{".concat(tagName);
            if (tagName === "非中文重定向") {
              if (params.altLangFrom) {
                tagText += "|1=".concat(params.altLangFrom);
              }
            } else if ((tagName === "条目请求重定向" || tagName === "條目請求重定向") && params.reqArticleLang && params.reqArticleTitle) {
              tagText += "|1=".concat(params.reqArticleLang);
              tagText += "|2=".concat(params.reqArticleTitle);
            }
            tagText += "}}";
            if (tagIndex > 0) {
              if (tagIndex === tags.length - 1) {
                summaryText += "和";
              } else if (tagIndex < tags.length - 1) {
                summaryText += "、";
              }
            }
            summaryText += "{{[[:".concat(tagName.includes(":") ? tagName : "Template:".concat(tagName, "|").concat(tagName), "]]}}");
          };
          if (!tags.length) {
            Morebits.status.warn(window.wgULS("信息", "資訊"), window.wgULS("没有标签可供标记", "沒有標籤可供標記"));
          }
          tags.sort();
          for (var _i10 = 0, _tags2 = tags; _i10 < _tags2.length; _i10++) {
            const tag = _tags2[_i10];
            addTag(tag);
          }
          if (pageText.match(/{{(?:redr|this is a redirect|r(?:edirect)?(?:.?cat.*)?[ _]?sh)/i)) {
            const oldTags = pageText.match(/(\s*{{[A-Za-z\s]+\|(?:\s*1=)?)((?:[^|{}]|{{[^}]+}})+)(}})\s*/i);
            pageText = pageText.replace(oldTags[0], oldTags[1] + tagText + oldTags[2] + oldTags[3]);
          } else {
            const pageTags = pageText.match(/\s*{{.+?重定向.*?}}/gim);
            let oldPageTags = "";
            if (pageTags) {
              var _iterator45 = _createForOfIteratorHelper(pageTags), _step45;
              try {
                for (_iterator45.s(); !(_step45 = _iterator45.n()).done; ) {
                  let pageTag = _step45.value;
                  const pageRe = new RegExp(Morebits.string.escapeRegExp(pageTag), "img");
                  pageText = pageText.replace(pageRe, "");
                  pageTag = pageTag.trim();
                  oldPageTags += "\n".concat(pageTag);
                }
              } catch (err) {
                _iterator45.e(err);
              } finally {
                _iterator45.f();
              }
            }
            pageText += "\n{{Redirect category shell|".concat(tagText).concat(oldPageTags, "\n}}");
          }
          summaryText += (tags.length > 0 ? window.wgULS("标记", "標記") : "{{Redirect category shell}}") + window.wgULS("到重定向", "到重新導向");
          if (summaryText.length > 499) {
            summaryText = summaryText.replace(/\[\[[^|]+\|([^\]]+)\]\]/g, "$1");
          }
          pageobj.setPageText(pageText);
          pageobj.setEditSummary(summaryText);
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setWatchlist(Twinkle.getPref("watchTaggedPages"));
          pageobj.setMinorEdit(Twinkle.getPref("markTaggedPagesAsMinor"));
          pageobj.setCreateOption("nocreate");
          pageobj.save();
          if (params.patrol) {
            pageobj.patrol();
          }
        },
        file: (pageobj) => {
          let text = pageobj.getPageText();
          const params = pageobj.getCallbackParameters();
          let summary = "加入";
          if (params.tags.length) {
            let tagtext = "";
            let currentTag;
            var _iterator46 = _createForOfIteratorHelper(params.tags), _step46;
            try {
              for (_iterator46.s(); !(_step46 = _iterator46.n()).done; ) {
                const tag = _step46.value;
                if (["Keep local", "Now YsArchives Share", "Do not move to YsArchives Share"].includes(tag)) {
                  text = text.replace(/{{(mtc|(copy |move )?to ?share|move to ysarchives share|copy to ysarchives share)[^}]*}}/gi, "");
                }
                if (tag === "Vector version available") {
                  text = text.replace(/\{\{((convert to |convertto|should be |shouldbe|to)?svg|badpng|vectorize)[^}]*\}\}/gi, "");
                }
                currentTag = tag;
                switch (tag) {
                  case "Now Commons":
                    currentTag = "subst:".concat(currentTag);
                    if (params.nowcommonsName !== "") {
                      currentTag += "|1=".concat(params.nowcommonsName);
                    }
                    break;
                  case "Keep local":
                    if (params.keeplocalName !== "") {
                      currentTag += "|1=".concat(params.keeplocalName);
                    }
                    if (params.keeplocalReason !== "") {
                      currentTag += "|reason=".concat(params.keeplocalReason);
                    }
                    break;
                  case "Rename media":
                    if (params.renamemediaNewname !== "") {
                      currentTag += "|1=".concat(params.renamemediaNewname);
                    }
                    if (params.renamemediaReason !== "") {
                      currentTag += "|2=".concat(params.renamemediaReason);
                    }
                    break;
                  case "Vector version available":
                  /* falls through */
                  case "Obsolete":
                    currentTag += "|1=".concat(params["".concat(tag.replace(/ /g, "_"), "File")]);
                    break;
                  case "Do not move to Commons":
                    currentTag += "|reason=".concat(params.DoNotMoveToCommons_reason);
                    break;
                  case "Copy to Wikimedia Commons":
                    currentTag += "|human=".concat(mw.config.get("wgUserName"));
                    break;
                  default:
                    break;
                }
                currentTag = "{{".concat(currentTag, "}}\n");
                tagtext += currentTag;
                summary += "{{".concat(tag, "}}、");
              }
            } catch (err) {
              _iterator46.e(err);
            } finally {
              _iterator46.f();
            }
            if (!tagtext) {
              pageobj.getStatusElement().warn(window.wgULS("用户取消操作，没什么要做的", "使用者取消操作，沒什麼要做的"));
              return;
            }
            text = tagtext + text;
          }
          pageobj.setPageText(text);
          pageobj.setEditSummary(summary.slice(0, Math.max(0, summary.length - 1)));
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setWatchlist(Twinkle.getPref("watchTaggedPages"));
          pageobj.setMinorEdit(Twinkle.getPref("markTaggedPagesAsMinor"));
          pageobj.setCreateOption("nocreate");
          pageobj.save();
          if (params.patrol) {
            pageobj.patrol();
          }
        }
      };
      Twinkle.tag.callback.evaluate = (e) => {
        const form = e.target;
        const params = Morebits.quickForm.getInputData(form);
        const checkIncompatible = (conflicts, extra) => {
          const count = conflicts.reduce((sum, tag) => {
            return sum += params.tags.includes(tag);
          }, 0);
          if (count > 1) {
            let message = "".concat(window.wgULS("请在以下标签中择一使用", "請在以下標籤中擇一使用"), "：{{").concat(conflicts.join("}}、{{"), "}}。");
            message += extra || "";
            void mw.notify(message, {
              type: "warn",
              tag: "friendlytag"
            });
            return true;
          }
        };
        const checkParameter = (tag, parameter, description = "理由") => {
          if (params.tags.includes(tag) && params[parameter].trim() === "") {
            void mw.notify("".concat(window.wgULS("您必须指定", "您必須指定"), "{{").concat(tag, "}}的").concat(description, "。"), {
              type: "warn",
              tag: "friendlytag"
            });
            return true;
          }
        };
        switch (Twinkle.tag.modeEn) {
          case "article":
            params.tagsToRemove = form.getUnchecked("existingTags");
            params.tagsToRemain = params.existingTags || [];
            if (params.tags.includes("Merge") || params.tags.includes("Merge from") || params.tags.includes("Merge to")) {
              if (checkIncompatible(["Merge", "Merge from", "Merge to"], window.wgULS("若需要多次合并，请使用{{Merge}}并用管道符分隔条目名（但在这种情形中Twinkle不能自动标记其他条目）。", "若需要多次合併，請使用{{Merge}}並用管道符分隔條目名（但在這種情形中Twinkle不能自動標記其他條目）。"))) {
                return;
              }
              if (!params.mergeTarget) {
                void mw.notify(window.wgULS("请指定使用于merge模板中的另一个页面标题。", "請指定使用於merge模板中的另一個頁面標題。"), {
                  type: "warn",
                  tag: "friendlytag"
                });
                return;
              }
              if ((params.mergeTagOther || params.mergeReason) && params.mergeTarget.includes("|")) {
                void mw.notify(window.wgULS("当前还不支持在一次合并中标记多个条目，与开启关于多个条目的讨论。请不要勾选“标记其他条目”并清空“理由”框后再提交。", "目前還不支援在一次合併中標記多個條目，與開啟關於多個條目的討論。請不要勾選「標記其他條目」並清空「理由」框後再提交。"), {
                  type: "warn",
                  tag: "friendlytag"
                });
                return;
              }
            }
            if (checkParameter("Missing information", "missingInformation", window.wgULS("缺少的内容", "缺少的內容"))) {
              return;
            }
            if (checkParameter("Expert needed", "expert", window.wgULS("专家领域", "專家領域"))) {
              return;
            }
            break;
          case "file":
            if (checkParameter("Obsolete", "ObsoleteFile", window.wgULS("替换的文件名称", "替換的檔案名稱")) || checkParameter("Vector version available", "Vector_version_availableFile", window.wgULS("替换的文件名称", "替換的檔案名稱"))) {
              return;
            }
            if (checkParameter("Do not move to Commons", "DoNotMoveToCommons_reason")) {
              return;
            }
            break;
          case "redirect":
            break;
          default:
            void mw.notify("Twinkle.tag：未知模式 ".concat(Twinkle.tag.mode), {
              type: "warn",
              tag: "friendlytag"
            });
            break;
        }
        if (params.tags.length === 0 && (Twinkle.tag.modeEn !== "article" || params.tagsToRemove.length === 0)) {
          void mw.notify(window.wgULS("必须选择至少一个标记！", "必須選擇至少一個標記！"), {
            type: "warn",
            tag: "friendlytag"
          });
          return;
        }
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(form);
        Morebits.wiki.actionCompleted.redirect = Morebits.pageNameNorm;
        Morebits.wiki.actionCompleted.notice = window.wgULS("标记完成，将在几秒内刷新页面", "標記完成，將在幾秒內重新整理頁面");
        if (Twinkle.tag.modeEn === "redirect") {
          Morebits.wiki.actionCompleted.followRedirect = false;
        }
        const ysarchives_page = new Morebits.wiki.page(Morebits.pageNameNorm, window.wgULS("正在标记", "正在標記") + Twinkle.tag.mode);
        ysarchives_page.setCallbackParameters(params);
        ysarchives_page.load(Twinkle.tag.callbacks[Twinkle.tag.modeEn]);
      };
      Twinkle.addInitCallback(Twinkle.tag, "tag");
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinklestub.js
var twinklestub_exports = {};
var import_ext_gadget4;
var init_twinklestub = __esm({
  "src/Twinkle/modules/twinklestub.js"() {
    "use strict";
    import_ext_gadget4 = require("ext.gadget.Util");
    /*! Twinkle.js - twinklestub.js */
    (function twinklestub($) {
      Twinkle.stub = () => {
        if (Morebits.isPageRedirect()) {
        } else if ([0, 302].includes(mw.config.get("wgNamespaceNumber")) && mw.config.get("wgCurRevisionId") || Morebits.pageNameNorm === Twinkle.getPref("sandboxPage")) {
          Twinkle.stub.mode = "条目";
          Twinkle.addPortletLink(Twinkle.stub.callback, "小作品", "friendly-tag", "标记小作品");
        }
      };
      Twinkle.stub.callback = () => {
        if (Morebits.isPageRedirect()) {
        } else if ((mw.config.get("wgNamespaceNumber") === 0 || mw.config.get("wgNamespaceNumber") === 302) && mw.config.get("wgCurRevisionId") || Morebits.pageNameNorm === Twinkle.getPref("sandboxPage")) {
          Twinkle.stub.mode = window.wgULS("条目", "條目");
          Twinkle.addPortletLink(Twinkle.stub.callback, "小作品", "friendly-tag", window.wgULS("标记小作品", "標記小作品"));
        }
      };
      Twinkle.stub.callback = () => {
        const Window = new Morebits.simpleWindow(630, Twinkle.stub.mode === "article" ? 450 : 400);
        Window.setScriptName("Twinkle");
        Window.addFooterLink(window.wgULS("小作品說明", "小作品说明"), "QW:小作品");
        Window.addFooterLink(window.wgULS("小作品设置", "小作品設定"), "H:TW/PREF#stub");
        Window.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW/DOC#stub");
        const form = new Morebits.quickForm(Twinkle.stub.callback.evaluate);
        if (document.querySelector(".patrollink")) {
          form.append({
            type: "checkbox",
            list: [{
              label: window.wgULS("标记页面为已巡查", "標記頁面為已巡查"),
              value: "patrolPage",
              name: "patrolPage",
              checked: Twinkle.getPref("markStubbedPagesAsPatrolled")
            }]
          });
        }
        switch (Twinkle.stub.mode) {
          case "條目":
          case "条目":
            Window.setTitle(window.wgULS("条目小作品标记", "條目小作品標記"));
            form.append({
              type: "select",
              name: "sortorder",
              label: window.wgULS("查看列表：", "檢視列表："),
              tooltip: window.wgULS("您可以在Twinkle参数设置（H:TW/PREF）中更改此项。", "您可以在Twinkle偏好設定（H:TW/PREF）中更改此項。"),
              event: Twinkle.stub.updateSortOrder,
              list: [{
                type: "option",
                value: "cat",
                label: window.wgULS("按类型", "按類別"),
                selected: Twinkle.getPref("stubArticleSortOrder") === "cat"
              }, {
                type: "option",
                value: "alpha",
                label: "按字母",
                selected: Twinkle.getPref("stubArticleSortOrder") === "alpha"
              }]
            });
            form.append({
              type: "div",
              id: "tagWorkArea"
            });
            break;
          default:
            void mw.notify("Twinkle.stub：未知模式 ".concat(Twinkle.stub.mode), {
              type: "warn",
              tag: "twinklestub"
            });
            break;
        }
        form.append({
          type: "submit"
        });
        const result = form.render();
        Window.setContent(result);
        Window.display();
        if (["条目", "條目"].includes(Twinkle.stub.mode)) {
          const evt = document.createEvent("Event");
          evt.initEvent("change", true, true);
          result.sortorder.dispatchEvent(evt);
        }
      };
      Twinkle.stub.checkedTags = [];
      Twinkle.stub.updateSortOrder = (e) => {
        var _Twinkle$stub, _Twinkle$stub$checked;
        const sortorder = e.target.value;
        Twinkle.stub.checkedTags = e.target.form.getChecked("articleTags");
        (_Twinkle$stub$checked = (_Twinkle$stub = Twinkle.stub).checkedTags) !== null && _Twinkle$stub$checked !== void 0 ? _Twinkle$stub$checked : _Twinkle$stub.checkedTags = [];
        const container = new Morebits.quickForm.element({
          type: "fragment"
        });
        const makeCheckbox = (tag, description) => {
          const checkbox = {
            value: tag,
            label: "{{".concat(tag, "}}: ").concat(description)
          };
          if (Twinkle.stub.checkedTags.includes(tag)) {
            checkbox.checked = true;
          }
          return checkbox;
        };
        if (Twinkle.getPref("customStubList").length) {
          container.append({
            type: "header",
            label: window.wgULS("自定义模板", "自訂模板")
          });
          const customcheckboxes = [];
          var _iterator47 = _createForOfIteratorHelper(Twinkle.getPref("customStubList")), _step47;
          try {
            for (_iterator47.s(); !(_step47 = _iterator47.n()).done; ) {
              const item = _step47.value;
              customcheckboxes[customcheckboxes.length] = makeCheckbox(item.value, item.label);
            }
          } catch (err) {
            _iterator47.e(err);
          } finally {
            _iterator47.f();
          }
          container.append({
            type: "checkbox",
            name: "articleTags",
            list: customcheckboxes
          });
        }
        if (sortorder === "cat") {
          const doCategoryCheckboxes = (subdiv, array) => {
            const checkboxes = [];
            var _iterator48 = _createForOfIteratorHelper(array), _step48;
            try {
              for (_iterator48.s(); !(_step48 = _iterator48.n()).done; ) {
                const tag = _step48.value;
                const description = Twinkle.stub.article.tags[tag];
                checkboxes[checkboxes.length] = makeCheckbox(tag, description);
              }
            } catch (err) {
              _iterator48.e(err);
            } finally {
              _iterator48.f();
            }
            subdiv.append({
              type: "checkbox",
              name: "articleTags",
              list: checkboxes
            });
          };
          let i = 0;
          for (var _i11 = 0, _Object$entries6 = Object.entries(Twinkle.stub.article.tagCategories); _i11 < _Object$entries6.length; _i11++) {
            const [title, content] = _Object$entries6[_i11];
            const titleName = Twinkle.stub.article.tagCategoriesHeader[title];
            container.append({
              type: "header",
              id: "tagHeader".concat(i),
              label: titleName
            });
            const subdiv = container.append({
              type: "div",
              id: "tagSubdiv".concat(i++)
            });
            if (Array.isArray(content)) {
              doCategoryCheckboxes(subdiv, content);
            } else {
              for (var _i12 = 0, _Object$entries7 = Object.entries(content); _i12 < _Object$entries7.length; _i12++) {
                const [subtitle, subcontent] = _Object$entries7[_i12];
                subdiv.append({
                  type: "div",
                  label: [Morebits.htmlNode("b", subtitle)]
                });
                doCategoryCheckboxes(subdiv, subcontent);
              }
            }
          }
        } else {
          const checkboxes = [];
          for (var _i13 = 0, _Object$entries8 = Object.entries(Twinkle.stub.article.tags); _i13 < _Object$entries8.length; _i13++) {
            const [tag, description] = _Object$entries8[_i13];
            checkboxes[checkboxes.length] = makeCheckbox(tag, description);
          }
          container.append({
            type: "checkbox",
            name: "articleTags",
            list: checkboxes
          });
        }
        const $workarea = $(e.target.form).find("div#tagWorkArea");
        const rendered = container.render();
        $workarea.empty().append(rendered);
        $workarea.find("h5").css({
          "font-size": "110%"
        });
        $workarea.find("h5:not(:first-child)").css({
          "margin-top": "1em"
        });
        $workarea.find("div").filter(":has(span.quickformDescription)").css({
          "margin-top": "0.4em"
        });
        var _iterator49 = _createForOfIteratorHelper(Morebits.quickForm.getElements(e.target.form, "articleTags")), _step49;
        try {
          for (_iterator49.s(); !(_step49 = _iterator49.n()).done; ) {
            const checkbox = _step49.value;
            const $checkbox = $(checkbox);
            const link = Morebits.htmlNode("a", ">");
            link.setAttribute("class", "tag-template-link");
            link.setAttribute("href", mw.util.getUrl("Template:".concat(Morebits.string.toUpperCaseFirstChar(checkbox.values))));
            link.setAttribute("target", "_blank");
            link.setAttribute("rel", "noopener noreferrer");
            $checkbox.parent().append([" ", link]);
          }
        } catch (err) {
          _iterator49.e(err);
        } finally {
          _iterator49.f();
        }
      };
      Twinkle.stub.article = {};
      Twinkle.stub.article.tags = {
        "actor-stub": "演员",
        "asia-stub": "亚洲",
        "bio-stub": "人物",
        "biology-stub": "生物学",
        "chem-stub": "化学",
        "europe-stub": "欧洲",
        "expand list": "未完成列表",
        "food-stub": "食物",
        "france-geo-stub": "法国地理",
        "geo-stub": "地理位置",
        "hist-stub": "历史或历史学",
        "JP-stub": "日本",
        "lit-stub": "文学",
        "math-stub": "数学",
        "med-stub": "医学",
        "mil-stub": "军事",
        "movie-stub": "电影",
        "music-stub": "音乐",
        "physics-stub": "物理学",
        "politic-stub": "政治",
        "religion-stub": "宗教",
        "science-stub": "科学",
        "sport-stub": "体育",
        stub: "通用小作品",
        "switzerland-stub": "瑞士",
        "tech-stub": "科技",
        "transp-stub": "交通",
        "TV-stub": "电视",
        "UK-stub": "英国",
        "US-bio-stub": "美国人物",
        "US-geo-stub": "美国地理",
        "US-stub": "美国",
        "weather-stub": "天气和特别的天气事件"
      };
      Twinkle.stub.article.tagCategoriesHeader = {
        general: "通用模板",
        geo: "国家和地理",
        others: "杂项",
        bio: "人物",
        science: "科学",
        sport: "体育",
        tech: "技术",
        art: "艺术"
      };
      Twinkle.stub.article.tagCategories = {
        general: ["stub", "expand list"],
        geo: ["asia-stub", "europe-stub", "france-geo-stub", "geo-stub", "JP-stub", "switzerland-stub", "UK-stub", "US-bio-stub", "US-geo-stub", "US-stub"],
        others: ["food-stub", "hist-stub", "mil-stub", "politic-stub", "religion-stub", "transp-stub"],
        bio: ["actor-stub", "bio-stub", "US-bio-stub"],
        science: ["biology-stub", "chem-stub", "math-stub", "med-stub", "physics-stub", "science-stub", "weather-stub"],
        sport: ["sport-stub"],
        tech: ["tech-stub"],
        art: ["actor-stub", "lit-stub", "movie-stub", "music-stub", "TV-stub"]
      };
      Twinkle.stub.callbacks = {
        main: (pageobj) => {
          const params = pageobj.getCallbackParameters();
          let tagRe;
          let summaryText = "加入";
          let tags = [];
          const groupableTags = [];
          let i;
          let pageText = pageobj.getPageText();
          for (i = 0; i < params.tags.length; i++) {
            tagRe = new RegExp("(\\{\\{".concat(params.tags[i], "(\\||\\}\\}))"), "im");
            if (tagRe.exec(pageText)) {
              Morebits.status.info(window.wgULS("信息", "資訊"), window.wgULS("在页面上找到{{".concat(params.tags[i], "}}……跳过"), "在頁面上找到{{".concat(params.tags[i], "}}……跳過")));
            } else {
              tags = [...tags, ...(0, import_ext_gadget4.generateArray)(params.tags[i])];
            }
          }
          tags = [...tags, ...groupableTags];
          tags.sort();
          const totalTags = tags.length;
          const addTag = (tagName, tagIndex) => {
            pageText += "\n{{".concat(tagName, "}}");
            if (tagIndex > 0) {
              if (tagIndex === totalTags - 1) {
                summaryText += "和";
              } else if (tagIndex < totalTags - 1) {
                summaryText += "、";
              }
            }
            summaryText += "{{[[";
            summaryText += tagName.includes(":") ? tagName : "Template:".concat(tagName, "|").concat(tagName);
            summaryText += "]]}}";
          };
          for (var _i14 = 0, _tags3 = tags; _i14 < _tags3.length; _i14++) {
            const tag = _tags3[_i14];
            addTag(tag);
          }
          summaryText += window.wgULS("标记到", "標記到") + Twinkle.stub.mode;
          pageobj.setPageText(pageText);
          pageobj.setEditSummary(summaryText);
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setWatchlist(Twinkle.getPref("watchStubbedPages"));
          pageobj.setMinorEdit(Twinkle.getPref("markStubbedPagesAsMinor"));
          pageobj.setCreateOption("nocreate");
          pageobj.save();
          if (params.patrol) {
            pageobj.patrol();
          }
        }
      };
      Twinkle.stub.callback.evaluate = (e) => {
        const form = e.target;
        const params = {};
        if (form.patrolPage) {
          params.patrol = form.patrolPage.checked;
        }
        switch (Twinkle.stub.mode) {
          case "條目":
          case "条目":
            params.tags = form.getChecked("articleTags");
            params.group = false;
            break;
          default:
            void mw.notify("Twinkle.stub：未知模式 ".concat(Twinkle.stub.mode), {
              type: "warn",
              tag: "twinklestub"
            });
            break;
        }
        if (!params.tags.length) {
          void mw.notify("必须选择至少一个标记！", {
            type: "warn",
            tag: "twinklestub"
          });
          return;
        }
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(form);
        Morebits.wiki.actionCompleted.redirect = mw.config.get("wgPageName");
        Morebits.wiki.actionCompleted.notice = window.wgULS("标记完成，将在几秒内刷新页面", "標記完成，將在幾秒內重新整理頁面");
        if (Twinkle.stub.mode === "重定向") {
          Morebits.wiki.actionCompleted.followRedirect = false;
        }
        const ysarchives_page = new Morebits.wiki.page(mw.config.get("wgPageName"), window.wgULS("正在标记", "正在標記") + Twinkle.stub.mode);
        ysarchives_page.setCallbackParameters(params);
        switch (Twinkle.stub.mode) {
          case "條目":
          case "条目":
          /* falls through */
          case "重定向":
            ysarchives_page.load(Twinkle.stub.callbacks.main);
            return;
          case "文件":
          case "檔案":
            ysarchives_page.load(Twinkle.stub.callbacks.file);
            break;
          default:
            void mw.notify("Twinkle.stub：未知模式 ".concat(Twinkle.stub.mode), {
              type: "warn",
              tag: "twinklestub"
            });
            break;
        }
      };
      Twinkle.addInitCallback(Twinkle.stub, "stub");
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinklediff.js
var twinklediff_exports = {};
var init_twinklediff = __esm({
  "src/Twinkle/modules/twinklediff.js"() {
    "use strict";
    /*! Twinkle.js - twinklediff.js */
    (function twinklediff($) {
      Twinkle.diff = () => {
        if (mw.config.get("wgNamespaceNumber") < 0 || !mw.config.get("wgArticleId")) {
          return;
        }
        Twinkle.addPortletLink(mw.util.getUrl(mw.config.get("wgPageName"), {
          diff: "cur",
          oldid: "prev"
        }), window.wgULS("最后", "最後"), "tw-lastdiff", window.wgULS("显示最后修改", "顯示最後修改"));
        if (mw.config.get("wgDiffNewId")) {
          Twinkle.addPortletLink(() => {
            Twinkle.diff.evaluate(false);
          }, "自上", "tw-since", window.wgULS("显示与上一修订版本间的差异", "顯示與上一修訂版本間的差異"));
          Twinkle.addPortletLink(() => {
            Twinkle.diff.evaluate(true);
          }, "自我", "tw-sincemine", window.wgULS("显示与我做出的修订版本的差异", "顯示與我做出的修訂版本的差異"));
          Twinkle.addPortletLink(mw.util.getUrl(mw.config.get("wgPageName"), {
            diff: "cur",
            oldid: mw.config.get("wgDiffNewId")
          }), window.wgULS("当前", "目前"), "tw-curdiff", window.wgULS("显示与当前版本间的差异", "顯示與目前版本間的差異"));
        }
      };
      Twinkle.diff.evaluate = (me) => {
        let user;
        if (me) {
          user = mw.config.get("wgUserName");
        } else {
          const node = document.querySelector("#mw-diff-ntitle2");
          if (!node) {
            return;
          }
          user = $(node).find("a").first().text();
        }
        const query = {
          prop: "revisions",
          action: "query",
          titles: mw.config.get("wgPageName"),
          rvlimit: 1,
          rvprop: ["ids", "user"],
          rvstartid: mw.config.get("wgCurRevisionId") - 1,
          rvuser: user
        };
        Morebits.status.init(document.querySelector("#mw-content-text"));
        const ysarchives_api = new Morebits.wiki.api(window.wgULS("抓取最初贡献者信息", "抓取最初貢獻者資訊"), query, Twinkle.diff.callbacks.main);
        ysarchives_api.params = {
          user
        };
        ysarchives_api.post();
      };
      Twinkle.diff.callbacks = {
        main: (self2) => {
          const xmlDoc = self2.responseXML;
          const revid = $(xmlDoc).find("rev").attr("revid");
          if (!revid) {
            self2.statelem.error(window.wgULS("未找到合适的早期版本，或 ", "未找到合適的早期版本，或 ") + self2.params.user + window.wgULS(" 是唯一贡献者。取消。", " 是唯一貢獻者。取消。"));
            return;
          }
          location = mw.util.getUrl(mw.config.get("wgPageName"), {
            diff: mw.config.get("wgCurRevisionId"),
            oldid: revid
          });
        }
      };
      Twinkle.addInitCallback(Twinkle.diff, "diff");
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinkleunlink.js
var twinkleunlink_exports = {};
var init_twinkleunlink = __esm({
  "src/Twinkle/modules/twinkleunlink.js"() {
    "use strict";
    /*! Twinkle.js - twinkleunlink.js */
    (function twinkleunlink($) {
      Twinkle.unlink = () => {
        if (mw.config.get("wgNamespaceNumber") < 0 || mw.config.get("wgPageName") === Twinkle.getPref("sandboxPage") || !Morebits.userIsSysop) {
          return;
        }
        Twinkle.addPortletLink(Twinkle.unlink.callback, window.wgULS("消链", "消連"), "tw-unlink", window.wgULS("取消到本页的链接", "取消到本頁的連結"));
      };
      Twinkle.unlink.callback = (presetReason) => {
        const fileSpace = mw.config.get("wgNamespaceNumber") === 6;
        const Window = new Morebits.simpleWindow(600, 440);
        Window.setTitle(window.wgULS("取消链入", "取消連入") + (fileSpace ? window.wgULS("和模板、文件使用", "和模板、檔案使用") : ""));
        Window.setScriptName("Twinkle");
        Window.addFooterLink(window.wgULS("链入设置", "連入設定"), "H:TW/PREF#unlink");
        Window.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW/DOC#unlink");
        const form = new Morebits.quickForm(Twinkle.unlink.callback.evaluate);
        const linkTextBefore = Morebits.htmlNode("code", "[[".concat(fileSpace ? ":" : "").concat(Morebits.pageNameNorm).concat(window.wgULS("|链接文字]]", "|連結文字]]")));
        const linkTextAfter = Morebits.htmlNode("code", window.wgULS("链接文字", "連結文字"));
        const linkPlainBefore = Morebits.htmlNode("code", "[[".concat(Morebits.pageNameNorm, "]]"));
        const linkTemplateBefore = Morebits.htmlNode("code", "{{".concat(mw.config.get("wgTitle"), "}}"));
        let linkPlainAfter;
        if (fileSpace) {
          linkPlainAfter = Morebits.htmlNode("code", "<!-- [[".concat(Morebits.pageNameNorm, "]] -->"));
        } else {
          linkPlainAfter = Morebits.htmlNode("code", Morebits.pageNameNorm);
        }
        for (var _i15 = 0, _arr2 = [linkTextBefore, linkTextAfter, linkPlainBefore, linkPlainAfter, linkTemplateBefore]; _i15 < _arr2.length; _i15++) {
          const node = _arr2[_i15];
          node.style.fontFamily = "monospace";
          node.style.fontStyle = "normal";
        }
        form.append({
          type: "div",
          style: "margin-bottom: 0.5em; font-style: normal",
          label: ["".concat(window.wgULS("这个工具可以取消所有指向该页的链接（“链入”）", "這個工具可以取消所有指向該頁的連結（「連入」）") + (fileSpace ? window.wgULS("，或通过加入<!-- -->注释标记隐藏所有对此文件的使用", "，或透過加入<!-- -->注釋標記隱藏所有對此檔案的使用") : ""), "。例如："), linkTextBefore, window.wgULS("将会变成", "將會變成"), linkTextAfter, "，", linkPlainBefore, window.wgULS("将会变成", "將會變成"), linkPlainAfter, "，", linkTemplateBefore, window.wgULS("将会被移除", "將會被移除"), window.wgULS("。请小心使用。", "。請小心使用。")]
        });
        form.append({
          type: "input",
          name: "reason",
          label: "理由：",
          value: presetReason || "",
          size: 60
        });
        const query = {
          action: "query",
          list: "backlinks",
          bltitle: mw.config.get("wgPageName"),
          bllimit: "max",
          // 500 is max for normal users, 5000 for bots and sysops
          blnamespace: Twinkle.getPref("unlinkNamespaces"),
          rawcontinue: true,
          format: "json"
        };
        if (fileSpace) {
          query.list += "|imageusage";
          query.iutitle = query.bltitle;
          query.iulimit = query.bllimit;
          query.iunamespace = query.blnamespace;
        } else {
          query.blfilterredir = "nonredirects";
        }
        const ysarchives_api = new Morebits.wiki.api(window.wgULS("抓取链入", "抓取連入"), query, Twinkle.unlink.callbacks.display.backlinks);
        ysarchives_api.params = {
          form,
          Window,
          image: fileSpace
        };
        ysarchives_api.post();
        const root = document.createElement("div");
        root.style.padding = "15px";
        Morebits.status.init(root);
        ysarchives_api.statelem.status(window.wgULS("加载中……", "載入中……"));
        Window.setContent(root);
        Window.display();
      };
      Twinkle.unlink.callback.evaluate = (event) => {
        const form = event.target;
        const input = Morebits.quickForm.getInputData(form);
        if (!input.reason) {
          void mw.notify(window.wgULS("您必须指定取消链入的理由。", "您必須指定取消連入的理由。"), {
            type: "warn",
            tag: "twinkleunlink"
          });
          return;
        }
        input.backlinks || (input.backlinks = []);
        input.imageusage || (input.imageusage = []);
        const pages = Morebits.array.uniq([...input.backlinks, ...input.imageusage]);
        if (!pages.length) {
          void mw.notify(window.wgULS("您必须至少选择一个要取消链入的页面。", "您必須至少選擇一個要取消連入的頁面。"), {
            type: "warn",
            tag: "twinkleunlink"
          });
          return;
        }
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(form);
        const unlinker = new Morebits.batchOperation("取消".concat(input.backlinks.length ? window.wgULS("链入", "連入") + (input.imageusage.length ? window.wgULS("与文件使用", "與檔案使用") : "") : window.wgULS("文件使用", "檔案使用")));
        unlinker.setOption("preserveIndividualStatusLines", true);
        unlinker.setPageList(pages);
        const params = {
          reason: input.reason,
          unlinker
        };
        unlinker.run((pageName) => {
          const ysarchives_page = new Morebits.wiki.page(pageName, window.wgULS("在页面“", "在頁面「") + pageName + window.wgULS("”中取消链入", "」中取消連入"));
          ysarchives_page.setBotEdit(true);
          ysarchives_page.setCallbackParameters({
            doBacklinks: input.backlinks.includes(pageName),
            doImageusage: input.imageusage.includes(pageName),
            ...params
          });
          ysarchives_page.load(Twinkle.unlink.callbacks.unlinkBacklinks);
        });
      };
      Twinkle.unlink.callbacks = {
        display: {
          backlinks: (apiobj) => {
            const response = apiobj.getResponse();
            let havecontent = false;
            let list;
            let namespaces;
            let i;
            if (apiobj.params.image) {
              const imageusage = response.query.imageusage.sort(Twinkle.sortByNamespace);
              list = [];
              for (i = 0; i < imageusage.length; ++i) {
                list[list.length] = {
                  label: "",
                  value: imageusage[i].title,
                  checked: true
                };
              }
              if (list.length) {
                apiobj.params.form.append({
                  type: "header",
                  label: window.wgULS("文件使用", "檔案使用")
                });
                namespaces = [];
                var _iterator50 = _createForOfIteratorHelper(Twinkle.getPref("unlinkNamespaces")), _step50;
                try {
                  for (_iterator50.s(); !(_step50 = _iterator50.n()).done; ) {
                    const v = _step50.value;
                    namespaces[namespaces.length] = v === "0" ? window.wgULS("（条目）", "（條目）") : mw.config.get("wgFormattedNamespaces")[v];
                  }
                } catch (err) {
                  _iterator50.e(err);
                } finally {
                  _iterator50.f();
                }
                apiobj.params.form.append({
                  type: "div",
                  label: window.wgULS("已选择的命名空间：", "已選擇的命名空間：") + namespaces.join("、"),
                  tooltip: window.wgULS("您可在Twinkle参数设置中更改相关选项，请参见[[H:TW/PREF]]", "您可在Twinkle偏好設定中更改相關選項，請參見[[H:TW/PREF]]")
                });
                if (response["query-continue"] && response["query-continue"].imageusage) {
                  apiobj.params.form.append({
                    type: "div",
                    label: window.wgULS("显示前", "顯示前") + mw.language.convertNumber(list.length) + window.wgULS("个文件使用。", "個檔案使用。")
                  });
                }
                apiobj.params.form.append({
                  type: "button",
                  label: window.wgULS("全选", "全選"),
                  event: (e) => {
                    $(Morebits.quickForm.getElements(e.target.form, "imageusage")).prop("checked", true);
                  }
                });
                apiobj.params.form.append({
                  type: "button",
                  label: window.wgULS("全不选", "全不選"),
                  event: (e) => {
                    $(Morebits.quickForm.getElements(e.target.form, "imageusage")).prop("checked", false);
                  }
                });
                apiobj.params.form.append({
                  type: "checkbox",
                  name: "imageusage",
                  shiftClickSupport: true,
                  list
                });
                havecontent = true;
              } else {
                apiobj.params.form.append({
                  type: "div",
                  label: window.wgULS("未找到文件使用。", "未找到檔案使用。")
                });
              }
            }
            const backlinks = response.query.backlinks.sort(Twinkle.sortByNamespace);
            if (backlinks.length > 0) {
              list = [];
              for (i = 0; i < backlinks.length; ++i) {
                list[list.length] = {
                  label: "",
                  value: backlinks[i].title,
                  checked: true
                };
              }
              apiobj.params.form.append({
                type: "header",
                label: window.wgULS("链入", "連入")
              });
              namespaces = [];
              var _iterator51 = _createForOfIteratorHelper(Twinkle.getPref("unlinkNamespaces")), _step51;
              try {
                for (_iterator51.s(); !(_step51 = _iterator51.n()).done; ) {
                  const v = _step51.value;
                  namespaces[namespaces.length] = v === "0" ? window.wgULS("（条目）", "（條目）") : mw.config.get("wgFormattedNamespaces")[v];
                }
              } catch (err) {
                _iterator51.e(err);
              } finally {
                _iterator51.f();
              }
              apiobj.params.form.append({
                type: "div",
                label: window.wgULS("已选择的命名空间：", "已選擇的命名空間：") + namespaces.join("、"),
                tooltip: window.wgULS("您可在Twinkle参数设置中更改相关选项，请参见[[H:TW/PREF]]", "您可在Twinkle偏好設定中更改相關選項，請參見[[H:TW/PREF]]")
              });
              if (response["query-continue"] && response["query-continue"].backlinks) {
                apiobj.params.form.append({
                  type: "div",
                  label: window.wgULS("显示前", "顯示前") + mw.language.convertNumber(list.length) + window.wgULS("个链入。", "個連入。")
                });
              }
              apiobj.params.form.append({
                type: "button",
                label: window.wgULS("全选", "全選"),
                event: (e) => {
                  $(Morebits.quickForm.getElements(e.target.form, "backlinks")).prop("checked", true);
                }
              });
              apiobj.params.form.append({
                type: "button",
                label: window.wgULS("全不选", "全不選"),
                event: (e) => {
                  $(Morebits.quickForm.getElements(e.target.form, "backlinks")).prop("checked", false);
                }
              });
              apiobj.params.form.append({
                type: "checkbox",
                name: "backlinks",
                shiftClickSupport: true,
                list
              });
              havecontent = true;
            } else {
              apiobj.params.form.append({
                type: "div",
                label: window.wgULS("未找到链入。", "未找到連入。")
              });
            }
            if (havecontent) {
              apiobj.params.form.append({
                type: "submit"
              });
            }
            const result = apiobj.params.form.render();
            apiobj.params.Window.setContent(result);
            var _iterator52 = _createForOfIteratorHelper(Morebits.quickForm.getElements(result, "backlinks")), _step52;
            try {
              for (_iterator52.s(); !(_step52 = _iterator52.n()).done; ) {
                const link = _step52.value;
                Twinkle.generateBatchPageLinks(link);
              }
            } catch (err) {
              _iterator52.e(err);
            } finally {
              _iterator52.f();
            }
            var _iterator53 = _createForOfIteratorHelper(Morebits.quickForm.getElements(result, "imageusage")), _step53;
            try {
              for (_iterator53.s(); !(_step53 = _iterator53.n()).done; ) {
                const link = _step53.value;
                Twinkle.generateBatchPageLinks(link);
              }
            } catch (err) {
              _iterator53.e(err);
            } finally {
              _iterator53.f();
            }
          }
        },
        unlinkBacklinks: (pageobj) => {
          let oldtext = pageobj.getPageText();
          const params = pageobj.getCallbackParameters();
          const ysarchives_page = new Morebits.wikitext.page(oldtext);
          let summaryText = "";
          let warningString = false;
          let text;
          if (params.doImageusage) {
            text = ysarchives_page.commentOutImage(mw.config.get("wgTitle"), window.wgULS("注释", "注釋")).getText();
            if (text === oldtext) {
              warningString = window.wgULS("文件使用", "檔案使用");
            } else {
              summaryText = window.wgULS("注释文件使用", "注釋檔案使用");
              oldtext = text;
            }
          }
          if (params.doBacklinks) {
            text = ysarchives_page.removeLink(Morebits.pageNameNorm).getText();
            text = ysarchives_page.removeTemplate(mw.config.get("wgTitle")).getText();
            if (text === oldtext) {
              warningString = warningString ? window.wgULS("取消链入或文件使用", "取消連入或檔案使用") : window.wgULS("取消链入", "取消連入");
            } else {
              summaryText = (summaryText ? "".concat(summaryText, " / ") : "") + window.wgULS("取消链接到", "取消連結到");
              oldtext = text;
            }
          }
          if (warningString) {
            pageobj.getStatusElement().error("".concat(window.wgULS("未能在页面上找到", "未能在頁面上找到") + warningString, "。"));
            params.unlinker.workerFailure(pageobj);
            return;
          }
          pageobj.setPageText(text);
          pageobj.setEditSummary(summaryText + window.wgULS("“", "「") + Morebits.pageNameNorm + window.wgULS("”：", "」：") + params.reason);
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setCreateOption("nocreate");
          pageobj.save(params.unlinker.workerSuccess, params.unlinker.workerFailure);
        }
      };
      Twinkle.addInitCallback(Twinkle.unlink, "unlink");
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinklefluff.js
var twinklefluff_exports = {};
var init_twinklefluff = __esm({
  "src/Twinkle/modules/twinklefluff.js"() {
    "use strict";
    /*! Twinkle.js - twinklefluff.js */
    (function twinklefluff($) {
      const $body = $("body");
      Twinkle.fluff = () => {
        if (mw.config.get("wgIsProbablyEditable")) {
          if (mw.config.get("wgDiffNewId") || mw.config.get("wgDiffOldId")) {
            mw.hook("wikipage.diff").add(() => {
              Twinkle.fluff.addLinks.diff();
            });
          } else if (mw.config.get("wgAction") === "view" && mw.config.get("wgRevisionId") && mw.config.get("wgCurRevisionId") !== mw.config.get("wgRevisionId")) {
            Twinkle.fluff.addLinks.oldid();
          } else if (mw.config.get("wgAction") === "history") {
            Twinkle.fluff.addLinks.history();
          }
        } else if (mw.config.get("wgNamespaceNumber") === -1) {
          Twinkle.fluff.skipTalk = !Twinkle.getPref("openTalkPageOnAutoRevert");
          Twinkle.fluff.rollbackInPlace = Twinkle.getPref("rollbackInPlace");
          if (mw.config.get("wgCanonicalSpecialPageName") === "Contributions") {
            Twinkle.fluff.addLinks.contributions();
          } else if (mw.config.get("wgCanonicalSpecialPageName") === "Recentchanges" || mw.config.get("wgCanonicalSpecialPageName") === "Recentchangeslinked") {
            mw.hook("wikipage.content").add((item) => {
              if (item.is("div")) {
                Twinkle.fluff.addLinks.recentchanges();
              }
            });
          }
        }
      };
      Twinkle.fluff.trustedBots = [];
      Twinkle.fluff.skipTalk = null;
      Twinkle.fluff.rollbackInPlace = null;
      Twinkle.fluff.hiddenName = window.wgULS("已隐藏的用户", "已隱藏的使用者");
      Twinkle.fluff.linkBuilder = {
        spanTag: (color, content) => {
          const span = document.createElement("span");
          span.style.color = color;
          span.appendChild(document.createTextNode(content));
          return span;
        },
        buildLink: (color, text) => {
          const link = document.createElement("a");
          link.appendChild(Twinkle.fluff.linkBuilder.spanTag("Black", "["));
          link.appendChild(Twinkle.fluff.linkBuilder.spanTag(color, text));
          link.appendChild(Twinkle.fluff.linkBuilder.spanTag("Black", "]"));
          link.href = "#";
          return link;
        },
        /**
         * @param {string} [vandal=null] - Username of the editor being reverted
         * Provide a falsey value if the username is hidden, defaults to null
         * @param {boolean} inline - True to create two links in a span, false
         * to create three links in a div (optional)
         * @param {number|string} [rev=wgCurRevisionId] - Revision ID being reverted (optional)
         * @param {string} [page=wgPageName] - Page being reverted (optional)
         * @return {HTMLElement} revNode
         */
        rollbackLinks: (vandal, inline, rev, page) => {
          vandal || (vandal = null);
          const elem = inline ? "span" : "div";
          const revNode = document.createElement(elem);
          rev = Number.parseInt(rev, 10);
          if (rev) {
            revNode.setAttribute("id", "tw-revert".concat(rev));
          } else {
            revNode.setAttribute("id", "tw-revert");
          }
          const normNode = document.createElement("strong");
          const vandNode = document.createElement("strong");
          const normLink = Twinkle.fluff.linkBuilder.buildLink("SteelBlue", "回退");
          const vandLink = Twinkle.fluff.linkBuilder.buildLink("Red", window.wgULS("破坏", "破壞"));
          $(normLink).on("click", (e) => {
            e.preventDefault();
            Twinkle.fluff.revert("norm", vandal, rev, page);
            Twinkle.fluff.disableLinks(revNode);
          });
          $(vandLink).on("click", (e) => {
            e.preventDefault();
            Twinkle.fluff.revert("vand", vandal, rev, page);
            Twinkle.fluff.disableLinks(revNode);
          });
          vandNode.appendChild(vandLink);
          normNode.appendChild(normLink);
          const separator = inline ? " " : " || ";
          revNode.appendChild(normNode);
          revNode.appendChild(document.createTextNode(separator));
          revNode.appendChild(vandNode);
          return revNode;
        },
        // Build [restore this revision] links
        restoreThisRevisionLink: (revisionRef, inline) => {
          revisionRef = typeof revisionRef === "number" ? revisionRef : mw.config.get(revisionRef);
          const elem = inline ? "span" : "div";
          const revertToRevisionNode = document.createElement(elem);
          revertToRevisionNode.setAttribute("id", "tw-revert-to-".concat(revisionRef));
          revertToRevisionNode.style.fontWeight = "bold";
          const revertToRevisionLink = Twinkle.fluff.linkBuilder.buildLink("SaddleBrown", window.wgULS("恢复此版本", "恢復此版本"));
          $(revertToRevisionLink).on("click", (e) => {
            e.preventDefault();
            Twinkle.fluff.revertToRevision(revisionRef);
          });
          if (inline) {
            revertToRevisionNode.appendChild(document.createTextNode(" "));
          }
          revertToRevisionNode.appendChild(revertToRevisionLink);
          return revertToRevisionNode;
        }
      };
      Twinkle.fluff.addLinks = {
        contributions: () => {
          const isRange = !!$body.find("#sp-contributions-footer-anon-range")[0];
          if (mw.config.exists("wgRelevantUserName") || isRange) {
            let username = mw.config.get("wgRelevantUserName");
            if (Twinkle.getPref("showRollbackLinks").includes("contribs") || mw.config.get("wgUserName") !== username && Twinkle.getPref("showRollbackLinks").includes("others") || mw.config.get("wgUserName") === username && Twinkle.getPref("showRollbackLinks").includes("mine")) {
              const $list = $body.find("#mw-content-text").find("ul li:has(span.mw-uctop):has(.mw-changeslist-diff)");
              $list.each((_key, current) => {
                const page = $(current).find(".mw-contributions-title").text();
                if (isRange) {
                  username = $(current).find(".mw-userlink:not(.history-deleted)").text();
                }
                current.appendChild(Twinkle.fluff.linkBuilder.rollbackLinks(username, true, current.dataset.mwRevid, page));
              });
            }
          }
        },
        recentchanges: () => {
          if (mw.config.get("wgCanonicalSpecialPageName") === "Recentchanges" && Twinkle.getPref("showRollbackLinks").includes("recentchanges") || mw.config.get("wgCanonicalSpecialPageName") === "Recentchangeslinked" && Twinkle.getPref("showRollbackLinks").includes("recentchangeslinked")) {
            let $list = $body.find(".mw-changeslist .mw-changeslist-last.mw-changeslist-src-mw-edit");
            $list = $list.not(".mw-rcfilters-ui-highlights-enhanced-toplevel").find(".mw-changeslist-line-inner, td.mw-enhanced-rc-nested");
            $list.each((_key, current) => {
              const vandal = $(current).find(".mw-userlink:not(.history-deleted)").text();
              const href = $(current).find(".mw-changeslist-diff").attr("href");
              const rev = mw.util.getParamValue("diff", href);
              const page = current.dataset.targetPage;
              current.appendChild(Twinkle.fluff.linkBuilder.rollbackLinks(vandal, true, rev, page));
            });
          }
        },
        history: () => {
          if (Twinkle.getPref("showRollbackLinks").includes("history")) {
            const histList = $body.find("#pagehistory li").toArray();
            if (!$body.find("a.mw-firstlink").length) {
              const first = histList.shift();
              const vandal = $(first).find(".mw-userlink:not(.history-deleted)").text();
              var _iterator54 = _createForOfIteratorHelper(histList), _step54;
              try {
                for (_iterator54.s(); !(_step54 = _iterator54.n()).done; ) {
                  const item = _step54.value;
                  if ($(item).find(".mw-userlink").text() !== vandal) {
                    first.appendChild(Twinkle.fluff.linkBuilder.rollbackLinks(vandal, true));
                    break;
                  }
                }
              } catch (err) {
                _iterator54.e(err);
              } finally {
                _iterator54.f();
              }
            }
            var _iterator55 = _createForOfIteratorHelper(histList), _step55;
            try {
              for (_iterator55.s(); !(_step55 = _iterator55.n()).done; ) {
                const rev = _step55.value;
                const {
                  href
                } = rev.querySelector(".mw-changeslist-date");
                const oldid = Number.parseInt(mw.util.getParamValue("oldid", href), 10);
                if (!Number.isNaN(oldid)) {
                  rev.appendChild(Twinkle.fluff.linkBuilder.restoreThisRevisionLink(oldid, true));
                }
              }
            } catch (err) {
              _iterator55.e(err);
            } finally {
              _iterator55.f();
            }
          }
        },
        diff: () => {
          const warnFromTalk = (xtitle) => {
            const talkLink = $("#mw-diff-".concat(xtitle, "2 .mw-usertoollinks a")).first();
            if (talkLink.length) {
              let extraParams = "vanarticle=".concat(mw.util.rawurlencode(Morebits.pageNameNorm), "&noautowarn=true");
              extraParams += "&vanarticlerevid=";
              extraParams += xtitle === "otitle" ? mw.config.get("wgDiffOldId") : mw.config.get("wgDiffNewId");
              const href = talkLink.attr("href");
              if (href.includes("?")) {
                talkLink.attr("href", "".concat(href, "&").concat(extraParams));
              } else {
                talkLink.attr("href", "".concat(href, "?").concat(extraParams));
              }
            }
          };
          warnFromTalk("otitle");
          if (mw.config.get("wgDiffOldId") && mw.config.get("wgDiffOldId") !== mw.config.get("wgDiffNewId")) {
            const oldTitle = document.querySelector("#mw-diff-otitle1").parentNode;
            const revertToRevision = Twinkle.fluff.linkBuilder.restoreThisRevisionLink("wgDiffOldId");
            oldTitle.insertBefore(revertToRevision, oldTitle.firstChild);
            if (Twinkle.getPref("customRevertSummary").length > 0) {
              revertToRevision.appendChild(document.createTextNode(" || "));
              const revertsummary = new Morebits.quickForm.element({
                type: "select",
                name: "revertsummary"
              });
              revertsummary.append({
                type: "option",
                label: window.wgULS("选择回退理由", "選擇回退理由"),
                value: ""
              });
              $(Twinkle.getPref("customRevertSummary")).each((_, e) => {
                revertsummary.append({
                  type: "option",
                  label: e.label,
                  value: e.value
                });
              });
              revertToRevision.appendChild(revertsummary.render().childNodes[0]);
            }
          }
          warnFromTalk("ntitle");
          if (document.querySelector("#differences-nextlink")) {
            const newTitle = document.querySelector("#mw-diff-ntitle1").parentNode;
            newTitle.insertBefore(Twinkle.fluff.linkBuilder.restoreThisRevisionLink("wgDiffNewId"), newTitle.firstChild);
          } else if (Twinkle.getPref("showRollbackLinks").includes("diff") && mw.config.get("wgDiffOldId") && (mw.config.get("wgDiffOldId") !== mw.config.get("wgDiffNewId") || document.querySelector("#differences-prevlink"))) {
            const vandal = $body.find("#mw-diff-ntitle2").find(".mw-userlink")[0].text;
            const ntitle = document.querySelector("#mw-diff-ntitle1").parentNode;
            ntitle.insertBefore(Twinkle.fluff.linkBuilder.rollbackLinks(vandal), ntitle.firstChild);
          }
        },
        oldid: () => {
          const title = document.querySelector("#mw-revision-info").parentNode;
          title.insertBefore(Twinkle.fluff.linkBuilder.restoreThisRevisionLink("wgRevisionId"), title.firstChild);
        }
      };
      Twinkle.fluff.disableLinks = (parentNode) => {
        $(parentNode).children().each((_i, node) => {
          node.innerHTML = node.textContent;
          $(node).css("font-weight", "normal").css("color", "darkgray");
        });
      };
      Twinkle.fluff.revert = (type, vandal, rev, page) => {
        if (mw.util.isIPv6Address(vandal)) {
          vandal = Morebits.ip.sanitizeIPv6(vandal);
        }
        const pagename = page || mw.config.get("wgPageName");
        const revid = rev || mw.config.get("wgCurRevisionId");
        let summary = "";
        if (document.querySelectorAll('[name="revertsummary"]')[0] !== void 0) {
          summary = document.querySelectorAll('[name="revertsummary"]')[0].value;
        }
        if (Twinkle.fluff.rollbackInPlace) {
          const notifyStatus = document.createElement("span");
          void mw.notify(notifyStatus, {
            autoHide: false,
            title: "回退".concat(page),
            tag: "twinklefluff_".concat(rev)
            // Shouldn't be necessary given disableLink
          });
          Morebits.status.init(notifyStatus);
        } else {
          Morebits.status.init(document.querySelector("#mw-content-text"));
          $body.find("#catlinks").remove();
        }
        const params = {
          type,
          user: vandal,
          userHidden: !vandal,
          pagename,
          revid,
          summary
        };
        const query = {
          action: "query",
          prop: ["info", "revisions"],
          titles: pagename,
          intestactions: "edit",
          rvlimit: Twinkle.getPref("revertMaxRevisions"),
          rvprop: ["ids", "timestamp", "user"],
          curtimestamp: "",
          meta: "tokens",
          type: "csrf"
        };
        const ysarchives_api = new Morebits.wiki.api(window.wgULS("抓取较早修订版本信息", "抓取較早修訂版本資訊"), query, Twinkle.fluff.callbacks.main);
        ysarchives_api.params = params;
        ysarchives_api.post();
      };
      Twinkle.fluff.revertToRevision = (oldrev) => {
        let summary = "";
        if (document.querySelectorAll('[name="revertsummary"]')[0] !== void 0) {
          summary = document.querySelectorAll('[name="revertsummary"]')[0].value;
        }
        Morebits.status.init(document.querySelector("#mw-content-text"));
        const query = {
          action: "query",
          prop: ["info", "revisions"],
          titles: mw.config.get("wgPageName"),
          rvlimit: 1,
          rvstartid: oldrev,
          rvprop: ["ids", "user"],
          format: "xml",
          curtimestamp: "",
          meta: "tokens",
          type: "csrf"
        };
        const ysarchives_api = new Morebits.wiki.api(window.wgULS("抓取较早修订版本信息", "抓取較早修訂版本資訊"), query, Twinkle.fluff.callbacks.toRevision);
        ysarchives_api.params = {
          rev: oldrev,
          summary
        };
        ysarchives_api.post();
      };
      Twinkle.fluff.callbacks = {
        toRevision: (apiobj) => {
          const xmlDoc = apiobj.responseXML;
          const lastrevid = Number.parseInt($(xmlDoc).find("page").attr("lastrevid"), 10);
          const touched = $(xmlDoc).find("page").attr("touched");
          const loadtimestamp = $(xmlDoc).find("api").attr("curtimestamp");
          const csrftoken = $(xmlDoc).find("tokens").attr("csrftoken");
          const revertToRevID = Number.parseInt($(xmlDoc).find("rev").attr("revid"), 10);
          const revertToUser = $(xmlDoc).find("rev").attr("user");
          const revertToUserHidden = typeof $(xmlDoc).find("rev").attr("userhidden") === "string";
          if (revertToRevID !== apiobj.params.rev) {
            apiobj.statelem.error(window.wgULS("抓取到的修订版本与请求的修订版本不符，取消。", "抓取到的修訂版本與請求的修訂版本不符，取消。"));
            return;
          }
          const optional_summary = prompt("".concat(window.wgULS("请输入回退理由：", "請輸入回退理由："), "                                "), apiobj.params.summary);
          if (optional_summary === null) {
            apiobj.statelem.error(window.wgULS("由用户取消。", "由使用者取消。"));
            return;
          }
          const summary = Twinkle.fluff.formatSummary(window.wgULS("回退到由$USER做出的修订版本", "回退到由$USER做出的修訂版本") + revertToRevID, revertToUserHidden ? null : revertToUser, optional_summary);
          const query = {
            action: "edit",
            title: mw.config.get("wgPageName"),
            summary,
            tags: Twinkle.changeTags,
            token: csrftoken,
            undo: lastrevid,
            undoafter: revertToRevID,
            basetimestamp: touched,
            starttimestamp: loadtimestamp,
            minor: Twinkle.getPref("markRevertedPagesAsMinor").includes("torev") ? true : void 0,
            bot: true
          };
          if (Twinkle.getPref("watchRevertedPages").includes("torev")) {
            const watchOrExpiry = Twinkle.getPref("watchRevertedExpiry");
            if (!watchOrExpiry || watchOrExpiry === "no") {
              query.watchlist = "nochange";
            } else if (watchOrExpiry === "default" || watchOrExpiry === "preferences") {
              query.watchlist = "preferences";
            } else {
              query.watchlist = "watch";
              if (typeof watchOrExpiry === "string" && watchOrExpiry !== "yes") {
                query.watchlistexpiry = watchOrExpiry;
              }
            }
          }
          Morebits.wiki.actionCompleted.redirect = mw.config.get("wgPageName");
          Morebits.wiki.actionCompleted.notice = "回退完成";
          const ysarchives_api = new Morebits.wiki.api(window.wgULS("保存回退内容", "儲存回退內容"), query, Twinkle.fluff.callbacks.complete, apiobj.statelem);
          ysarchives_api.params = apiobj.params;
          ysarchives_api.post();
        },
        main: (apiobj) => {
          const xmlDoc = apiobj.responseXML;
          if ($(xmlDoc).find("actions").attr("edit") === void 0) {
            apiobj.statelem.error("Unable to edit the page, it's probably protected.");
            return;
          }
          const lastrevid = Number.parseInt($(xmlDoc).find("page").attr("lastrevid"), 10);
          const touched = $(xmlDoc).find("page").attr("touched");
          const loadtimestamp = $(xmlDoc).find("api").attr("curtimestamp");
          const csrftoken = $(xmlDoc).find("tokens").attr("csrftoken");
          const revs = $(xmlDoc).find("rev");
          const {
            statelem
          } = apiobj;
          const {
            params
          } = apiobj;
          if (revs.length < 1) {
            statelem.error(window.wgULS("没有其它修订版本，无法回退", "沒有其它修訂版本，無法回退"));
            return;
          }
          const [top] = revs;
          const lastuser = top.getAttribute("user");
          if (lastrevid < params.revid) {
            Morebits.status.error(window.wgULS("错误", "錯誤"), window.wgULS(["从服务器获取的最新修订版本ID ", Morebits.htmlNode("strong", lastrevid), " 小于目前所显示的修订版本ID。这可能意味着当前修订版本已被删除、服务器延迟、或抓取到了坏掉的信息。取消。"], ["從伺服器取得的最新修訂版本ID ", Morebits.htmlNode("strong", lastrevid), " 小於目前所顯示的修訂版本ID。這可能意味著當前修訂版本已被刪除、伺服器延遲、或擷取到了壞掉的資訊。取消。"]));
            return;
          }
          let userNorm = params.user || Twinkle.fluff.hiddenName;
          let index = 1;
          if (params.revid === lastrevid) {
            params.user = lastuser;
            userNorm = params.user || Twinkle.fluff.hiddenName;
          } else {
            Morebits.status.warn("警告", window.wgULS(["最新修订版本 ", Morebits.htmlNode("strong", lastrevid), " 与我们的修订版本 ", Morebits.htmlNode("strong", params.revid), "不同"], ["最新修訂版本 ", Morebits.htmlNode("strong", lastrevid), " 與我們的修訂版本 ", Morebits.htmlNode("strong", params.revid), " 不同"]));
            if (lastuser === params.user) {
              switch (params.type) {
                case "vand":
                  Morebits.status.info(window.wgULS("信息", "資訊"), [window.wgULS("最新修订版本由 ", "最新修訂版本由 "), Morebits.htmlNode("strong", userNorm), window.wgULS(" 做出，因我们假定破坏，继续回退操作。", " 做出，因我們假定破壞，繼續回退操作。")]);
                  break;
                default:
                  Morebits.status.warn("提示", [window.wgULS("最新修订版本由 ", "最新修訂版本由 "), Morebits.htmlNode("strong", userNorm), window.wgULS(" 做出，但我们还是不回退了。", " 做出，但我們還是不回退了。")]);
                  return;
              }
            } else if (params.type === "vand" && // Okay to test on user since it will either fail or sysop will correctly access it
            // Besides, none of the trusted bots are going to be revdel'd
            Twinkle.fluff.trustedBots.includes(top.getAttribute("user")) && revs.length > 1 && revs[1].getAttribute("revid") === params.revid) {
              Morebits.status.info(window.wgULS("信息", "資訊"), window.wgULS(["最新修订版本由 ", Morebits.htmlNode("strong", lastuser), "，一个可信的机器人做出，但之前的版本被认为是破坏，继续回退操作。"], ["最新修訂版本由 ", Morebits.htmlNode("strong", lastuser), "，一個可信的機器人做出，但之前的版本被認為是破壞，繼續回退操作。"]));
              index = 2;
            } else {
              Morebits.status.error(window.wgULS("错误", "錯誤"), window.wgULS(["最新修订版本由 ", Morebits.htmlNode("strong", lastuser), " 做出，所以这个修订版本可能已经被回退了，取消回退操作。"], ["最新修訂版本由 ", Morebits.htmlNode("strong", lastuser), " 做出，所以這個修訂版本可能已經被回退了，取消回退操作。"]));
              return;
            }
          }
          if (Twinkle.fluff.trustedBots.includes(params.user)) {
            switch (params.type) {
              case "vand":
                Morebits.status.info(window.wgULS("信息", "資訊"), [window.wgULS("将对 ", "將對 "), Morebits.htmlNode("strong", userNorm), window.wgULS(" 执行破坏回退，这是一个可信的机器人，我们假定您要回退前一个修订版本。", " 執行破壞回退，這是一個可信的機器人，我們假定您要回退前一個修訂版本。")]);
                index = 2;
                params.user = revs[1].getAttribute("user");
                params.userHidden = revs[1].getAttribute("userhidden") === "";
                break;
              /* case 'norm': */
              /* falls through */
              default: {
                const cont = confirm(window.wgULS("选择了常规回退，但最新修改是由一个可信的机器人（", "選擇了常規回退，但最新修改是由一個可信的機器人（") + userNorm + window.wgULS("）做出的。确定以回退前一个修订版本，取消以回退机器人的修改", "）做出的。確定以回退前一個修訂版本，取消以回退機器人的修改"));
                if (cont) {
                  Morebits.status.info(window.wgULS("信息", "資訊"), [window.wgULS("将对 ", "將對 "), Morebits.htmlNode("strong", userNorm), window.wgULS(" 执行常规回退，这是一个可信的机器人，基于确认，我们将回退前一个修订版本。", " 執行常規回退，這是一個可信的機器人，基於確認，我們將回退前一個修訂版本。")]);
                  index = 2;
                  params.user = revs[1].getAttribute("user");
                  params.userHidden = revs[1].getAttribute("userhidden") === "";
                  userNorm = params.user || Twinkle.fluff.hiddenName;
                } else {
                  Morebits.status.warn("提示", [window.wgULS("将对 ", "將對 "), Morebits.htmlNode("strong", userNorm), window.wgULS(" 执行常规回退，这是一个可信的机器人，基于确认，我们仍将回退这个修订版本。", " 執行常規回退，這是一個可信的機器人，基於確認，我們仍將回退這個修訂版本。")]);
                }
                break;
              }
            }
          }
          let found = false;
          let count = 0;
          for (let i = index; i < revs.length; ++i) {
            ++count;
            if (revs[i].getAttribute("user") !== params.user) {
              found = i;
              break;
            }
          }
          if (!found) {
            statelem.error([window.wgULS("未找到之前的修订版本，可能 ", "未找到之前的修訂版本，可能 "), Morebits.htmlNode("strong", userNorm), window.wgULS(" 是唯一贡献者，或这个用户连续做出了超过 ", " 是唯一貢獻者，或這個用戶連續做出了超過 ") + mw.language.convertNumber(Twinkle.getPref("revertMaxRevisions")) + window.wgULS(" 次编辑。", " 次編輯。")]);
            return;
          }
          if (!count) {
            Morebits.status.error(window.wgULS("错误", "錯誤"), window.wgULS("我们将要回退0个修订版本，这没有意义，所以取消回退操作。可能是因为这个修订版本已经被回退，但修订版本ID仍是一样的。", "我們將要回退0個修訂版本，這沒有意義，所以取消回退操作。可能是因為這個修訂版本已經被回退，但修訂版本ID仍是一樣的。"));
            return;
          }
          const good_revision = revs[found];
          let userHasAlreadyConfirmedAction = false;
          if (params.type !== "vand" && count > 1) {
            if (!confirm(userNorm + window.wgULS(" 连续做出了 ", " 連續做出了 ") + mw.language.convertNumber(count) + window.wgULS(" 次编辑，是否要全部回退？", " 次編輯，是否要全部回退？"))) {
              Morebits.status.info("提示", window.wgULS("用户取消操作", "使用者取消操作"));
              return;
            }
            userHasAlreadyConfirmedAction = true;
          }
          params.count = count;
          params.goodid = good_revision.getAttribute("revid");
          params.gooduser = good_revision.getAttribute("user");
          params.gooduserHidden = good_revision.getAttribute("userhidden") === "";
          statelem.status([Morebits.htmlNode("strong", mw.language.convertNumber(count)), window.wgULS(" 个修订版本之前由 ", " 個修訂版本之前由 "), Morebits.htmlNode("strong", params.gooduserHidden ? Twinkle.fluff.hiddenName : params.gooduser), window.wgULS(" 做出的修订版本 ", " 做出的修訂版本 "), Morebits.htmlNode("strong", params.goodid)]);
          let summary;
          let extra_summary;
          switch (params.type) {
            case "vand":
              summary = Twinkle.fluff.formatSummary("回退$USER做出的".concat(params.count).concat(window.wgULS("次编辑，到由", "次編輯，到由")).concat(params.gooduserHidden ? Twinkle.fluff.hiddenName : params.gooduser).concat(window.wgULS("做出的最后修订版本 ", "做出的最後修訂版本 ")), params.userHidden ? null : params.user);
              break;
            /* case 'norm': */
            /* falls through */
            default:
              if (Twinkle.getPref("offerReasonOnNormalRevert")) {
                extra_summary = prompt("".concat(window.wgULS("可选的编辑摘要：", "可選的編輯摘要："), "                              "), params.summary);
                if (extra_summary === null) {
                  statelem.error(window.wgULS("用户取消操作。", "使用者取消操作。"));
                  return;
                }
                userHasAlreadyConfirmedAction = true;
              }
              summary = Twinkle.fluff.formatSummary("回退$USER做出的".concat(params.count).concat(window.wgULS("次编辑", "次編輯")), params.userHidden ? null : params.user, extra_summary);
              break;
          }
          if (Twinkle.getPref("confirmOnFluff") && !userHasAlreadyConfirmedAction && !confirm(window.wgULS("回退页面：您确定吗？", "回退頁面：您確定嗎？"))) {
            statelem.error(window.wgULS("用户取消操作。", "使用者取消操作。"));
            return;
          }
          if (!Twinkle.fluff.skipTalk && Twinkle.getPref("openTalkPage").includes(params.type) && !params.userHidden && mw.config.get("wgUserName") !== params.user) {
            params.notifyUser = true;
            params.vantimestamp = top.getAttribute("timestamp");
          }
          const query = {
            action: "edit",
            title: params.pagename,
            summary,
            tags: Twinkle.changeTags,
            token: csrftoken,
            undo: lastrevid,
            undoafter: params.goodid,
            basetimestamp: touched,
            starttimestamp: loadtimestamp,
            minor: Twinkle.getPref("markRevertedPagesAsMinor").includes(params.type) ? true : void 0,
            bot: true
          };
          if (Twinkle.getPref("watchRevertedPages").includes(params.type)) {
            const watchOrExpiry = Twinkle.getPref("watchRevertedExpiry");
            if (!watchOrExpiry || watchOrExpiry === "no") {
              query.watchlist = "nochange";
            } else if (watchOrExpiry === "default" || watchOrExpiry === "preferences") {
              query.watchlist = "preferences";
            } else {
              query.watchlist = "watch";
              if (typeof watchOrExpiry === "string" && watchOrExpiry !== "yes") {
                query.watchlistexpiry = watchOrExpiry;
              }
            }
          }
          if (!Twinkle.fluff.rollbackInPlace) {
            Morebits.wiki.actionCompleted.redirect = params.pagename;
          }
          Morebits.wiki.actionCompleted.notice = "回退完成";
          const ysarchives_api = new Morebits.wiki.api(window.wgULS("保存回退内容", "儲存回退內容"), query, Twinkle.fluff.callbacks.complete, statelem);
          ysarchives_api.params = params;
          ysarchives_api.post();
        },
        complete: (apiobj) => {
          const xml = apiobj.getXML();
          const $edit = $(xml).find("edit");
          if ($(xml).find("captcha").length > 0) {
            apiobj.statelem.error(window.wgULS("不能回退，因服务器要求您输入验证码。", "不能回退，因伺服器要求您輸入驗證碼。"));
          } else if ($edit.attr("nochange") === "") {
            apiobj.statelem.error(window.wgULS("要回退到的版本与当前版本相同，没什么要做的", "要回退到的版本與目前版本相同，沒什麼要做的"));
          } else {
            apiobj.statelem.info("完成");
            const {
              params
            } = apiobj;
            if (params.notifyUser && !params.userHidden) {
              Morebits.status.info(window.wgULS("信息", "資訊"), [window.wgULS("开启用户 ", "開啟使用者 "), Morebits.htmlNode("strong", params.user), window.wgULS(" 的讨论页", " 的討論頁")]);
              const windowQuery = {
                title: "User talk:".concat(params.user),
                action: "edit",
                preview: "yes",
                vanarticle: params.pagename.replace(/_/g, " "),
                vanarticlerevid: params.revid,
                vantimestamp: params.vantimestamp,
                vanarticlegoodrevid: params.goodid,
                type: params.type,
                count: params.count
              };
              switch (Twinkle.getPref("userTalkPageMode")) {
                case "tab":
                  window.open(mw.util.getUrl("", windowQuery), "_blank", "noopener,noreferrer");
                  break;
                case "blank":
                  window.open(mw.util.getUrl("", windowQuery), "_blank", "noopener,noreferrer,location=no,toolbar=no,status=no,directories=no,scrollbars=yes,width=1200,height=800");
                  break;
                /* case 'window': */
                /* falls through */
                default:
                  window.open(mw.util.getUrl("", windowQuery), window.name === "twinklewarnwindow" ? "_blank" : "twinklewarnwindow", window.name === "twinklewarnwindow" ? "noopener,noreferrer," : "location=no,toolbar=no,status=no,directories=no,scrollbars=yes,width=1200,height=800");
                  break;
              }
            }
          }
        }
      };
      Twinkle.fluff.formatSummary = (builtInString, userName, customString) => {
        let result = builtInString;
        if (customString) {
          result += "：".concat(Morebits.string.toUpperCaseFirstChar(customString));
        }
        if (/\$USER/.test(builtInString)) {
          if (userName) {
            const resultLen = unescape(encodeURIComponent(result.replace("$USER", ""))).length;
            const contribsLink = "[[Special:Contributions/".concat(userName, "|").concat(userName, "]]");
            const contribsLen = unescape(encodeURIComponent(contribsLink)).length;
            if (resultLen + contribsLen <= 499) {
              const talkLink = "（[[User talk:".concat(userName).concat(window.wgULS("|讨论]]）", "|討論]]）"));
              if (resultLen + contribsLen + unescape(encodeURIComponent(talkLink)).length <= 499) {
                result = Morebits.string.safeReplace(result, "$USER", contribsLink + talkLink);
              } else {
                result = Morebits.string.safeReplace(result, "$USER", contribsLink);
              }
            } else {
              result = Morebits.string.safeReplace(result, "$USER", userName);
            }
          } else {
            result = Morebits.string.safeReplace(result, "$USER", Twinkle.fluff.hiddenName);
          }
        }
        return result;
      };
      Twinkle.addInitCallback(Twinkle.fluff, "fluff");
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinklebatchdelete.js
var twinklebatchdelete_exports = {};
var init_twinklebatchdelete = __esm({
  "src/Twinkle/modules/twinklebatchdelete.js"() {
    "use strict";
    /*! Twinkle.js - twinklebatchdelete.js */
    (function twinklebatchdelete($) {
      const $body = $("body");
      Twinkle.batchdelete = () => {
        if (Morebits.userIsSysop && (mw.config.get("wgCurRevisionId") && mw.config.get("wgNamespaceNumber") > 0 || mw.config.get("wgCanonicalSpecialPageName") === "Prefixindex" || mw.config.get("wgCanonicalSpecialPageName") === "BrokenRedirects")) {
          Twinkle.addPortletLink(Twinkle.batchdelete.callback, window.wgULS("批删", "批刪"), "tw-batch", window.wgULS("删除此分类或页面中的所有链接", "刪除此分類或頁面中的所有連結"));
        }
      };
      Twinkle.batchdelete.unlinkCache = {};
      let subpagesLoaded;
      Twinkle.batchdelete.callback = () => {
        subpagesLoaded = false;
        const Window = new Morebits.simpleWindow(600, 400);
        Window.setTitle(window.wgULS("批量删除", "批次刪除"));
        Window.setScriptName("Twinkle");
        Window.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW/DOC#batchdelete");
        const form = new Morebits.quickForm(Twinkle.batchdelete.callback.evaluate);
        form.append({
          type: "checkbox",
          list: [{
            label: window.wgULS("删除页面", "刪除頁面"),
            name: "delete_page",
            value: "delete",
            checked: true,
            subgroup: {
              type: "checkbox",
              list: [{
                label: window.wgULS("删除关联的讨论页（用户讨论页除外）", "刪除關聯的討論頁（使用者討論頁除外）"),
                name: "delete_talk",
                value: "delete_talk",
                checked: true
              }, {
                label: window.wgULS("删除到已删页面的重定向页", "刪除到已刪頁面的重新導向頁面"),
                name: "delete_redirects",
                value: "delete_redirects",
                checked: true
              }, {
                label: window.wgULS("删除已删页面的子页面", "刪除已刪頁面的子頁面"),
                name: "delete_subpages",
                value: "delete_subpages",
                checked: false,
                event: Twinkle.batchdelete.callback.toggleSubpages,
                subgroup: {
                  type: "checkbox",
                  list: [{
                    label: window.wgULS("删除已删子页面的讨论页", "刪除已刪子頁面的討論頁"),
                    name: "delete_subpage_talks",
                    value: "delete_subpage_talks"
                  }, {
                    label: window.wgULS("删除到已删子页面的重定向页", "刪除到已刪子頁面的重新導向頁面"),
                    name: "delete_subpage_redirects",
                    value: "delete_subpage_redirects"
                  }, {
                    label: window.wgULS("取消所有已删页面的链入（仅处理条目命名空间）", "取消所有已刪頁面的連入（僅處理條目命名空間）"),
                    name: "unlink_subpages",
                    value: "unlink_subpages"
                  }]
                }
              }]
            }
          }, {
            label: window.wgULS("取消链入（仅处理条目命名空间）", "取消連入（僅處理條目命名空間）"),
            name: "unlink_page",
            value: "unlink",
            checked: false
          }, {
            label: window.wgULS("移除文件使用（所有命名空间）", "移除檔案使用（所有命名空間）"),
            name: "unlink_file",
            value: "unlink_file",
            checked: true
          }]
        });
        form.append({
          type: "select",
          name: "common_reason",
          label: "常用理由：",
          style: "width: 85%;",
          list: Twinkle.batchdelete.deletereasonlist,
          event: Twinkle.batchdelete.callback.change_common_reason
        });
        form.append({
          name: "reason",
          type: "input",
          label: "理由：",
          size: 75
        });
        const query = {
          action: "query",
          prop: "revisions|info|imageinfo",
          inprop: "protection",
          rvprop: "size|user"
        };
        if (mw.config.get("wgNamespaceNumber") === 14) {
          query.generator = "categorymembers";
          query.gcmtitle = mw.config.get("wgPageName");
          query.gcmlimit = Twinkle.getPref("batchMax");
        } else if (mw.config.get("wgCanonicalSpecialPageName") === "Prefixindex") {
          query.generator = "allpages";
          query.gaplimit = Twinkle.getPref("batchMax");
          if (mw.util.getParamValue("prefix")) {
            query.gapnamespace = mw.util.getParamValue("namespace");
            query.gapprefix = mw.util.getParamValue("prefix");
          } else {
            let pathSplit = decodeURIComponent(location.pathname).split("/");
            if (pathSplit.length < 3 || pathSplit[2] !== "Special:前缀索引") {
              return;
            }
            const titleSplit = pathSplit[3].split(":");
            query.gapnamespace = mw.config.get("wgNamespaceIds")[titleSplit[0].toLowerCase()];
            if (titleSplit.length < 2 || query.gapnamespace === void 0) {
              query.gapnamespace = 0;
              query.gapprefix = pathSplit.splice(3).join("/");
            } else {
              pathSplit = pathSplit.splice(4);
              pathSplit.splice(0, 0, titleSplit.splice(1).join(":"));
              query.gapprefix = pathSplit.join("/");
            }
          }
        } else if (mw.config.get("wgCanonicalSpecialPageName") === "BrokenRedirects") {
          query.generator = "querypage";
          query.gqppage = "BrokenRedirects";
          query.gqplimit = Twinkle.getPref("batchMax");
        } else {
          query.generator = "links";
          query.titles = mw.config.get("wgPageName");
          query.gpllimit = Twinkle.getPref("batchMax");
        }
        const statusdiv = document.createElement("div");
        statusdiv.style.padding = "15px";
        Window.setContent(statusdiv);
        Morebits.status.init(statusdiv);
        Window.display();
        Twinkle.batchdelete.pages = {};
        const statelem = new Morebits.status(window.wgULS("抓取页面列表", "抓取頁面列表"));
        const ysarchives_api = new Morebits.wiki.api(window.wgULS("加载中…", "載入中…"), query, (apiobj) => {
          const xml = apiobj.responseXML;
          const $pages = $(xml).find("page").filter(":not([missing])");
          $pages.each((_index, page) => {
            const $page = $(page);
            const ns = $page.attr("ns");
            const title = $page.attr("title");
            const isRedir = $page.attr("redirect") === "";
            const $editprot = $page.find('pr[type="edit"][level="sysop"]');
            const isProtected = $editprot.length > 0;
            const size = $page.find("rev").attr("size");
            const metadata = [];
            if (isRedir) {
              metadata[metadata.length] = window.wgULS("重定向", "重新導向");
            }
            if (isProtected) {
              metadata[metadata.length] = window.wgULS("全保护，", "全保護，") + ($editprot.attr("expiry") === "infinity" ? window.wgULS("无限期", "無限期") : "".concat(new Morebits.date($editprot.attr("expiry")).calendar("utc"), " (UTC)")) + window.wgULS("过期", "過期");
            }
            if (ns === "6") {
              metadata[metadata.length] = (window.wgULS("上传者：", "上傳者：") + $page.find("ii").attr("user"), window.wgULS("最后编辑：", "最後編輯：") + $page.find("rev").attr("user"));
            } else {
              metadata[metadata.length] = mw.language.convertNumber(size) + window.wgULS("字节", "位元組");
            }
            Twinkle.batchdelete.pages[title] = {
              label: title + (metadata.length ? "（".concat(metadata.join("，"), "）") : ""),
              value: title,
              checked: true,
              style: isProtected ? "color: #f00" : ""
            };
          });
          const form_ = apiobj.params.form;
          form_.append({
            type: "header",
            label: window.wgULS("待删除页面", "待刪除頁面")
          });
          form_.append({
            type: "button",
            label: window.wgULS("全选", "全選"),
            event: () => {
              $(result).find("input[name=pages]:not(:checked)").each((_, e) => {
                e.click();
              });
              $body.find('input[name="pages.subpages"]').prop("checked", true);
            }
          });
          form_.append({
            type: "button",
            label: window.wgULS("全不选", "全不選"),
            event: () => {
              $(result).find("input[name=pages]:checked").each((_, e) => {
                e.click();
              });
            }
          });
          form_.append({
            type: "checkbox",
            name: "pages",
            id: "tw-dbatch-pages",
            shiftClickSupport: true,
            list: Object.values(Twinkle.batchdelete.pages).map((e) => {
              return e;
            })
          });
          form_.append({
            type: "submit"
          });
          const result = form_.render();
          apiobj.params.Window.setContent(result);
          var _iterator56 = _createForOfIteratorHelper(Morebits.quickForm.getElements(result, "pages")), _step56;
          try {
            for (_iterator56.s(); !(_step56 = _iterator56.n()).done; ) {
              const checkbox = _step56.value;
              generateArrowLinks(checkbox);
            }
          } catch (err) {
            _iterator56.e(err);
          } finally {
            _iterator56.f();
          }
        }, statelem);
        ysarchives_api.params = {
          form,
          Window
        };
        ysarchives_api.post();
      };
      const generateArrowLinks = (checkbox) => {
        const link = Morebits.htmlNode("a", " >");
        link.setAttribute("class", "tw-dbatch-page-link");
        link.setAttribute("href", mw.util.getUrl(checkbox.value));
        link.setAttribute("target", "_blank");
        link.setAttribute("rel", "noopener noreferrer");
        checkbox.nextElementSibling.append(link);
      };
      Twinkle.batchdelete.generateNewPageList = (form) => {
        const elements = form.elements.pages;
        if (elements instanceof NodeList) {
          var _iterator57 = _createForOfIteratorHelper(elements), _step57;
          try {
            for (_iterator57.s(); !(_step57 = _iterator57.n()).done; ) {
              const element = _step57.value;
              Twinkle.batchdelete.pages[element.value].checked = element.checked;
            }
          } catch (err) {
            _iterator57.e(err);
          } finally {
            _iterator57.f();
          }
        } else if (elements instanceof HTMLInputElement) {
          Twinkle.batchdelete.pages[elements.value].checked = elements.checked;
        }
        return new Morebits.quickForm.element({
          type: "checkbox",
          name: "pages",
          id: "tw-dbatch-pages",
          shiftClickSupport: true,
          list: Object.values(Twinkle.batchdelete.pages).map((e) => {
            return e;
          })
        }).render();
      };
      Twinkle.batchdelete.deletereasonlist = [{
        label: window.wgULS("请选择", "請選擇"),
        value: ""
      }, {
        label: window.wgULS("G6：原作者提请删除或清空页面，且页面原作者仅有一人", "G6：原作者提請刪除或清空頁面，且頁面原作者僅有一人"),
        value: window.wgULS("[[LIB:CSD#G6|G6]]：原作者提请删除或清空页面，且页面原作者仅有一人", "[[LIB:CSD#G6|G6]]：原作者提請刪除或清空頁面，且頁面原作者僅有一人")
      }, {
        label: window.wgULS("G9：孤立页面，比如没有主页面的讨论页、指向空页面的重定向等", "G9：孤立頁面，比如沒有主頁面的討論頁、指向空頁面的重新導向等"),
        value: window.wgULS("[[LIB:CSD#G9|G9]]：孤立页面", "[[LIB:CSD#G9|G9]]：孤立頁面")
      }, {
        label: window.wgULS("R1：不能发挥实际作用的重定向。", "R1：不能發揮實際作用的重定向。"),
        value: window.wgULS("[[LIB:CSD#R1|R1]]：不能发挥实际作用的重定向。", "[[LIB:CSD#R1|R1]]：不能發揮實際作用的重定向。")
      }, {
        label: window.wgULS("R2：名称与导向目标代表事物不一致或不完全一致的重定向。", "R2：名稱與導向目標代表事物不一致或不完全一致的重定向。"),
        value: window.wgULS("[[LIB:CSD#R2|R2]]：名称与导向目标代表事物不一致或不完全一致的重定向。", "[[LIB:CSD#R2|R2]]：名稱與導向目標代表事物不一致或不完全一致的重定向。")
      }, {
        label: window.wgULS("F4：可被替代的合理使用文件", "F4：可被替代的合理使用檔案"),
        value: window.wgULS("[[LIB:CSD#F4|F4]]：可被替代的合理使用文件", "[[LIB:CSD#F4|F4]]：可被替代的合理使用檔案")
      }, {
        label: window.wgULS("F5：没有被条目使用的非自由著作权文件、没有填写任何合理使用依据的非自由著作权文件", "F5：沒有被條目使用的非自由版權檔案、沒有填寫任何合理使用依據的非自由版權檔案"),
        value: window.wgULS("[[LIB:CSD#F5|F5]]：没有被条目使用的非自由著作权文件、没有填写任何合理使用依据的非自由著作权文件", "[[LIB:CSD#F5|F5]]：沒有被條目使用的非自由版權檔案、沒有填寫任何合理使用依據的非自由版權檔案")
      }, {
        label: window.wgULS("O1：用户请求删除自己的用户页或其子页面", "O1：使用者請求刪除自己的使用者頁面或其子頁面"),
        value: window.wgULS("[[LIB:CSD#O1|O1]]：用户请求删除自己的[[Help:用户页|用户页]]或其子页面。", "[[LIB:CSD#O1|O1]]：使用者請求刪除自己的[[Help:用户页|使用者頁面]]或其子頁面。")
      }, {
        label: window.wgULS("O2：空的分类（没有条目也没有子分类）", "O2：空的分類（沒有條目也沒有子分類）"),
        value: window.wgULS("[[LIB:CSD#O2|O2]]：空的分类（没有条目也没有子分类）。", "[[LIB:CSD#O2|O2]]：空的分類（沒有條目也沒有子分類）。")
      }, {
        label: window.wgULS("O3：废弃草稿", "O3：廢棄草稿"),
        value: window.wgULS("[[LIB:CSD#O3|O3]]：废弃草稿。", "[[LIB:CSD#O3|O3]]：廢棄草稿。")
      }];
      Twinkle.batchdelete.callback.change_common_reason = (e) => {
        if (e.target.form.reason.value !== "") {
          e.target.form.reason.value = Morebits.string.appendPunctuation(e.target.form.reason.value);
        }
        e.target.form.reason.value += e.target.value;
        e.target.value = "";
      };
      Twinkle.batchdelete.callback.toggleSubpages = (e) => {
        const {
          form
        } = e.target;
        let newPageList;
        if (e.target.checked) {
          form.delete_subpage_redirects.checked = form.delete_redirects.checked;
          form.delete_subpage_talks.checked = form.delete_talk.checked;
          form.unlink_subpages.checked = form.unlink_page.checked;
          if (subpagesLoaded) {
            var _iterator58 = _createForOfIteratorHelper(Twinkle.batchdelete.pages), _step58;
            try {
              for (_iterator58.s(); !(_step58 = _iterator58.n()).done; ) {
                const el = _step58.value;
                if (el.subgroup === null && el.subgroup_) {
                  el.subgroup = el.subgroup_;
                }
              }
            } catch (err) {
              _iterator58.e(err);
            } finally {
              _iterator58.f();
            }
            newPageList = Twinkle.batchdelete.generateNewPageList(form);
            $body.find("#tw-dbatch-pages").replaceWith(newPageList);
            var _iterator59 = _createForOfIteratorHelper(Morebits.quickForm.getElements(newPageList, "pages")), _step59;
            try {
              for (_iterator59.s(); !(_step59 = _iterator59.n()).done; ) {
                const checkbox = _step59.value;
                generateArrowLinks(checkbox);
              }
            } catch (err) {
              _iterator59.e(err);
            } finally {
              _iterator59.f();
            }
            var _iterator60 = _createForOfIteratorHelper(Morebits.quickForm.getElements(newPageList, "pages.subpages")), _step60;
            try {
              for (_iterator60.s(); !(_step60 = _iterator60.n()).done; ) {
                const checkbox = _step60.value;
                generateArrowLinks(checkbox);
              }
            } catch (err) {
              _iterator60.e(err);
            } finally {
              _iterator60.f();
            }
            return;
          }
          const loadingText = '<strong id="dbatch-subpage-loading">'.concat(window.wgULS("加载中...", "載入中..."), "</strong>");
          $(e.target).after(loadingText);
          const pages = $(form.pages).map((_i, el) => {
            return el.value;
          }).get();
          const subpageLister = new Morebits.batchOperation();
          subpageLister.setOption("chunkSize", Twinkle.getPref("batchChunks"));
          subpageLister.setPageList(pages);
          subpageLister.run((pageName) => {
            const pageTitle = mw.Title.newFromText(pageName);
            if ([0, 6, 8].includes(pageTitle.namespace)) {
              subpageLister.workerSuccess();
              return;
            }
            const ysarchives_api = new Morebits.wiki.api(window.wgULS("正在获取 ", "正在取得 ") + pageName + window.wgULS(" 的子页面", " 的子頁面"), {
              action: "query",
              prop: "revisions|info|imageinfo",
              generator: "allpages",
              rvprop: "size",
              inprop: "protection",
              gapprefix: "".concat(pageTitle.title, "/"),
              gapnamespace: pageTitle.namespace,
              gaplimit: "max",
              pageNameFull: pageName
              // Not used by API, but added for access in onSuccess()
            }, (apiobj) => {
              const xml = apiobj.responseXML;
              const $pages = $(xml).find("page");
              const subpageList = [];
              $pages.each((_index, page) => {
                const $page = $(page);
                const ns = $page.attr("ns");
                const title = $page.attr("title");
                const isRedir = $page.attr("redirect") === "";
                const $editprot = $page.find('pr[type="edit"][level="sysop"]');
                const isProtected = $editprot.length > 0;
                const size = $page.find("rev").attr("size");
                const metadata = [];
                if (isRedir) {
                  metadata[metadata.length] = "redirect";
                }
                if (isProtected) {
                  metadata[metadata.length] = window.wgULS("全保护，", "全保護，") + ($editprot.attr("expiry") === "infinity" ? window.wgULS("无限期", "無限期") : "".concat(new Morebits.date($editprot.attr("expiry")).calendar("utc"), " (UTC)")) + window.wgULS("过期", "過期");
                }
                if (ns === "6") {
                  metadata[metadata.length] = (window.wgULS("上传者：", "上傳者：") + $page.find("ii").attr("user"), window.wgULS("最后编辑：", "最後編輯：") + $page.find("rev").attr("user"));
                } else {
                  metadata[metadata.length] = mw.language.convertNumber(size) + window.wgULS("字节", "位元組");
                }
                subpageList[subpageList.length] = {
                  label: title + (metadata.length ? " (".concat(metadata.join("; "), ")") : ""),
                  value: title,
                  checked: true,
                  style: isProtected ? "color: #f00" : ""
                };
              });
              if (subpageList.length) {
                const pageName_ = apiobj.query.pageNameFull;
                Twinkle.batchdelete.pages[pageName_].subgroup = {
                  type: "checkbox",
                  name: "subpages",
                  className: "dbatch-subpages",
                  shiftClickSupport: true,
                  list: subpageList
                };
              }
              subpageLister.workerSuccess();
            }, null, () => {
              subpageLister.workerFailure();
            });
            ysarchives_api.post();
          }, () => {
            newPageList = Twinkle.batchdelete.generateNewPageList(form);
            $body.find("#tw-dbatch-pages").replaceWith(newPageList);
            var _iterator61 = _createForOfIteratorHelper(Morebits.quickForm.getElements(newPageList, "pages")), _step61;
            try {
              for (_iterator61.s(); !(_step61 = _iterator61.n()).done; ) {
                const checkbox = _step61.value;
                generateArrowLinks(checkbox);
              }
            } catch (err) {
              _iterator61.e(err);
            } finally {
              _iterator61.f();
            }
            var _iterator62 = _createForOfIteratorHelper(Morebits.quickForm.getElements(newPageList, "pages.subpages")), _step62;
            try {
              for (_iterator62.s(); !(_step62 = _iterator62.n()).done; ) {
                const checkbox = _step62.value;
                generateArrowLinks(checkbox);
              }
            } catch (err) {
              _iterator62.e(err);
            } finally {
              _iterator62.f();
            }
            subpagesLoaded = true;
            $body.find("#dbatch-subpage-loading").remove();
          });
        } else if (!e.target.checked) {
          var _iterator63 = _createForOfIteratorHelper(Twinkle.batchdelete.pages), _step63;
          try {
            for (_iterator63.s(); !(_step63 = _iterator63.n()).done; ) {
              const el = _step63.value;
              if (el.subgroup) {
                el.subgroup_ = el.subgroup;
                el.subgroup = null;
              }
            }
          } catch (err) {
            _iterator63.e(err);
          } finally {
            _iterator63.f();
          }
          newPageList = Twinkle.batchdelete.generateNewPageList(form);
          $body.find("#tw-dbatch-pages").replaceWith(newPageList);
          var _iterator64 = _createForOfIteratorHelper(Morebits.quickForm.getElements(newPageList, "pages")), _step64;
          try {
            for (_iterator64.s(); !(_step64 = _iterator64.n()).done; ) {
              const checkbox = _step64.value;
              generateArrowLinks(checkbox);
            }
          } catch (err) {
            _iterator64.e(err);
          } finally {
            _iterator64.f();
          }
        }
      };
      Twinkle.batchdelete.callback.evaluate = (event) => {
        Morebits.wiki.actionCompleted.notice = window.wgULS("批量删除已完成", "批次刪除已完成");
        const form = event.target;
        const numProtected = $(Morebits.quickForm.getElements(form, "pages")).filter((_index, element) => {
          return element.checked && element.nextElementSibling.style.color === "red";
        }).length;
        if (numProtected > 0 && !confirm(window.wgULS("您正要删除 ", "您正要刪除 ") + mw.language.convertNumber(numProtected) + window.wgULS(" 个全保护页面，您确定吗？", " 個全保護頁面，您確定嗎？"))) {
          return;
        }
        const pages = form.getChecked("pages");
        const subpages = form.getChecked("pages.subpages");
        const reason = form.reason.value;
        const delete_page = form.delete_page.checked;
        let delete_talk;
        let delete_redirects;
        let delete_subpages;
        let delete_subpage_redirects;
        let delete_subpage_talks;
        let unlink_subpages;
        if (delete_page) {
          delete_talk = form.delete_talk.checked;
          delete_redirects = form.delete_redirects.checked;
          delete_subpages = form.delete_subpages.checked;
          if (delete_subpages) {
            delete_subpage_redirects = form.delete_subpage_redirects.checked;
            delete_subpage_talks = form.delete_subpage_talks.checked;
            unlink_subpages = form.unlink_subpages.checked;
          }
        }
        const unlink_page = form.unlink_page.checked;
        const unlink_file = form.unlink_file.checked;
        if (!reason) {
          void mw.notify(window.wgULS("您需要给出一个理由", "您需要給出一個理由"), {
            type: "warn",
            tag: "twinklebatchdelete"
          });
          return;
        }
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(form);
        if (!pages) {
          Morebits.status.error(window.wgULS("错误", "錯誤"), window.wgULS("没有要删除的内容，中止", "沒有要刪除的內容，中止"));
          return;
        }
        const pageDeleter = new Morebits.batchOperation(delete_page ? window.wgULS("正在删除页面", "正在刪除頁面") : window.wgULS("正在启动要求的任务", "正在啟動要求的任務"));
        pageDeleter.setOption("chunkSize", Twinkle.getPref("batchChunks"));
        pageDeleter.setOption("preserveIndividualStatusLines", delete_page);
        pageDeleter.setPageList(pages);
        pageDeleter.run((pageName) => {
          const params = {
            page: pageName,
            delete_page,
            delete_talk,
            delete_redirects,
            unlink_page,
            unlink_file: unlink_file && new RegExp("^".concat(Morebits.namespaceRegex(6), ":"), "i").test(pageName),
            reason,
            pageDeleter
          };
          const ysarchives_page = new Morebits.wiki.page(pageName, window.wgULS("正在删除页面 ", "正在刪除頁面 ") + pageName);
          ysarchives_page.setCallbackParameters(params);
          if (delete_page) {
            ysarchives_page.setEditSummary("".concat(reason, "（批量）"));
            ysarchives_page.setChangeTags(Twinkle.changeTags);
            ysarchives_page.suppressProtectWarning();
            ysarchives_page.deletePage(Twinkle.batchdelete.callbacks.doExtras, pageDeleter.workerFailure);
          } else {
            Twinkle.batchdelete.callbacks.doExtras(ysarchives_page);
          }
        }, () => {
          if (delete_subpages) {
            const subpageDeleter = new Morebits.batchOperation(window.wgULS("正在删除子页面", "正在刪除子頁面"));
            subpageDeleter.setOption("chunkSize", Twinkle.getPref("batchChunks"));
            subpageDeleter.setOption("preserveIndividualStatusLines", true);
            subpageDeleter.setPageList(subpages);
            subpageDeleter.run((pageName) => {
              const params = {
                page: pageName,
                delete_page: true,
                delete_talk: delete_subpage_talks,
                delete_redirects: delete_subpage_redirects,
                unlink_page: unlink_subpages,
                unlink_file: false,
                reason,
                pageDeleter: subpageDeleter
              };
              const ysarchives_page = new Morebits.wiki.page(pageName, window.wgULS("正在删除子页面 ", "正在刪除子頁面 ") + pageName);
              ysarchives_page.setCallbackParameters(params);
              ysarchives_page.setEditSummary("".concat(reason, "（批量）"));
              ysarchives_page.setChangeTags(Twinkle.changeTags);
              ysarchives_page.suppressProtectWarning();
              ysarchives_page.deletePage(Twinkle.batchdelete.callbacks.doExtras, pageDeleter.workerFailure);
            });
          }
        });
      };
      Twinkle.batchdelete.callbacks = {
        // this stupid parameter name is a temporary thing until I implement an overhaul
        // of Morebits.wiki.* callback parameters
        doExtras: (thingWithParameters) => {
          const params = thingWithParameters.parent ? thingWithParameters.parent.getCallbackParameters() : thingWithParameters.getCallbackParameters();
          params.pageDeleter.workerSuccess(thingWithParameters);
          let query;
          let ysarchives_api;
          if (params.unlink_page) {
            Twinkle.batchdelete.unlinkCache = {};
            query = {
              action: "query",
              list: "backlinks",
              blfilterredir: "nonredirects",
              blnamespace: [0],
              bltitle: params.page,
              bllimit: "max"
              // 500 is max for normal users, 5000 for bots and sysops
            };
            ysarchives_api = new Morebits.wiki.api(window.wgULS("正在获取链入", "正在取得連入"), query, Twinkle.batchdelete.callbacks.unlinkBacklinksMain);
            ysarchives_api.params = params;
            ysarchives_api.post();
          }
          if (params.unlink_file) {
            query = {
              action: "query",
              list: "imageusage",
              iutitle: params.page,
              iulimit: "max"
              // 500 is max for normal users, 5000 for bots and sysops
            };
            ysarchives_api = new Morebits.wiki.api(window.wgULS("正在获取文件链入", "正在取得檔案連入"), query, Twinkle.batchdelete.callbacks.unlinkImageInstancesMain);
            ysarchives_api.params = params;
            ysarchives_api.post();
          }
          if (params.delete_page) {
            if (params.delete_redirects) {
              query = {
                action: "query",
                titles: params.page,
                prop: "redirects",
                rdlimit: "max"
                // 500 is max for normal users, 5000 for bots and sysops
              };
              ysarchives_api = new Morebits.wiki.api(window.wgULS("正在获取重定向", "正在取得重新導向"), query, Twinkle.batchdelete.callbacks.deleteRedirectsMain);
              ysarchives_api.params = params;
              ysarchives_api.post();
            }
            if (params.delete_talk) {
              const pageTitle = mw.Title.newFromText(params.page);
              if (pageTitle && pageTitle.namespace % 2 === 0 && pageTitle.namespace !== 2) {
                pageTitle.namespace++;
                query = {
                  action: "query",
                  titles: pageTitle.toText()
                };
                ysarchives_api = new Morebits.wiki.api(window.wgULS("正在检查讨论页面是否存在", "正在檢查討論頁面是否存在"), query, Twinkle.batchdelete.callbacks.deleteTalk);
                ysarchives_api.params = params;
                ysarchives_api.params.talkPage = pageTitle.toText();
                ysarchives_api.post();
              }
            }
          }
        },
        deleteRedirectsMain: (apiobj) => {
          const xml = apiobj.responseXML;
          const pages = $(xml).find("rd").map((_index, element) => {
            return $(element).attr("title");
          }).get();
          if (!pages.length) {
            return;
          }
          const redirectDeleter = new Morebits.batchOperation(window.wgULS("正在删除到 ", "正在刪除到 ") + apiobj.params.page + window.wgULS(" 的重定向", " 的重新導向"));
          redirectDeleter.setOption("chunkSize", Twinkle.getPref("batchChunks"));
          redirectDeleter.setPageList(pages);
          redirectDeleter.run((pageName) => {
            const ysarchives_page = new Morebits.wiki.page(pageName, window.wgULS("正在删除 ", "正在刪除 ") + pageName);
            ysarchives_page.setEditSummary("[[LIB:CSD#G9|G9]]: ".concat(window.wgULS("指向已删页面“", "指向已刪頁面「")).concat(apiobj.params.page).concat(window.wgULS("”的重定向", "」的重新導向")));
            ysarchives_page.setChangeTags(Twinkle.changeTags);
            ysarchives_page.deletePage(redirectDeleter.workerSuccess, redirectDeleter.workerFailure);
          });
        },
        deleteTalk: (apiobj) => {
          const xml = apiobj.responseXML;
          const exists = $(xml).find("page:not([missing])").length > 0;
          if (!exists) {
            return;
          }
          const page = new Morebits.wiki.page(apiobj.params.talkPage, window.wgULS("正在删除页面 ", "正在刪除頁面 ") + apiobj.params.page + window.wgULS(" 的讨论页", " 的討論頁"));
          page.setEditSummary("[[LIB:CSD#G9|G9]]: ".concat(window.wgULS("已删页面“", "已刪頁面「")).concat(apiobj.params.page).concat(window.wgULS("”的[[Help:讨论页|讨论页]]", "」的[[Help:討論頁|討論頁]]")));
          page.setChangeTags(Twinkle.changeTags);
          page.deletePage();
        },
        unlinkBacklinksMain: (apiobj) => {
          const xml = apiobj.responseXML;
          const pages = $(xml).find("bl").map((_index, element) => {
            return $(element).attr("title");
          }).get();
          if (!pages.length) {
            return;
          }
          const unlinker = new Morebits.batchOperation("正在取消到 ".concat(apiobj.params.page).concat(window.wgULS(" 的链入", " 的連入")));
          unlinker.setOption("chunkSize", Twinkle.getPref("batchChunks"));
          unlinker.setPageList(pages);
          unlinker.run((pageName) => {
            const ysarchives_page = new Morebits.wiki.page(pageName, "正在取消 ".concat(pageName).concat(window.wgULS(" 上的链入", " 上的連入")));
            const params = {
              ...apiobj.params
            };
            params.title = pageName;
            params.unlinker = unlinker;
            ysarchives_page.setCallbackParameters(params);
            ysarchives_page.load(Twinkle.batchdelete.callbacks.unlinkBacklinks);
          });
        },
        unlinkBacklinks: (pageobj) => {
          const params = pageobj.getCallbackParameters();
          if (!pageobj.exists()) {
            params.unlinker.workerSuccess(pageobj);
            return;
          }
          let text;
          if (params.title in Twinkle.batchdelete.unlinkCache) {
            text = Twinkle.batchdelete.unlinkCache[params.title];
          } else {
            text = pageobj.getPageText();
          }
          const old_text = text;
          const ysarchives_page = new Morebits.wikitext.page(text);
          text = ysarchives_page.removeLink(params.page).getText();
          Twinkle.batchdelete.unlinkCache[params.title] = text;
          if (text === old_text) {
            params.unlinker.workerSuccess(pageobj);
            return;
          }
          pageobj.setEditSummary(window.wgULS("取消到已删页面", "取消到已刪頁面") + params.page + window.wgULS("的链入", "的連入"));
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setPageText(text);
          pageobj.setCreateOption("nocreate");
          pageobj.setMaxConflictRetries(10);
          pageobj.save(params.unlinker.workerSuccess, params.unlinker.workerFailure);
        },
        unlinkImageInstancesMain: (apiobj) => {
          const xml = apiobj.responseXML;
          const pages = $(xml).find("iu").map((_index, element) => {
            return $(element).attr("title");
          }).get();
          if (!pages.length) {
            return;
          }
          const unlinker = new Morebits.batchOperation("正在取消到 ".concat(apiobj.params.page).concat(window.wgULS(" 的链入", " 的連入")));
          unlinker.setOption("chunkSize", Twinkle.getPref("batchChunks"));
          unlinker.setPageList(pages);
          unlinker.run((pageName) => {
            const ysarchives_page = new Morebits.wiki.page(pageName, "取消 ".concat(pageName).concat(window.wgULS(" 的文件使用", " 的檔案使用")));
            const params = {
              ...apiobj.params
            };
            params.title = pageName;
            params.unlinker = unlinker;
            ysarchives_page.setCallbackParameters(params);
            ysarchives_page.load(Twinkle.batchdelete.callbacks.unlinkImageInstances);
          });
        },
        unlinkImageInstances: (pageobj) => {
          const params = pageobj.getCallbackParameters();
          if (!pageobj.exists()) {
            params.unlinker.workerSuccess(pageobj);
            return;
          }
          const image = params.page.replace(new RegExp("^".concat(Morebits.namespaceRegex(6), ":")), "");
          let text;
          if (params.title in Twinkle.batchdelete.unlinkCache) {
            text = Twinkle.batchdelete.unlinkCache[params.title];
          } else {
            text = pageobj.getPageText();
          }
          const old_text = text;
          const ysarchives_page = new Morebits.wikitext.page(text);
          text = ysarchives_page.commentOutImage(image, window.wgULS("因文件已删，故注解", "因檔案已刪，故註解")).getText();
          Twinkle.batchdelete.unlinkCache[params.title] = text;
          if (text === old_text) {
            pageobj.getStatusElement().error("在 ".concat(pageobj.getPageName(), " 上取消 ").concat(image).concat(window.wgULS(" 的文件使用失败", " 的檔案使用失敗")));
            params.unlinker.workerFailure(pageobj);
            return;
          }
          pageobj.setEditSummary(window.wgULS("取消使用已被删除文件", "取消使用已被刪除檔案") + image + window.wgULS("，因为：", "，因為：") + params.reason);
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setPageText(text);
          pageobj.setCreateOption("nocreate");
          pageobj.setMaxConflictRetries(10);
          pageobj.save(params.unlinker.workerSuccess, params.unlinker.workerFailure);
        }
      };
      Twinkle.addInitCallback(Twinkle.batchdelete, "batchdelete");
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinklebatchundelete.js
var twinklebatchundelete_exports = {};
var init_twinklebatchundelete = __esm({
  "src/Twinkle/modules/twinklebatchundelete.js"() {
    "use strict";
    /*! Twinkle.js - twinklebatchundelete.js */
    (function twinklebatchundelete($) {
      Twinkle.batchundelete = () => {
        if (!Morebits.userIsSysop || !mw.config.get("wgArticleId") || mw.config.get("wgNamespaceNumber") !== mw.config.get("wgNamespaceIds").user && mw.config.get("wgNamespaceNumber") !== mw.config.get("wgNamespaceIds").project) {
          return;
        }
        Twinkle.addPortletLink(Twinkle.batchundelete.callback, window.wgULS("批复", "批復"), "tw-batch-undel", window.wgULS("反删除页面", "反刪除頁面"));
      };
      Twinkle.batchundelete.callback = () => {
        const Window = new Morebits.simpleWindow(600, 400);
        Window.setScriptName("Twinkle");
        Window.setTitle(window.wgULS("批量反删除", "批次反刪除"));
        Window.addFooterLink(window.wgULS("Twinkle帮助", "Twinkle說明"), "H:TW/DOC#batchundelete");
        const form = new Morebits.quickForm(Twinkle.batchundelete.callback.evaluate);
        form.append({
          type: "checkbox",
          list: [{
            label: window.wgULS("若存在已删除的讨论页，也恢复", "若存在已刪除的討論頁，也恢復"),
            name: "undel_talk",
            value: "undel_talk",
            checked: true
          }]
        });
        form.append({
          type: "input",
          name: "reason",
          label: "理由：",
          size: 60
        });
        const statusdiv = document.createElement("div");
        statusdiv.style.padding = "15px";
        Window.setContent(statusdiv);
        Morebits.status.init(statusdiv);
        Window.display();
        const query = {
          action: "query",
          generator: "links",
          prop: "info",
          inprop: "protection",
          titles: mw.config.get("wgPageName"),
          gpllimit: Twinkle.getPref("batchMax")
        };
        const statelem = new Morebits.status(window.wgULS("抓取页面列表", "抓取頁面列表"));
        const ysarchives_api = new Morebits.wiki.api(window.wgULS("加载中…", "載入中…"), query, (apiobj) => {
          const xml = apiobj.responseXML;
          const $pages = $(xml).find("page[missing]");
          const list = [];
          $pages.each((_index, page) => {
            const $page = $(page);
            const title = $page.attr("title");
            const $editprot = $page.find('pr[type="create"][level="sysop"]');
            const isProtected = $editprot.length > 0;
            list[list.length] = {
              label: title + (isProtected ? "（".concat(window.wgULS("全保护，", "全保護，")).concat($editprot.attr("expiry") === "infinity" ? window.wgULS("无限期", "無限期") : "".concat(new Morebits.date($editprot.attr("expiry")).calendar("utc"), " (UTC)").concat(window.wgULS("过期", "過期")), "）") : ""),
              value: title,
              checked: true,
              style: isProtected ? "color: #f00" : ""
            };
          });
          apiobj.params.form.append({
            type: "header",
            label: window.wgULS("待恢复页面", "待恢復頁面")
          });
          apiobj.params.form.append({
            type: "button",
            label: window.wgULS("全选", "全選"),
            event: (e) => {
              $(Morebits.quickForm.getElements(e.target.form, "pages")).prop("checked", true);
            }
          });
          apiobj.params.form.append({
            type: "button",
            label: window.wgULS("全不选", "全不選"),
            event: (e) => {
              $(Morebits.quickForm.getElements(e.target.form, "pages")).prop("checked", false);
            }
          });
          apiobj.params.form.append({
            type: "checkbox",
            name: "pages",
            shiftClickSupport: true,
            list
          });
          apiobj.params.form.append({
            type: "submit"
          });
          const result = apiobj.params.form.render();
          apiobj.params.Window.setContent(result);
        }, statelem);
        ysarchives_api.params = {
          form,
          Window
        };
        ysarchives_api.post();
      };
      Twinkle.batchundelete.callback.evaluate = (event) => {
        Morebits.wiki.actionCompleted.notice = window.wgULS("反删除已完成", "反刪除已完成");
        const numProtected = $(Morebits.quickForm.getElements(event.target, "pages")).filter((_index, element) => {
          return element.checked && element.nextElementSibling.style.color === "red";
        }).length;
        if (numProtected > 0 && !confirm(window.wgULS("您正要反删除 ", "您正要反刪除 ") + numProtected + window.wgULS(" 个全保护页面，您确定吗？", " 個全保護頁面，您確定嗎？"))) {
          return;
        }
        const pages = event.target.getChecked("pages");
        const reason = event.target.reason.value;
        const undel_talk = event.target.reason.value;
        if (!reason) {
          void mw.notify("您需要指定理由。", {
            type: "warn",
            tag: "twinklebatchundelete"
          });
          return;
        }
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(event.target);
        if (!pages) {
          Morebits.status.error(window.wgULS("错误", "錯誤"), window.wgULS("没什么要反删除的，取消操作", "沒什麼要反刪除的，取消操作"));
          return;
        }
        const pageUndeleter = new Morebits.batchOperation(window.wgULS("反删除页面", "反刪除頁面"));
        pageUndeleter.setOption("chunkSize", Twinkle.getPref("batchChunks"));
        pageUndeleter.setOption("preserveIndividualStatusLines", true);
        pageUndeleter.setPageList(pages);
        pageUndeleter.run((pageName) => {
          const params = {
            page: pageName,
            undel_talk,
            reason,
            pageUndeleter
          };
          const ysarchives_page = new Morebits.wiki.page(pageName, window.wgULS("反删除页面", "反刪除頁面") + pageName);
          ysarchives_page.setCallbackParameters(params);
          ysarchives_page.setEditSummary("".concat(reason, " (批量)"));
          ysarchives_page.setChangeTags(Twinkle.changeTags);
          ysarchives_page.suppressProtectWarning();
          ysarchives_page.setMaxRetries(3);
          ysarchives_page.undeletePage(Twinkle.batchundelete.callbacks.doExtras, pageUndeleter.workerFailure);
        });
      };
      Twinkle.batchundelete.callbacks = {
        // this stupid parameter name is a temporary thing until I implement an overhaul
        // of Morebits.wiki.* callback parameters
        doExtras: (thingWithParameters) => {
          const params = thingWithParameters.parent ? thingWithParameters.parent.getCallbackParameters() : thingWithParameters.getCallbackParameters();
          params.pageUndeleter.workerSuccess(thingWithParameters);
          let query;
          let ysarchives_api;
          if (params.undel_talk) {
            const talkpagename = new mw.Title(params.page).getTalkPage().getPrefixedText();
            if (talkpagename !== params.page) {
              query = {
                action: "query",
                prop: "deletedrevisions",
                drvprop: "ids",
                drvlimit: 1,
                titles: talkpagename
              };
              ysarchives_api = new Morebits.wiki.api(window.wgULS("检查讨论页的已删版本", "檢查討論頁的已刪版本"), query, Twinkle.batchundelete.callbacks.undeleteTalk);
              ysarchives_api.params = params;
              ysarchives_api.params.talkPage = talkpagename;
              ysarchives_api.post();
            }
          }
        },
        undeleteTalk: (apiobj) => {
          const xml = apiobj.responseXML;
          const exists = $(xml).find("page:not([missing])").length > 0;
          const delrevs = $(xml).find("rev").attr("revid");
          if (exists || !delrevs) {
            return;
          }
          const page = new Morebits.wiki.page(apiobj.params.talkPage, window.wgULS("正在反删除", "正在反刪除") + apiobj.params.page + window.wgULS("的讨论页", "的討論頁"));
          page.setEditSummary(window.wgULS("反删除“", "反刪除「") + apiobj.params.page + window.wgULS("”的[[Help:讨论页|讨论页]]", "」的[[Help:討論頁|討論頁]]"));
          page.setChangeTags(Twinkle.changeTags);
          page.undeletePage();
        }
      };
      Twinkle.addInitCallback(Twinkle.batchundelete, "batchundelete");
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinklebatchprotect.js
var twinklebatchprotect_exports = {};
var init_twinklebatchprotect = __esm({
  "src/Twinkle/modules/twinklebatchprotect.js"() {
    "use strict";
    /*! Twinkle.js - twinklebatchprotect.js */
    (function twinklebatchprotect($) {
      Twinkle.batchprotect = () => {
        if (Morebits.userIsSysop && (mw.config.get("wgArticleId") > 0 && [2, 4].includes(mw.config.get("wgNamespaceNumber")) || mw.config.get("wgNamespaceNumber") === 14 || mw.config.get("wgCanonicalSpecialPageName") === "Prefixindex")) {
          Twinkle.addPortletLink(Twinkle.batchprotect.callback, "批保", "tw-pbatch", "批量保护链出页面");
        }
      };
      Twinkle.batchprotect.unlinkCache = {};
      Twinkle.batchprotect.callback = () => {
        const Window = new Morebits.simpleWindow(600, 400);
        Window.setTitle("批保");
        Window.setScriptName("Twinkle");
        Window.addFooterLink("保护条例", "LIB:PROT");
        Window.addFooterLink(window.wgULS("帮助文档", "幫助文檔"), "H:TW/DOC#保护");
        Window.addFooterLink(window.wgULS("问题反馈", "問題反饋"), "HT:TW");
        const form = new Morebits.quickForm(Twinkle.batchprotect.callback.evaluate);
        form.append({
          type: "checkbox",
          event: Twinkle.protect.formevents.editmodify,
          list: [{
            label: "修改编辑保护",
            value: "editmodify",
            name: "editmodify",
            tooltip: "仅限现有页面。",
            checked: true
          }]
        });
        form.append({
          type: "select",
          name: "editlevel",
          label: "编辑权限：",
          event: Twinkle.protect.formevents.editlevel,
          list: Twinkle.protect.protectionLevels
        });
        form.append({
          type: "select",
          name: "editexpiry",
          label: "终止时间：",
          event: (event) => {
            if (event.target.value === "custom") {
              Twinkle.protect.doCustomExpiry(event.target);
            }
          },
          list: Twinkle.protect.protectionLengths
          // Default (2 days) set after render
        });
        form.append({
          type: "checkbox",
          event: Twinkle.protect.formevents.movemodify,
          list: [{
            label: "修改移动保护",
            value: "movemodify",
            name: "movemodify",
            tooltip: "仅限现有页面。",
            checked: true
          }]
        });
        form.append({
          type: "select",
          name: "movelevel",
          label: "移动权限：",
          event: Twinkle.protect.formevents.movelevel,
          list: Twinkle.protect.protectionLevels.filter(
            // Autoconfirmed is required for a move, redundant
            (protLevel) => {
              return protLevel.value !== "autoconfirmed";
            }
          )
        });
        form.append({
          type: "select",
          name: "moveexpiry",
          label: "终止时间：",
          event: (event) => {
            if (event.target.value === "custom") {
              Twinkle.protect.doCustomExpiry(event.target);
            }
          },
          list: Twinkle.protect.protectionLengths
          // Default (2 days) set after render
        });
        form.append({
          type: "checkbox",
          event: (event) => {
            event.target.form.createlevel.disabled = !event.target.checked;
            event.target.form.createexpiry.disabled = !event.target.checked || event.target.form.createlevel.value === "all";
            event.target.form.createlevel.style.color = event.target.checked ? "" : "transparent";
            event.target.form.createexpiry.style.color = event.target.checked ? "" : "transparent";
          },
          list: [{
            label: "修改创建保护",
            value: "createmodify",
            name: "createmodify",
            tooltip: "仅限不存在的页面。",
            checked: true
          }]
        });
        form.append({
          type: "select",
          name: "createlevel",
          label: "创建权限：",
          event: Twinkle.protect.formevents.createlevel,
          list: Twinkle.protect.protectionLevels
        });
        form.append({
          type: "select",
          name: "createexpiry",
          label: "终止时间：",
          event: (event) => {
            if (event.target.value === "custom") {
              Twinkle.protect.doCustomExpiry(event.target);
            }
          },
          list: Twinkle.protect.protectionLengths
          // Default (indefinite) set after render
        });
        form.append({
          type: "header",
          label: ""
          // horizontal rule
        });
        form.append({
          type: "input",
          name: "reason",
          label: "理由（保护日志）",
          size: 60
        });
        const query = {
          action: "query",
          prop: "revisions|info|imageinfo",
          rvprop: "size|user",
          inprop: "protection",
          format: "json"
        };
        if (mw.config.get("wgNamespaceNumber") === 14) {
          query.generator = "categorymembers";
          query.gcmtitle = mw.config.get("wgPageName");
          query.gcmlimit = Twinkle.getPref("batchMax");
        } else if (mw.config.get("wgCanonicalSpecialPageName") === "Prefixindex") {
          query.generator = "allpages";
          query.gapnamespace = mw.util.getParamValue("namespace") || document.querySelectorAll("select[name=namespace]")[0].value;
          query.gapprefix = mw.util.getParamValue("prefix") || document.querySelectorAll("input[name=prefix]")[0].value;
          query.gaplimit = Twinkle.getPref("batchMax");
        } else {
          query.generator = "links";
          query.titles = mw.config.get("wgPageName");
          query.gpllimit = Twinkle.getPref("batchMax");
        }
        const statusdiv = document.createElement("div");
        statusdiv.style.padding = "15px";
        Window.setContent(statusdiv);
        Morebits.status.init(statusdiv);
        Window.display();
        const statelem = new Morebits.status("抓取页面列表");
        const ysarchives_api = new Morebits.wiki.api("加载中……", query, (apiobj) => {
          const response = apiobj.getResponse();
          const pages = response.query && response.query.pages || [];
          const list = [];
          pages.sort(Twinkle.sortByNamespace);
          var _iterator65 = _createForOfIteratorHelper(pages), _step65;
          try {
            for (_iterator65.s(); !(_step65 = _iterator65.n()).done; ) {
              const page = _step65.value;
              const metadata = [];
              const missing = !!page.missing;
              let editProt;
              if (missing) {
                metadata[metadata.length] = "页面不存在";
                editProt = page.protection.findLast((protection) => {
                  return protection.type === "create" && protection.level === "sysop";
                });
              } else {
                if (page.redirect) {
                  metadata[metadata.length] = "重定向";
                }
                if (page.ns === 6) {
                  metadata[metadata.length] = ("上传者：".concat(page.imageinfo[0].user), "最后编辑者：".concat(page.revisions[0].user));
                } else {
                  metadata[metadata.length] = "".concat(mw.language.convertNumber(page.revisions[0].size), "字节");
                }
                editProt = page.protection.findLast((protection) => {
                  return protection.type === "edit" && protection.level === "sysop";
                });
              }
              if (editProt) {
                metadata[metadata.length] = "".concat(missing ? "白纸" : "", "全保护").concat(editProt.expiry === "infinity" ? "（永久）" : "（".concat(new Morebits.date(editProt.expiry).calendar("utc"), " (UTC)过期）"));
              }
              const {
                title
              } = page;
              list[list.length] = {
                label: title + (metadata.length > 0 ? " (".concat(metadata.join("; "), ")") : ""),
                value: title,
                checked: true,
                style: editProt ? "color: #f00" : ""
              };
            }
          } catch (err) {
            _iterator65.e(err);
          } finally {
            _iterator65.f();
          }
          form.append({
            type: "header",
            label: "待保护页面"
          });
          form.append({
            type: "button",
            label: "全选",
            event: (event) => {
              $(Morebits.quickForm.getElements(event.target.form, "pages")).prop("checked", true);
            }
          });
          form.append({
            type: "button",
            label: "全不选",
            event: (event) => {
              $(Morebits.quickForm.getElements(event.target.form, "pages")).prop("checked", false);
            }
          });
          form.append({
            type: "checkbox",
            name: "pages",
            shiftClickSupport: true,
            list
          });
          form.append({
            type: "submit"
          });
          const result = form.render();
          Window.setContent(result);
          result.editexpiry.value = "2 days";
          result.moveexpiry.value = "2 days";
          result.createexpiry.value = "infinity";
          var _iterator66 = _createForOfIteratorHelper(Morebits.quickForm.getElements(result, "个页面")), _step66;
          try {
            for (_iterator66.s(); !(_step66 = _iterator66.n()).done; ) {
              const links = _step66.value;
              Twinkle.generateArrowLinks(links);
            }
          } catch (err) {
            _iterator66.e(err);
          } finally {
            _iterator66.f();
          }
        }, statelem);
        ysarchives_api.post();
      };
      Twinkle.batchprotect.currentProtectCounter = 0;
      Twinkle.batchprotect.currentprotector = 0;
      Twinkle.batchprotect.callback.evaluate = (event) => {
        Morebits.wiki.actionCompleted.notice = "批量保护完成";
        const form = event.target;
        const numProtected = $(Morebits.quickForm.getElements(form, "个页面")).filter((_index, element) => {
          return element.checked && element.nextElementSibling.style.color === "#f00";
        }).length;
        if (numProtected > 0 && !confirm("您即将对".concat(mw.language.convertNumber(numProtected), "个全保护页面进行操作。您确定吗？"))) {
          return;
        }
        const input = Morebits.quickForm.getInputData(form);
        if (!input.reason) {
          void mw.notify("您必须给出一个理由。", {
            type: "warn",
            tag: "twinklebatchprotect"
          });
          return;
        }
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(form);
        if (input.pages.length === 0) {
          Morebits.status.error("Error", "待保护页面不存在，程序终止");
          return;
        }
        const batchOperation = new Morebits.batchOperation("应用保护设置");
        batchOperation.setOption("chunkSize", Twinkle.getPref("batchChunks"));
        batchOperation.setOption("preserveIndividualStatusLines", true);
        batchOperation.setPageList(input.pages);
        batchOperation.run((pageName) => {
          const query = {
            action: "query",
            titles: pageName,
            format: "json"
          };
          const ysarchives_api = new Morebits.wiki.api("正在检查页面“".concat(pageName, "”是否存在"), query, Twinkle.batchprotect.callbacks.main, null, batchOperation.workerFailure);
          ysarchives_api.params = {
            page: pageName,
            batchOperation,
            ...input
          };
          ysarchives_api.post();
        });
      };
      Twinkle.batchprotect.callbacks = {
        main: (apiobj) => {
          const response = apiobj.getResponse();
          if (response.query.normalized) {
            apiobj.params.page = response.query.normalized[0].to;
          }
          const exists = !response.query.pages[0].missing;
          const page = new Morebits.wiki.page(apiobj.params.page, "正在保护".concat(apiobj.params.page));
          let takenAction = false;
          if (exists && apiobj.params.editmodify) {
            page.setEditProtection(apiobj.params.editlevel, apiobj.params.editexpiry);
            takenAction = true;
          }
          if (exists && apiobj.params.movemodify) {
            page.setMoveProtection(apiobj.params.movelevel, apiobj.params.moveexpiry);
            takenAction = true;
          }
          if (!exists && apiobj.params.createmodify) {
            page.setCreateProtection(apiobj.params.createlevel, apiobj.params.createexpiry);
            takenAction = true;
          }
          if (!takenAction) {
            Morebits.status.warn("正在保护“".concat(apiobj.params.page), "”页面".concat(exists ? "存在" : "不存在", "；无事可做，跳过"));
            apiobj.params.batchOperation.workerFailure(apiobj);
            return;
          }
          page.setEditSummary(apiobj.params.reason);
          page.setChangeTags(Twinkle.changeTags);
          page.protect(apiobj.params.batchOperation.workerSuccess, apiobj.params.batchOperation.workerFailure);
        }
      };
      Twinkle.addInitCallback(Twinkle.batchprotect, "batchprotect");
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinkleclose.js
var twinkleclose_exports = {};
var init_twinkleclose = __esm({
  "src/Twinkle/modules/twinkleclose.js"() {
    "use strict";
    /*! Twinkle.js - twinkleclose.js */
    (function twinkleclose($) {
      const $body = $("body");
      Twinkle.close = () => {
        if (Twinkle.getPref("XfdClose") === "hide" || !/^有兽档案馆([_ ]talk)?:存废讨论\/记录(?:\/\d+){3}$/.test(mw.config.get("wgPageName"))) {
          return;
        }
        mw.hook("wikipage.content").add((item) => {
          if (item.attr("id") === "mw-content-text") {
            Twinkle.close.addLinks();
          }
        });
      };
      Twinkle.close.addLinks = () => {
        const spanTag = (color, content) => {
          const span = document.createElement("span");
          span.style.color = color;
          span.appendChild(document.createTextNode(content));
          return span;
        };
        $body.find("h1:has(.mw-headline),h2:has(.mw-headline),h3:has(.mw-headline),h4:has(.mw-headline),h5:has(.mw-headline),h6:has(.mw-headline)", "#bodyContent").each((index, element) => {
          element.dataset.section = index + 1;
        });
        const selector = ":has(.mw-headline a:only-of-type):not(:has(+ div.NavFrame))";
        const titles = $body.find("#bodyContent").find("h2".concat(selector, ":not(:has(+ p + h3)), h3").concat(selector));
        const delNode = document.createElement("strong");
        const delLink = document.createElement("a");
        delLink.appendChild(spanTag("Black", "["));
        delLink.appendChild(spanTag("Red", window.wgULS("关闭讨论", "關閉討論")));
        delLink.appendChild(spanTag("Black", "]"));
        delNode.appendChild(delLink);
        var _iterator67 = _createForOfIteratorHelper(titles), _step67;
        try {
          for (_iterator67.s(); !(_step67 = _iterator67.n()).done; ) {
            const current = _step67.value;
            const headlinehref = $(current).find(".mw-headline a:not(.ext-discussiontools-init-section-subscribe-link)").attr("href");
            if (headlinehref !== void 0) {
              let title = null;
              if (headlinehref.includes("redlink=1")) {
                title = headlinehref.slice(19, -22);
              } else {
                const m = headlinehref.match(/\/wiki\/([^?]+)/, "$1");
                if (m !== null) {
                  [, title] = m;
                }
              }
              if (title !== null) {
                title = decodeURIComponent(title);
                title = title.replace(/_/g, " ");
                const pagenotexist = $(current).find(".mw-headline a").hasClass("new");
                const {
                  section
                } = current.dataset;
                const [node] = current.querySelectorAll(".mw-headline");
                node.appendChild(document.createTextNode(" "));
                const tmpNode = delNode.cloneNode(true);
                tmpNode.firstChild.href = "#".concat(section);
                $(tmpNode.firstChild).on("click", () => {
                  Twinkle.close.callback(title, section, pagenotexist);
                  return false;
                });
                node.appendChild(tmpNode);
              }
            }
          }
        } catch (err) {
          _iterator67.e(err);
        } finally {
          _iterator67.f();
        }
      };
      Twinkle.close.codes = [{
        key: window.wgULS("请求无效", "請求無效"),
        value: {
          ir: {
            label: window.wgULS("请求无效", "請求無效"),
            action: "keep"
          },
          rep: {
            label: window.wgULS("重复提出，无效", "重複提出，無效"),
            action: "keep"
          },
          ne: {
            label: window.wgULS("目标页面或文件不存在，无效", "目標頁面或檔案不存在，無效"),
            action: "keep"
          },
          nq: {
            label: window.wgULS("提删者未获取提删资格，无效", "提刪者未取得提刪資格，無效"),
            action: "keep"
          }
        }
      }, {
        key: "保留",
        value: {
          k: {
            label: "保留",
            action: "keep",
            adminonly: true
          },
          sk: {
            label: "快速保留",
            action: "keep"
          },
          tk: {
            label: window.wgULS("暂时保留，改挂维护模板（关注度等）", "暫時保留，改掛維護模板（關注度等）"),
            value: window.wgULS("暂时保留", "暫時保留"),
            action: "keep"
          },
          rr: {
            label: window.wgULS("请求理由消失", "請求理由消失"),
            action: "keep",
            selected: Twinkle.getPref("XfdClose") === "nonadminonly"
          },
          dan: {
            label: window.wgULS("删后重建", "刪後重建"),
            action: "keep",
            adminonly: true
          }
        }
      }, {
        key: window.wgULS("删除", "刪除"),
        value: {
          d: {
            label: window.wgULS("删除", "刪除"),
            action: "del",
            adminonly: true,
            selected: Twinkle.getPref("XfdClose") === "all"
          },
          ic: {
            label: window.wgULS("图像因侵权被删", "圖像因侵權被刪"),
            action: "del",
            adminonly: true
          }
        }
      }, {
        key: window.wgULS("快速删除", "快速刪除"),
        value: {
          sd: {
            label: window.wgULS("快速删除", "快速刪除"),
            action: "del"
          },
          lssd: {
            label: window.wgULS("无来源或著作权信息，快速删除", "無來源或版權資訊，快速刪除"),
            action: "del"
          },
          svg: {
            label: window.wgULS("已改用SVG图形，快速删除", "已改用SVG圖形，快速刪除"),
            action: "del"
          },
          drep: {
            label: window.wgULS("多次被删除，条目锁定", "多次被刪除，條目鎖定"),
            action: "del",
            adminonly: true
          }
        }
      }, {
        key: window.wgULS("其他处理方法", "其他處理方法"),
        value: {
          c: {
            label: window.wgULS("转交侵权", "轉交侵權"),
            action: "noop"
          },
          r: {
            label: "重定向",
            action: "keep",
            adminonly: true
          },
          cr: {
            label: window.wgULS("分类重定向", "分類重定向"),
            action: "keep",
            adminonly: true
          },
          m: {
            label: window.wgULS("移动", "移動"),
            action: "keep",
            adminonly: true
          },
          merge: {
            label: window.wgULS("并入", "併入"),
            action: "keep",
            adminonly: true
          },
          mergeapproved: {
            label: window.wgULS("允许并入", "允許併入"),
            action: "keep",
            adminonly: true
          },
          nc: {
            label: window.wgULS("无共识暂时保留", "無共識暫時保留"),
            value: window.wgULS("无共识", "無共識"),
            action: "keep"
          }
        }
      }];
      Twinkle.close.callback = (title, section, noop) => {
        const Window = new Morebits.simpleWindow(410, 200);
        Window.setTitle("关闭存废讨论 · ".concat(title));
        Window.setScriptName("Twinkle");
        Window.addFooterLink("存废讨论设置", "H:TW/PREF#关闭存废讨论");
        Window.addFooterLink("Twinkle帮助", "H:TW/DOC#关闭存废讨论");
        const form = new Morebits.quickForm(Twinkle.close.callback.evaluate);
        form.append({
          type: "select",
          label: "处理结果：",
          name: "sub_group",
          event: Twinkle.close.callback.change_code
        });
        form.append({
          type: "input",
          name: "sdreason",
          label: "速删理由：",
          tooltip: "用于删除日志，使用{{delete}}的参数格式，例如 A1 或 A1|G1",
          hidden: true
        });
        form.append({
          type: "input",
          name: "remark",
          label: "补充说明："
        });
        form.append({
          type: "checkbox",
          list: [{
            label: "只关闭讨论，不进行其他操作",
            value: "noop",
            name: "noop",
            event: Twinkle.close.callback.change_operation,
            checked: noop
          }]
        });
        if (new mw.Title(title).namespace % 2 === 0 && new mw.Title(title).namespace !== 2) {
          form.append({
            type: "checkbox",
            list: [{
              label: "删除关联的讨论页",
              value: "talkpage",
              name: "talkpage",
              tooltip: "删除时附带删除此页面的讨论页。",
              checked: true,
              event: (e) => {
                e.stopPropagation();
              }
            }]
          });
        }
        form.append({
          type: "checkbox",
          list: [{
            label: "删除重定向页",
            value: "redirects",
            name: "redirects",
            tooltip: "删除到此页的重定向。",
            checked: true,
            event: (e) => {
              e.stopPropagation();
            }
          }]
        });
        form.append({
          type: "submit"
        });
        const result = form.render();
        Window.setContent(result);
        Window.display();
        const [sub_group] = result.querySelectorAll("select");
        const resultData = {
          title,
          section: Number.parseInt(section, 10),
          noop
        };
        $(result).data("resultData", resultData);
        const createEntries = (contents, container) => {
          for (var _i16 = 0, _Object$entries9 = Object.entries(contents); _i16 < _Object$entries9.length; _i16++) {
            const [itemKey, itemProperties] = _Object$entries9[_i16];
            const key = typeof itemKey === "string" ? itemKey : itemProperties.value;
            const elem = new Morebits.quickForm.element({
              type: "option",
              label: "".concat(key, "：").concat(itemProperties.label),
              value: key,
              selected: itemProperties.selected,
              disabled: Twinkle.getPref("XfdClose") !== "all" && itemProperties.adminonly || itemProperties.disabled
            });
            const elemRendered = container.appendChild(elem.render());
            $(elemRendered).data("messageData", itemProperties);
          }
        };
        var _iterator68 = _createForOfIteratorHelper(Twinkle.close.codes), _step68;
        try {
          for (_iterator68.s(); !(_step68 = _iterator68.n()).done; ) {
            const group = _step68.value;
            let optgroup = new Morebits.quickForm.element({
              type: "optgroup",
              label: group.key
            });
            optgroup = optgroup.render();
            sub_group.appendChild(optgroup);
            createEntries(group.value, optgroup);
          }
        } catch (err) {
          _iterator68.e(err);
        } finally {
          _iterator68.f();
        }
        const event = document.createEvent("Event");
        event.initEvent("change", true, true);
        result.sub_group.dispatchEvent(event);
      };
      Twinkle.close.callback.change_operation = (e) => {
        const noop = e.target.checked;
        const code = e.target.form.sub_group.value;
        const messageData = $(e.target.form.sub_group).find('option[value="'.concat(code, '"]')).data("messageData");
        const {
          talkpage
        } = e.target.form;
        const {
          redirects
        } = e.target.form;
        if (noop || messageData.action === "keep") {
          if (talkpage) {
            talkpage.checked = false;
            talkpage.disabled = true;
          }
          redirects.checked = false;
          redirects.disabled = true;
        } else {
          if (talkpage) {
            talkpage.checked = true;
            talkpage.disabled = false;
          }
          redirects.checked = true;
          redirects.disabled = false;
        }
      };
      Twinkle.close.callback.change_code = (e) => {
        const resultData = $(e.target.form).data("resultData");
        const messageData = $(e.target).find('option[value="'.concat(e.target.value, '"]')).data("messageData");
        const {
          noop
        } = e.target.form;
        const {
          talkpage
        } = e.target.form;
        const {
          redirects
        } = e.target.form;
        if (resultData.noop || messageData.action === "noop") {
          noop.checked = true;
          noop.disabled = true;
          if (talkpage) {
            talkpage.checked = false;
            talkpage.disabled = true;
          }
          redirects.checked = false;
          redirects.disabled = true;
        } else {
          noop.checked = false;
          noop.disabled = false;
          if (messageData.action === "keep") {
            if (talkpage) {
              talkpage.checked = false;
              talkpage.disabled = true;
            }
            redirects.checked = false;
            redirects.disabled = true;
          } else {
            if (talkpage) {
              talkpage.checked = true;
              talkpage.disabled = false;
            }
            redirects.checked = true;
            redirects.disabled = false;
          }
          if (e.target.value === "sd") {
            e.target.form.sdreason.parentElement.removeAttribute("hidden");
          } else {
            e.target.form.sdreason.parentElement.setAttribute("hidden", "");
          }
        }
      };
      Twinkle.close.callback.evaluate = (e) => {
        const code = e.target.sub_group.value;
        const resultData = $(e.target).data("resultData");
        const messageData = $(e.target.sub_group).find('option[value="'.concat(code, '"]')).data("messageData");
        const noop = e.target.noop.checked;
        const talkpage = e.target.talkpage && e.target.talkpage.checked;
        const redirects = e.target.redirects.checked;
        const params = {
          title: resultData.title,
          code,
          remark: e.target.remark.value,
          sdreason: e.target.sdreason.value,
          section: resultData.section,
          parentSection: resultData.parentSection,
          messageData,
          talkpage,
          redirects
        };
        Morebits.simpleWindow.setButtonsEnabled(false);
        Morebits.status.init(e.target);
        Morebits.wiki.actionCompleted.notice = "操作完成";
        if (noop || messageData.action === "noop") {
          Twinkle.close.callbacks.talkend(params);
        } else {
          switch (messageData.action) {
            case "del":
              Twinkle.close.callbacks.del(params);
              break;
            case "keep": {
              const ysarchives_page = new Morebits.wiki.page(params.title, "移除存废讨论模板");
              ysarchives_page.setCallbackParameters(params);
              ysarchives_page.load(Twinkle.close.callbacks.keep);
              break;
            }
            default:
              void mw.notify("关闭存废讨论：未定义 ".concat(code), {
                type: "warn",
                tag: "twinkleclose"
              });
          }
        }
      };
      Twinkle.close.callbacks = {
        del: (params) => {
          let query;
          let ysarchives_api;
          Morebits.wiki.addCheckpoint();
          const page = new Morebits.wiki.page(params.title, "删除页面");
          if (params.code === "sd") {
            Twinkle.speedy.callbacks.parseWikitext(params.title, "{{delete|".concat(params.sdreason, "}}"), (reason) => {
              reason = prompt("输入删除理由，或点击确定以接受自动生成的：", reason);
              if (reason === null) {
                page.getStatusElement().warn("没有执行删除");
                Twinkle.close.callbacks.talkend(params);
              } else {
                page.setEditSummary(reason);
                page.setChangeTags(Twinkle.changeTags);
                page.deletePage(() => {
                  page.getStatusElement().info("完成");
                  Twinkle.close.callbacks.talkend(params);
                });
              }
            });
          } else {
            page.setEditSummary("存废讨论通过：[[".concat(mw.config.get("wgPageName"), "#").concat(params.title, "]]"));
            page.setChangeTags(Twinkle.changeTags);
            page.deletePage(() => {
              page.getStatusElement().info("完成");
              Twinkle.close.callbacks.talkend(params);
            });
          }
          if (params.redirects) {
            query = {
              action: "query",
              titles: params.title,
              prop: "redirects",
              rdlimit: "max"
              // 500 is max for normal users, 5000 for bots and sysops
            };
            ysarchives_api = new Morebits.wiki.api("正在获取重定向", query, Twinkle.close.callbacks.deleteRedirectsMain);
            ysarchives_api.params = params;
            ysarchives_api.post();
          }
          if (params.talkPage) {
            const pageTitle = mw.Title.newFromText(params.title);
            if (pageTitle && pageTitle.namespace % 2 === 0 && pageTitle.namespace !== 2) {
              pageTitle.namespace++;
              query = {
                action: "query",
                titles: pageTitle.toText()
              };
              ysarchives_api = new Morebits.wiki.api("正在检查讨论页面是否存在", query, Twinkle.close.callbacks.deleteTalk);
              ysarchives_api.params = params;
              ysarchives_api.apiobj.params.talkPage = pageTitle.toText();
              ysarchives_api.post();
            }
          }
          Morebits.wiki.removeCheckpoint();
        },
        deleteRedirectsMain: (apiobj) => {
          const xml = apiobj.responseXML;
          const pages = $(xml).find("rd").map((_index, element) => {
            return $(element).attr("title");
          }).get();
          if (pages.length === 0) {
            return;
          }
          const redirectDeleter = new Morebits.batchOperation(window.wgULS("正在删除到 ", "正在刪除到 ") + apiobj.params.title + window.wgULS(" 的重定向", " 的重新導向"));
          redirectDeleter.setOption("chunkSize", Twinkle.getPref("batchdeleteChunks"));
          redirectDeleter.setPageList(pages);
          redirectDeleter.run((pageName) => {
            const ysarchives_page = new Morebits.wiki.page(pageName, window.wgULS("正在删除 ", "正在刪除 ") + pageName);
            ysarchives_page.setEditSummary("[[LIB:CSD#G5|G5]]：".concat(window.wgULS("指向已删页面“", "指向已刪頁面「")).concat(apiobj.params.title).concat(window.wgULS("”的重定向", "」的重新導向")));
            ysarchives_page.setChangeTags(Twinkle.changeTags);
            ysarchives_page.deletePage(redirectDeleter.workerSuccess, redirectDeleter.workerFailure);
          });
        },
        deleteTalk: (apiobj) => {
          const xml = apiobj.responseXML;
          const exists = $(xml).find("page:not([missing])").length > 0;
          if (!exists) {
            return;
          }
          const page = new Morebits.wiki.page(apiobj.params.talkPage, window.wgULS("正在删除页面 ", "正在刪除頁面 ") + apiobj.params.title + window.wgULS(" 的讨论页", " 的討論頁"));
          page.setEditSummary("[[LIB:CSD#G5|G5]]：".concat(window.wgULS("已删页面“", "已刪頁面「")).concat(apiobj.params.title).concat(window.wgULS("”的[[Help:讨论页|讨论页]]", "」的[[Help:討論頁|討論頁]]")));
          page.setChangeTags(Twinkle.changeTags);
          page.deletePage();
        },
        keep: (pageobj) => {
          const statelem = pageobj.getStatusElement();
          if (!pageobj.exists()) {
            statelem.error("页面不存在，可能已被删除");
            return;
          }
          const text = pageobj.getPageText();
          const params = pageobj.getCallbackParameters();
          const pagetitle = mw.Title.newFromText(params.title);
          if (pagetitle.getNamespaceId() % 2 === 0) {
            const talkpagetitle = new mw.Title(pagetitle.getMainText(), pagetitle.getNamespaceId() + 1);
            const talkpage = new Morebits.wiki.page(talkpagetitle.toString(), window.wgULS("标记讨论页", "標記討論頁"));
            const reason = params.messageData.value || params.messageData.label;
            const vfdkept = "{{Old vfd multi|".concat(mw.config.get("wgPageName").split("/").slice(2).join("/"), "|").concat(reason, "}}\n");
            talkpage.setPrependText(vfdkept);
            talkpage.setEditSummary("[[".concat(mw.config.get("wgPageName"), "#").concat(params.title, "]]：").concat(reason));
            talkpage.setChangeTags(Twinkle.changeTags);
            talkpage.setCreateOption("recreate");
            talkpage.prepend();
          }
          let newtext = text.replace(/<noinclude>\s*\{\{([rsaiftcmv]fd)(\|(?:\{\{[^{}]*\}\}|[^{}])*)?\}\}\s*<\/noinclude>\s*/gi, "");
          newtext = newtext.replace(/\{\{([rsaiftcmv]fd)(\|(?:\{\{[^{}]*\}\}|[^{}])*)?\}\}\s*/gi, "");
          if (params.code !== "tk") {
            newtext = newtext.replace(/{{(notability|fame|mair|知名度|重要性|显著性|顯著性|知名度不足|人物重要性|重要性不足|notable|关注度|关注度不足|關注度|關注度不足|重要|重要度)(\|(?:{{[^{}]*}}|[^{}])*)?}}\n*/gi, "");
            newtext = newtext.replace(/{{(substub|小小作品|cod|小小條目|小小条目)(\|(?:{{[^{}]*}}|[^{}])*)?}}\n*/gi, "");
          }
          if (params.code === "mergeapproved") {
            const tag = "{{".concat("subst:").concat("Merge approved/auto|discuss=".concat(mw.config.get("wgPageName"), "#").concat(params.title, "}}\n"));
            const ysarchives_page = new Morebits.wikitext.page(newtext);
            newtext = ysarchives_page.insertAfterTemplates(tag, Twinkle.hatnoteRegex).getText();
          }
          if (newtext === text) {
            statelem.warn("未找到存废讨论模板，可能已被移除");
            Twinkle.close.callbacks.talkend(params);
            return;
          }
          const editsummary = "存废讨论关闭：[[".concat(mw.config.get("wgPageName"), "#").concat(params.title, "]]");
          pageobj.setPageText(newtext);
          pageobj.setEditSummary(editsummary);
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setCreateOption("nocreate");
          pageobj.save(Twinkle.close.callbacks.keepComplete);
        },
        keepComplete: (pageobj) => {
          const params = pageobj.getCallbackParameters();
          Twinkle.close.callbacks.talkend(params);
        },
        talkend: (params) => {
          const ysarchives_page = new Morebits.wiki.page(mw.config.get("wgPageName"), "关闭讨论");
          ysarchives_page.setCallbackParameters(params);
          ysarchives_page.setPageSection(params.section);
          ysarchives_page.load(Twinkle.close.callbacks.saveTalk);
        },
        saveTalk: (pageobj) => {
          const statelem = pageobj.getStatusElement();
          let text = pageobj.getPageText();
          const params = pageobj.getCallbackParameters();
          if (text.includes("{{delh")) {
            statelem.error("讨论已被关闭");
            return;
          }
          const sbegin = text.includes("<section begin=backlog />");
          const send = text.includes("<section end=backlog />");
          text = text.replace("\n<section begin=backlog />", "");
          text = text.replace("\n<section end=backlog />", "");
          const bar = text.split("\n----\n");
          const split = bar[0].split("\n");
          text = "".concat(split[0], "\n{{delh|").concat(params.code, "}}\n");
          text += split.slice(1).join("\n");
          const reason = params.messageData.value || params.messageData.label;
          text += "\n<hr>\n: ".concat(reason);
          if (params.remark) {
            text += "：".concat(Morebits.string.appendPunctuation(params.remark));
          } else {
            text += "。";
          }
          if (!Morebits.userIsSysop) {
            text += "{{".concat("subst:").concat("NAC}}");
          }
          text += "--~~".concat("~~", "\n{{delf}}");
          if (bar[1]) {
            text += "\n----\n".concat(bar.slice(1).join("\n----\n"));
          }
          if (send) {
            text += "\n<section end=backlog />";
          }
          if (sbegin) {
            text += "\n<section begin=backlog />";
          }
          pageobj.setPageText(text);
          pageobj.setEditSummary("/* ".concat(params.title, " */ ").concat(reason));
          pageobj.setChangeTags(Twinkle.changeTags);
          pageobj.setCreateOption("nocreate");
          pageobj.save(Twinkle.close.callbacks.disableLink);
        },
        disableLink: (pageobj) => {
          const params = pageobj.getCallbackParameters();
          $("strong a[href=#".concat(params.section, "] span")).css("color", "#808080");
        }
      };
      Twinkle.addInitCallback(Twinkle.close, "close");
    })(jQuery);
  }
});
//! src/Twinkle/modules/twinkleconfig.js
var twinkleconfig_exports = {};
var init_twinkleconfig = __esm({
  "src/Twinkle/modules/twinkleconfig.js"() {
    "use strict";
    /*! Twinkle.js - twinkleconfig.js */
    (function twinkleconfig($) {
      const $body = $("body");
      Twinkle.config = {};
      Twinkle.config.watchlistEnums = {
        yes: window.wgULS("永久加入到监视列表", "永久加入到監視清單"),
        no: window.wgULS("不加入到监视列表", "不加入到監視清單"),
        default: window.wgULS("遵守站点设置", "遵守站點設定"),
        "1 week": window.wgULS("加入到监视列表1周", "加入到監視清單1週"),
        "1 month": window.wgULS("加入到监视列表1个月", "加入到監視清單1個月"),
        "3 months": window.wgULS("加入到监视列表3个月", "加入到監視清單3個月"),
        "6 months": window.wgULS("加入到监视列表6个月", "加入到監視清單6個月")
      };
      Twinkle.config.commonSets = {
        csdCriteria: {
          db: window.wgULS("自定义理由", "自訂理由"),
          g1: "G1",
          g2: "G2",
          g3: "G3",
          g4: "G4",
          g5: "G5",
          g6: "G6",
          g7: "G7",
          g8: "G8",
          g9: "G9",
          a1: "A1",
          a2: "A2",
          a3: "A3",
          o1: "O1",
          o2: "O2",
          o3: "O3",
          f1: "F1",
          f2: "F2",
          f3: "F3",
          f4: "F4",
          f5: "F5",
          r1: "R1",
          r2: "R2"
        },
        csdCriteriaDisplayOrder: ["db", "g1", "g2", "g3", "g4", "g5", "g6", "g7", "g8", "g9", "a1", "a2", "a3", "o1", "o2", "o3", "f1", "f2", "f3", "f4", "f5", "r1", "r2"],
        csdCriteriaNotification: {
          db: window.wgULS("自定义理由", "自訂理由"),
          g1: "G1",
          g2: "G2",
          g3: "G3",
          g4: "G4",
          g5: "G5",
          g6: "G6",
          g7: "G7",
          g8: "G8",
          g9: "G9",
          a1: "A1",
          a2: "A2",
          a3: "A3",
          o1: "O1",
          o2: "O2",
          o3: "O3",
          f1: "F1",
          f2: "F2",
          f3: "F3",
          f4: "F4",
          f5: "F5",
          r1: "R1",
          r2: "R2"
        },
        csdCriteriaNotificationDisplayOrder: ["db", "g1", "g2", "g3", "g4", "g5", "g6", "g7", "g8", "g9", "a1", "a2", "a3", "o1", "o2", "o3", "f1", "f2", "f3", "f4", "f5", "r1", "r2"],
        csdAndDICriteria: {
          db: window.wgULS("自定义理由", "自訂理由"),
          g1: "G1",
          g2: "G2",
          g3: "G3",
          g4: "G4",
          g5: "G5",
          g6: "G6",
          g7: "G7",
          g8: "G8",
          g9: "G9",
          a1: "A1",
          a2: "A2",
          a3: "A3",
          o1: "O1",
          o2: "O2",
          o3: "O3",
          f1: "F1",
          f2: "F2",
          f3: "F3",
          f4: "F4",
          f5: "F5",
          r1: "R1",
          r2: "R2"
        },
        csdAndDICriteriaDisplayOrder: ["db", "g1", "g2", "g3", "g4", "g5", "g6", "g7", "g8", "g9", "a1", "a2", "a3", "o1", "o2", "o3", "f1", "f2", "f3", "f4", "f5", "r1", "r2"],
        xfdCriteria: {
          delete: window.wgULS("删除", "刪除"),
          merge: window.wgULS("合并", "合併"),
          fwdcsd: window.wgULS("转交自快速删除候选", "轉交自快速刪除候選"),
          fame: window.wgULS("批量关注度提删", "批次關注度提刪"),
          substub: window.wgULS("批量小小作品提删", "批次小小作品提刪"),
          batch: window.wgULS("批量其他提删", "批次其他提刪")
        },
        xfdCriteriaDisplayOrder: ["delete", "merge", "fwdcsd", "fame", "substub", "batch"],
        namespacesNoSpecial: {
          0: window.wgULS("（条目）", "（條目）"),
          1: "Talk",
          2: "User",
          3: "User talk",
          4: "LIB",
          5: "LIB talk",
          6: "File",
          7: "File talk",
          8: "MediaWiki",
          9: "MediaWiki talk",
          10: "Template",
          11: "Template talk",
          12: "Help",
          13: "Help talk",
          14: "Category",
          15: "Category talk",
          274: "Widget",
          275: "Widget talk",
          300: "Fanmade",
          301: "Fanmade talk",
          302: "Draft",
          303: "Draft talk",
          304: "SMWData",
          305: "SMWData talk",
          828: "Module",
          829: "Module talk"
        }
      };
      Twinkle.config.sections = [{
        title: window.wgULS("常规", "常規"),
        module: "general",
        preferences: [
          // TwinkleConfig.userTalkPageMode may take arguments:
          // 'window': open a new window, remember the opened window
          // 'tab': opens in a new tab, if possible.
          // 'blank': force open in a new window, even if such a window exists
          {
            name: "userTalkPageMode",
            label: window.wgULS("当要打开用户讨论页时", "當要打開使用者討論頁時"),
            type: "enum",
            enumValues: {
              window: window.wgULS("在窗口中，替换成其它用户对话页", "在當前分頁，替換成其它用戶討論頁"),
              tab: window.wgULS("在新标签页中", "在新分頁中"),
              blank: window.wgULS("在全新的窗口中", "在新視窗中")
            }
          },
          // TwinkleConfig.dialogLargeFont (boolean)
          {
            name: "dialogLargeFont",
            label: window.wgULS("在Twinkle对话框中使用大号字体", "在Twinkle對話方塊中使用大號字型"),
            type: "boolean"
          },
          // Twinkle.config.disabledModules (array)
          {
            name: "disabledModules",
            label: window.wgULS("关闭指定的Twinkle模块", "關閉指定的Twinkle模組"),
            helptip: window.wgULS("您在此选择的功能将无法使用，取消选择以重新启用功能。", "您在此選擇的功能將無法使用，取消選擇以重新啟用功能。"),
            type: "set",
            setValues: {
              arv: window.wgULS("告状", "告狀"),
              warn: "警告",
              block: window.wgULS("封禁", "封鎖"),
              talkback: "通告",
              speedy: window.wgULS("速删", "速刪"),
              copyvio: window.wgULS("侵权", "侵權"),
              xfd: window.wgULS("提删", "提刪"),
              image: window.wgULS("图权", "圖權"),
              protect: window.wgULS("保护", "保護"),
              tag: window.wgULS("标记", "標記"),
              stub: "小作品",
              diff: window.wgULS("差异", "差異"),
              unlink: window.wgULS("链入", "連入"),
              fluff: "回退"
            }
          },
          // Twinkle.config.disabledSysopModules (array)
          {
            name: "disabledSysopModules",
            label: window.wgULS("关闭指定的Twinkle管理员模块", "關閉指定的Twinkle管理員模組"),
            helptip: window.wgULS("您在此选择的功能将无法使用，取消选择以重新启用功能。", "您在此選擇的功能將無法使用，取消選擇以重新啟用功能。"),
            adminOnly: true,
            type: "set",
            setValues: {
              batchdelete: window.wgULS("批删", "批刪"),
              batchundelete: window.wgULS("批复", "批復")
            }
          }
        ]
      }, {
        title: window.wgULS("告状", "告狀"),
        module: "arv",
        preferences: [{
          name: "spiWatchReport",
          label: window.wgULS("发起傀儡调查时加入到监视列表", "發起傀儡調查時加入到監視清單"),
          type: "enum",
          enumValues: Twinkle.config.watchlistEnums
        }]
      }, {
        title: window.wgULS("封禁用户", "封鎖使用者"),
        module: "block",
        adminOnly: true,
        preferences: [
          // TwinkleConfig.defaultToBlock64 (boolean)
          // Whether to default to just blocking the /64 on or off
          {
            name: "defaultToBlock64",
            label: window.wgULS("对于IPv6地址，默认选择封禁/64段", "對於IPv6地址，預設選擇封鎖/64段"),
            type: "boolean"
          },
          // TwinkleConfig.defaultToPartialBlocks (boolean)
          // Whether to default partial blocks on or off
          {
            name: "defaultToPartialBlocks",
            label: window.wgULS("打开封禁菜单时默认选择部分封禁", "打開封鎖選單時預設選擇部分封鎖"),
            type: "boolean"
          },
          // TwinkleConfig.watchBlockNotices (string)
          // Watchlist setting for the page which has been dispatched an warning or notice
          {
            name: "watchBlockNotices",
            label: window.wgULS("发送封禁模板时加入用户讨论页到监视列表", "發送封鎖模板時加入使用者討論頁到監視清單"),
            type: "enum",
            enumValues: Twinkle.config.watchlistEnums
          },
          {
            name: "customBlockReasonList",
            label: window.wgULS("自定义封禁理由", "自訂封鎖理由"),
            helptip: window.wgULS("您可以加入常用的封禁理由。自定义的封禁理由会出现在一般的封禁理由下方。", "您可以加入常用的封鎖理由。自訂的封鎖理由會出現在一般的封鎖理由下方。"),
            type: "customList",
            customListValueTitle: window.wgULS("使用封禁模板（默认为 uw-block1）", "使用封鎖模板（預設為 uw-block1）"),
            customListLabelTitle: window.wgULS("“由于…您已被封禁”及封禁日志理由", "「由於…您已被封鎖」及封鎖日誌理由")
          }
        ]
      }, {
        title: window.wgULS("图片删除", "圖片刪除"),
        module: "image",
        preferences: [
          // TwinkleConfig.notifyUserOnDeli (boolean)
          // If the user should be notified after placing a file deletion tag
          {
            name: "notifyUserOnDeli",
            label: window.wgULS("默认勾选“通知创建者”", "預設勾選「通知建立者」"),
            type: "boolean"
          },
          // TwinkleConfig.deliWatchPage (string)
          // The watchlist setting of the page tagged for deletion.
          {
            name: "deliWatchPage",
            label: window.wgULS("标记图片时加入到监视列表", "標記圖片時加入到監視清單"),
            type: "enum",
            enumValues: Twinkle.config.watchlistEnums
          },
          // TwinkleConfig.deliWatchUser (string)
          // The watchlist setting of the user talk page if a notification is placed.
          {
            name: "deliWatchUser",
            label: window.wgULS("标记图片时加入创建者讨论页到监视列表", "標記圖片時加入建立者討論頁到監視清單"),
            type: "enum",
            enumValues: Twinkle.config.watchlistEnums
          }
        ]
      }, {
        title: window.wgULS("保护", "保護"),
        module: "protect",
        preferences: [{
          name: "watchRequestedPages",
          label: window.wgULS("请求保护页面时加入到监视列表", "請求保護頁面時加入到監視清單"),
          type: "enum",
          enumValues: Twinkle.config.watchlistEnums
        }, {
          name: "watchPPTaggedPages",
          label: window.wgULS("标记保护模板时加入到监视列表", "標記保護模板時加入到監視清單"),
          type: "enum",
          enumValues: Twinkle.config.watchlistEnums
        }, {
          name: "watchProtectedPages",
          label: window.wgULS("保护时加入到监视列表", "保護時加入到監視清單"),
          helptip: window.wgULS("若在保护后也标记页面，则使用标记页面的参数设置。", "若在保護後也標記頁面，則使用標記頁面的偏好設定。"),
          adminOnly: true,
          type: "enum",
          enumValues: Twinkle.config.watchlistEnums
        }]
      }, {
        title: "回退",
        // twinklefluff module
        module: "fluff",
        preferences: [
          // TwinkleConfig.autoMenuAfterRollback (bool)
          // Option to automatically open the warning menu if the user talk page is opened post-reversion
          {
            name: "autoMenuAfterRollback",
            label: window.wgULS("在Twinkle回退后自动打开用户讨论页上的Twinkle警告菜单", "在Twinkle回退後自動打開使用者討論頁上的Twinkle警告選單"),
            helptip: window.wgULS("仅在选取下方对应框时才执行", "僅在選取下方對應框時才執行"),
            type: "boolean"
          },
          // TwinkleConfig.openTalkPage (array)
          // What types of actions that should result in opening of talk page
          {
            name: "openTalkPage",
            label: window.wgULS("在这些类型的回退后打开用户讨论页", "在這些類別的回退後打開使用者討論頁"),
            type: "set",
            setValues: {
              norm: window.wgULS("常规回退", "常規回退"),
              vand: window.wgULS("破坏回退", "破壞回退")
            }
          },
          // TwinkleConfig.openTalkPageOnAutoRevert (bool)
          // Defines if talk page should be opened when calling revert from contribs or recent changes pages. If set to true, openTalkPage defines then if talk page will be opened.
          {
            name: "openTalkPageOnAutoRevert",
            label: window.wgULS("在从用户贡献及最近更改中发起回退时打开用户讨论页", "在從使用者貢獻及近期變更中發起回退時打開使用者討論頁"),
            helptip: window.wgULS("当它打开时，依赖上一个设置。", "當它打開時，依賴上一個設定。"),
            type: "boolean"
          },
          // TwinkleConfig.rollbackInPlace (bool)
          //
          {
            name: "rollbackInPlace",
            label: window.wgULS("在从用户贡献及最近更改中发起回退时不刷新页面", "在從使用者貢獻及近期變更中發起回退時不重新整理頁面"),
            helptip: window.wgULS("当它打开时，Twinkle将不会在从用户贡献及最近更改中发起回退时刷新页面，允许您一次性回退多个编辑。", "當它打開時，Twinkle將不會在從使用者貢獻及近期變更中發起回退時重新整理頁面，允許您一次性回退多個編輯。"),
            type: "boolean"
          },
          // TwinkleConfig.markRevertedPagesAsMinor (array)
          // What types of actions that should result in marking edit as minor
          {
            name: "markRevertedPagesAsMinor",
            label: window.wgULS("将这些类型的回退标记为小修改", "將這些類別的回退標記為小修改"),
            type: "set",
            setValues: {
              norm: window.wgULS("常规回退", "常規回退"),
              vand: window.wgULS("破坏回退", "破壞回退"),
              torev: window.wgULS("“恢复此版本”", "「恢復此版本」")
            }
          },
          // TwinkleConfig.watchRevertedPages (array)
          // What types of actions that should result in forced addition to watchlist
          {
            name: "watchRevertedPages",
            label: window.wgULS("把这些类型的回退加入到监视列表", "把這些類別的回退加入到監視清單"),
            type: "set",
            setValues: {
              norm: window.wgULS("常规回退", "常規回退"),
              vand: window.wgULS("破坏回退", "破壞回退"),
              torev: window.wgULS("“恢复此版本”", "「恢復此版本」")
            }
          },
          // TwinkleConfig.watchRevertedExpiry
          // If any of the above items are selected, whether to expire the watch
          {
            name: "watchRevertedExpiry",
            label: window.wgULS("当回退页面时，加入到监视列表的期限", "當回退頁面時，加入到監視清單的期限"),
            type: "enum",
            enumValues: Twinkle.config.watchlistEnums
          },
          // TwinkleConfig.offerReasonOnNormalRevert (boolean)
          // If to offer a prompt for extra summary reason for normal reverts, default to true
          {
            name: "offerReasonOnNormalRevert",
            label: window.wgULS("常规回退时询问理由", "常規回退時詢問理由"),
            helptip: window.wgULS("“常规”回退是中间的那个[回退]链接。", "「常規」回退是中間的那個[回退]連結。"),
            type: "boolean"
          },
          {
            name: "confirmOnFluff",
            label: window.wgULS("回退前要求确认（所有设备）", "回退前要求確認（所有裝置）"),
            helptip: window.wgULS("对于使用移动设备的用户，或者意志不坚定的。", "對於使用行動裝置的使用者，或者意志不堅定的。"),
            type: "boolean"
          },
          // TwinkleConfig.showRollbackLinks (array)
          // Where Twinkle should show rollback links:
          // diff, others, mine, contribs, history, recent
          // Note from TTO: |contribs| seems to be equal to |others| + |mine|, i.e. redundant, so I left it out heres
          {
            name: "showRollbackLinks",
            label: window.wgULS("在这些页面上显示回退链接", "在這些頁面上顯示回退連結"),
            type: "set",
            setValues: {
              diff: window.wgULS("差异", "差異"),
              history: window.wgULS("历史记录", "歷史記錄"),
              others: window.wgULS("其它用户的贡献", "其它使用者的貢獻"),
              mine: window.wgULS("我的贡献", "我的貢獻"),
              recentchanges: window.wgULS("最近更改", "近期變更"),
              recentchangeslinked: window.wgULS("相关更改", "相關變更")
            }
          },
          {
            name: "customRevertSummary",
            label: "回退理由",
            helptip: window.wgULS("在查看差异时可选，仅善意回退、常规回退、恢复此版本", "在檢視差異時可選，僅善意回退、常規回退、恢復此版本"),
            type: "customList",
            customListValueTitle: "理由",
            customListLabelTitle: window.wgULS("显示的文字", "顯示的文字")
          }
        ]
      }, {
        title: window.wgULS("快速删除", "快速刪除"),
        module: "speedy",
        preferences: [
          {
            name: "speedySelectionStyle",
            label: window.wgULS("什么时候执行标记或删除", "什麼時候執行標記或刪除"),
            type: "enum",
            enumValues: {
              buttonClick: window.wgULS("当我点“提交”时", "當我點「提交」時"),
              radioClick: window.wgULS("当我点一个选项时", "當我點一個選項時")
            }
          },
          // TwinkleConfig.watchSpeedyPages (array)
          // Whether to add speedy tagged pages to watchlist
          {
            name: "watchSpeedyPages",
            label: window.wgULS("将以下理由加入到监视列表", "將以下理由加入到監視清單"),
            type: "set",
            setValues: Twinkle.config.commonSets.csdCriteria,
            setDisplayOrder: Twinkle.config.commonSets.csdCriteriaDisplayOrder
          },
          // TwinkleConfig.watchSpeedyExpiry
          // If any of the above items are selected, whether to expire the watch
          {
            name: "watchSpeedyExpiry",
            label: window.wgULS("当标记页面时，加入到监视列表的期限", "當標記頁面時，加入到監視清單的期限"),
            type: "enum",
            enumValues: Twinkle.config.watchlistEnums
          },
          // TwinkleConfig.markSpeedyPagesAsPatrolled (boolean)
          // If, when applying speedy template to page, to mark the page as patrolled (if the page was reached from NewPages)
          {
            name: "markSpeedyPagesAsPatrolled",
            label: window.wgULS("标记时标记页面为已巡查（如可能）", "標記時標記頁面為已巡查（如可能）"),
            type: "boolean"
          },
          // TwinkleConfig.notifyUserOnSpeedyDeletionNomination (array)
          // What types of actions should result that the author of the page being notified of nomination
          {
            name: "notifyUserOnSpeedyDeletionNomination",
            label: window.wgULS("仅在使用以下理由时通知页面创建者", "僅在使用以下理由時通知頁面建立者"),
            helptip: window.wgULS("尽管您在对话框中选择通知，通知仍只会在使用这些理由时发出。", "儘管您在對話方塊中選擇通知，通知仍只會在使用這些理由時發出。"),
            type: "set",
            setValues: Twinkle.config.commonSets.csdCriteriaNotification,
            setDisplayOrder: Twinkle.config.commonSets.csdCriteriaNotificationDisplayOrder
          },
          // TwinkleConfig.promptForSpeedyDeletionSummary (array of strings)
          {
            name: "promptForSpeedyDeletionSummary",
            label: window.wgULS("使用以下理由删除时允许编辑删除理由", "使用以下理由刪除時允許編輯刪除理由"),
            adminOnly: true,
            type: "set",
            setValues: Twinkle.config.commonSets.csdAndDICriteria,
            setDisplayOrder: Twinkle.config.commonSets.csdAndDICriteriaDisplayOrder
          },
          // TwinkleConfig.openUserTalkPageOnSpeedyDelete (array of strings)
          // What types of actions that should result user talk page to be opened when speedily deleting (admin only)
          {
            name: "openUserTalkPageOnSpeedyDelete",
            label: window.wgULS("使用以下理由时打开用户讨论页", "使用以下理由時打開使用者討論頁"),
            adminOnly: true,
            type: "set",
            setValues: Twinkle.config.commonSets.csdAndDICriteria,
            setDisplayOrder: Twinkle.config.commonSets.csdAndDICriteriaDisplayOrder
          },
          // TwinkleConfig.deleteTalkPageOnDelete (boolean)
          // If talk page if exists should also be deleted (CSD G8) when spedying a page (admin only)
          {
            name: "deleteTalkPageOnDelete",
            label: window.wgULS("默认勾选“删除讨论页”", "預設勾選「刪除討論頁」"),
            adminOnly: true,
            type: "boolean"
          },
          {
            name: "deleteRedirectsOnDelete",
            label: window.wgULS("默认勾选“删除重定向”", "預設勾選「刪除重新導向」"),
            adminOnly: true,
            type: "boolean"
          },
          // TwinkleConfig.deleteSysopDefaultToDelete (boolean)
          // Make the CSD screen default to "delete" instead of "tag" (admin only)
          {
            name: "deleteSysopDefaultToDelete",
            label: window.wgULS("默认为直接删除而不是标记", "預設為直接刪除而不是標記"),
            helptip: window.wgULS("若已放置快速删除标记，则永远默认为删除模式。", "若已放置快速刪除標記，則永遠預設為刪除模式。"),
            adminOnly: true,
            type: "boolean"
          },
          // TwinkleConfig.speedyWindowWidth (integer)
          // Defines the width of the Twinkle SD window in pixels
          {
            name: "speedyWindowWidth",
            label: window.wgULS("快速删除对话框宽度（像素）", "快速刪除對話方塊寬度（像素）"),
            type: "integer"
          },
          // TwinkleConfig.speedyWindowWidth (integer)
          // Defines the width of the Twinkle SD window in pixels
          {
            name: "speedyWindowHeight",
            label: window.wgULS("快速删除对话框高度（像素）", "快速刪除對話方塊高度（像素）"),
            helptip: window.wgULS("若您有一台很大的显示器，您可以将此调高。", "若您有一台很大的顯示器，您可以將此調高。"),
            type: "integer"
          },
          {
            name: "logSpeedyNominations",
            label: window.wgULS("在用户空间中记录所有快速删除提名", "在使用者空間中記錄所有快速刪除提名"),
            helptip: window.wgULS("非管理员无法访问到已删除的贡献，用户空间日志提供了一个很好的方法来记录这些历史。", "非管理員無法存取到已刪除的貢獻，使用者空間日誌提供了一個很好的方法來記錄這些歷史。"),
            type: "boolean"
          },
          {
            name: "speedyLogPageName",
            label: window.wgULS("在此页保留日志", "在此頁保留日誌"),
            helptip: window.wgULS("在此框中输入子页面名称，您将在User:<i>用户名</i>/<i>子页面</i>找到CSD日志。仅在启用日志时工作。", "在此框中輸入子頁面名稱，您將在User:<i>使用者名稱</i>/<i>子頁面</i>找到CSD日誌。僅在啟用日誌時工作。"),
            type: "string"
          },
          {
            name: "noLogOnSpeedyNomination",
            label: window.wgULS("在使用以下理由时不做记录", "在使用以下理由時不做記錄"),
            type: "set",
            setValues: Twinkle.config.commonSets.csdAndDICriteria,
            setDisplayOrder: Twinkle.config.commonSets.csdAndDICriteriaDisplayOrder
          },
          {
            name: "enlargeG7Input",
            label: window.wgULS("扩大CSD G7的按钮", "擴大CSD G7的按鈕"),
            helptip: window.wgULS("扩为默认的两倍大。", "擴為預設的兩倍大。"),
            type: "boolean"
          }
        ]
      }, {
        title: window.wgULS("标记", "標記"),
        module: "tag",
        preferences: [{
          name: "watchTaggedPages",
          label: window.wgULS("标记时加入到监视列表", "標記時加入到監視清單"),
          type: "enum",
          enumValues: Twinkle.config.watchlistEnums
        }, {
          name: "watchMergeDiscussions",
          label: window.wgULS("加入合并讨论时监视讨论页", "加入合併討論時監視討論頁"),
          type: "enum",
          enumValues: Twinkle.config.watchlistEnums
        }, {
          name: "markTaggedPagesAsMinor",
          label: window.wgULS("将标记标记为小修改", "將標記標記為小修改"),
          type: "boolean"
        }, {
          name: "markTaggedPagesAsPatrolled",
          label: window.wgULS("默认勾选“标记页面为已巡查”框", "預設勾選「標記頁面為已巡查」框"),
          type: "boolean"
        }, {
          name: "groupByDefault",
          label: window.wgULS("默认勾选“合并到{{multiple issues}}”复选框", "預設勾選「合併到{{multiple issues}}」核取方塊"),
          type: "boolean"
        }, {
          name: "tagArticleSortOrder",
          label: window.wgULS("条目标记的默认查看方式", "條目標記的預設檢視方式"),
          type: "enum",
          enumValues: {
            cat: window.wgULS("按类型", "按類別"),
            alpha: "按字母"
          }
        }, {
          name: "customTagList",
          label: window.wgULS("自定义条目维护标记", "自訂條目維護標記"),
          helptip: window.wgULS("这些会出现在列表的末尾。", "這些會出現在列表的末尾。"),
          type: "customList",
          customListValueTitle: window.wgULS("模板名（不含大括号）", "模板名（不含大括號）"),
          customListLabelTitle: window.wgULS("显示的文字", "顯示的文字")
        }, {
          name: "customFileTagList",
          label: window.wgULS("自定义文件维护标记", "自訂檔案維護標記"),
          helptip: window.wgULS("这些会出现在列表的末尾。", "這些會出現在列表的末尾。"),
          type: "customList",
          customListValueTitle: window.wgULS("模板名（不含大括号）", "模板名（不含大括號）"),
          customListLabelTitle: window.wgULS("显示的文字", "顯示的文字")
        }, {
          name: "customRedirectTagList",
          label: window.wgULS("自定义重定向维护标记", "自訂重新導向維護標記"),
          helptip: window.wgULS("这些会出现在列表的末尾。", "這些會出現在列表的末尾。"),
          type: "customList",
          customListValueTitle: window.wgULS("模板名（不含大括号）", "模板名（不含大括號）"),
          customListLabelTitle: window.wgULS("显示的文字", "顯示的文字")
        }]
      }, {
        title: "小作品",
        module: "stub",
        preferences: [{
          name: "watchStubbedPages",
          label: window.wgULS("标记时加入到监视列表", "標記時加入到監視清單"),
          type: "boolean"
        }, {
          name: "markStubbedPagesAsMinor",
          label: window.wgULS("将小作品标记为小修改", "將小作品標記為小修改"),
          type: "boolean"
        }, {
          name: "markStubbedPagesAsPatrolled",
          label: window.wgULS("默认勾选“标记页面为已巡查”框", "預設勾選「標記頁面為已巡查」框"),
          type: "boolean"
        }, {
          name: "stubArticleSortOrder",
          label: window.wgULS("条目小作品的默认查看方式", "條目小作品的預設檢視方式"),
          type: "enum",
          enumValues: {
            cat: window.wgULS("按类型", "按類別"),
            alpha: "按字母"
          }
        }, {
          name: "customStubList",
          label: window.wgULS("自定义条目小作品标记", "自訂條目小作品標記"),
          helptip: window.wgULS("这些会出现在列表的末尾。", "這些會出現在列表的末尾。"),
          type: "customList",
          customListValueTitle: window.wgULS("模板名（不含大括号）", "模板名（不含大括號）"),
          customListLabelTitle: window.wgULS("显示的文字", "顯示的文字")
        }]
      }, {
        title: "通告",
        module: "talkback",
        preferences: [{
          name: "markTalkbackAsMinor",
          label: window.wgULS("将通告标记为小修改", "將通告標記為小修改"),
          type: "boolean"
        }, {
          name: "insertTalkbackSignature",
          label: window.wgULS("通告时加入签名", "通告時加入簽名"),
          type: "boolean"
        }, {
          name: "talkbackHeading",
          label: window.wgULS("通告所用的小节标题", "通告所用的小節標題"),
          type: "string"
        }, {
          name: "mailHeading",
          label: window.wgULS("“有新邮件”所用的小节标题", "「有新郵件」所用的小節標題"),
          type: "string"
        }]
      }, {
        title: window.wgULS("取消链入", "取消連入"),
        module: "unlink",
        preferences: [
          // TwinkleConfig.unlinkNamespaces (array)
          // In what namespaces unlink should happen, default in 0 (article) and 100 (portal)
          {
            name: "unlinkNamespaces",
            label: window.wgULS("取消以下命名空间中的反向链接", "取消以下命名空間中的反向連結"),
            helptip: window.wgULS("请避免选择讨论页，因这样会导致Twinkle试图修改讨论存档。", "請避免選擇討論頁，因這樣會導致Twinkle試圖修改討論存檔。"),
            type: "set",
            setValues: Twinkle.config.commonSets.namespacesNoSpecial
          }
        ]
      }, {
        title: window.wgULS("警告用户", "警告使用者"),
        module: "warn",
        preferences: [
          // TwinkleConfig.defaultWarningGroup (int)
          // if true, watch the page which has been dispatched an warning or notice, if false, default applies
          {
            name: "defaultWarningGroup",
            label: window.wgULS("默认警告级别", "預設警告級別"),
            type: "enum",
            enumValues: {
              1: "1：注意",
              2: "2：警告",
              3: window.wgULS("单层级提醒", "單層級提醒"),
              4: window.wgULS("单层级警告", "單層級警告"),
              5: window.wgULS("自定义提醒或警告", "自訂提醒或警告"),
              6: "所有警告模板",
              7: window.wgULS("自动选择层级", "自動選擇層級")
              // 8 was used for block templates before #260
              // 9 was deprecated
              // 10 was deprecated
              // 11 was deprecated
            }
          },
          // TwinkleConfig.combinedSingletMenus (boolean)
          // if true, show one menu with both single-issue notices and warnings instead of two separately
          {
            name: "combinedSingletMenus",
            label: window.wgULS("将两个单层级菜单合并成一个", "將兩個單層級選單合併成一個"),
            helptip: window.wgULS("当启用此选项时，无论默认警告级别选择单层级通知或单层级警告皆属于此项。", "當啟用此選項時，無論預設警告級別選擇單層級通知或單層級警告皆屬於此項。"),
            type: "boolean"
          },
          // TwinkleConfig.watchWarnings (string)
          // Watchlist setting for the page which has been dispatched an warning or notice
          {
            name: "watchWarnings",
            label: window.wgULS("警告时加入用户讨论页到监视列表", "警告時加入使用者討論頁到監視清單"),
            type: "enum",
            enumValues: Twinkle.config.watchlistEnums
          },
          // TwinkleConfig.oldSelect (boolean)
          // if true, use the native select menu rather the jquery chosen-based one
          {
            name: "oldSelect",
            label: window.wgULS("使用不可搜索的经典菜单", "使用不可搜尋的經典選單"),
            type: "boolean"
          },
          {
            name: "customWarningList",
            label: window.wgULS("自定义警告模板", "自訂警告模板"),
            helptip: window.wgULS("您可以加入模板或用户子页面。自定义警告会出现在警告对话框中“自定义警告”一节。", "您可以加入模板或使用者子頁面。自訂警告會出現在警告對話方塊中「自訂警告」一節。"),
            type: "customList",
            customListValueTitle: window.wgULS("模板名（不含大括号）", "模板名（不含大括號）"),
            customListLabelTitle: window.wgULS("显示的文字（和编辑摘要）", "顯示的文字（和編輯摘要）")
          }
        ]
      }, {
        title: window.wgULS("存废讨论", "存廢討論"),
        module: "xfd",
        preferences: [
          {
            name: "logXfdNominations",
            label: window.wgULS("在用户空间中记录所有存废讨论提名", "在使用者空間中記錄所有存廢討論提名"),
            helptip: window.wgULS("该日志供您追踪所有通过Twinkle提交的存废讨论", "該日誌供您追蹤所有透過Twinkle提交的存廢討論"),
            type: "boolean"
          },
          {
            name: "xfdLogPageName",
            label: window.wgULS("在此页保留日志", "在此頁保留日誌"),
            helptip: window.wgULS("在此框中输入子页面名称，您将在User:<i>用户名</i>/<i>子页面</i>找到XFD日志。仅在启用日志时工作。", "在此框中輸入子頁面名稱，您將在User:<i>使用者名稱</i>/<i>子頁面</i>找到XFD日誌。僅在啟用日誌時工作。"),
            type: "string"
          },
          {
            name: "noLogOnXfdNomination",
            label: window.wgULS("在使用以下理由时不做记录", "在使用以下理由時不做記錄"),
            type: "set",
            setValues: Twinkle.config.commonSets.xfdCriteria,
            setDisplayOrder: Twinkle.config.commonSets.xfdCriteriaDisplayOrder
          },
          // TwinkleConfig.xfdWatchPage (string)
          // The watchlist setting of the page being nominated for XfD.
          {
            name: "xfdWatchPage",
            label: window.wgULS("加入提名的页面到监视列表", "加入提名的頁面到監視清單"),
            type: "enum",
            enumValues: Twinkle.config.watchlistEnums
          },
          // TwinkleConfig.xfdWatchDiscussion (string)
          // The watchlist setting of the newly created XfD page (for those processes that create discussion pages for each nomination),
          // or the list page for the other processes.
          {
            name: "xfdWatchDiscussion",
            label: window.wgULS("加入存废讨论页到监视列表", "加入存廢討論頁到監視清單"),
            helptip: window.wgULS("当日的页面。", "當日的頁面。"),
            type: "enum",
            enumValues: Twinkle.config.watchlistEnums
          },
          // TwinkleConfig.xfdWatchUser (string)
          // The watchlist setting of the user talk page if they receive a notification.
          {
            name: "xfdWatchUser",
            label: window.wgULS("加入创建者讨论页到监视列表（在通知时）", "加入建立者討論頁到監視清單（在通知時）"),
            type: "enum",
            enumValues: Twinkle.config.watchlistEnums
          },
          {
            name: "markXfdPagesAsPatrolled",
            label: window.wgULS("标记时标记页面为已巡查（如可能）", "標記時標記頁面為已巡查（如可能）"),
            helptip: window.wgULS("基于技术原因，页面仅会在由Special:NewPages到达时被标记为已巡查。", "基於技術原因，頁面僅會在由Special:NewPages到達時被標記為已巡查。"),
            type: "boolean"
          },
          {
            name: "FwdCsdToXfd",
            label: window.wgULS("提删类型增加转交自快速删除候选", "提刪類別增加轉交自快速刪除候選"),
            helptip: window.wgULS("请确保您充分了解[[LIB:快速删除条例]]才开启此功能。", "請確保您充分了解[[LIB:快速刪除條例]]才開啟此功能。"),
            type: "boolean"
          },
          {
            name: "afdDefaultCategory",
            label: window.wgULS("默认提删类型", "預設提刪類別"),
            helptip: window.wgULS("若选择“相同于上次选择”将使用localStorage来记忆。", "若選擇「相同於上次選擇」將使用localStorage來記憶。"),
            type: "enum",
            enumValues: {
              delete: window.wgULS("删除", "刪除"),
              same: window.wgULS("相同于上次选择", "相同於上次選擇")
            }
          },
          {
            name: "afdFameDefaultReason",
            label: window.wgULS("默认关注度提删理由", "預設關注度提刪理由"),
            helptip: window.wgULS("用于批量提删。", "用於批次提刪。"),
            type: "string"
          },
          {
            name: "afdSubstubDefaultReason",
            label: window.wgULS("默认小小作品提删理由", "預設小小作品提刪理由"),
            helptip: window.wgULS("用于批量提删。", "用於批次提刪。"),
            type: "string"
          }
        ]
      }, {
        title: window.wgULS("关闭存废讨论", "關閉存廢討論"),
        module: "close",
        preferences: [{
          name: "XfdClose",
          label: window.wgULS("在存废讨论显示关闭讨论按钮", "在存廢討論顯示關閉討論按鈕"),
          helptip: window.wgULS("请确保您充分了解[[LIB:删除条例]]才开启此功能。", "請確保您充分了解[[LIB:刪除條例]]才開啟此功能。"),
          type: "enum",
          enumValues: {
            hide: window.wgULS("不显示", "不顯示"),
            nonadminonly: window.wgULS("只包含非管理员可使用选项", "只包含非管理員可使用選項"),
            all: window.wgULS("显示所有选项", "顯示所有選項")
          }
        }]
      }, {
        title: window.wgULS("侵犯著作权", "侵犯著作權"),
        module: "copyvio",
        preferences: [
          // TwinkleConfig.copyvioWatchPage (string)
          // The watchlist setting of the page being nominated for XfD.
          {
            name: "copyvioWatchPage",
            label: window.wgULS("加入提报的页面到监视列表", "加入提報的頁面到監視清單"),
            type: "enum",
            enumValues: Twinkle.config.watchlistEnums
          },
          // TwinkleConfig.copyvioWatchUser (string)
          // The watchlist setting of the user if he receives a notification.
          {
            name: "copyvioWatchUser",
            label: window.wgULS("加入创建者讨论页到监视列表（在通知时）", "加入建立者討論頁到監視清單（在通知時）"),
            type: "enum",
            enumValues: Twinkle.config.watchlistEnums
          },
          // TwinkleConfig.markCopyvioPagesAsPatrolled (boolean)
          // If, when applying copyvio template to page, to mark the page as patrolled (if the page was reached from NewPages)
          {
            name: "markCopyvioPagesAsPatrolled",
            label: window.wgULS("标记时标记页面为已巡查（如可能）", "標記時標記頁面為已巡查（如可能）"),
            helptip: window.wgULS("基于技术原因，页面仅会在由Special:NewPages到达时被标记为已巡查。", "基於技術原因，頁面僅會在由Special:NewPages到達時被標記為已巡查。"),
            type: "boolean"
          }
        ]
      }, {
        title: window.wgULS("隐藏", "隱藏"),
        hidden: true,
        preferences: [
          // twinkle.js: portlet setup
          {
            name: "portletArea",
            type: "string"
          },
          {
            name: "portletId",
            type: "string"
          },
          {
            name: "portletName",
            type: "string"
          },
          {
            name: "portletType",
            type: "string"
          },
          {
            name: "portletNext",
            type: "string"
          },
          // twinklefluff.js: defines how many revision to query maximum, maximum possible is 50, default is 50
          {
            name: "revertMaxRevisions",
            type: "integer"
          },
          // twinklebatchdelete.js: How many pages should be processed maximum
          {
            name: "batchMax",
            type: "integer",
            adminOnly: true
          },
          // How many pages should be processed at a time by deprod and batchdelete/protect/undelete
          {
            name: "batchChunks",
            type: "integer",
            adminOnly: true
          }
        ]
      }];
      Twinkle.config.init = () => {
        if (mw.config.get("wgPageName") === Twinkle.getPref("configPage") && mw.config.get("wgAction") === "view") {
          if (!document.querySelector("#twinkle-config")) {
            return;
          }
          const contentdiv = document.querySelector("#twinkle-config-content");
          contentdiv.textContent = "";
          const toctable = document.createElement("div");
          toctable.className = "toc";
          toctable.style.marginLeft = "0.4em";
          const toctitle = document.createElement("div");
          toctitle.id = "toctitle";
          const toch2 = document.createElement("h2");
          toch2.textContent = window.wgULS("目录 ", "目錄 ");
          toctitle.appendChild(toch2);
          const toctoggle = document.createElement("span");
          toctoggle.className = "toctoggle";
          toctoggle.appendChild(document.createTextNode("["));
          const toctogglelink = document.createElement("a");
          toctogglelink.className = "internal";
          toctogglelink.setAttribute("href", "#tw-tocshowhide");
          toctogglelink.textContent = window.wgULS("隐藏", "隱藏");
          toctoggle.appendChild(toctogglelink);
          toctoggle.appendChild(document.createTextNode("]"));
          toctitle.appendChild(toctoggle);
          toctable.appendChild(toctitle);
          const tocul = document.createElement("ul");
          toctogglelink.addEventListener("click", () => {
            const $tocul = $(tocul);
            $tocul.toggle();
            if ($tocul.find(":visible").length) {
              toctogglelink.textContent = window.wgULS("隐藏", "隱藏");
            } else {
              toctogglelink.textContent = window.wgULS("显示", "顯示");
            }
          }, false);
          toctable.appendChild(tocul);
          contentdiv.appendChild(toctable);
          const contentform = document.createElement("form");
          contentform.setAttribute("action", "javascript:void(0)");
          contentform.addEventListener("submit", Twinkle.config.save, true);
          contentdiv.appendChild(contentform);
          const container = document.createElement("table");
          container.style.width = "100%";
          contentform.appendChild(container);
          $(Twinkle.config.sections).each((sectionkey, section) => {
            if (section.hidden || section.adminOnly && !Morebits.userIsSysop) {
              return true;
            }
            const tocli = document.createElement("li");
            tocli.className = "toclevel-1";
            const toca = document.createElement("a");
            toca.setAttribute("href", "#".concat(section.module));
            toca.appendChild(document.createTextNode(section.title));
            tocli.appendChild(toca);
            tocul.appendChild(tocli);
            let row = document.createElement("tr");
            let cell = document.createElement("td");
            cell.setAttribute("colspan", "3");
            const heading = document.createElement("h4");
            heading.style.borderBottom = "1px solid #808080";
            heading.style.marginTop = "0.2em";
            heading.id = section.module;
            heading.appendChild(document.createTextNode(section.title));
            cell.appendChild(heading);
            row.appendChild(cell);
            container.appendChild(row);
            let rowcount = 1;
            $(section.preferences).each((prefkey, pref) => {
              if (pref.adminOnly && !Morebits.userIsSysop) {
                return true;
              }
              row = document.createElement("tr");
              row.style.marginBottom = "0.2em";
              if (rowcount++ % 2 === 0) {
                row.style.backgroundColor = "rgb(128 128 128/.1)";
              }
              cell = document.createElement("td");
              let label;
              let input;
              const gotPref = Twinkle.getPref(pref.name);
              switch (pref.type) {
                case "boolean":
                  cell.setAttribute("colspan", "2");
                  label = document.createElement("label");
                  input = document.createElement("input");
                  input.setAttribute("type", "checkbox");
                  input.setAttribute("id", pref.name);
                  input.setAttribute("name", pref.name);
                  if (gotPref === true) {
                    input.checked = true;
                  }
                  label.appendChild(input);
                  label.appendChild(document.createTextNode(pref.label));
                  cell.appendChild(label);
                  break;
                case "string":
                // create an input box
                case "integer":
                  cell.style.textAlign = "right";
                  cell.style.paddingRight = "0.5em";
                  label = document.createElement("label");
                  label.setAttribute("for", pref.name);
                  label.appendChild(document.createTextNode("".concat(pref.label, "：")));
                  cell.appendChild(label);
                  row.appendChild(cell);
                  cell = document.createElement("td");
                  cell.style.paddingRight = "1em";
                  input = document.createElement("input");
                  input.setAttribute("type", "text");
                  input.setAttribute("id", pref.name);
                  input.setAttribute("name", pref.name);
                  if (pref.type === "integer") {
                    input.setAttribute("size", 6);
                    input.setAttribute("type", "number");
                    input.setAttribute("step", "1");
                  }
                  if (gotPref) {
                    input.setAttribute("value", gotPref);
                  }
                  cell.appendChild(input);
                  break;
                case "enum": {
                  cell.style.textAlign = "right";
                  cell.style.paddingRight = "0.5em";
                  label = document.createElement("label");
                  label.setAttribute("for", pref.name);
                  label.appendChild(document.createTextNode("".concat(pref.label, "：")));
                  cell.appendChild(label);
                  row.appendChild(cell);
                  cell = document.createElement("td");
                  cell.style.paddingRight = "1em";
                  input = document.createElement("select");
                  input.setAttribute("id", pref.name);
                  input.setAttribute("name", pref.name);
                  let optionExists = false;
                  for (var _i17 = 0, _Object$entries10 = Object.entries(pref.enumValues); _i17 < _Object$entries10.length; _i17++) {
                    const [enumvalue, enumdisplay] = _Object$entries10[_i17];
                    const option = document.createElement("option");
                    option.setAttribute("value", enumvalue);
                    if (gotPref === enumvalue || // Hack to convert old boolean watchlist prefs
                    // to corresponding enums (added in v2.1)
                    typeof gotPref === "boolean" && (gotPref && enumvalue === "yes" || !gotPref && enumvalue === "no")) {
                      option.setAttribute("selected", "selected");
                      optionExists = true;
                    }
                    option.appendChild(document.createTextNode(enumdisplay));
                    input.appendChild(option);
                  }
                  if (!optionExists) {
                    const option = document.createElement("option");
                    option.setAttribute("value", gotPref);
                    option.setAttribute("selected", "selected");
                    option.appendChild(document.createTextNode(gotPref));
                    input.appendChild(option);
                  }
                  cell.appendChild(input);
                  break;
                }
                case "set": {
                  cell.setAttribute("colspan", "2");
                  label = document.createElement("label");
                  label.appendChild(document.createTextNode("".concat(pref.label, "：")));
                  cell.appendChild(label);
                  const checkdiv = document.createElement("div");
                  checkdiv.style.paddingLeft = "1em";
                  const worker = (itemkey, itemvalue) => {
                    const checklabel = document.createElement("label");
                    checklabel.style.marginRight = "0.7em";
                    checklabel.style.display = "inline-block";
                    const check = document.createElement("input");
                    check.setAttribute("type", "checkbox");
                    check.setAttribute("id", "".concat(pref.name, "_").concat(itemkey));
                    check.setAttribute("name", "".concat(pref.name, "_").concat(itemkey));
                    if (gotPref && gotPref.includes(itemkey)) {
                      check.checked = true;
                    }
                    if (pref.name === "unlinkNamespaces" && gotPref && gotPref.includes(Number.parseInt(itemkey, 10))) {
                      check.checked = true;
                    }
                    checklabel.appendChild(check);
                    checklabel.appendChild(document.createTextNode(itemvalue));
                    checkdiv.appendChild(checklabel);
                  };
                  if (pref.setDisplayOrder) {
                    var _iterator69 = _createForOfIteratorHelper(pref.setDisplayOrder), _step69;
                    try {
                      for (_iterator69.s(); !(_step69 = _iterator69.n()).done; ) {
                        const item = _step69.value;
                        worker(item, pref.setValues[item]);
                      }
                    } catch (err) {
                      _iterator69.e(err);
                    } finally {
                      _iterator69.f();
                    }
                  } else {
                    for (var _i18 = 0, _Object$entries11 = Object.entries(pref.setValues); _i18 < _Object$entries11.length; _i18++) {
                      const [itemkey, itemvalue] = _Object$entries11[_i18];
                      worker(itemkey, itemvalue);
                    }
                  }
                  cell.appendChild(checkdiv);
                  break;
                }
                case "customList": {
                  cell.style.textAlign = "right";
                  cell.style.paddingRight = "0.5em";
                  label = document.createElement("label");
                  label.setAttribute("for", pref.name);
                  label.appendChild(document.createTextNode("".concat(pref.label, "：")));
                  cell.appendChild(label);
                  row.appendChild(cell);
                  cell = document.createElement("td");
                  cell.style.paddingRight = "1em";
                  const customListButton = document.createElement("button");
                  customListButton.setAttribute("id", pref.name);
                  customListButton.setAttribute("name", pref.name);
                  customListButton.setAttribute("type", "button");
                  customListButton.addEventListener("click", Twinkle.config.listDialog.display, false);
                  $(customListButton).data({
                    value: gotPref,
                    pref
                  });
                  customListButton.appendChild(document.createTextNode(window.wgULS("编辑项目", "編輯項目")));
                  cell.appendChild(customListButton);
                  break;
                }
                default:
                  void mw.notify("twinkleconfig: 未知类型的属性 ".concat(pref.name), {
                    type: "warn",
                    tag: "twinkleconfig"
                  });
                  break;
              }
              row.appendChild(cell);
              cell = document.createElement("td");
              cell.style.fontSize = "90%";
              cell.style.color = "gray";
              if (pref.helptip) {
                cell.innerHTML = pref.helptip.replace(/{{(.+?)}}/g, '{{<a href="'.concat(mw.util.getUrl("Template:"), '$1" rel="noopener" target="_blank">$1</a>}}')).replace(/\[\[(.+?)]]/g, '<a href="'.concat(mw.util.getUrl(""), '$1" rel="noopener" target="_blank">$1</a>'));
              }
              if (pref.type !== "customList") {
                const resetlink = document.createElement("a");
                resetlink.setAttribute("href", "#tw-reset");
                resetlink.setAttribute("id", "twinkle-config-reset-".concat(pref.name));
                resetlink.addEventListener("click", Twinkle.config.resetPrefLink, false);
                resetlink.style.cssFloat = "right";
                resetlink.style.margin = "0 0.6em";
                resetlink.appendChild(document.createTextNode(window.wgULS("复位", "復位")));
                cell.appendChild(resetlink);
              }
              row.appendChild(cell);
              container.appendChild(row);
              return true;
            });
            return true;
          });
          const footerbox = document.createElement("div");
          footerbox.setAttribute("id", "twinkle-config-buttonpane");
          footerbox.style.backgroundColor = "#BCCADF";
          footerbox.style.padding = "0.5em";
          const submitButton = document.createElement("button");
          submitButton.setAttribute("id", "twinkle-config-submit");
          submitButton.setAttribute("type", "submit");
          submitButton.appendChild(document.createTextNode(window.wgULS("保存修改", "儲存修改")));
          footerbox.appendChild(submitButton);
          const footerspan = document.createElement("span");
          footerspan.className = "plainlinks";
          footerspan.style.marginLeft = "2.4em";
          footerspan.style.fontSize = "90%";
          const footera = document.createElement("a");
          footera.setAttribute("href", "#tw-reset-all");
          footera.setAttribute("id", "twinkle-config-resetall");
          footera.addEventListener("click", Twinkle.config.resetAllPrefs, false);
          footera.appendChild(document.createTextNode(window.wgULS("恢复默认", "恢復預設")));
          footerspan.appendChild(footera);
          footerbox.appendChild(footerspan);
          contentform.appendChild(footerbox);
          if (window.location.hash) {
            const loc = window.location.hash;
            window.location.hash = "";
            window.location.hash = loc;
          }
        } else if (mw.config.get("wgNamespaceNumber") === mw.config.get("wgNamespaceIds").user && mw.config.get("wgTitle").indexOf(mw.config.get("wgUserName")) === 0 && mw.config.get("wgPageName").slice(-3) === ".js") {
          const box = document.createElement("div");
          box.setAttribute("id", "twinkle-config-headerbox");
          let link;
          const scriptPageName = mw.config.get("wgPageName").slice(mw.config.get("wgPageName").lastIndexOf("/") + 1, mw.config.get("wgPageName").lastIndexOf(".js"));
          if (scriptPageName === "twinkleoptions") {
            box.setAttribute("class", "config-twopt-box");
            if (mw.config.get("wgArticleId") > 0) {
              box.appendChild(document.createTextNode(window.wgULS("这页包含您的Twinkle参数设置，您可使用", "這頁包含您的Twinkle偏好設定，您可使用")));
            } else {
              box.appendChild(document.createTextNode(window.wgULS("您可配置您的Twinkle，通过使用", "您可配置您的Twinkle，通過使用")));
            }
            link = document.createElement("a");
            link.setAttribute("href", mw.util.getUrl(Twinkle.getPref("configPage")));
            link.appendChild(document.createTextNode(window.wgULS("Twinkle参数设置面板", "Twinkle偏好設定面板")));
            box.appendChild(link);
            box.appendChild(document.createTextNode(window.wgULS("，或直接编辑本页。", "，或直接編輯本頁。")));
            $(box).insertAfter($body.find("#contentSub"));
          } else if (["vector", "vector-2022", "gongbi", "citizen", "common"].includes(scriptPageName)) {
            box.setAttribute("class", "config-userskin-box");
            box.appendChild(document.createTextNode(window.wgULS("若您想配置您的Twinkle，请使用", "若您想配置您的Twinkle，請使用")));
            link = document.createElement("a");
            link.setAttribute("href", mw.util.getUrl(Twinkle.getPref("configPage")));
            link.appendChild(document.createTextNode(window.wgULS("Twinkle参数设置面板", "Twinkle偏好設定面板")));
            box.appendChild(link);
            box.appendChild(document.createTextNode("。"));
            $(box).insertAfter($body.find("#contentSub"));
          }
        }
      };
      Twinkle.config.listDialog = {};
      Twinkle.config.listDialog.addRow = (dlgtable, value, label) => {
        const contenttr = document.createElement("tr");
        let contenttd = document.createElement("td");
        const removeButton = document.createElement("button");
        removeButton.setAttribute("type", "button");
        removeButton.addEventListener("click", () => {
          $(contenttr).remove();
        }, false);
        removeButton.textContent = "移除";
        contenttd.appendChild(removeButton);
        contenttr.appendChild(contenttd);
        contenttd = document.createElement("td");
        let input = document.createElement("input");
        input.setAttribute("type", "text");
        input.className = "twinkle-config-customlist-value";
        input.style.width = "97%";
        if (value) {
          input.setAttribute("value", value);
        }
        contenttd.appendChild(input);
        contenttr.appendChild(contenttd);
        contenttd = document.createElement("td");
        input = document.createElement("input");
        input.setAttribute("type", "text");
        input.className = "twinkle-config-customlist-label";
        input.style.width = "98%";
        if (label) {
          input.setAttribute("value", label);
        }
        contenttd.appendChild(input);
        contenttr.appendChild(contenttd);
        dlgtable.appendChild(contenttr);
      };
      Twinkle.config.listDialog.display = (e) => {
        var _curpref$customListVa, _curpref$customListLa;
        const $prefbutton = $(e.target);
        const curvalue = $prefbutton.data("value");
        const curpref = $prefbutton.data("pref");
        const dialog = new Morebits.simpleWindow(720, 400);
        dialog.setTitle(curpref.label);
        dialog.setScriptName(window.wgULS("Twinkle参数设置", "Twinkle偏好設定"));
        const dialogcontent = document.createElement("div");
        const dlgtable = document.createElement("table");
        dlgtable.className = "wikitable";
        dlgtable.style.margin = "1.4em 1em";
        dlgtable.style.width = "97%";
        const dlgtbody = document.createElement("tbody");
        let dlgtr = document.createElement("tr");
        let dlgth = document.createElement("th");
        dlgth.style.width = "5%";
        dlgtr.appendChild(dlgth);
        dlgth = document.createElement("th");
        dlgth.style.width = "35%";
        dlgth.textContent = (_curpref$customListVa = curpref.customListValueTitle) !== null && _curpref$customListVa !== void 0 ? _curpref$customListVa : window.wgULS("数值", "數值");
        dlgtr.appendChild(dlgth);
        dlgth = document.createElement("th");
        dlgth.style.width = "60%";
        dlgth.textContent = (_curpref$customListLa = curpref.customListLabelTitle) !== null && _curpref$customListLa !== void 0 ? _curpref$customListLa : window.wgULS("标签", "標籤");
        dlgtr.appendChild(dlgth);
        dlgtbody.appendChild(dlgtr);
        let gotRow = false;
        var _iterator70 = _createForOfIteratorHelper(curvalue), _step70;
        try {
          for (_iterator70.s(); !(_step70 = _iterator70.n()).done; ) {
            const v = _step70.value;
            gotRow = true;
            Twinkle.config.listDialog.addRow(dlgtbody, v.value, v.label);
          }
        } catch (err) {
          _iterator70.e(err);
        } finally {
          _iterator70.f();
        }
        if (!gotRow) {
          Twinkle.config.listDialog.addRow(dlgtbody);
        }
        const dlgtfoot = document.createElement("tfoot");
        dlgtr = document.createElement("tr");
        const dlgtd = document.createElement("td");
        dlgtd.setAttribute("colspan", "3");
        const addButton = document.createElement("button");
        addButton.style.minWidth = "8em";
        addButton.setAttribute("type", "button");
        addButton.addEventListener("click", () => {
          Twinkle.config.listDialog.addRow(dlgtbody);
        }, false);
        addButton.textContent = "添加";
        dlgtd.appendChild(addButton);
        dlgtr.appendChild(dlgtd);
        dlgtfoot.appendChild(dlgtr);
        dlgtable.appendChild(dlgtbody);
        dlgtable.appendChild(dlgtfoot);
        dialogcontent.appendChild(dlgtable);
        let button = document.createElement("button");
        button.setAttribute("type", "submit");
        button.addEventListener("click", () => {
          Twinkle.config.listDialog.save($prefbutton, dlgtbody);
          dialog.close();
        }, false);
        button.textContent = window.wgULS("保存修改", "儲存修改");
        dialogcontent.appendChild(button);
        button = document.createElement("button");
        button.setAttribute("type", "submit");
        button.addEventListener("click", () => {
          Twinkle.config.listDialog.reset($prefbutton, dlgtbody);
        }, false);
        button.textContent = window.wgULS("复位", "復位");
        dialogcontent.appendChild(button);
        button = document.createElement("button");
        button.setAttribute("type", "submit");
        button.addEventListener("click", () => {
          dialog.close();
        }, false);
        button.textContent = "取消";
        dialogcontent.appendChild(button);
        dialog.setContent(dialogcontent);
        dialog.display();
      };
      Twinkle.config.listDialog.reset = (button, tbody) => {
        const $button = $(button);
        const curpref = $button.data("pref");
        const oldvalue = $button.data("value");
        Twinkle.config.resetPref(curpref);
        const $tbody = $(tbody);
        $tbody.find("tr").slice(1).remove();
        const curvalue = $button.data("value");
        var _iterator71 = _createForOfIteratorHelper(curvalue), _step71;
        try {
          for (_iterator71.s(); !(_step71 = _iterator71.n()).done; ) {
            const v = _step71.value;
            Twinkle.config.listDialog.addRow(tbody, v.value, v.label);
          }
        } catch (err) {
          _iterator71.e(err);
        } finally {
          _iterator71.f();
        }
        $button.data("value", oldvalue);
      };
      Twinkle.config.listDialog.save = (button, tbody) => {
        const result = [];
        let current = {};
        $(tbody).find('input[type="text"]').each((inputkey, input) => {
          if ($(input).hasClass("twinkle-config-customlist-value")) {
            current = {
              value: input.value
            };
          } else {
            current.label = input.value;
            if (current.value || current.label) {
              result[result.length] = current;
            }
          }
        });
        $(button).data("value", result);
      };
      Twinkle.config.resetPrefLink = (e) => {
        const wantedpref = e.target.id.slice(21);
        $(Twinkle.config.sections).each((sectionkey, section) => {
          if (section.hidden || section.adminOnly && !Morebits.userIsSysop) {
            return true;
          }
          let foundit = false;
          $(section.preferences).each((prefkey, pref) => {
            if (pref.name !== wantedpref) {
              return true;
            }
            Twinkle.config.resetPref(pref);
            foundit = true;
            return false;
          });
          if (foundit) {
            return false;
          }
        });
        return false;
      };
      Twinkle.config.resetPref = (pref) => {
        switch (pref.type) {
          case "boolean":
            document.querySelector("#".concat(pref.name)).checked = Twinkle.defaultConfig[pref.name];
            break;
          case "string":
          case "integer":
          case "enum":
            document.querySelector("#".concat(pref.name)).value = Twinkle.defaultConfig[pref.name];
            break;
          case "set":
            for (var _i19 = 0, _Object$entries12 = Object.entries(pref.setValues); _i19 < _Object$entries12.length; _i19++) {
              const [itemkey] = _Object$entries12[_i19];
              if (document.querySelector("#".concat(pref.name, "_").concat(itemkey))) {
                document.querySelector("#".concat(pref.name, "_").concat(itemkey)).checked = Twinkle.defaultConfig[pref.name].includes(itemkey);
              }
            }
            break;
          case "customList":
            $(document.querySelector("#".concat(pref.name))).data("value", Twinkle.defaultConfig[pref.name]);
            break;
          default:
            void mw.notify("twinkleconfig: unknown data type for preference ".concat(pref.name), {
              type: "warn",
              tag: "twinkleconfig"
            });
            break;
        }
      };
      Twinkle.config.resetAllPrefs = () => {
        $(Twinkle.config.sections).each((sectionkey, section) => {
          if (section.hidden || section.adminOnly && !Morebits.userIsSysop) {
            return true;
          }
          $(section.preferences).each((prefkey, pref) => {
            if (!pref.adminOnly || Morebits.userIsSysop) {
              Twinkle.config.resetPref(pref);
            }
          });
          return true;
        });
        return false;
      };
      Twinkle.config.save = (e) => {
        Morebits.status.init(document.querySelector("#twinkle-config-content"));
        const userjs = "".concat(mw.config.get("wgFormattedNamespaces")[mw.config.get("wgNamespaceIds").user], ":").concat(mw.config.get("wgUserName"), "/twinkleoptions.js");
        const ysarchives_page = new Morebits.wiki.page(userjs, window.wgULS("保存参数设置到 ", "儲存偏好設定到 ") + userjs);
        ysarchives_page.setCallbackParameters(e.target);
        ysarchives_page.load(Twinkle.config.writePrefs);
        return false;
      };
      Twinkle.config.writePrefs = (pageobj) => {
        const form = pageobj.getCallbackParameters();
        const newConfig = {
          optionsVersion: 2.1
        };
        const compare = (a, b) => {
          if (Array.isArray(a)) {
            if (a.length !== b.length) {
              return false;
            }
            a.sort();
            b.sort();
            var _iterator72 = _createForOfIteratorHelper(a.entries()), _step72;
            try {
              for (_iterator72.s(); !(_step72 = _iterator72.n()).done; ) {
                const [i, element] = _step72.value;
                if (typeof element === "object" && (element.label !== b[i].label || element.value !== b[i].value)) {
                  return false;
                } else if (element.toString() !== b[i].toString()) {
                  return false;
                }
              }
            } catch (err) {
              _iterator72.e(err);
            } finally {
              _iterator72.f();
            }
            return true;
          }
          return a === b;
        };
        $(Twinkle.config.sections).each((sectionkey, section) => {
          if (section.adminOnly && !Morebits.userIsSysop) {
            return;
          }
          $(section.preferences).each((prefkey, pref) => {
            let userValue;
            if (!pref.adminOnly || Morebits.userIsSysop) {
              if (!section.hidden) {
                switch (pref.type) {
                  case "boolean":
                    userValue = form[pref.name].checked;
                    break;
                  case "string":
                  // read from the input box or combo box
                  case "enum":
                    userValue = form[pref.name].value;
                    break;
                  case "integer":
                    userValue = Number.parseInt(form[pref.name].value, 10);
                    if (Number.isNaN(userValue)) {
                      Morebits.status.warn(window.wgULS("保存", "儲存"), "".concat(window.wgULS("您为 ", "您為 ") + pref.name, " 指定的值（").concat(pref.value).concat(window.wgULS("）不合法，会继续保存操作，但此值将会跳过。", "）不合法，會繼續儲存操作，但此值將會跳過。")));
                      userValue = null;
                    }
                    break;
                  case "set":
                    userValue = [];
                    if (pref.setDisplayOrder) {
                      var _iterator73 = _createForOfIteratorHelper(pref.setDisplayOrder), _step73;
                      try {
                        for (_iterator73.s(); !(_step73 = _iterator73.n()).done; ) {
                          const item = _step73.value;
                          if (form["".concat(pref.name, "_").concat(item)].checked) {
                            userValue[userValue.length] = item;
                          }
                        }
                      } catch (err) {
                        _iterator73.e(err);
                      } finally {
                        _iterator73.f();
                      }
                    } else {
                      for (var _i20 = 0, _Object$entries13 = Object.entries(pref.setValues); _i20 < _Object$entries13.length; _i20++) {
                        const [itemkey] = _Object$entries13[_i20];
                        if (form["".concat(pref.name, "_").concat(itemkey)].checked) {
                          userValue[userValue.length] = itemkey;
                        }
                      }
                    }
                    break;
                  case "customList":
                    userValue = $(form[pref.name]).data("value");
                    break;
                  default:
                    void mw.notify("twinkleconfig: 未知数据类型，属性 ".concat(pref.name), {
                      type: "warn",
                      tag: "twinkleconfig"
                    });
                    break;
                }
              } else if (Twinkle.prefs) {
                userValue = Twinkle.prefs[pref.name];
              }
            }
            if (userValue !== void 0 && !compare(userValue, Twinkle.defaultConfig[pref.name])) {
              newConfig[pref.name] = userValue;
            }
          });
        });
        const nowiki = "nowiki";
        let text = "// <".concat(nowiki, ">\n").concat(window.wgULS("// twinkleoptions.js：用户Twinkle参数设置文件\n//\n// 注：修改您的参数设置最简单的办法是使用\n// Twinkle参数设置面板，在[[".concat(Morebits.pageNameNorm, "]]。\n//\n// 这个文件是自动生成的，您所做的任何修改（除了\n// 以一种合法的JavaScript的方式来修改这些属性值）会\n// 在下一次您点击“保存”时被覆盖。\n// 修改此文件时，请记得使用合法的JavaScript。\n"), "// twinkleoptions.js：使用者Twinkle參數設定檔案\n//\n// 註：修改您的參數設定最簡單的辦法是使用\n// Twinkle參數設定面板，在[[".concat(Morebits.pageNameNorm, "]]。\n//\n// 這個檔案是自動產生的，您所做的任何修改（除了\n// 以一種合法的JavaScript的方式來修改這些屬性值）會\n// 在下一次您點擊「儲存」時被覆蓋。\n// 修改此檔案時，請記得使用合法的JavaScript。\n")));
        text += "\nwindow.Twinkle = window.Twinkle || {};\nwindow.Twinkle.prefs = window.Twinkle.prefs || {};\nwindow.Twinkle.prefs = ";
        text += JSON.stringify(newConfig, null, 2);
        text += ";\n\n".concat(window.wgULS("// twinkleoptions.js到此为止\n", "// twinkleoptions.js到此為止\n"), "// </").concat(nowiki, ">");
        pageobj.setPageText(text);
        pageobj.setEditSummary(window.wgULS("保存Twinkle参数设置：来自[[", "儲存Twinkle偏好設定：來自[[") + Morebits.pageNameNorm + window.wgULS("]]的自动编辑", "]]的自動編輯"));
        pageobj.setChangeTags(Twinkle.changeTags);
        pageobj.setCreateOption("recreate");
        pageobj.save(Twinkle.config.saveSuccess);
      };
      Twinkle.config.saveSuccess = (pageobj) => {
        pageobj.getStatusElement().info("成功");
        const noticebox = document.createElement("div");
        noticebox.className = "mw-message-box mw-message-box-success";
        noticebox.style.fontSize = "100%";
        noticebox.style.marginTop = "2em";
        noticebox.innerHTML = "<p><b>".concat(window.wgULS("您的Twinkle参数设置已被保存。", "您的Twinkle偏好設定已被儲存。"), "</b></p><p>").concat(window.wgULS("要看到这些更改，您可能需要", "要看到這些更改，您可能需要"), '<a href="').concat(mw.util.getUrl("LIB:BYPASS"), '" title="LIB:BYPASS"><b>').concat(window.wgULS("绕过浏览器缓存", "繞過瀏覽器快取"), "</b></a>。</p>");
        Morebits.status.root.appendChild(noticebox);
        const noticeclear = document.createElement("br");
        noticeclear.style.clear = "both";
        Morebits.status.root.appendChild(noticeclear);
      };
      Twinkle.addInitCallback(Twinkle.config.init);
    })(jQuery);
  }
});
//! src/Twinkle/Twinkle.js
(function() {
  var _twinkleLoad = _asyncToGenerator(function* () {
    yield Promise.resolve().then(() => (init_twinkle(), twinkle_exports));
    yield Promise.resolve().then(() => (init_twinklearv(), twinklearv_exports));
    yield Promise.resolve().then(() => (init_twinklewarn(), twinklewarn_exports));
    yield Promise.resolve().then(() => (init_twinkleblock(), twinkleblock_exports));
    yield Promise.resolve().then(() => (init_friendlytalkback(), friendlytalkback_exports));
    yield Promise.resolve().then(() => (init_twinklespeedy(), twinklespeedy_exports));
    yield Promise.resolve().then(() => (init_twinklecopyvio(), twinklecopyvio_exports));
    yield Promise.resolve().then(() => (init_twinklexfd(), twinklexfd_exports));
    yield Promise.resolve().then(() => (init_twinkleimage(), twinkleimage_exports));
    yield Promise.resolve().then(() => (init_twinkleprotect(), twinkleprotect_exports));
    yield Promise.resolve().then(() => (init_friendlytag(), friendlytag_exports));
    yield Promise.resolve().then(() => (init_twinklestub(), twinklestub_exports));
    yield Promise.resolve().then(() => (init_twinklediff(), twinklediff_exports));
    yield Promise.resolve().then(() => (init_twinkleunlink(), twinkleunlink_exports));
    yield Promise.resolve().then(() => (init_twinklefluff(), twinklefluff_exports));
    yield Promise.resolve().then(() => (init_twinklebatchdelete(), twinklebatchdelete_exports));
    yield Promise.resolve().then(() => (init_twinklebatchundelete(), twinklebatchundelete_exports));
    yield Promise.resolve().then(() => (init_twinklebatchprotect(), twinklebatchprotect_exports));
    yield Promise.resolve().then(() => (init_twinkleclose(), twinkleclose_exports));
    yield Promise.resolve().then(() => (init_twinkleconfig(), twinkleconfig_exports));
  });
  function twinkleLoad() {
    return _twinkleLoad.apply(this, arguments);
  }
  return twinkleLoad;
})()();

})();

/* </nowiki> */

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwtdGhpcy5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnZpcm9ubWVudC11c2VyLWFnZW50LmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW52aXJvbm1lbnQtdjgtdmVyc2lvbi5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24uanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RyeS10by1zdHJpbmcuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWNhbGxhYmxlLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LW1ldGhvZC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5LmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5LmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1Zy5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWFrLW1hcC1iYXNpYy1kZXRlY3Rpb24uanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4uanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4uanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLXRydW5jLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3Nvci5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5pdGVyYXRvci5jb25zdHJ1Y3Rvci5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY3JlYXRlLXByb3h5LmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuaXRlcmF0b3IuZmlsdGVyLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5pdGVyYXRvci5maW5kLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItbWFwLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuNDEuMC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLml0ZXJhdG9yLm1hcC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5pdGVyYXRvci5yZWR1Y2UuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy40MS4wL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuaXRlcmF0b3Iuc29tZS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjQxLjAvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5pdGVyYXRvci50by1hcnJheS5qcyIsICIuLi8uLi9zcmMvVHdpbmtsZS9tb2R1bGVzL2FwaS50cyIsICIuLi8uLi9zcmMvVHdpbmtsZS9tb2R1bGVzL3R3aW5rbGUuanMiLCAiLi4vLi4vc3JjL1R3aW5rbGUvbW9kdWxlcy90d2lua2xlYXJ2LmpzIiwgIi4uLy4uL3NyYy9Ud2lua2xlL21vZHVsZXMvdHdpbmtsZXdhcm4uanMiLCAiLi4vLi4vc3JjL1R3aW5rbGUvbW9kdWxlcy90d2lua2xlYmxvY2suanMiLCAiLi4vLi4vc3JjL1R3aW5rbGUvbW9kdWxlcy9mcmllbmRseXRhbGtiYWNrLmpzIiwgIi4uLy4uL3NyYy9Ud2lua2xlL21vZHVsZXMvdHdpbmtsZXNwZWVkeS5qcyIsICIuLi8uLi9zcmMvVHdpbmtsZS9tb2R1bGVzL3R3aW5rbGVjb3B5dmlvLmpzIiwgIi4uLy4uL3NyYy9Ud2lua2xlL21vZHVsZXMvdHdpbmtsZXhmZC5qcyIsICIuLi8uLi9zcmMvVHdpbmtsZS9tb2R1bGVzL3R3aW5rbGVpbWFnZS5qcyIsICIuLi8uLi9zcmMvVHdpbmtsZS9tb2R1bGVzL3R3aW5rbGVwcm90ZWN0LmpzIiwgIi4uLy4uL3NyYy9Ud2lua2xlL21vZHVsZXMvZnJpZW5kbHl0YWcuanMiLCAiLi4vLi4vc3JjL1R3aW5rbGUvbW9kdWxlcy90d2lua2xlc3R1Yi5qcyIsICIuLi8uLi9zcmMvVHdpbmtsZS9tb2R1bGVzL3R3aW5rbGVkaWZmLmpzIiwgIi4uLy4uL3NyYy9Ud2lua2xlL21vZHVsZXMvdHdpbmtsZXVubGluay5qcyIsICIuLi8uLi9zcmMvVHdpbmtsZS9tb2R1bGVzL3R3aW5rbGVmbHVmZi5qcyIsICIuLi8uLi9zcmMvVHdpbmtsZS9tb2R1bGVzL3R3aW5rbGViYXRjaGRlbGV0ZS5qcyIsICIuLi8uLi9zcmMvVHdpbmtsZS9tb2R1bGVzL3R3aW5rbGViYXRjaHVuZGVsZXRlLmpzIiwgIi4uLy4uL3NyYy9Ud2lua2xlL21vZHVsZXMvdHdpbmtsZWJhdGNocHJvdGVjdC5qcyIsICIuLi8uLi9zcmMvVHdpbmtsZS9tb2R1bGVzL3R3aW5rbGVjbG9zZS5qcyIsICIuLi8uLi9zcmMvVHdpbmtsZS9tb2R1bGVzL3R3aW5rbGVjb25maWcuanMiLCAiLi4vLi4vc3JjL1R3aW5rbGUvVHdpbmtsZS5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiJ3VzZSBzdHJpY3QnO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgY2hlY2sodHlwZW9mIHRoaXMgPT0gJ29iamVjdCcgJiYgdGhpcykgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPT0gNztcbn0pO1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1mdW5jdGlvbi1wcm90b3R5cGUtYmluZCAtLSBzYWZlXG4gIHZhciB0ZXN0ID0gKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkuYmluZCgpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuIHR5cGVvZiB0ZXN0ICE9ICdmdW5jdGlvbicgfHwgdGVzdC5oYXNPd25Qcm9wZXJ0eSgncHJvdG90eXBlJyk7XG59KTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1mdW5jdGlvbi1wcm90b3R5cGUtYmluZCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGNhbGwpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbC5hcHBseShjYWxsLCBhcmd1bWVudHMpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsICIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgY2FsbCA9IEZ1bmN0aW9uUHJvdG90eXBlLmNhbGw7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tZnVuY3Rpb24tcHJvdG90eXBlLWJpbmQgLS0gc2FmZVxudmFyIHVuY3VycnlUaGlzV2l0aEJpbmQgPSBOQVRJVkVfQklORCAmJiBGdW5jdGlvblByb3RvdHlwZS5iaW5kLmJpbmQoY2FsbCwgY2FsbCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyB1bmN1cnJ5VGhpc1dpdGhCaW5kIDogZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNhbGwuYXBwbHkoZm4sIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoe30udG9TdHJpbmcpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gc3RyaW5nU2xpY2UodG9TdHJpbmcoaXQpLCA4LCAtMSk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICEkT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT09ICdTdHJpbmcnID8gc3BsaXQoaXQsICcnKSA6ICRPYmplY3QoaXQpO1xufSA6ICRPYmplY3Q7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuLy8gd2UgY2FuJ3QgdXNlIGp1c3QgYGl0ID09IG51bGxgIHNpbmNlIG9mIGBkb2N1bWVudC5hbGxgIHNwZWNpYWwgY2FzZVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1Jc0hUTUxEREEtaW50ZXJuYWwtc2xvdC1hZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gbnVsbCB8fCBpdCA9PT0gdW5kZWZpbmVkO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKGl0KSkgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsICIndXNlIHN0cmljdCc7XG4vLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwgIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtSXNIVE1MRERBLWludGVybmFsLXNsb3RcbnZhciBkb2N1bWVudEFsbCA9IHR5cGVvZiBkb2N1bWVudCA9PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5hbGw7XG5cbi8vIGBJc0NhbGxhYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdHlwZW9mLXVuZGVmaW5lZCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgZG9jdW1lbnRBbGwgPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnRBbGwgIT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbicgfHwgYXJndW1lbnQgPT09IGRvY3VtZW50QWxsO1xufSA6IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbic7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IGlzQ2FsbGFibGUoaXQpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsVGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwtdGhpcycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNDYWxsYWJsZShhcmd1bWVudCkgPyBhcmd1bWVudCA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihnbG9iYWxUaGlzW25hbWVzcGFjZV0pIDogZ2xvYmFsVGhpc1tuYW1lc3BhY2VdICYmIGdsb2JhbFRoaXNbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdW5jdXJyeVRoaXMoe30uaXNQcm90b3R5cGVPZik7XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbFRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsLXRoaXMnKTtcblxudmFyIG5hdmlnYXRvciA9IGdsb2JhbFRoaXMubmF2aWdhdG9yO1xudmFyIHVzZXJBZ2VudCA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZXJBZ2VudCA/IFN0cmluZyh1c2VyQWdlbnQpIDogJyc7XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbFRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsLXRoaXMnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW52aXJvbm1lbnQtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbFRoaXMucHJvY2VzcztcbnZhciBEZW5vID0gZ2xvYmFsVGhpcy5EZW5vO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zIHx8IERlbm8gJiYgRGVuby52ZXJzaW9uO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIC8vIGluIG9sZCBDaHJvbWUsIHZlcnNpb25zIG9mIFY4IGlzbid0IFY4ID0gQ2hyb21lIC8gMTBcbiAgLy8gYnV0IHRoZWlyIGNvcnJlY3QgdmVyc2lvbnMgYXJlIG5vdCBpbnRlcmVzdGluZyBmb3IgdXNcbiAgdmVyc2lvbiA9IG1hdGNoWzBdID4gMCAmJiBtYXRjaFswXSA8IDQgPyAxIDogKyhtYXRjaFswXSArIG1hdGNoWzFdKTtcbn1cblxuLy8gQnJvd3NlckZTIE5vZGVKUyBgcHJvY2Vzc2AgcG9seWZpbGwgaW5jb3JyZWN0bHkgc2V0IGAudjhgIHRvIGAwLjBgXG4vLyBzbyBjaGVjayBgdXNlckFnZW50YCBldmVuIGlmIGAudjhgIGV4aXN0cywgYnV0IDBcbmlmICghdmVyc2lvbiAmJiB1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSArbWF0Y2hbMV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJzaW9uO1xuIiwgIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW52aXJvbm1lbnQtdjgtdmVyc2lvbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsVGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwtdGhpcycpO1xuXG52YXIgJFN0cmluZyA9IGdsb2JhbFRoaXMuU3RyaW5nO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgnc3ltYm9sIGRldGVjdGlvbicpO1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBgZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzYCBwb2x5ZmlsbCBzeW1ib2xzIGNvbnZlcnRlZCB0byBvYmplY3QgYXJlIG5vdCBTeW1ib2wgaW5zdGFuY2VzXG4gIC8vIG5iOiBEbyBub3QgY2FsbCBgU3RyaW5nYCBkaXJlY3RseSB0byBhdm9pZCB0aGlzIGJlaW5nIG9wdGltaXplZCBvdXQgdG8gYHN5bWJvbCsnJ2Agd2hpY2ggd2lsbCxcbiAgLy8gb2YgY291cnNlLCBmYWlsLlxuICByZXR1cm4gISRTdHJpbmcoc3ltYm9sKSB8fCAhKE9iamVjdChzeW1ib2wpIGluc3RhbmNlb2YgU3ltYm9sKSB8fFxuICAgIC8vIENocm9tZSAzOC00MCBzeW1ib2xzIGFyZSBub3QgaW5oZXJpdGVkIGZyb20gRE9NIGNvbGxlY3Rpb25zIHByb3RvdHlwZXMgdG8gaW5zdGFuY2VzXG4gICAgIVN5bWJvbC5zaGFtICYmIFY4X1ZFUlNJT04gJiYgVjhfVkVSU0lPTiA8IDQxO1xufSk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTCAmJlxuICAhU3ltYm9sLnNoYW0gJiZcbiAgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsICIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbm1vZHVsZS5leHBvcnRzID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgcmV0dXJuIGlzQ2FsbGFibGUoJFN5bWJvbCkgJiYgaXNQcm90b3R5cGVPZigkU3ltYm9sLnByb3RvdHlwZSwgJE9iamVjdChpdCkpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgJFN0cmluZyA9IFN0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJFN0cmluZyhhcmd1bWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICdPYmplY3QnO1xuICB9XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogSXNDYWxsYWJsZShhcmd1bWVudCkgaXMgdHJ1ZWBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyBuZXcgJFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG5cbi8vIGBHZXRNZXRob2RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRtZXRob2Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFYsIFApIHtcbiAgdmFyIGZ1bmMgPSBWW1BdO1xuICByZXR1cm4gaXNOdWxsT3JVbmRlZmluZWQoZnVuYykgPyB1bmRlZmluZWQgOiBhQ2FsbGFibGUoZnVuYyk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgT3JkaW5hcnlUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAocHJlZiA9PT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKGlzQ2FsbGFibGUoZm4gPSBpbnB1dC52YWx1ZU9mKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHByZWYgIT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IG5ldyAkVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWxUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbC10aGlzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFsVGhpcywga2V5LCB7IHZhbHVlOiB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxUaGlzW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnbG9iYWxUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbC10aGlzJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFRoaXNbU0hBUkVEXSB8fCBkZWZpbmVHbG9iYWxQcm9wZXJ0eShTSEFSRUQsIHt9KTtcblxuKHN0b3JlLnZlcnNpb25zIHx8IChzdG9yZS52ZXJzaW9ucyA9IFtdKSkucHVzaCh7XG4gIHZlcnNpb246ICczLjQxLjAnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTQtMjAyNSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KScsXG4gIGxpY2Vuc2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iL3YzLjQxLjAvTElDRU5TRScsXG4gIHNvdXJjZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzJ1xufSk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgfHwge30pO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gJE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGhhc093blByb3BlcnR5ID0gdW5jdXJyeVRoaXMoe30uaGFzT3duUHJvcGVydHkpO1xuXG4vLyBgSGFzT3duUHJvcGVydHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1oYXNvd25wcm9wZXJ0eVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1oYXNvd24gLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaGFzT3duIHx8IGZ1bmN0aW9uIGhhc093bihpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eSh0b09iamVjdChpdCksIGtleSk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcbnZhciB0b1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArIHRvU3RyaW5nKCsraWQgKyBwb3N0Zml4LCAzNik7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWxUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbC10aGlzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBTeW1ib2wgPSBnbG9iYWxUaGlzLlN5bWJvbDtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sWydmb3InXSB8fCBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzT3duKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkpIHtcbiAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBOQVRJVkVfU1lNQk9MICYmIGhhc093bihTeW1ib2wsIG5hbWUpXG4gICAgICA/IFN5bWJvbFtuYW1lXVxuICAgICAgOiBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBleG90aWNUb1ByaW0gPSBnZXRNZXRob2QoaW5wdXQsIFRPX1BSSU1JVElWRSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChleG90aWNUb1ByaW0pIHtcbiAgICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ2RlZmF1bHQnO1xuICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7XG4gICAgaWYgKCFpc09iamVjdChyZXN1bHQpIHx8IGlzU3ltYm9sKHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG4gIH1cbiAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdudW1iZXInO1xuICByZXR1cm4gb3JkaW5hcnlUb1ByaW1pdGl2ZShpbnB1dCwgcHJlZik7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcblxuLy8gYFRvUHJvcGVydHlLZXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBrZXkgKyAnJztcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbFRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsLXRoaXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsVGhpcy5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFua3MgdG8gSUU4IGZvciBpdHMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT09IDc7XG59KTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzT3duKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYsIE8sIFApLCBPW1BdKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVjggfiBDaHJvbWUgMzYtXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMzM0XG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgJ3Byb3RvdHlwZScsIHtcbiAgICB2YWx1ZTogNDIsXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pLnByb3RvdHlwZSAhPT0gNDI7XG59KTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IFR5cGUoYXJndW1lbnQpIGlzIE9iamVjdGBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc09iamVjdChhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJFN0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1ZycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIEVOVU1FUkFCTEUgPSAnZW51bWVyYWJsZSc7XG52YXIgQ09ORklHVVJBQkxFID0gJ2NvbmZpZ3VyYWJsZSc7XG52YXIgV1JJVEFCTEUgPSAnd3JpdGFibGUnO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAodHlwZW9mIE8gPT09ICdmdW5jdGlvbicgJiYgUCA9PT0gJ3Byb3RvdHlwZScgJiYgJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzICYmIFdSSVRBQkxFIGluIEF0dHJpYnV0ZXMgJiYgIUF0dHJpYnV0ZXNbV1JJVEFCTEVdKSB7XG4gICAgdmFyIGN1cnJlbnQgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnRbV1JJVEFCTEVdKSB7XG4gICAgICBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogQ09ORklHVVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0NPTkZJR1VSQUJMRV0gOiBjdXJyZW50W0NPTkZJR1VSQUJMRV0sXG4gICAgICAgIGVudW1lcmFibGU6IEVOVU1FUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbRU5VTUVSQUJMRV0gOiBjdXJyZW50W0VOVU1FUkFCTEVdLFxuICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9IHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG59IDogJGRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBuZXcgJFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIEVYSVNUUyA9IGhhc093bihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTtcbi8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXNcbnZhciBQUk9QRVIgPSBFWElTVFMgJiYgKGZ1bmN0aW9uIHNvbWV0aGluZygpIHsgLyogZW1wdHkgKi8gfSkubmFtZSA9PT0gJ3NvbWV0aGluZyc7XG52YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFWElTVFM6IEVYSVNUUyxcbiAgUFJPUEVSOiBQUk9QRVIsXG4gIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb24udG9TdHJpbmcpO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYGNvcmUtanNAMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAoIWlzQ2FsbGFibGUoc3RvcmUuaW5zcGVjdFNvdXJjZSkpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWxUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbC10aGlzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbFRoaXMuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0NhbGxhYmxlKFdlYWtNYXApICYmIC9uYXRpdmUgY29kZS8udGVzdChTdHJpbmcoV2Vha01hcCkpO1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2Vhay1tYXAtYmFzaWMtZGV0ZWN0aW9uJyk7XG52YXIgZ2xvYmFsVGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwtdGhpcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEID0gJ09iamVjdCBhbHJlYWR5IGluaXRpYWxpemVkJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWxUaGlzLlR5cGVFcnJvcjtcbnZhciBXZWFrTWFwID0gZ2xvYmFsVGhpcy5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVAgfHwgc2hhcmVkLnN0YXRlKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtYXNzaWduIC0tIHByb3RvdHlwZSBtZXRob2RzIHByb3RlY3Rpb24gKi9cbiAgc3RvcmUuZ2V0ID0gc3RvcmUuZ2V0O1xuICBzdG9yZS5oYXMgPSBzdG9yZS5oYXM7XG4gIHN0b3JlLnNldCA9IHN0b3JlLnNldDtcbiAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWFzc2lnbiAtLSBwcm90b3R5cGUgbWV0aG9kcyBwcm90ZWN0aW9uICovXG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAoc3RvcmUuaGFzKGl0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgc3RvcmUuc2V0KGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0KGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHN0b3JlLmhhcyhpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChoYXNPd24oaXQsIFNUQVRFKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLkNPTkZJR1VSQUJMRTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyICRTdHJpbmcgPSBTdHJpbmc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG52YXIgQ09ORklHVVJBQkxFX0xFTkdUSCA9IERFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdsZW5ndGgnLCB7IHZhbHVlOiA4IH0pLmxlbmd0aCAhPT0gODtcbn0pO1xuXG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbnZhciBtYWtlQnVpbHRJbiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChzdHJpbmdTbGljZSgkU3RyaW5nKG5hbWUpLCAwLCA3KSA9PT0gJ1N5bWJvbCgnKSB7XG4gICAgbmFtZSA9ICdbJyArIHJlcGxhY2UoJFN0cmluZyhuYW1lKSwgL15TeW1ib2xcXCgoW14pXSopXFwpLiokLywgJyQxJykgKyAnXSc7XG4gIH1cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nZXR0ZXIpIG5hbWUgPSAnZ2V0ICcgKyBuYW1lO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNldHRlcikgbmFtZSA9ICdzZXQgJyArIG5hbWU7XG4gIGlmICghaGFzT3duKHZhbHVlLCAnbmFtZScpIHx8IChDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSAmJiB2YWx1ZS5uYW1lICE9PSBuYW1lKSkge1xuICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkodmFsdWUsICduYW1lJywgeyB2YWx1ZTogbmFtZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAgIGVsc2UgdmFsdWUubmFtZSA9IG5hbWU7XG4gIH1cbiAgaWYgKENPTkZJR1VSQUJMRV9MRU5HVEggJiYgb3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgJ2FyaXR5JykgJiYgdmFsdWUubGVuZ3RoICE9PSBvcHRpb25zLmFyaXR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkodmFsdWUsICdsZW5ndGgnLCB7IHZhbHVlOiBvcHRpb25zLmFyaXR5IH0pO1xuICB9XG4gIHRyeSB7XG4gICAgaWYgKG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsICdjb25zdHJ1Y3RvcicpICYmIG9wdGlvbnMuY29uc3RydWN0b3IpIHtcbiAgICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkodmFsdWUsICdwcm90b3R5cGUnLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTtcbiAgICAvLyBpbiBWOCB+IENocm9tZSA1MywgcHJvdG90eXBlcyBvZiBzb21lIG1ldGhvZHMsIGxpa2UgYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgLCBhcmUgbm9uLXdyaXRhYmxlXG4gICAgfSBlbHNlIGlmICh2YWx1ZS5wcm90b3R5cGUpIHZhbHVlLnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICB2YXIgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSk7XG4gIGlmICghaGFzT3duKHN0YXRlLCAnc291cmNlJykpIHtcbiAgICBzdGF0ZS5zb3VyY2UgPSBqb2luKFRFTVBMQVRFLCB0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJyA/IG5hbWUgOiAnJyk7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcblxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0ZW5kLW5hdGl2ZSAtLSByZXF1aXJlZFxuRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gbWFrZUJ1aWx0SW4oZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKHRoaXMpICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59LCAndG9TdHJpbmcnKTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBtYWtlQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYWtlLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucy5lbnVtZXJhYmxlO1xuICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uYW1lIDoga2V5O1xuICBpZiAoaXNDYWxsYWJsZSh2YWx1ZSkpIG1ha2VCdWlsdEluKHZhbHVlLCBuYW1lLCBvcHRpb25zKTtcbiAgaWYgKG9wdGlvbnMuZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBkZWZpbmVHbG9iYWxQcm9wZXJ0eShrZXksIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFvcHRpb25zLnVuc2FmZSkgZGVsZXRlIE9ba2V5XTtcbiAgICAgIGVsc2UgaWYgKE9ba2V5XSkgc2ltcGxlID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6ICFvcHRpb25zLm5vbkNvbmZpZ3VyYWJsZSxcbiAgICAgIHdyaXRhYmxlOiAhb3B0aW9ucy5ub25Xcml0YWJsZVxuICAgIH0pO1xuICB9IHJldHVybiBPO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBNYXRoLnRydW5jYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50cnVuY1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtdHJ1bmMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnRydW5jIHx8IGZ1bmN0aW9uIHRydW5jKHgpIHtcbiAgdmFyIG4gPSAreDtcbiAgcmV0dXJuIChuID4gMCA/IGZsb29yIDogY2VpbCkobik7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciB0cnVuYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLXRydW5jJyk7XG5cbi8vIGBUb0ludGVnZXJPckluZmluaXR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbnRlZ2Vyb3JpbmZpbml0eVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIG51bWJlciA9ICthcmd1bWVudDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgcmV0dXJuIG51bWJlciAhPT0gbnVtYmVyIHx8IG51bWJlciA9PT0gMCA/IDAgOiB0cnVuYyhudW1iZXIpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgbGVuID0gdG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudCk7XG4gIHJldHVybiBsZW4gPiAwID8gbWluKGxlbiwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYExlbmd0aE9mQXJyYXlMaWtlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbGVuZ3Rob2ZhcnJheWxpa2Vcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdG9MZW5ndGgob2JqLmxlbmd0aCk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICAgIGlmICh2YWx1ZSAhPT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSAmJiBoYXNPd24oTywga2V5KSAmJiBwdXNoKHJlc3VsdCwga2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhc093bihPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsICIndXNlIHN0cmljdCc7XG4vLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGNvbmNhdChrZXlzLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UsIGV4Y2VwdGlvbnMpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpICYmICEoZXhjZXB0aW9ucyAmJiBoYXNPd24oZXhjZXB0aW9ucywga2V5KSkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogaXNDYWxsYWJsZShkZXRlY3Rpb24pID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbFRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsLXRoaXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAgICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMuZG9udENhbGxHZXRTZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4gIG9wdGlvbnMubmFtZSAgICAgICAgICAgLSB0aGUgLm5hbWUgb2YgdGhlIGZ1bmN0aW9uIGlmIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBrZXlcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxUaGlzO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFRoaXNbVEFSR0VUXSB8fCBkZWZpbmVHbG9iYWxQcm9wZXJ0eShUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxUaGlzW1RBUkdFVF0gJiYgZ2xvYmFsVGhpc1tUQVJHRVRdLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLmRvbnRDYWxsR2V0U2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIGRlZmluZUJ1aWx0SW4odGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUHJvdG90eXBlKSB7XG4gIGlmIChpc1Byb3RvdHlwZU9mKFByb3RvdHlwZSwgaXQpKSByZXR1cm4gaXQ7XG4gIHRocm93IG5ldyAkVHlwZUVycm9yKCdJbmNvcnJlY3QgaW52b2NhdGlvbicpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gJE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyAkT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgdmFyIG9iamVjdCA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzT3duKG9iamVjdCwgSUVfUFJPVE8pKSByZXR1cm4gb2JqZWN0W0lFX1BST1RPXTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBpZiAoaXNDYWxsYWJsZShjb25zdHJ1Y3RvcikgJiYgb2JqZWN0IGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiAkT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIG1ha2VCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcikge1xuICBpZiAoZGVzY3JpcHRvci5nZXQpIG1ha2VCdWlsdEluKGRlc2NyaXB0b3IuZ2V0LCBuYW1lLCB7IGdldHRlcjogdHJ1ZSB9KTtcbiAgaWYgKGRlc2NyaXB0b3Iuc2V0KSBtYWtlQnVpbHRJbihkZXNjcmlwdG9yLnNldCwgbmFtZSwgeyBzZXR0ZXI6IHRydWUgfSk7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eS5mKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcik7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2tleV0gPSB2YWx1ZTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qta2V5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTICYmICFWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcHMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgcHJvcHNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsICIndXNlIHN0cmljdCc7XG4vKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUsIFdTSCAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtYXNzaWdubWVudCAtLSBhdm9pZCBtZW1vcnkgbGVha1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsO1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgYWN0aXZlWERvY3VtZW50ID0gbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJ1xuICAgID8gZG9jdW1lbnQuZG9tYWluICYmIGFjdGl2ZVhEb2N1bWVudFxuICAgICAgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgLy8gb2xkIElFXG4gICAgICA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpXG4gICAgOiBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCk7IC8vIFdTSFxuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtY3JlYXRlIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZihyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUta2V5cyAtLSBzYWZlICovXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbnZhciBORVdfSVRFUkFUT1JfUFJPVE9UWVBFID0gIWlzT2JqZWN0KEl0ZXJhdG9yUHJvdG90eXBlKSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXN0ID0ge307XG4gIC8vIEZGNDQtIGxlZ2FjeSBpdGVyYXRvcnMgY2FzZVxuICByZXR1cm4gSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwodGVzdCkgIT09IHRlc3Q7XG59KTtcblxuaWYgKE5FV19JVEVSQVRPUl9QUk9UT1RZUEUpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5lbHNlIGlmIChJU19QVVJFKSBJdGVyYXRvclByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLUBAaXRlcmF0b3JcbmlmICghaXNDYWxsYWJsZShJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gIGRlZmluZUJ1aWx0SW4oSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbFRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsLXRoaXMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3NvcicpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBDT05TVFJVQ1RPUiA9ICdjb25zdHJ1Y3Rvcic7XG52YXIgSVRFUkFUT1IgPSAnSXRlcmF0b3InO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xudmFyIE5hdGl2ZUl0ZXJhdG9yID0gZ2xvYmFsVGhpc1tJVEVSQVRPUl07XG5cbi8vIEZGNTYtIGhhdmUgbm9uLXN0YW5kYXJkIGdsb2JhbCBoZWxwZXIgYEl0ZXJhdG9yYFxudmFyIEZPUkNFRCA9IElTX1BVUkVcbiAgfHwgIWlzQ2FsbGFibGUoTmF0aXZlSXRlcmF0b3IpXG4gIHx8IE5hdGl2ZUl0ZXJhdG9yLnByb3RvdHlwZSAhPT0gSXRlcmF0b3JQcm90b3R5cGVcbiAgLy8gRkY0NC0gbm9uLXN0YW5kYXJkIGBJdGVyYXRvcmAgcGFzc2VzIHByZXZpb3VzIHRlc3RzXG4gIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7IE5hdGl2ZUl0ZXJhdG9yKHt9KTsgfSk7XG5cbnZhciBJdGVyYXRvckNvbnN0cnVjdG9yID0gZnVuY3Rpb24gSXRlcmF0b3IoKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgSXRlcmF0b3JQcm90b3R5cGUpO1xuICBpZiAoZ2V0UHJvdG90eXBlT2YodGhpcykgPT09IEl0ZXJhdG9yUHJvdG90eXBlKSB0aHJvdyBuZXcgJFR5cGVFcnJvcignQWJzdHJhY3QgY2xhc3MgSXRlcmF0b3Igbm90IGRpcmVjdGx5IGNvbnN0cnVjdGFibGUnKTtcbn07XG5cbnZhciBkZWZpbmVJdGVyYXRvclByb3RvdHlwZUFjY2Vzc29yID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKEl0ZXJhdG9yUHJvdG90eXBlLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAocmVwbGFjZW1lbnQpIHtcbiAgICAgICAgYW5PYmplY3QodGhpcyk7XG4gICAgICAgIGlmICh0aGlzID09PSBJdGVyYXRvclByb3RvdHlwZSkgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJZb3UgY2FuJ3QgcmVkZWZpbmUgdGhpcyBwcm9wZXJ0eVwiKTtcbiAgICAgICAgaWYgKGhhc093bih0aGlzLCBrZXkpKSB0aGlzW2tleV0gPSByZXBsYWNlbWVudDtcbiAgICAgICAgZWxzZSBjcmVhdGVQcm9wZXJ0eSh0aGlzLCBrZXksIHJlcGxhY2VtZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIEl0ZXJhdG9yUHJvdG90eXBlW2tleV0gPSB2YWx1ZTtcbn07XG5cbmlmICghaGFzT3duKEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkgZGVmaW5lSXRlcmF0b3JQcm90b3R5cGVBY2Nlc3NvcihUT19TVFJJTkdfVEFHLCBJVEVSQVRPUik7XG5cbmlmIChGT1JDRUQgfHwgIWhhc093bihJdGVyYXRvclByb3RvdHlwZSwgQ09OU1RSVUNUT1IpIHx8IEl0ZXJhdG9yUHJvdG90eXBlW0NPTlNUUlVDVE9SXSA9PT0gT2JqZWN0KSB7XG4gIGRlZmluZUl0ZXJhdG9yUHJvdG90eXBlQWNjZXNzb3IoQ09OU1RSVUNUT1IsIEl0ZXJhdG9yQ29uc3RydWN0b3IpO1xufVxuXG5JdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IEl0ZXJhdG9yUHJvdG90eXBlO1xuXG4vLyBgSXRlcmF0b3JgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWl0ZXJhdG9yXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBJdGVyYXRvcjogSXRlcmF0b3JDb25zdHJ1Y3RvclxufSk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuLy8gYEdldEl0ZXJhdG9yRGlyZWN0KG9iailgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnMvI3NlYy1nZXRpdGVyYXRvcmRpcmVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB7XG4gICAgaXRlcmF0b3I6IG9iaixcbiAgICBuZXh0OiBvYmoubmV4dCxcbiAgICBkb25lOiBmYWxzZVxuICB9O1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgZGVmaW5lQnVpbHRJbih0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsICIndXNlIHN0cmljdCc7XG4vLyBgQ3JlYXRlSXRlclJlc3VsdE9iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZWl0ZXJyZXN1bHRvYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBkb25lKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogZG9uZSB9O1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGtpbmQsIHZhbHVlKSB7XG4gIHZhciBpbm5lclJlc3VsdCwgaW5uZXJFcnJvcjtcbiAgYW5PYmplY3QoaXRlcmF0b3IpO1xuICB0cnkge1xuICAgIGlubmVyUmVzdWx0ID0gZ2V0TWV0aG9kKGl0ZXJhdG9yLCAncmV0dXJuJyk7XG4gICAgaWYgKCFpbm5lclJlc3VsdCkge1xuICAgICAgaWYgKGtpbmQgPT09ICd0aHJvdycpIHRocm93IHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpbm5lclJlc3VsdCA9IGNhbGwoaW5uZXJSZXN1bHQsIGl0ZXJhdG9yKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbm5lckVycm9yID0gdHJ1ZTtcbiAgICBpbm5lclJlc3VsdCA9IGVycm9yO1xuICB9XG4gIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgaWYgKGlubmVyRXJyb3IpIHRocm93IGlubmVyUmVzdWx0O1xuICBhbk9iamVjdChpbm5lclJlc3VsdCk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW5zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgSVRFUkFUT1JfSEVMUEVSID0gJ0l0ZXJhdG9ySGVscGVyJztcbnZhciBXUkFQX0ZPUl9WQUxJRF9JVEVSQVRPUiA9ICdXcmFwRm9yVmFsaWRJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xuXG52YXIgY3JlYXRlSXRlcmF0b3JQcm94eVByb3RvdHlwZSA9IGZ1bmN0aW9uIChJU19JVEVSQVRPUikge1xuICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKElTX0lURVJBVE9SID8gV1JBUF9GT1JfVkFMSURfSVRFUkFUT1IgOiBJVEVSQVRPUl9IRUxQRVIpO1xuXG4gIHJldHVybiBkZWZpbmVCdWlsdElucyhjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpLCB7XG4gICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAvLyBmb3Igc2ltcGxpZmljYXRpb246XG4gICAgICAvLyAgIGZvciBgJVdyYXBGb3JWYWxpZEl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBvciB3aXRoIGBzdGF0ZS5yZXR1cm5IYW5kbGVyUmVzdWx0YCBvdXIgYG5leHRIYW5kbGVyYCByZXR1cm5zIGBJdGVyUmVzdWx0T2JqZWN0YFxuICAgICAgLy8gICBmb3IgYCVJdGVyYXRvckhlbHBlclByb3RvdHlwZSUubmV4dGAgLSBqdXN0IGEgdmFsdWVcbiAgICAgIGlmIChJU19JVEVSQVRPUikgcmV0dXJuIHN0YXRlLm5leHRIYW5kbGVyKCk7XG4gICAgICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBzdGF0ZS5uZXh0SGFuZGxlcigpO1xuICAgICAgICByZXR1cm4gc3RhdGUucmV0dXJuSGFuZGxlclJlc3VsdCA/IHJlc3VsdCA6IGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QocmVzdWx0LCBzdGF0ZS5kb25lKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGl0ZXJhdG9yID0gc3RhdGUuaXRlcmF0b3I7XG4gICAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgICAgIGlmIChJU19JVEVSQVRPUikge1xuICAgICAgICB2YXIgcmV0dXJuTWV0aG9kID0gZ2V0TWV0aG9kKGl0ZXJhdG9yLCAncmV0dXJuJyk7XG4gICAgICAgIHJldHVybiByZXR1cm5NZXRob2QgPyBjYWxsKHJldHVybk1ldGhvZCwgaXRlcmF0b3IpIDogY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLmlubmVyKSB0cnkge1xuICAgICAgICBpdGVyYXRvckNsb3NlKHN0YXRlLmlubmVyLml0ZXJhdG9yLCAnbm9ybWFsJyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ3Rocm93JywgZXJyb3IpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdG9yKSBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAnbm9ybWFsJyk7XG4gICAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgV3JhcEZvclZhbGlkSXRlcmF0b3JQcm90b3R5cGUgPSBjcmVhdGVJdGVyYXRvclByb3h5UHJvdG90eXBlKHRydWUpO1xudmFyIEl0ZXJhdG9ySGVscGVyUHJvdG90eXBlID0gY3JlYXRlSXRlcmF0b3JQcm94eVByb3RvdHlwZShmYWxzZSk7XG5cbmNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYXRvckhlbHBlclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgJ0l0ZXJhdG9yIEhlbHBlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuZXh0SGFuZGxlciwgSVNfSVRFUkFUT1IsIFJFVFVSTl9IQU5ETEVSX1JFU1VMVCkge1xuICB2YXIgSXRlcmF0b3JQcm94eSA9IGZ1bmN0aW9uIEl0ZXJhdG9yKHJlY29yZCwgc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUpIHtcbiAgICAgIHN0YXRlLml0ZXJhdG9yID0gcmVjb3JkLml0ZXJhdG9yO1xuICAgICAgc3RhdGUubmV4dCA9IHJlY29yZC5uZXh0O1xuICAgIH0gZWxzZSBzdGF0ZSA9IHJlY29yZDtcbiAgICBzdGF0ZS50eXBlID0gSVNfSVRFUkFUT1IgPyBXUkFQX0ZPUl9WQUxJRF9JVEVSQVRPUiA6IElURVJBVE9SX0hFTFBFUjtcbiAgICBzdGF0ZS5yZXR1cm5IYW5kbGVyUmVzdWx0ID0gISFSRVRVUk5fSEFORExFUl9SRVNVTFQ7XG4gICAgc3RhdGUubmV4dEhhbmRsZXIgPSBuZXh0SGFuZGxlcjtcbiAgICBzdGF0ZS5jb3VudGVyID0gMDtcbiAgICBzdGF0ZS5kb25lID0gZmFsc2U7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCBzdGF0ZSk7XG4gIH07XG5cbiAgSXRlcmF0b3JQcm94eS5wcm90b3R5cGUgPSBJU19JVEVSQVRPUiA/IFdyYXBGb3JWYWxpZEl0ZXJhdG9yUHJvdG90eXBlIDogSXRlcmF0b3JIZWxwZXJQcm90b3R5cGU7XG5cbiAgcmV0dXJuIEl0ZXJhdG9yUHJveHk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgfVxufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QnKTtcbnZhciBjcmVhdGVJdGVyYXRvclByb3h5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1wcm94eScpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIEl0ZXJhdG9yUHJveHkgPSBjcmVhdGVJdGVyYXRvclByb3h5KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGl0ZXJhdG9yID0gdGhpcy5pdGVyYXRvcjtcbiAgdmFyIHByZWRpY2F0ZSA9IHRoaXMucHJlZGljYXRlO1xuICB2YXIgbmV4dCA9IHRoaXMubmV4dDtcbiAgdmFyIHJlc3VsdCwgZG9uZSwgdmFsdWU7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgcmVzdWx0ID0gYW5PYmplY3QoY2FsbChuZXh0LCBpdGVyYXRvcikpO1xuICAgIGRvbmUgPSB0aGlzLmRvbmUgPSAhIXJlc3VsdC5kb25lO1xuICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgaWYgKGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIHByZWRpY2F0ZSwgW3ZhbHVlLCB0aGlzLmNvdW50ZXIrK10sIHRydWUpKSByZXR1cm4gdmFsdWU7XG4gIH1cbn0pO1xuXG4vLyBgSXRlcmF0b3IucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWl0ZXJhdG9yLnByb3RvdHlwZS5maWx0ZXJcbiQoeyB0YXJnZXQ6ICdJdGVyYXRvcicsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihwcmVkaWNhdGUpIHtcbiAgICBhbk9iamVjdCh0aGlzKTtcbiAgICBhQ2FsbGFibGUocHJlZGljYXRlKTtcbiAgICByZXR1cm4gbmV3IEl0ZXJhdG9yUHJveHkoZ2V0SXRlcmF0b3JEaXJlY3QodGhpcyksIHtcbiAgICAgIHByZWRpY2F0ZTogcHJlZGljYXRlXG4gICAgfSk7XG4gIH1cbn0pO1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuKSB7XG4gIC8vIE5hc2hvcm4gYnVnOlxuICAvLyAgIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xMTI4XG4gIC8vICAgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzExMzBcbiAgaWYgKGNsYXNzb2ZSYXcoZm4pID09PSAnRnVuY3Rpb24nKSByZXR1cm4gdW5jdXJyeVRoaXMoZm4pO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIGJpbmQgPSB1bmN1cnJ5VGhpcyh1bmN1cnJ5VGhpcy5iaW5kKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCkge1xuICBhQ2FsbGFibGUoZm4pO1xuICByZXR1cm4gdGhhdCA9PT0gdW5kZWZpbmVkID8gZm4gOiBOQVRJVkVfQklORCA/IGJpbmQoZm4sIHRoYXQpIDogZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsICIndXNlIHN0cmljdCc7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gJE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZ1xuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQ09SUkVDVF9BUkdVTUVOVFMgPyBjbGFzc29mUmF3KE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09PSAnT2JqZWN0JyAmJiBpc0NhbGxhYmxlKE8uY2FsbGVlKSA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKGl0KSkgcmV0dXJuIGdldE1ldGhvZChpdCwgSVRFUkFUT1IpXG4gICAgfHwgZ2V0TWV0aG9kKGl0LCAnQEBpdGVyYXRvcicpXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50LCB1c2luZ0l0ZXJhdG9yKSB7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZ2V0SXRlcmF0b3JNZXRob2QoYXJndW1lbnQpIDogdXNpbmdJdGVyYXRvcjtcbiAgaWYgKGFDYWxsYWJsZShpdGVyYXRvck1ldGhvZCkpIHJldHVybiBhbk9iamVjdChjYWxsKGl0ZXJhdG9yTWV0aG9kLCBhcmd1bWVudCkpO1xuICB0aHJvdyBuZXcgJFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBpdGVyYWJsZScpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQ7XG4gIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcblxudmFyIFJlc3VsdFByb3RvdHlwZSA9IFJlc3VsdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCB1bmJvdW5kRnVuY3Rpb24sIG9wdGlvbnMpIHtcbiAgdmFyIHRoYXQgPSBvcHRpb25zICYmIG9wdGlvbnMudGhhdDtcbiAgdmFyIEFTX0VOVFJJRVMgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuQVNfRU5UUklFUyk7XG4gIHZhciBJU19SRUNPUkQgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuSVNfUkVDT1JEKTtcbiAgdmFyIElTX0lURVJBVE9SID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX0lURVJBVE9SKTtcbiAgdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTtcbiAgdmFyIGZuID0gYmluZCh1bmJvdW5kRnVuY3Rpb24sIHRoYXQpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgIGlmIChpdGVyYXRvcikgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ25vcm1hbCcsIGNvbmRpdGlvbik7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgY29uZGl0aW9uKTtcbiAgfTtcblxuICB2YXIgY2FsbEZuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKEFTX0VOVFJJRVMpIHtcbiAgICAgIGFuT2JqZWN0KHZhbHVlKTtcbiAgICAgIHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSwgc3RvcCkgOiBmbih2YWx1ZVswXSwgdmFsdWVbMV0pO1xuICAgIH0gcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWUsIHN0b3ApIDogZm4odmFsdWUpO1xuICB9O1xuXG4gIGlmIChJU19SRUNPUkQpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlLml0ZXJhdG9yO1xuICB9IGVsc2UgaWYgKElTX0lURVJBVE9SKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyRm4gPSBnZXRJdGVyYXRvck1ldGhvZChpdGVyYWJsZSk7XG4gICAgaWYgKCFpdGVyRm4pIHRocm93IG5ldyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGl0ZXJhYmxlKSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShpdGVyYWJsZSk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IGNhbGxGbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIGlzUHJvdG90eXBlT2YoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUsIGl0ZXJGbik7XG4gIH1cblxuICBuZXh0ID0gSVNfUkVDT1JEID8gaXRlcmFibGUubmV4dCA6IGl0ZXJhdG9yLm5leHQ7XG4gIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBjYWxsRm4oc3RlcC52YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIGlzUHJvdG90eXBlT2YoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItZGlyZWN0Jyk7XG5cbi8vIGBJdGVyYXRvci5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWl0ZXJhdG9yLnByb3RvdHlwZS5maW5kXG4kKHsgdGFyZ2V0OiAnSXRlcmF0b3InLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSB9LCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlKSB7XG4gICAgYW5PYmplY3QodGhpcyk7XG4gICAgYUNhbGxhYmxlKHByZWRpY2F0ZSk7XG4gICAgdmFyIHJlY29yZCA9IGdldEl0ZXJhdG9yRGlyZWN0KHRoaXMpO1xuICAgIHZhciBjb3VudGVyID0gMDtcbiAgICByZXR1cm4gaXRlcmF0ZShyZWNvcmQsIGZ1bmN0aW9uICh2YWx1ZSwgc3RvcCkge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgY291bnRlcisrKSkgcmV0dXJuIHN0b3AodmFsdWUpO1xuICAgIH0sIHsgSVNfUkVDT1JEOiB0cnVlLCBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5yZXN1bHQ7XG4gIH1cbn0pO1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QnKTtcbnZhciBjcmVhdGVJdGVyYXRvclByb3h5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1wcm94eScpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcblxudmFyIEl0ZXJhdG9yUHJveHkgPSBjcmVhdGVJdGVyYXRvclByb3h5KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGl0ZXJhdG9yID0gdGhpcy5pdGVyYXRvcjtcbiAgdmFyIHJlc3VsdCA9IGFuT2JqZWN0KGNhbGwodGhpcy5uZXh0LCBpdGVyYXRvcikpO1xuICB2YXIgZG9uZSA9IHRoaXMuZG9uZSA9ICEhcmVzdWx0LmRvbmU7XG4gIGlmICghZG9uZSkgcmV0dXJuIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIHRoaXMubWFwcGVyLCBbcmVzdWx0LnZhbHVlLCB0aGlzLmNvdW50ZXIrK10sIHRydWUpO1xufSk7XG5cbi8vIGBJdGVyYXRvci5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWFwKG1hcHBlcikge1xuICBhbk9iamVjdCh0aGlzKTtcbiAgYUNhbGxhYmxlKG1hcHBlcik7XG4gIHJldHVybiBuZXcgSXRlcmF0b3JQcm94eShnZXRJdGVyYXRvckRpcmVjdCh0aGlzKSwge1xuICAgIG1hcHBlcjogbWFwcGVyXG4gIH0pO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItbWFwJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbi8vIGBJdGVyYXRvci5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXRlcmF0b3IucHJvdG90eXBlLm1hcFxuJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIG1hcDogbWFwXG59KTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBJdGVyYXRvci5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXRlcmF0b3IucHJvdG90eXBlLnJlZHVjZVxuJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShyZWR1Y2VyIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgYW5PYmplY3QodGhpcyk7XG4gICAgYUNhbGxhYmxlKHJlZHVjZXIpO1xuICAgIHZhciByZWNvcmQgPSBnZXRJdGVyYXRvckRpcmVjdCh0aGlzKTtcbiAgICB2YXIgbm9Jbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA8IDI7XG4gICAgdmFyIGFjY3VtdWxhdG9yID0gbm9Jbml0aWFsID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdO1xuICAgIHZhciBjb3VudGVyID0gMDtcbiAgICBpdGVyYXRlKHJlY29yZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAobm9Jbml0aWFsKSB7XG4gICAgICAgIG5vSW5pdGlhbCA9IGZhbHNlO1xuICAgICAgICBhY2N1bXVsYXRvciA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWNjdW11bGF0b3IgPSByZWR1Y2VyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgY291bnRlcik7XG4gICAgICB9XG4gICAgICBjb3VudGVyKys7XG4gICAgfSwgeyBJU19SRUNPUkQ6IHRydWUgfSk7XG4gICAgaWYgKG5vSW5pdGlhbCkgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBpdGVyYXRvciB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cbn0pO1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0SXRlcmF0b3JEaXJlY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLWRpcmVjdCcpO1xuXG4vLyBgSXRlcmF0b3IucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pdGVyYXRvci5wcm90b3R5cGUuc29tZVxuJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUgfSwge1xuICBzb21lOiBmdW5jdGlvbiBzb21lKHByZWRpY2F0ZSkge1xuICAgIGFuT2JqZWN0KHRoaXMpO1xuICAgIGFDYWxsYWJsZShwcmVkaWNhdGUpO1xuICAgIHZhciByZWNvcmQgPSBnZXRJdGVyYXRvckRpcmVjdCh0aGlzKTtcbiAgICB2YXIgY291bnRlciA9IDA7XG4gICAgcmV0dXJuIGl0ZXJhdGUocmVjb3JkLCBmdW5jdGlvbiAodmFsdWUsIHN0b3ApIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGNvdW50ZXIrKykpIHJldHVybiBzdG9wKCk7XG4gICAgfSwgeyBJU19SRUNPUkQ6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnN0b3BwZWQ7XG4gIH1cbn0pO1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgSXRlcmF0b3IucHJvdG90eXBlLnRvQXJyYXlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pdGVyYXRvci5wcm90b3R5cGUudG9hcnJheVxuJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUgfSwge1xuICB0b0FycmF5OiBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBpdGVyYXRlKGdldEl0ZXJhdG9yRGlyZWN0KGFuT2JqZWN0KHRoaXMpKSwgcHVzaCwgeyB0aGF0OiByZXN1bHQsIElTX1JFQ09SRDogdHJ1ZSB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsICJpbXBvcnQge2luaXRNd0FwaX0gZnJvbSAnZXh0LmdhZGdldC5VdGlsJztcblxuY29uc3QgYXBpOiBtdy5BcGkgPSBpbml0TXdBcGkoJ21vcmViaXRzLmpzOyBUd2lua2xlLzEuMScpO1xuXG5leHBvcnQge2FwaX07XG4iLCAiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7YXBpfSBmcm9tICcuL2FwaSc7XG4vKiEgVHdpbmtsZS5qcyAtIHR3aW5rbGUuanMgKi9cbihmdW5jdGlvbiB0d2lua2xlKCQpIHtcblx0Y29uc3QgJGJvZHkgPSAkKCdib2R5Jyk7XG5cdGNvbnN0IFR3aW5rbGUgPSB7fTtcblx0d2luZG93LlR3aW5rbGUgfHw9IFR3aW5rbGU7IC8vIGFsbG93IGdsb2JhbCBhY2Nlc3Ncblx0Ly8gV3JhcCB3aXRoIGFub255bW91cyBmdW5jdGlvblxuXHQvLyBDaGVjayBpZiBhY2NvdW50IGlzIGV4cGVyaWVuY2VkIGVub3VnaCB0byB1c2UgVHdpbmtsZVxuXHRpZiAoIU1vcmViaXRzLnVzZXJJc0luR3JvdXAoJ2F1dG9jb25maXJtZWQnKSAmJiAhTW9yZWJpdHMudXNlcklzSW5Hcm91cCgnY29uZmlybWVkJykpIHtcblx0XHRjb25zb2xlLndhcm4oJ1tUd2lua2xlXSDpnZ7noa7orqTnlKjmiLfmiJboh6rliqjnoa7orqTnlKjmiLfvvIxUd2lua2xl5LiN5Lya6L+Q6KGM44CCJyk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdC8qKlxuXHQgKiBUd2lua2xlLXNwZWNpZmljIGRhdGEgc2hhcmVkIGJ5IG11bHRpcGxlIG1vZHVsZXNcblx0ICogTGlrZWx5IGN1c3RvbWl6ZWQgcGVyIGluc3RhbGxhdGlvblxuXHQgKi9cblx0Ly8gQ3VzdG9tIGNoYW5nZSB0YWcocykgdG8gYmUgYXBwbGllZCB0byBhbGwgVHdpbmtsZSBhY3Rpb25zLCBjcmVhdGUgYXQgU3BlY2lhbDpUYWdzXG5cdFR3aW5rbGUuY2hhbmdlVGFncyA9ICdUd2lua2xlJztcblx0Ly8gQXZhaWxhYmxlIGZvciBhY3Rpb25zIHRoYXQgZG9uJ3QgKHlldCkgc3VwcG9ydCB0YWdzXG5cdFR3aW5rbGUuc3VtbWFyeUFkID0gJ++8iFtbSDpUV3xUd2lua2xlXV3vvIknO1xuXHQvLyBWYXJpb3VzIGhhdG5vdGUgdGVtcGxhdGVzLCB1c2VkIHdoZW4gdGFnZ2luZyAoY3NkL3hmZC90YWcvcHJvZC9wcm90ZWN0KSB0byBlbnN1cmUgb3JkZXJcblx0VHdpbmtsZS5oYXRub3RlUmVnZXggPVxuXHRcdCcoPzpTaG9ydFsgX11kZXNjcmlwdGlvbil8KD86UmVsbGlua3xIYXRub3RlfEhBVCl8KD86TWFpbnxb57uG57SwXVvoioLnr4BdfE1haW5bIF9dYXJ0aWNsZXN85Li7W+adoeainV3nm658SHVycmljYW5lWyBfXW1haW58W+adoeainV3nm6585Li7fFvpoIHpobVd6Z2ifOS4u1vpoIHpobVd6Z2ifOS4u1vpoIHpobVdfOS4u1vpoYzpophd55uufE1haW5bIF9dYXJ0aWNsZXxBUCl8KD86V3Jvbmd0aXRsZXxDb3JyZWN0WyBfXXRpdGxlKXwoPzrkuLvmnaHnm67mtojmrafkuYl85Li75qKd55uu5raI5q2n576pfOa2iOatp+S5iemTvuaOpXzmtojmrafnvqnpj4jmjqV85raI5q2n576p6YCj57WQfOa2iOi/nnzmtojpgKN85raI5q2n5LmJ6L+e57uTfERpc2FtYkxpbmt8Tm90ZXJlZnxEYWJsaW5rKXwoPzpEaXN0aW5ndWlzaHzkuI3mmK98Tm90fOaPkOekunzmt7fmt4Z85YiG5YilfOWIhuWIq3zljYDliKV85Yy65YirfOacrOadoeebrueahOS4u+mimOS4jeaYr3zmnKzmop3nm67nmoTkuLvpoYzkuI3mmK985pys5p2h55uu5Li76aKY5LiN5pivfOacrOaineebruS4u+mhjOS4jeaYr3zmnaHnm67kuLvpopjkuI3mmK985qKd55uu5Li76aGM5LiN5pivfOS4u+mimOS4jeaYr3zkuLvpoYzkuI3mmK98Q29uZnVzZWR85Yy65YiGfOWNgOWIhnxDb25mdXNpb258Q29uZnVzZXxSZWRpcmVjdE5PVHxNaXNzcGVsbGluZyl8KD86RGlzdGluZ3Vpc2gyfFNlbGZEaXN0aW5ndWlzaHxOb3QyfOS4jeaYrzIpfCg/OkZvcil8KD86RGV0YWlsc3xGdXJ0aGVyfFNlZXzlj6bop4F85Y+m6KaLfE1vcmV855u46Zec5qKd55uufOebuOWFs+adoeebrnxEZXRhaWx86KeBfOimi3zmm7TlpJrotYTmlpl85pu05aSa6LOH5paZfEZ1cnRoZXJbIF9daW5mb3JtYXRpb2585pu05aSa6LWE6K6vfOabtOWkmuizh+ioinxNb3JlWyBfXWluZm9ybWF0aW9ufOabtOWkmuS/oeaBryl8KD86U2VsZnJlZil8KD86QWJvdXR8T3RoZXJ1c2VzNHzlhbPkuo586Zec5pa8KXwoPzpPdGhlclsgX111c2VzfE90aGVydXNlfOadoeebrua2iOatp+S5iXzmop3nm67mtojmrafnvql85LuW55SofE90aGVydXNlcyl8KD86T3RoZXJbIF9ddXNlcyBsaXN0fE90aGVydXNlbGlzdHzkuLvmop3nm67mtojmrafnvqnliJfooah85Li75p2h55uu5raI5q2n5LmJ5YiX6KGofE90aGVydXNlc2xpc3R8QWJvdXRsaXN0fEFib3V0WyBfXWxpc3R8T3RoZXJ1c2VzWyBfXWxpc3QpfCg/OlJlZGlyZWN0fOmHjeWumuWQkeiHs+atpHxSZWRpcmVjdHNbIF9daGVyZXxSZWRpcmVjdFsgX110byl8KD86UmVkaXJlY3QyfOS4u+aineebrua2iOatp+e+qTJ85Li75p2h55uu5raI5q2n5LmJMnxSZWRpcnzph43lrprlkJHoh7PmraQyKXwoPzpSZWRpcmVjdDMpfCg/OlJlZGlyZWN0NCl8KD86UmVkaXJlY3QtZGlzdGluZ3Vpc2gpfCg/OlJlZGlyZWN0LXN5bm9ueW0pfCg/OlJlZGlyZWN0LW11bHRpKXwoPzpTZWVbIF9dV2lrdGlvbmFyeXxTZWV3aWt0KXwoPzpTZWVhbHNvfOWPgueci3zlj4PnnIt8U2VlWyBfXWFsc2985Y+C6KeBfOWPg+imi3xBbHNvKXwoPzpTZWVbIF9dYWxzbzJ8U2VlYWxzbzJ85LiN6L2J5o+b5Y+D6KaLfOS4jei9rOaNouWPguingSl8KD86T3RoZXJbIF9dcGxhY2VzKXwoPzpDb250cmFzdHzlsI3mr5R85a+55q+UKSc7XG5cdFR3aW5rbGUuaW5pdENhbGxiYWNrcyA9IFtdO1xuXHQvKipcblx0ICogQWRkcyBhIGNhbGxiYWNrIHRvIGV4ZWN1dGUgd2hlbiBUd2lua2xlIGhhcyBsb2FkZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmNcblx0ICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXSAtIG5hbWUgb2YgbW9kdWxlIHVzZWQgdG8gY2hlY2sgaWYgaXMgZGlzYWJsZWQuXG5cdCAqIElmIG5hbWUgaXMgbm90IGdpdmVuLCBtb2R1bGUgaXMgbG9hZGVkIHVuY29uZGl0aW9uYWxseS5cblx0ICovXG5cdFR3aW5rbGUuYWRkSW5pdENhbGxiYWNrID0gKGZ1bmMsIG5hbWUpID0+IHtcblx0XHRUd2lua2xlLmluaXRDYWxsYmFja3NbVHdpbmtsZS5pbml0Q2FsbGJhY2tzLmxlbmd0aF0gPSB7XG5cdFx0XHRmdW5jLFxuXHRcdFx0bmFtZSxcblx0XHR9O1xuXHR9O1xuXHRUd2lua2xlLmRlZmF1bHRDb25maWcgPSB7fTtcblx0LyoqXG5cdCAqIFRoaXMgaG9sZHMgdGhlIGRlZmF1bHQgc2V0IG9mIHByZWZlcmVuY2VzIHVzZWQgYnkgVHdpbmtsZS5cblx0ICogSXQgaXMgaW1wb3J0YW50IHRoYXQgYWxsIG5ldyBwcmVmZXJlbmNlcyBhZGRlZCBoZXJlLCBlc3BlY2lhbGx5IGFkbWluLW9ubHkgb25lcywgYXJlIGFsc28gYWRkZWQgdG9cblx0ICogfFR3aW5rbGUuY29uZmlnLnNlY3Rpb25zfCBpbiB0d2lua2xlY29uZmlnLmpzLCBzbyB0aGV5IGFyZSBjb25maWd1cmFibGUgdmlhIHRoZSBUd2lua2xlIHByZWZlcmVuY2VzIHBhbmVsLlxuXHQgKiBGb3IgaGVscCBvbiB0aGUgYWN0dWFsIHByZWZlcmVuY2VzLCBzZWUgdGhlIGNvbW1lbnRzIGluIHR3aW5rbGVjb25maWcuanMuXG5cdCAqXG5cdCAqIEZvcm1lcmx5IFR3aW5rbGUuZGVmYXVsdENvbmZpZy50d2lua2xlXG5cdCAqL1xuXHRUd2lua2xlLmRlZmF1bHRDb25maWcgPSB7XG5cdFx0Ly8gR2VuZXJhbFxuXHRcdHVzZXJUYWxrUGFnZU1vZGU6ICd0YWInLFxuXHRcdGRpYWxvZ0xhcmdlRm9udDogZmFsc2UsXG5cdFx0ZGlzYWJsZWRNb2R1bGVzOiBNb3JlYml0cy51c2VySXNTeXNvcCA/IFtdIDogWydibG9jayddLFxuXHRcdC8vIGRlZmF1bHQgdG8gZGlzYWJsZSBibG9jayBmb3Igbm9uLXN5c29wLCBpZiBlbmFibGUgbWFudWFsbHksIHRoZXkgY2FuIG9ubHkgdXNlIGl0IHRvIHRhZyB1c2VycGFnZVxuXHRcdGRpc2FibGVkU3lzb3BNb2R1bGVzOiBbXSxcblx0XHQvLyBBUlZcblx0XHRzcGlXYXRjaFJlcG9ydDogJ3llcycsXG5cdFx0Ly8gQmxvY2tcblx0XHRkZWZhdWx0VG9CbG9jazY0OiBmYWxzZSxcblx0XHRkZWZhdWx0VG9QYXJ0aWFsQmxvY2tzOiBmYWxzZSxcblx0XHRibGFua1RhbGtwYWdlT25JbmRlZkJsb2NrOiBmYWxzZSxcblx0XHR3YXRjaEJsb2NrTm90aWNlczogJ3llcycsXG5cdFx0Y3VzdG9tQmxvY2tSZWFzb25MaXN0OiBbXSxcblx0XHQvLyBGbHVmZiAocmV2ZXJ0IGFuZCByb2xsYmFjaylcblx0XHRvcGVuVGFsa1BhZ2U6IFtdLFxuXHRcdG9wZW5UYWxrUGFnZU9uQXV0b1JldmVydDogZmFsc2UsXG5cdFx0cm9sbGJhY2tJblBsYWNlOiBmYWxzZSxcblx0XHRtYXJrUmV2ZXJ0ZWRQYWdlc0FzTWlub3I6IFsndmFuZCddLFxuXHRcdHdhdGNoUmV2ZXJ0ZWRQYWdlczogWydub3JtJywgJ3ZhbmQnLCAndG9yZXYnXSxcblx0XHR3YXRjaFJldmVydGVkRXhwaXJ5OiAneWVzJyxcblx0XHRvZmZlclJlYXNvbk9uTm9ybWFsUmV2ZXJ0OiB0cnVlLFxuXHRcdGNvbmZpcm1PbkZsdWZmOiBmYWxzZSxcblx0XHRzaG93Um9sbGJhY2tMaW5rczogWydkaWZmJywgJ290aGVycyddLFxuXHRcdGN1c3RvbVJldmVydFN1bW1hcnk6IFtdLFxuXHRcdC8vIERJICh0d2lua2xlaW1hZ2UpXG5cdFx0bm90aWZ5VXNlck9uRGVsaTogdHJ1ZSxcblx0XHRkZWxpV2F0Y2hQYWdlOiAnZGVmYXVsdCcsXG5cdFx0ZGVsaVdhdGNoVXNlcjogJ2RlZmF1bHQnLFxuXHRcdC8vIFByb3RlY3Rcblx0XHR3YXRjaFJlcXVlc3RlZFBhZ2VzOiAneWVzJyxcblx0XHR3YXRjaFBQVGFnZ2VkUGFnZXM6ICdkZWZhdWx0Jyxcblx0XHR3YXRjaFByb3RlY3RlZFBhZ2VzOiAnZGVmYXVsdCcsXG5cdFx0Ly8gQ1NEXG5cdFx0c3BlZWR5U2VsZWN0aW9uU3R5bGU6ICdidXR0b25DbGljaycsXG5cdFx0d2F0Y2hTcGVlZHlQYWdlczogWydnMScsICdnMycsICdnNCcsICdnNycsICdnOCddLFxuXHRcdHdhdGNoU3BlZWR5RXhwaXJ5OiAneWVzJyxcblx0XHRtYXJrU3BlZWR5UGFnZXNBc1BhdHJvbGxlZDogZmFsc2UsXG5cdFx0d2F0Y2hTcGVlZHlVc2VyOiAnMSBtb250aCcsXG5cdFx0Ly8gdGhlc2UgbmV4dCB0d28gc2hvdWxkIHByb2JhYmx5IGJlIGlkZW50aWNhbCBieSBkZWZhdWx0XG5cdFx0bm90aWZ5VXNlck9uU3BlZWR5RGVsZXRpb25Ob21pbmF0aW9uOiBbXG5cdFx0XHQnZGInLFxuXHRcdFx0J2cxJyxcblx0XHRcdCdnMicsXG5cdFx0XHQnZzMnLFxuXHRcdFx0J2c0Jyxcblx0XHRcdCdnNScsXG5cdFx0XHQnZzYnLFxuXHRcdFx0J2c3Jyxcblx0XHRcdCdnOCcsXG5cdFx0XHQnZzknLFxuXHRcdFx0J2ExJyxcblx0XHRcdCdhMicsXG5cdFx0XHQnYTMnLFxuXHRcdFx0J3IxJyxcblx0XHRcdCdyMicsXG5cdFx0XHQnZjEnLFxuXHRcdFx0J2YyJyxcblx0XHRcdCdmMycsXG5cdFx0XHQnZjQnLFxuXHRcdFx0J2Y1Jyxcblx0XHRcdCdvMScsXG5cdFx0XHQnbzInLFxuXHRcdFx0J28zJyxcblx0XHRdLFxuXHRcdHdhcm5Vc2VyT25TcGVlZHlEZWxldGU6IFtcblx0XHRcdCdkYicsXG5cdFx0XHQnZzEnLFxuXHRcdFx0J2cyJyxcblx0XHRcdCdnMycsXG5cdFx0XHQnZzQnLFxuXHRcdFx0J2c1Jyxcblx0XHRcdCdnNicsXG5cdFx0XHQnZzcnLFxuXHRcdFx0J2c4Jyxcblx0XHRcdCdnOScsXG5cdFx0XHQnYTEnLFxuXHRcdFx0J2EyJyxcblx0XHRcdCdhMycsXG5cdFx0XHQncjEnLFxuXHRcdFx0J3IyJyxcblx0XHRcdCdmMScsXG5cdFx0XHQnZjInLFxuXHRcdFx0J2YzJyxcblx0XHRcdCdmNCcsXG5cdFx0XHQnZjUnLFxuXHRcdFx0J28xJyxcblx0XHRcdCdvMicsXG5cdFx0XHQnbzMnLFxuXHRcdF0sXG5cdFx0cHJvbXB0Rm9yU3BlZWR5RGVsZXRpb25TdW1tYXJ5OiBbXSxcblx0XHRvcGVuVXNlclRhbGtQYWdlT25TcGVlZHlEZWxldGU6IFtdLFxuXHRcdGRlbGV0ZVRhbGtQYWdlT25EZWxldGU6IHRydWUsXG5cdFx0ZGVsZXRlUmVkaXJlY3RzT25EZWxldGU6IHRydWUsXG5cdFx0ZGVsZXRlU3lzb3BEZWZhdWx0VG9EZWxldGU6IGZhbHNlLFxuXHRcdHNwZWVkeVdpbmRvd0hlaWdodDogNTAwLFxuXHRcdHNwZWVkeVdpbmRvd1dpZHRoOiA4MDAsXG5cdFx0bG9nU3BlZWR5Tm9taW5hdGlvbnM6IHRydWUsXG5cdFx0c3BlZWR5TG9nUGFnZU5hbWU6ICdDU0Tml6Xlv5cnLFxuXHRcdG5vTG9nT25TcGVlZHlOb21pbmF0aW9uOiBbJ28xJ10sXG5cdFx0ZW5sYXJnZUc3SW5wdXQ6IGZhbHNlLFxuXHRcdC8vIFVubGlua1xuXHRcdHVubGlua05hbWVzcGFjZXM6IFsnMCcsICc2JywgJzEwJywgJzMwMiddLFxuXHRcdC8vIFdhcm5cblx0XHRkZWZhdWx0V2FybmluZ0dyb3VwOiAnMScsXG5cdFx0Y29tYmluZWRTaW5nbGV0TWVudXM6IGZhbHNlLFxuXHRcdHdhdGNoV2FybmluZ3M6ICd5ZXMnLFxuXHRcdG9sZFNlbGVjdDogZmFsc2UsXG5cdFx0Y3VzdG9tV2FybmluZ0xpc3Q6IFtdLFxuXHRcdGF1dG9NZW51QWZ0ZXJSb2xsYmFjazogZmFsc2UsXG5cdFx0Ly8gWGZEXG5cdFx0bG9nWGZkTm9taW5hdGlvbnM6IHRydWUsXG5cdFx0eGZkTG9nUGFnZU5hbWU6ICdYZkTml6Xlv5cnLFxuXHRcdG5vTG9nT25YZmROb21pbmF0aW9uOiBbXSxcblx0XHR4ZmRXYXRjaERpc2N1c3Npb246ICdkZWZhdWx0Jyxcblx0XHR4ZmRXYXRjaFBhZ2U6ICdkZWZhdWx0Jyxcblx0XHR4ZmRXYXRjaFVzZXI6ICdkZWZhdWx0Jyxcblx0XHRtYXJrWGZkUGFnZXNBc1BhdHJvbGxlZDogdHJ1ZSxcblx0XHRGd2RDc2RUb1hmZDogTW9yZWJpdHMudXNlcklzU3lzb3AsXG5cdFx0YWZkRGVmYXVsdENhdGVnb3J5OiAnZGVsZXRlJyxcblx0XHRhZmRGYW1lRGVmYXVsdFJlYXNvbjogJ+ayoeaciei2s+Wkn+eahOWPr+mdoOadpea6kOivgeaYjuatpOadoeebruespuWQiFtbTElCOuaUtuW9leagh+WHhnzmlLblvZXmoIflh4ZdXScsXG5cdFx0YWZkU3Vic3R1YkRlZmF1bHRSZWFzb246ICfov4fmnJ/lsI/lsI/kvZzlk4EnLFxuXHRcdFhmZENsb3NlOiBNb3JlYml0cy51c2VySXNTeXNvcCA/ICdhbGwnIDogJ2hpZGUnLFxuXHRcdC8vIENvcHl2aW9cblx0XHRjb3B5dmlvV2F0Y2hQYWdlOiAneWVzJyxcblx0XHRjb3B5dmlvV2F0Y2hVc2VyOiAneWVzJyxcblx0XHRtYXJrQ29weXZpb1BhZ2VzQXNQYXRyb2xsZWQ6IHRydWUsXG5cdFx0Ly8gSGlkZGVuIHByZWZlcmVuY2VzXG5cdFx0YXV0b2xldmVsU3RhbGVEYXlzOiAzLFxuXHRcdHJldmVydE1heFJldmlzaW9uczogNTAsXG5cdFx0Ly8gaW50ZW50aW9uYWxseSBsaW1pdGVkXG5cdFx0YmF0Y2hNYXg6IDUwMDAsXG5cdFx0YmF0Y2hDaHVua3M6IDUwLFxuXHRcdGNvbmZpZ1BhZ2U6ICdIZWxwOlR3aW5rbGUv5Y+C5pWw6K6+572uJyxcblx0XHRwcm9qZWN0TmFtZXNwYWNlTmFtZTogbXcuY29uZmlnLmdldCgnd2dGb3JtYXR0ZWROYW1lc3BhY2VzJylbNF0sXG5cdFx0c2FuZGJveFBhZ2U6ICdMSUI65rKZ55uSJyxcblx0XHQvLyBEZXByZWNhdGVkIG9wdGlvbnMsIGFzIGEgZmFsbGJhY2sgZm9yIGFkZC1vbiBzY3JpcHRzL21vZHVsZXNcblx0XHRzdW1tYXJ5QWQ6ICfvvIhbW0g6VFd8VHdpbmtsZV1d77yJJyxcblx0XHRkZWxldGlvblN1bW1hcnlBZDogJ++8iFtbSDpUV3xUd2lua2xlXV3vvIknLFxuXHRcdHByb3RlY3Rpb25TdW1tYXJ5QWQ6ICfvvIhbW0g6VFd8VHdpbmtsZV1d77yJJyxcblx0XHRibG9ja1N1bW1hcnlBZDogJ++8iFtbSDpUV3xUd2lua2xlXV3vvIknLFxuXHRcdC8vIFRhZ1xuXHRcdGdyb3VwQnlEZWZhdWx0OiB0cnVlLFxuXHRcdHdhdGNoVGFnZ2VkUGFnZXM6ICd5ZXMnLFxuXHRcdHdhdGNoTWVyZ2VEaXNjdXNzaW9uczogJ3llcycsXG5cdFx0bWFya1RhZ2dlZFBhZ2VzQXNNaW5vcjogZmFsc2UsXG5cdFx0bWFya1RhZ2dlZFBhZ2VzQXNQYXRyb2xsZWQ6IHRydWUsXG5cdFx0dGFnQXJ0aWNsZVNvcnRPcmRlcjogJ2NhdCcsXG5cdFx0Y3VzdG9tVGFnTGlzdDogW10sXG5cdFx0Y3VzdG9tRmlsZVRhZ0xpc3Q6IFtdLFxuXHRcdGN1c3RvbVJlZGlyZWN0VGFnTGlzdDogW10sXG5cdFx0Ly8gU3R1YlxuXHRcdHdhdGNoU3R1YmJlZFBhZ2VzOiBmYWxzZSxcblx0XHRtYXJrU3R1YmJlZFBhZ2VzQXNNaW5vcjogZmFsc2UsXG5cdFx0bWFya1N0dWJiZWRQYWdlc0FzUGF0cm9sbGVkOiB0cnVlLFxuXHRcdHN0dWJBcnRpY2xlU29ydE9yZGVyOiAnY2F0Jyxcblx0XHRjdXN0b21TdHViTGlzdDogW10sXG5cdFx0Ly8gVGFsa2JhY2tcblx0XHRtYXJrVGFsa2JhY2tBc01pbm9yOiB0cnVlLFxuXHRcdGluc2VydFRhbGtiYWNrU2lnbmF0dXJlOiB0cnVlLFxuXHRcdC8vIGFsd2F5cyBzaWduIHRhbGtiYWNrIHRlbXBsYXRlc1xuXHRcdHRhbGtiYWNrSGVhZGluZzogd2luZG93LndnVUxTKCflm57lpI3pgJrlkYonLCAn5Zue6KaG6YCa5ZGKJyksXG5cdFx0bWFpbEhlYWRpbmc6IHdpbmRvdy53Z1VMUygn5oKo5pyJ5paw6YKu5Lu277yBJywgJ+aCqOacieaWsOmDteS7tu+8gScpLFxuXHR9O1xuXHQvLyBub3cgc29tZSBza2luIGRlcGVuZGVudCBjb25maWcuXG5cdHN3aXRjaCAobXcuY29uZmlnLmdldCgnc2tpbicpKSB7XG5cdFx0Y2FzZSAndmVjdG9yJzpcblx0XHRjYXNlICd2ZWN0b3ItMjAyMic6XG5cdFx0XHRUd2lua2xlLmRlZmF1bHRDb25maWcucG9ydGxldEFyZWEgPSAncmlnaHQtbmF2aWdhdGlvbic7XG5cdFx0XHRUd2lua2xlLmRlZmF1bHRDb25maWcucG9ydGxldElkID0gJ3AtdHdpbmtsZSc7XG5cdFx0XHRUd2lua2xlLmRlZmF1bHRDb25maWcucG9ydGxldE5hbWUgPSAnVFcnO1xuXHRcdFx0VHdpbmtsZS5kZWZhdWx0Q29uZmlnLnBvcnRsZXRUeXBlID0gJ21lbnUnO1xuXHRcdFx0VHdpbmtsZS5kZWZhdWx0Q29uZmlnLnBvcnRsZXROZXh0ID0gJ3Atc2VhcmNoJztcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2dvbmdiaSc6XG5cdFx0XHRUd2lua2xlLmRlZmF1bHRDb25maWcucG9ydGxldEFyZWEgPVxuXHRcdFx0XHQkYm9keS5maW5kKCcjcGFnZS10b29scyAuc2lkZWJhci1pbm5lcicpLmxlbmd0aCA+IDBcblx0XHRcdFx0XHQ/ICcjcGFnZS10b29scyAuc2lkZWJhci1pbm5lcidcblx0XHRcdFx0XHQ6ICcjcGFnZS1tb3JlIC5zaWRlYmFyLWlubmVyJztcblx0XHRcdFR3aW5rbGUuZGVmYXVsdENvbmZpZy5wb3J0bGV0SWQgPSAncC10d2lua2xlJztcblx0XHRcdFR3aW5rbGUuZGVmYXVsdENvbmZpZy5wb3J0bGV0TmFtZSA9ICdUd2lua2xlJztcblx0XHRcdFR3aW5rbGUuZGVmYXVsdENvbmZpZy5wb3J0bGV0VHlwZSA9IG51bGw7XG5cdFx0XHRUd2lua2xlLmRlZmF1bHRDb25maWcucG9ydGxldE5leHQgPVxuXHRcdFx0XHQkYm9keS5maW5kKCcjcGFnZS10b29scyAuc2lkZWJhci1pbm5lcicpLmxlbmd0aCA+IDAgPyAncGFnZS1tb3JlJyA6IG51bGw7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdjaXRpemVuJzpcblx0XHRcdFR3aW5rbGUuZGVmYXVsdENvbmZpZy5wb3J0bGV0QXJlYSA9ICcjcGFnZS1hY3Rpb25zLW1vcmVfX2NhcmQgLmNpdGl6ZW4tbWVudV9fY2FyZC1jb250ZW50Jztcblx0XHRcdFR3aW5rbGUuZGVmYXVsdENvbmZpZy5wb3J0bGV0SWQgPSAncC10d2lua2xlJztcblx0XHRcdFR3aW5rbGUuZGVmYXVsdENvbmZpZy5wb3J0bGV0TmFtZSA9ICdUd2lua2xlJztcblx0XHRcdFR3aW5rbGUuZGVmYXVsdENvbmZpZy5wb3J0bGV0VHlwZSA9ICduYXYnO1xuXHRcdFx0VHdpbmtsZS5kZWZhdWx0Q29uZmlnLnBvcnRsZXROZXh0ID0gJ3AtdGInO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdFR3aW5rbGUuZGVmYXVsdENvbmZpZy5wb3J0bGV0QXJlYSA9IG51bGw7XG5cdFx0XHRUd2lua2xlLmRlZmF1bHRDb25maWcucG9ydGxldElkID0gJ3AtY2FjdGlvbnMnO1xuXHRcdFx0VHdpbmtsZS5kZWZhdWx0Q29uZmlnLnBvcnRsZXROYW1lID0gbnVsbDtcblx0XHRcdFR3aW5rbGUuZGVmYXVsdENvbmZpZy5wb3J0bGV0VHlwZSA9IG51bGw7XG5cdFx0XHRUd2lua2xlLmRlZmF1bHRDb25maWcucG9ydGxldE5leHQgPSBudWxsO1xuXHR9XG5cdFR3aW5rbGUuZ2V0UHJlZiA9IChuYW1lKSA9PiB7XG5cdFx0aWYgKHR5cGVvZiBUd2lua2xlLnByZWZzID09PSAnb2JqZWN0JyAmJiBUd2lua2xlLnByZWZzW25hbWVdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBUd2lua2xlLnByZWZzW25hbWVdO1xuXHRcdH1cblx0XHQvLyBPbGQgcHJlZmVyZW5jZXMgZm9ybWF0LCB1c2VkIGJlZm9yZSB0d2lua2xlb3B0aW9ucy5qcyB3YXMgYSB0aGluZ1xuXHRcdGlmICh0eXBlb2Ygd2luZG93LlR3aW5rbGVDb25maWcgPT09ICdvYmplY3QnICYmIHdpbmRvdy5Ud2lua2xlQ29uZmlnW25hbWVdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB3aW5kb3cuVHdpbmtsZUNvbmZpZ1tuYW1lXTtcblx0XHR9XG5cdFx0cmV0dXJuIFR3aW5rbGUuZGVmYXVsdENvbmZpZ1tuYW1lXTtcblx0fTtcblx0LyoqXG5cdCAqICoqKioqKioqKioqKioqKiogVHdpbmtsZS5hZGRQb3J0bGV0KCkgKioqKioqKioqKioqKioqKlxuXHQgKlxuXHQgKiBBZGRzIGEgcG9ydGxldCBtZW51IHRvIG9uZSBvZiB0aGUgbmF2aWdhdGlvbiBhcmVhcyBvbiB0aGUgcGFnZS5cblx0ICogVGhpcyBpcyBuZWNlc3NhcmlseSBxdWl0ZSBhIGhhY2sgc2luY2Ugc2tpbnMsIG5hdmlnYXRpb24gYXJlYXMsIGFuZFxuXHQgKiBwb3J0bGV0IG1lbnUgdHlwZXMgYWxsIHdvcmsgc2xpZ2h0bHkgZGlmZmVyZW50LlxuXHQgKlxuXHQgKiBBdmFpbGFibGUgbmF2aWdhdGlvbiBhcmVhcyBkZXBlbmQgb24gdGhlIHNraW4gdXNlZC5cblx0ICogVmVjdG9yOlxuXHQgKiAtIEZvciBlYWNoIG9wdGlvbiwgdGhlIG91dGVyIG5hdiBjbGFzcyBjb250YWlucyBcInZlY3Rvci1tZW51XCIsIHRoZSBpbm5lciBkaXYgY2xhc3MgaXMgXCJ2ZWN0b3ItbWVudS1jb250ZW50XCIsIGFuZCB0aGUgdWwgaXMgXCJ2ZWN0b3ItbWVudS1jb250ZW50LWxpc3RcIlxuXHQgKiAtIFwibXctcGFuZWxcIiwgb3V0ZXIgbmF2IGNsYXNzIGNvbnRhaW5zIFwidmVjdG9yLW1lbnUtcG9ydGFsXCIuIEV4aXN0aW5nIHBvcnRsZXRzL2VsZW1lbnRzOiBcInAtbG9nb1wiLCBcInAtbmF2aWdhdGlvblwiLCBcInAtaW50ZXJhY3Rpb25cIiwgXCJwLXRiXCIsIFwicC1jb2xsLXByaW50X2V4cG9ydFwiXG5cdCAqIC0gXCJsZWZ0LW5hdmlnYXRpb25cIiwgb3V0ZXIgbmF2IGNsYXNzIGNvbnRhaW5zIFwidmVjdG9yLW1lbnUtdGFic1wiIG9yIFwidmVjdG9yLW1lbnUtZHJvcGRvd25cIi4gRXhpc3RpbmcgcG9ydGxldHM6IFwicC1uYW1lc3BhY2VzXCIsIFwicC12YXJpYW50c1wiIChtZW51KVxuXHQgKiAtIFwicmlnaHQtbmF2aWdhdGlvblwiLCBvdXRlciBuYXYgY2xhc3MgY29udGFpbnMgXCJ2ZWN0b3ItbWVudS10YWJzXCIgb3IgXCJ2ZWN0b3ItbWVudS1kcm9wZG93blwiLiBFeGlzdGluZyBwb3J0bGV0czogXCJwLXZpZXdzXCIsIFwicC1jYWN0aW9uc1wiIChtZW51KSwgXCJwLXNlYXJjaFwiXG5cdCAqIC0gU3BlY2lhbCBsYXlvdXQgb2YgcC1wZXJzb25hbCBwb3J0bGV0IChwYXJ0IG9mIFwiaGVhZFwiKSB0aHJvdWdoIHNwZWNpYWxpemVkIHN0eWxlcy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hdmlnYXRpb24gLS0gaWQgb2YgdGhlIHRhcmdldCBuYXZpZ2F0aW9uIGFyZWEgKHNraW4gZGVwZW5kYW50LCBvbiB2ZWN0b3IgZWl0aGVyIG9mIFwibGVmdC1uYXZpZ2F0aW9uXCIsIFwicmlnaHQtbmF2aWdhdGlvblwiLCBvciBcIm13LXBhbmVsXCIpXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtLSBpZCBvZiB0aGUgcG9ydGxldCBtZW51IHRvIGNyZWF0ZSwgcHJlZmVyYWJseSBzdGFydCB3aXRoIFwicC1cIi5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLS0gbmFtZSBvZiB0aGUgcG9ydGxldCBtZW51IHRvIGNyZWF0ZS4gVmlzaWJpbGl0eSBkZXBlbmRzIG9uIHRoZSBjbGFzcyB1c2VkLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtLSB0eXBlIG9mIHBvcnRsZXQuIEN1cnJlbnRseSBvbmx5IHVzZWQgZm9yIHRoZSB2ZWN0b3Igbm9uLXNpZGViYXIgcG9ydGxldHMsIHBhc3MgXCJtZW51XCIgdG8gbWFrZSB0aGlzIHBvcnRsZXQgYSBkcm9wIGRvd24gbWVudS5cblx0ICogQHBhcmFtIHtOb2RlfSBuZXh0bm9kZWlkIC0tIHRoZSBpZCBvZiB0aGUgbm9kZSBiZWZvcmUgd2hpY2ggdGhlIG5ldyBpdGVtIHNob3VsZCBiZSBhZGRlZCwgc2hvdWxkIGJlIGFub3RoZXIgaXRlbSBpbiB0aGUgc2FtZSBsaXN0LCBvciB1bmRlZmluZWQgdG8gcGxhY2UgaXQgYXQgdGhlIGVuZC5cblx0ICpcblx0ICogQHJldHVybiB7Tm9kZX0gLS0gdGhlIERPTSBub2RlIG9mIHRoZSBuZXcgaXRlbSAoYSBESVYgZWxlbWVudCkgb3IgbnVsbFxuXHQgKi9cblx0VHdpbmtsZS5hZGRQb3J0bGV0ID0gKG5hdmlnYXRpb24sIGlkLCB0ZXh0LCB0eXBlLCBuZXh0bm9kZWlkKSA9PiB7XG5cdFx0Ly8gc2FuaXR5IGNoZWNrcywgYW5kIGdldCByZXF1aXJlZCBET00gbm9kZXNcblx0XHRjb25zdCByb290ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigvXig/OiN8XFwuKS8udGVzdChuYXZpZ2F0aW9uKSA/IG5hdmlnYXRpb24gOiBgIyR7bmF2aWdhdGlvbn1gKTtcblx0XHRpZiAoIXJvb3QpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRjb25zdCBpdGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7aWR9YCk7XG5cdFx0aWYgKGl0ZW0pIHtcblx0XHRcdGlmIChpdGVtLnBhcmVudE5vZGUgJiYgaXRlbS5wYXJlbnROb2RlID09PSByb290KSB7XG5cdFx0XHRcdHJldHVybiBpdGVtO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdGxldCBuZXh0bm9kZTtcblx0XHRpZiAobmV4dG5vZGVpZCkge1xuXHRcdFx0bmV4dG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtuZXh0bm9kZWlkfWApO1xuXHRcdH1cblx0XHQvLyB2ZXJpZnkvbm9ybWFsaXplIGlucHV0XG5cdFx0Y29uc3Qgc2tpbiA9IG13LmNvbmZpZy5nZXQoJ3NraW4nKTtcblx0XHRpZiAoXG5cdFx0XHQoc2tpbiAhPT0gJ3ZlY3RvcicgJiYgc2tpbiAhPT0gJ3ZlY3Rvci0yMDIyJykgfHxcblx0XHRcdChuYXZpZ2F0aW9uICE9PSAnbGVmdC1uYXZpZ2F0aW9uJyAmJiBuYXZpZ2F0aW9uICE9PSAncmlnaHQtbmF2aWdhdGlvbicpXG5cdFx0KSB7XG5cdFx0XHR0eXBlID0gbnVsbDsgLy8gbWVudSBzdXBwb3J0ZWQgb25seSBpbiB2ZWN0b3IncyAjbGVmdC1uYXZpZ2F0aW9uICYgI3JpZ2h0LW5hdmlnYXRpb25cblx0XHR9XG5cdFx0bGV0IG91dGVyTmF2Q2xhc3M7XG5cdFx0bGV0IGlubmVyRGl2Q2xhc3M7XG5cdFx0bGV0IHVsQ2xhc3NOYW1lO1xuXHRcdHN3aXRjaCAoc2tpbikge1xuXHRcdFx0Y2FzZSAndmVjdG9yJzpcblx0XHRcdGNhc2UgJ3ZlY3Rvci0yMDIyJzpcblx0XHRcdFx0Ly8gWFhYOiBwb3J0YWwgZG9lc24ndCB3b3JrXG5cdFx0XHRcdGlmIChuYXZpZ2F0aW9uICE9PSAncG9ydGFsJyAmJiBuYXZpZ2F0aW9uICE9PSAnbGVmdC1uYXZpZ2F0aW9uJyAmJiBuYXZpZ2F0aW9uICE9PSAncmlnaHQtbmF2aWdhdGlvbicpIHtcblx0XHRcdFx0XHRuYXZpZ2F0aW9uID0gJ213LXBhbmVsJztcblx0XHRcdFx0fVxuXHRcdFx0XHRvdXRlck5hdkNsYXNzID0gJ213LXBvcnRsZXQgdmVjdG9yLW1lbnUnO1xuXHRcdFx0XHRpZiAobmF2aWdhdGlvbiA9PT0gJ213LXBhbmVsJykge1xuXHRcdFx0XHRcdG91dGVyTmF2Q2xhc3MgKz0gJyB2ZWN0b3ItbWVudS1wb3J0YWwnO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICdtZW51Jykge1xuXHRcdFx0XHRcdG91dGVyTmF2Q2xhc3MgKz0gJyB2ZWN0b3ItbWVudS1kcm9wZG93biB2ZWN0b3ItZHJvcGRvd24gdmVjdG9yLW1lbnUtZHJvcGRvd24tbm9pY29uJztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRvdXRlck5hdkNsYXNzICs9ICcgdmVjdG9yLW1lbnUtdGFicyc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5uZXJEaXZDbGFzcyA9ICd2ZWN0b3ItbWVudS1jb250ZW50IHZlY3Rvci1kcm9wZG93bi1jb250ZW50Jztcblx0XHRcdFx0dWxDbGFzc05hbWUgPSAndmVjdG9yLW1lbnUtY29udGVudC1saXN0Jztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdnb25nYmknOlxuXHRcdFx0XHRvdXRlck5hdkNsYXNzID0gJ213LXBvcnRsZXQnO1xuXHRcdFx0XHRpbm5lckRpdkNsYXNzID0gJ213LXBvcnRsZXQtYm9keSc7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnY2l0aXplbic6XG5cdFx0XHRcdG91dGVyTmF2Q2xhc3MgPSAnY2l0aXplbi1tZW51IG13LXBvcnRsZXQnO1xuXHRcdFx0XHRpbm5lckRpdkNsYXNzID0gJ2NpdGl6ZW4tbWVudV9fY29udGVudCBtdy1wb3J0bGV0LXR3aW5rbGUnO1xuXHRcdFx0XHR1bENsYXNzTmFtZSA9ICdjaXRpemVuLW1lbnVfX2NvbnRlbnQtbGlzdCc7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0bmF2aWdhdGlvbiA9ICdjb2x1bW4tb25lJztcblx0XHRcdFx0b3V0ZXJOYXZDbGFzcyA9ICdwb3J0bGV0Jztcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdC8vIEJ1aWxkIHRoZSBET00gZWxlbWVudHMuXG5cdFx0bGV0IG91dGVyTmF2O1xuXHRcdGxldCBoZWFkaW5nO1xuXHRcdGlmIChza2luID09PSAndmVjdG9yLTIwMjInKSB7XG5cdFx0XHRvdXRlck5hdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdFx0aGVhZGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG91dGVyTmF2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbmF2Jyk7XG5cdFx0XHRoZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcblx0XHR9XG5cdFx0b3V0ZXJOYXYuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknLCBgJHtpZH0tbGFiZWxgKTtcblx0XHQvLyBUaGUgZm9sbG93aW5nIGNsYXNzZXMgYXJlIHVzZWQgaGVyZSAob3V0ZXJOYXZDbGFzcyk6XG5cdFx0Ly8gKiBtdy1wb3J0bGV0IHZlY3Rvci1tZW51IHZlY3Rvci1tZW51LSpcblx0XHQvLyAqIG13LXBvcnRsZXRcblx0XHQvLyAqIGNvbHVtbi1vbmVcblx0XHQvLyBWZWN0b3IgZ2V0dGluZyB2ZWN0b3ItbWVudS1lbXB0eSBGSVhNRSBUT0RPXG5cdFx0b3V0ZXJOYXYuY2xhc3NOYW1lID0gYCR7b3V0ZXJOYXZDbGFzc30gZW1wdHlQb3J0bGV0YDtcblx0XHRvdXRlck5hdi5pZCA9IGlkO1xuXHRcdGlmIChuZXh0bm9kZSAmJiBuZXh0bm9kZS5wYXJlbnROb2RlID09PSByb290KSB7XG5cdFx0XHRyb290Lmluc2VydEJlZm9yZShvdXRlck5hdiwgbmV4dG5vZGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyb290LmFwcGVuZENoaWxkKG91dGVyTmF2KTtcblx0XHR9XG5cdFx0aGVhZGluZy5pZCA9IGAke2lkfS1sYWJlbGA7XG5cdFx0Y29uc3QgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuXHRcdGlmIChza2luID09PSAndmVjdG9yJyB8fCBza2luID09PSAndmVjdG9yLTIwMjInKSB7XG5cdFx0XHRoZWFkaW5nLnNldEF0dHJpYnV0ZSgnZm9yJywgYCR7aWR9LWRyb3Bkb3duLWNoZWNrYm94YCk7XG5cdFx0XHR1bC5jbGFzc05hbWUgPSAndmVjdG9yLW1lbnUtY29udGVudC1saXN0Jztcblx0XHRcdGhlYWRpbmcuY2xhc3NOYW1lID0gJ3ZlY3Rvci1tZW51LWhlYWRpbmcgdmVjdG9yLWRyb3Bkb3duLWxhYmVsJztcblx0XHRcdC8vIGFkZCBpbnZpc2libGUgY2hlY2tib3ggdG8ga2VlcCBtZW51IG9wZW4gd2hlbiBjbGlja2VkXG5cdFx0XHQvLyBzaW1pbGFyIHRvIHRoZSBwLWNhY3Rpb25zIChcIk1vcmVcIikgbWVudVxuXHRcdFx0aWYgKG91dGVyTmF2Q2xhc3MuaW5jbHVkZXMoJ3ZlY3Rvci1tZW51LWRyb3Bkb3duJykpIHtcblx0XHRcdFx0Y29uc3QgY2hrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcblx0XHRcdFx0Y2hrYm94LmlkID0gYCR7aWR9LWRyb3Bkb3duLWNoZWNrYm94YDtcblx0XHRcdFx0Y2hrYm94LmNsYXNzTmFtZSA9ICd2ZWN0b3ItbWVudS1jaGVja2JveCB2ZWN0b3ItZHJvcGRvd24tY2hlY2tib3gnO1xuXHRcdFx0XHRjaGtib3guc2V0QXR0cmlidXRlKCd0eXBlJywgJ2NoZWNrYm94Jyk7XG5cdFx0XHRcdGNoa2JveC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScsIGAke2lkfS1sYWJlbGApO1xuXHRcdFx0XHRvdXRlck5hdi5hcHBlbmRDaGlsZChjaGtib3gpO1xuXHRcdFx0XHQvLyBWZWN0b3IgZ2V0cyBpdHMgdGl0bGUgaW4gYSBzcGFuOyBhbGwgb3RoZXJzIGV4Y2VwdFxuXHRcdFx0XHQvLyBnb25nYmkgaGF2ZSBubyB0aXRsZSwgYW5kIGl0IGhhcyBubyBzcGFuXG5cdFx0XHRcdGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cdFx0XHRcdHNwYW4uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCkpO1xuXHRcdFx0XHRoZWFkaW5nLmFwcGVuZENoaWxkKHNwYW4pO1xuXHRcdFx0XHRjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHRcdFx0XHRhLmhyZWYgPSAnIyc7XG5cdFx0XHRcdCQoYSkub24oJ2NsaWNrJywgKGUpID0+IHtcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRoZWFkaW5nLmFwcGVuZENoaWxkKGEpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBCYXNpY2FsbHkganVzdCBHb25nYmlcblx0XHRcdGlmICh1bENsYXNzTmFtZSkge1xuXHRcdFx0XHR1bC5jbGFzc05hbWUgPSB1bENsYXNzTmFtZTtcblx0XHRcdH1cblx0XHRcdGhlYWRpbmcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCkpO1xuXHRcdH1cblx0XHRvdXRlck5hdi5hcHBlbmRDaGlsZChoZWFkaW5nKTtcblx0XHRpZiAoaW5uZXJEaXZDbGFzcykge1xuXHRcdFx0Y29uc3QgaW5uZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRcdC8vIFRoZSBmb2xsb3dpbmcgY2xhc3NlcyBhcmUgdXNlZCBoZXJlIChpbm5lckRpdkNsYXNzKTpcblx0XHRcdC8vICogdmVjdG9yLW1lbnUtY29udGVudFxuXHRcdFx0Ly8gKiBtdy1wb3J0bGV0LWJvZHlcblx0XHRcdC8vICogbXctcG9ydGxldC10d2lua2xlXG5cdFx0XHQvLyAqIHBvcnRsZXRcblx0XHRcdGlubmVyRGl2LmNsYXNzTmFtZSA9IGlubmVyRGl2Q2xhc3M7XG5cdFx0XHRpbm5lckRpdi5hcHBlbmRDaGlsZCh1bCk7XG5cdFx0XHRvdXRlck5hdi5hcHBlbmRDaGlsZChpbm5lckRpdik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG91dGVyTmF2LmFwcGVuZENoaWxkKHVsKTtcblx0XHR9XG5cdFx0cmV0dXJuIG91dGVyTmF2O1xuXHR9O1xuXHQvKipcblx0ICogKioqKioqKioqKioqKioqKiBUd2lua2xlLmFkZFBvcnRsZXRMaW5rKCkgKioqKioqKioqKioqKioqKlxuXHQgKiBCdWlsZHMgYSBwb3J0bGV0IG1lbnUgaWYgaXQgZG9lc24ndCBleGlzdCB5ZXQsIGFuZCBhZGQgdGhlIHBvcnRsZXQgbGluay5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd8RnVuY3Rpb259IHRhc2sgLS0gRWl0aGVyIGEgVVJMIGZvciB0aGUgcG9ydGxldCBsaW5rIG9yIGEgZnVuY3Rpb24gdG8gZXhlY3V0ZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHRcblx0ICogQHBhcmFtIHtzdHJpbmd9IGlkXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0b29sdGlwXG5cdCAqIEByZXR1cm4ge09iamVjdH0gbGlua1xuXHQgKi9cblx0VHdpbmtsZS5hZGRQb3J0bGV0TGluayA9ICh0YXNrLCB0ZXh0LCBpZCwgdG9vbHRpcCkgPT4ge1xuXHRcdGlmIChUd2lua2xlLmdldFByZWYoJ3BvcnRsZXRBcmVhJykgIT09IG51bGwpIHtcblx0XHRcdFR3aW5rbGUuYWRkUG9ydGxldChcblx0XHRcdFx0VHdpbmtsZS5nZXRQcmVmKCdwb3J0bGV0QXJlYScpLFxuXHRcdFx0XHRUd2lua2xlLmdldFByZWYoJ3BvcnRsZXRJZCcpLFxuXHRcdFx0XHRUd2lua2xlLmdldFByZWYoJ3BvcnRsZXROYW1lJyksXG5cdFx0XHRcdFR3aW5rbGUuZ2V0UHJlZigncG9ydGxldFR5cGUnKSxcblx0XHRcdFx0VHdpbmtsZS5nZXRQcmVmKCdwb3J0bGV0TmV4dCcpXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRjb25zdCBsaW5rID0gbXcudXRpbC5hZGRQb3J0bGV0TGluayhcblx0XHRcdFR3aW5rbGUuZ2V0UHJlZigncG9ydGxldElkJyksXG5cdFx0XHR0eXBlb2YgdGFzayA9PT0gJ3N0cmluZycgPyB0YXNrIDogJyMnLFxuXHRcdFx0dGV4dCxcblx0XHRcdGlkLFxuXHRcdFx0dG9vbHRpcFxuXHRcdCk7XG5cdFx0JGJvZHkuZmluZCgnLmNsaWVudC1qcyAuc2tpbi12ZWN0b3IgI3AtY2FjdGlvbnMnKS5jc3MoJ21hcmdpbi1yaWdodCcsICdpbml0aWFsJyk7XG5cdFx0aWYgKHR5cGVvZiB0YXNrID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHQkKGxpbmspXG5cdFx0XHRcdC5maW5kKCdhJylcblx0XHRcdFx0Lm9uKCdjbGljaycsIChldikgPT4ge1xuXHRcdFx0XHRcdHRhc2soKTtcblx0XHRcdFx0XHRldi5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKCQuY29sbGFwc2libGVUYWJzKSB7XG5cdFx0XHQkLmNvbGxhcHNpYmxlVGFicy5oYW5kbGVSZXNpemUoKTtcblx0XHR9XG5cdFx0cmV0dXJuIGxpbms7XG5cdH07XG5cdC8qKlxuXHQgKiAqKioqKioqKioqKioqKioqIEdlbmVyYWwgaW5pdGlhbGl6YXRpb24gY29kZSAqKioqKioqKioqKioqKioqXG5cdCAqL1xuXHQvLyBSZXRyaWV2ZSB0aGUgdXNlcidzIFR3aW5rbGUgcHJlZmVyZW5jZXMgKHdpbmRvdy5Ud2lua2xlLnByZWZzKVxuXHRUd2lua2xlLnByZWZzIHx8PSB7fTtcblx0dm9pZCBhcGlcblx0XHQuZ2V0KHtcblx0XHRcdGFjdGlvbjogJ3F1ZXJ5Jyxcblx0XHRcdHByb3A6IFsncmV2aXNpb25zJ10sXG5cdFx0XHRydnByb3A6ICdjb250ZW50Jyxcblx0XHRcdGZvcm1hdDogJ2pzb24nLFxuXHRcdFx0Zm9ybWF0dmVyc2lvbjogJzInLFxuXHRcdFx0dGl0bGVzOiBgVXNlcjoke213LmNvbmZpZy5nZXQoJ3dnVXNlck5hbWUnKX0vdHdpbmtsZW9wdGlvbnMuanNgLFxuXHRcdFx0cnZsaW1pdDogJzEnLFxuXHRcdFx0cnZzbG90czogJ21haW4nLFxuXHRcdH0pXG5cdFx0LnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0XHRpZiAoIXJlc3BvbnNlWydxdWVyeSddLnBhZ2VzWzBdLm1pc3NpbmcpIHtcblx0XHRcdFx0Y29uc3QgY29udGVudCA9IHJlc3BvbnNlWydxdWVyeSddLnBhZ2VzWzBdLnJldmlzaW9uc1swXS5zbG90cy5tYWluLmNvbnRlbnQgPz8gJyc7XG5cdFx0XHRcdGlmIChjb250ZW50ICE9PSAnJykge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXZhbFxuXHRcdFx0XHRcdFx0d2luZG93LmV2YWwoY29udGVudCk7XG5cdFx0XHRcdFx0fSBjYXRjaCB7XG5cdFx0XHRcdFx0XHR2b2lkIG13Lm5vdGlmeSh3aW5kb3cud2dVTFMoJ+acquiDveWKoOi9veaCqOeahFR3aW5rbGXlj4LmlbDorr7nva4nLCAn5pyq6IO96LyJ5YWl5oKo55qEVHdpbmtsZeWBj+WlveioreWumicpLCB7XG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdlcnJvcicsXG5cdFx0XHRcdFx0XHRcdHRhZzogJ3R3aW5rbGUnLFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSlcblx0XHQuZmFpbCgoKSA9PiB7XG5cdFx0XHR2b2lkIG13Lm5vdGlmeSh3aW5kb3cud2dVTFMoJ+acquiDveWKoOi9veaCqOeahFR3aW5rbGXlj4LmlbDorr7nva4nLCAn5pyq6IO96LyJ5YWl5oKo55qEVHdpbmtsZeWBj+WlveioreWumicpLCB7XG5cdFx0XHRcdHR5cGU6ICdlcnJvcicsXG5cdFx0XHRcdHRhZzogJ3R3aW5rbGUnLFxuXHRcdFx0fSk7XG5cdFx0fSlcblx0XHQuYWx3YXlzKCgpID0+IHtcblx0XHRcdCQoVHdpbmtsZS5sb2FkKTtcblx0XHR9KTtcblx0Ly8gRGV2ZWxvcGVyczogeW91IGNhbiBpbXBvcnQgY3VzdG9tIFR3aW5rbGUgbW9kdWxlcyBoZXJlXG5cdC8vIEZvciBleGFtcGxlLCBtdy5sb2FkZXIubG9hZChzY3JpcHRwYXRoYmVmb3JlICsgXCJVc2VyOlVuY2xlRG91Z2dpZS9tb3JlYml0cy10ZXN0LmpzXCIgKyBzY3JpcHRwYXRoYWZ0ZXIpO1xuXHRUd2lua2xlLmxvYWQgPSAoKSA9PiB7XG5cdFx0Ly8gRG9uJ3QgYWN0aXZhdGUgb24gc3BlY2lhbCBwYWdlcyBvdGhlciB0aGFuIHRob3NlIGxpc3RlZCBoZXJlLCBzb1xuXHRcdC8vIHRoYXQgb3RoZXJzIGxvYWQgZmFzdGVyLCBlc3BlY2lhbGx5IHRoZSB3YXRjaGxpc3QuXG5cdFx0bGV0IGFjdGl2ZVNwZWNpYWxQYWdlTGlzdCA9IFsnQmxvY2snLCAnQ29udHJpYnV0aW9ucycsICdBYnVzZUxvZycsICdSZWNlbnRjaGFuZ2VzJywgJ1JlY2VudGNoYW5nZXNsaW5rZWQnXTsgLy8gd2dSZWxldmFudFVzZXJOYW1lIGRlZmluZWQgZm9yIG5vbi1zeXNvcHMgb24gU3BlY2lhbDpCbG9ja1xuXHRcdGlmIChNb3JlYml0cy51c2VySXNTeXNvcCkge1xuXHRcdFx0YWN0aXZlU3BlY2lhbFBhZ2VMaXN0ID0gW1xuXHRcdFx0XHQuLi5hY3RpdmVTcGVjaWFsUGFnZUxpc3QsXG5cdFx0XHRcdCdEZWxldGVkQ29udHJpYnV0aW9ucycsXG5cdFx0XHRcdCdQcmVmaXhpbmRleCcsXG5cdFx0XHRcdCdCcm9rZW5SZWRpcmVjdHMnLFxuXHRcdFx0XTtcblx0XHR9XG5cdFx0aWYgKFxuXHRcdFx0bXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSA9PT0gLTEgJiZcblx0XHRcdCFhY3RpdmVTcGVjaWFsUGFnZUxpc3QuaW5jbHVkZXMobXcuY29uZmlnLmdldCgnd2dDYW5vbmljYWxTcGVjaWFsUGFnZU5hbWUnKSlcblx0XHQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Ly8gUHJldmVudCBjbGlja2phY2tpbmdcblx0XHRpZiAod2luZG93LnRvcCAhPT0gd2luZG93LnNlbGYpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Ly8gU2V0IGN1c3RvbSBBcGktVXNlci1BZ2VudCBoZWFkZXIsIGZvciBzZXJ2ZXItc2lkZSBsb2dnaW5nIHB1cnBvc2VzXG5cdFx0VHdpbmtsZS51c2VyQWdlbnQgPSAnVHdpbmtsZS8xLjEnO1xuXHRcdE1vcmViaXRzLndpa2kuYXBpLnNldEFwaVVzZXJBZ2VudChUd2lua2xlLnVzZXJBZ2VudCk7XG5cdFx0VHdpbmtsZS5kaXNhYmxlZE1vZHVsZXMgPSBbLi4uVHdpbmtsZS5nZXRQcmVmKCdkaXNhYmxlZE1vZHVsZXMnKSwgLi4uVHdpbmtsZS5nZXRQcmVmKCdkaXNhYmxlZFN5c29wTW9kdWxlcycpXTtcblx0XHQvLyBSZWRlZmluZSBhZGRJbml0Q2FsbGJhY2sgc28gdGhhdCBhbnkgbW9kdWxlcyBiZWluZyBsb2FkZWQgbm93IG9uIGFyZSBkaXJlY3RseVxuXHRcdC8vIGluaXRpYWxpc2VkIHJhdGhlciB0aGFuIGFkZGVkIHRvIGluaXRDYWxsYmFja3MgYXJyYXlcblx0XHRUd2lua2xlLmFkZEluaXRDYWxsYmFjayA9IChmdW5jLCBuYW1lKSA9PiB7XG5cdFx0XHRpZiAoIW5hbWUgfHwgIVR3aW5rbGUuZGlzYWJsZWRNb2R1bGVzLmluY2x1ZGVzKG5hbWUpKSB7XG5cdFx0XHRcdGZ1bmMoKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdC8vIEluaXRpYWxpc2UgbW9kdWxlcyB0aGF0IHdlcmUgc2F2ZWQgaW4gaW5pdENhbGxiYWNrcyBhcnJheVxuXHRcdGZvciAoY29uc3QgbW9kdWxlIG9mIFR3aW5rbGUuaW5pdENhbGxiYWNrcykge1xuXHRcdFx0VHdpbmtsZS5hZGRJbml0Q2FsbGJhY2sobW9kdWxlLmZ1bmMsIG1vZHVsZS5uYW1lKTtcblx0XHR9XG5cdFx0Ly8gSW5jcmVhc2VzIHRleHQgc2l6ZSBpbiBUd2lua2xlIGRpYWxvZ3MsIGlmIHNvIGNvbmZpZ3VyZWRcblx0XHRpZiAoVHdpbmtsZS5nZXRQcmVmKCdkaWFsb2dMYXJnZUZvbnQnKSkge1xuXHRcdFx0bXcudXRpbC5hZGRDU1MoXG5cdFx0XHRcdCcubW9yZWJpdHMtZGlhbG9nLWNvbnRlbnQsLm1vcmViaXRzLWRpYWxvZy1mb290ZXJsaW5rc3tmb250LXNpemU6MTAwJSFpbXBvcnRhbnR9Lm1vcmViaXRzLWRpYWxvZyBpbnB1dCwubW9yZWJpdHMtZGlhbG9nIHNlbGVjdCwubW9yZWJpdHMtZGlhbG9nLWNvbnRlbnQgYnV0dG9ue2ZvbnQtc2l6ZTppbmhlcml0ICFpbXBvcnRhbnR9J1xuXHRcdFx0KTtcblx0XHR9XG5cdFx0Ly8gSGlkZSB0aGUgbGluZ2VyaW5nIHNwYWNlIGlmIHRoZSBUVyBtZW51IGlzIGVtcHR5XG5cdFx0Y29uc3QgaXNWZWN0b3IgPSBbJ3ZlY3RvcicsICd2ZWN0b3ItMjAyMiddLmluY2x1ZGVzKG13LmNvbmZpZy5nZXQoJ3NraW4nKSk7XG5cdFx0aWYgKGlzVmVjdG9yICYmIFR3aW5rbGUuZ2V0UHJlZigncG9ydGxldFR5cGUnKSA9PT0gJ21lbnUnICYmICRib2R5LmZpbmQoJyNwLXR3aW5rbGUnKS5sZW5ndGggPT09IDApIHtcblx0XHRcdCRib2R5LmZpbmQoJyNwLWNhY3Rpb25zJykuY3NzKCdtYXJnaW4tcmlnaHQnLCAnaW5pdGlhbCcpO1xuXHRcdH1cblx0fTtcblx0LyoqXG5cdCAqIFR3aW5rbGUtc3BlY2lmaWMgdXRpbGl0eSBmdW5jdGlvbnMgc2hhcmVkIGJ5IG11bHRpcGxlIG1vZHVsZXNcblx0ICpcblx0ICogQHBhcmFtIHsqfSBmaXJzdFxuXHQgKiBAcGFyYW0geyp9IHNlY29uZFxuXHQgKi9cblx0Ly8gVXNlZCBpbiBiYXRjaCwgdW5saW5rLCBhbmQgZGVwcm9kIHRvIHNvcnQgcGFnZXMgYnkgbmFtZXNwYWNlLCBhc1xuXHQvLyBqc29uIGZvcm1hdHZlcnNpb249MiBzb3J0cyBieSBwYWdlaWQgaW5zdGVhZCAoIzEyNTEpXG5cdFR3aW5rbGUuc29ydEJ5TmFtZXNwYWNlID0gKGZpcnN0LCBzZWNvbmQpID0+IHtcblx0XHRyZXR1cm4gZmlyc3QubnMgLSBzZWNvbmQubnMgfHwgKGZpcnN0LnRpdGxlID4gc2Vjb25kLnRpdGxlID8gMSA6IC0xKTtcblx0fTtcblx0Ly8gVXNlZCBpbiB1bmxpbmsgbGlzdGluZ3MgdG8gbGluayB0aGUgcGFnZSB0aXRsZVxuXHRUd2lua2xlLmdlbmVyYXRlQmF0Y2hQYWdlTGlua3MgPSAoY2hlY2tib3gpID0+IHtcblx0XHRjb25zdCAkY2hlY2tib3ggPSAkKGNoZWNrYm94KTtcblx0XHRjb25zdCBsaW5rID0gTW9yZWJpdHMuaHRtbE5vZGUoJ2EnLCAkY2hlY2tib3gudmFsKCkpO1xuXHRcdGxpbmsuc2V0QXR0cmlidXRlKCdjbGFzcycsICd0dy1iYXRjaHBhZ2UtbGluaycpO1xuXHRcdGxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgbXcudXRpbC5nZXRVcmwoJGNoZWNrYm94LnZhbCgpKSk7XG5cdFx0bGluay5zZXRBdHRyaWJ1dGUoJ3RhcmdldCcsICdfYmxhbmsnKTtcblx0XHRsaW5rLnNldEF0dHJpYnV0ZSgncmVsJywgJ25vb3BlbmVyIG5vcmVmZXJyZXInKTtcblx0XHQkY2hlY2tib3gubmV4dCgpLnByZXBlbmQoW2xpbmssICcgJ10pO1xuXHR9O1xufSkoalF1ZXJ5KTtcblxuZXhwb3J0IHt9O1xuIiwgIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1ub2NoZWNrXG5cbi8qISBUd2lua2xlLmpzIC0gdHdpbmtsZWFydi5qcyAqL1xuKGZ1bmN0aW9uIHR3aW5rbGVhcnYoJCkge1xuXHRjb25zdCAkYm9keSA9ICQoJ2JvZHknKTtcblx0LyoqXG5cdCAqIHR3aW5rbGVhcnYuanM6IEFSViBtb2R1bGVcblx0ICogTW9kZSBvZiBpbnZvY2F0aW9uOiBUYWIgKFwiQVJWXCIpXG5cdCAqIEFjdGl2ZSBvbjogQW55IHBhZ2Ugd2l0aCByZWxldmFudCB1c2VyIG5hbWUgKHVzZXJzcGFjZSwgY29udHJpYnMsIGV0Yy4pXG5cdCAqL1xuXHRUd2lua2xlLmFydiA9ICgpID0+IHtcblx0XHRjb25zdCB1c2VybmFtZSA9IG13LmNvbmZpZy5nZXQoJ3dnUmVsZXZhbnRVc2VyTmFtZScpO1xuXHRcdGlmICghdXNlcm5hbWUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgaXNJUCA9IG13LnV0aWwuaXNJUEFkZHJlc3ModXNlcm5hbWUpO1xuXHRcdGNvbnN0IHRpdGxlID0gaXNJUFxuXHRcdFx0PyB3aW5kb3cud2dVTFMoJ+aKpeWRiklQ57uZ566h55CG5ZGYJywgJ+WgseWRiklQ57Wm566h55CG5ZOhJylcblx0XHRcdDogd2luZG93LndnVUxTKCfmiqXlkYrnlKjmiLfnu5nnrqHnkIbkurrlkZgnLCAn5aCx5ZGK5L2/55So6ICF57Wm566h55CG5Lq65ZOhJyk7XG5cdFx0VHdpbmtsZS5hZGRQb3J0bGV0TGluayhcblx0XHRcdCgpID0+IHtcblx0XHRcdFx0VHdpbmtsZS5hcnYuY2FsbGJhY2sodXNlcm5hbWUsIGlzSVApO1xuXHRcdFx0fSxcblx0XHRcdHdpbmRvdy53Z1VMUygn5ZGK54q2JywgJ+WRiueLgCcpLFxuXHRcdFx0J3R3LWFydicsXG5cdFx0XHR0aXRsZVxuXHRcdCk7XG5cdH07XG5cdFR3aW5rbGUuYXJ2LmNhbGxiYWNrID0gKHVpZCwgaXNJUCkgPT4ge1xuXHRcdGlmICh1aWQgPT09IG13LmNvbmZpZy5nZXQoJ3dnVXNlck5hbWUnKSkge1xuXHRcdFx0dm9pZCBtdy5ub3RpZnkod2luZG93LndnVUxTKCfkvaDkuI3mg7PmiqXlkYrkvaDoh6rlt7HvvIzlr7nlkKfvvJ8nLCAn5L2g5LiN5oOz5aCx5ZGK5L2g6Ieq5bex77yM5bCN5ZCn77yfJyksIHtcblx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHR0YWc6ICd0d2lua2xlYXJ2Jyxcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBXaW5kb3cgPSBuZXcgTW9yZWJpdHMuc2ltcGxlV2luZG93KDYwMCwgNTAwKTtcblx0XHRXaW5kb3cuc2V0VGl0bGUod2luZG93LndnVUxTKCfmiqXlkYrnlKjmiLfnu5nnrqHnkIbkurrlkZgnLCAn5aCx5ZGK5L2/55So6ICF57Wm566h55CG5Lq65ZOhJykpO1xuXHRcdFdpbmRvdy5zZXRTY3JpcHROYW1lKCdUd2lua2xlJyk7XG5cdFx0V2luZG93LmFkZEZvb3Rlckxpbmsod2luZG93LndnVUxTKCflkYrnirborr7nva4nLCAn5ZGK54uA6Kit5a6aJyksICdIOlRXL1BSRUYjYXJ2Jyk7XG5cdFx0V2luZG93LmFkZEZvb3Rlckxpbmsod2luZG93LndnVUxTKCdUd2lua2xl5biu5YqpJywgJ1R3aW5rbGXoqqrmmI4nKSwgJ0g6VFcj5ZGK54uAJyk7XG5cdFx0Y29uc3QgZm9ybSA9IG5ldyBNb3JlYml0cy5xdWlja0Zvcm0oVHdpbmtsZS5hcnYuY2FsbGJhY2suZXZhbHVhdGUpO1xuXHRcdGNvbnN0IGNhdGVnb3JpZXMgPSBmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdG5hbWU6ICdjYXRlZ29yeScsXG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfpgInmi6nmiqXlkYrnsbvlnovvvJonLCAn6YG45pOH5aCx5ZGK6aGe5Yil77yaJyksXG5cdFx0XHRldmVudDogVHdpbmtsZS5hcnYuY2FsbGJhY2suY2hhbmdlQ2F0ZWdvcnksXG5cdFx0fSk7XG5cdFx0Y2F0ZWdvcmllcy5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ29wdGlvbicsXG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnoLTlnY/vvIhMSUI6VklQ77yJJywgJ+egtOWjnu+8iExJQjpWSVDvvIknKSxcblx0XHRcdHZhbHVlOiAnYWl2Jyxcblx0XHR9KTtcblx0XHRjYXRlZ29yaWVzLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+e8lui+keS6ieiuru+8iExJQjpFV0lQ77yJJywgJ+e3qOi8r+eIreitsO+8iExJQjpFV0lQ77yJJyksXG5cdFx0XHR2YWx1ZTogJ2V3aXAnLFxuXHRcdH0pO1xuXHRcdGNhdGVnb3JpZXMuYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdvcHRpb24nLFxuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn55So5oi35ZCN77yITElCOlVBQe+8iScsICfkvb/nlKjogIXlkI3nqLHvvIhMSUI6VUFB77yJJyksXG5cdFx0XHR2YWx1ZTogJ3VzZXJuYW1lJyxcblx0XHRcdGRpc2FibGVkOiBtdy51dGlsLmlzSVBBZGRyZXNzKHVpZCksXG5cdFx0fSk7XG5cdFx0Y2F0ZWdvcmllcy5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ29wdGlvbicsXG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflgoDlhKHosIPmn6XvvIhMSUI6U1BJ77yJJywgJ+WCgOWEoeiqv+afpe+8iExJQjpTUEnvvIknKSxcblx0XHRcdHZhbHVlOiAnc3BpJyxcblx0XHRcdGRpc2FibGVkOiBtdy51dGlsLmlzSVBBZGRyZXNzKHVpZCksXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRsYWJlbDogJycsXG5cdFx0XHRzdHlsZTogJ2NvbG9yOiAjZjAwJyxcblx0XHRcdGlkOiAndHdpbmtsZS1hcnYtYmxvY2t3YXJuaW5nJyxcblx0XHR9KTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0bGFiZWw6ICdXb3JrIGFyZWEnLFxuXHRcdFx0bmFtZTogJ3dvcmtfYXJlYScsXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ3N1Ym1pdCcsXG5cdFx0XHRsYWJlbDogJ+aPkOS6pCcsXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2hpZGRlbicsXG5cdFx0XHRuYW1lOiAndWlkJyxcblx0XHRcdHZhbHVlOiB1aWQsXG5cdFx0fSk7XG5cdFx0Y29uc3QgcmVzdWx0ID0gZm9ybS5yZW5kZXIoKTtcblx0XHRXaW5kb3cuc2V0Q29udGVudChyZXN1bHQpO1xuXHRcdFdpbmRvdy5kaXNwbGF5KCk7XG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIHVzZXIgaXMgYmxvY2tlZCwgdXBkYXRlIG5vdGljZVxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0YWN0aW9uOiAncXVlcnknLFxuXHRcdFx0bGlzdDogJ2Jsb2NrcycsXG5cdFx0XHRia3Byb3A6ICdyYW5nZXxmbGFncycsXG5cdFx0XHRmb3JtYXQ6ICdqc29uJyxcblx0XHR9O1xuXHRcdGlmIChpc0lQKSB7XG5cdFx0XHRxdWVyeS5ia2lwID0gdWlkO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRxdWVyeS5ia3VzZXJzID0gdWlkO1xuXHRcdH1cblx0XHRuZXcgTW9yZWJpdHMud2lraS5hcGkod2luZG93LndnVUxTKCfmo4Dmn6XnlKjmiLfnmoTlsIHnpoHnirbmgIEnLCAn5qqi5p+l5L2/55So6ICF55qE5bCB6Y6W54uA5oWLJyksIHF1ZXJ5LCAoYXBpb2JqKSA9PiB7XG5cdFx0XHRjb25zdCBibG9ja2xpc3QgPSBhcGlvYmouZ2V0UmVzcG9uc2UoKS5xdWVyeS5ibG9ja3M7XG5cdFx0XHRpZiAoYmxvY2tsaXN0Lmxlbmd0aCkge1xuXHRcdFx0XHRjb25zdCBbYmxvY2tdID0gYmxvY2tsaXN0O1xuXHRcdFx0XHRsZXQgbWVzc2FnZSA9XG5cdFx0XHRcdFx0KGlzSVAgPyB3aW5kb3cud2dVTFMoJ+atpElQ5Zyw5Z2AJywgJ+atpElQ5L2N5Z2AJykgOiB3aW5kb3cud2dVTFMoJ+atpOi0puWPtycsICfmraTos6zomZ8nKSkgK1xuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5bey57uP6KKrJywgJ+W3sue2k+iiqycpICtcblx0XHRcdFx0XHQoYmxvY2sucGFydGlhbCA/ICfpg6jliIYnIDogJycpO1xuXHRcdFx0XHQvLyBTdGFydCBhbmQgZW5kIGRpZmZlciwgcmFuZ2UgYmxvY2tlZFxuXHRcdFx0XHRtZXNzYWdlICs9IGJsb2NrLnJhbmdlc3RhcnQgPT09IChibG9jay5yYW5nZWVuZCA/ICfmrrUnIDogJycpICsgd2luZG93LndnVUxTKCflsIHnpoHjgIInLCAn5bCB6Y6W44CCJyk7XG5cdFx0XHRcdGlmIChibG9jay5wYXJ0aWFsKSB7XG5cdFx0XHRcdFx0JGJvZHkuZmluZCgnI3R3aW5rbGUtYXJ2LWJsb2Nrd2FybmluZycpLmNzcygnY29sb3InLCAnYmxhY2snKTsgLy8gTGVzcyBzZXZlcmVcblx0XHRcdFx0fVxuXHRcdFx0XHQkYm9keS5maW5kKCcjdHdpbmtsZS1hcnYtYmxvY2t3YXJuaW5nJykudGV4dChtZXNzYWdlKTtcblx0XHRcdH1cblx0XHR9KS5wb3N0KCk7XG5cdFx0Ly8gV2UgbXVzdCBpbml0IHRoZVxuXHRcdGNvbnN0IGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuXHRcdGV2dC5pbml0RXZlbnQoJ2NoYW5nZScsIHRydWUsIHRydWUpO1xuXHRcdHJlc3VsdC5jYXRlZ29yeS5kaXNwYXRjaEV2ZW50KGV2dCk7XG5cdH07XG5cdFR3aW5rbGUuYXJ2Lmx0YV9saXN0ID0gW1xuXHRcdHtcblx0XHRcdHZhbHVlOiAnJyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+ivt+mAieaLqScsICfoq4vpgbjmk4cnKSxcblx0XHR9LFxuXHRdO1xuXHRUd2lua2xlLmFydi5jYWxsYmFjay5zb2NrbWFzdGVyX2NoYW5nZWQgPSAoZSkgPT4ge1xuXHRcdFR3aW5rbGUuYXJ2LmNhbGxiYWNrLnNldF9zb2NrbWFzdGVyKGUudGFyZ2V0LnZhbHVlKTtcblx0fTtcblx0VHdpbmtsZS5hcnYuY2FsbGJhY2suc2V0X3NvY2ttYXN0ZXIgPSAoc29ja21hc3RlcikgPT4ge1xuXHRcdCRib2R5LmZpbmQoJ2NvZGUudHctYXJ2LXNvY2ttYXN0ZXInKS50ZXh0KCd7eycuY29uY2F0KCdzdWJzdDonLCBgU29ja3N1c3BlY3Rub3RpY2V8MT0ke3NvY2ttYXN0ZXJ9fX1gKSk7XG5cdH07XG5cdFR3aW5rbGUuYXJ2LmNhbGxiYWNrLmNoYW5nZUNhdGVnb3J5ID0gKGUpID0+IHtcblx0XHRjb25zdCB2YWx1ZV8gPSBlLnRhcmdldC52YWx1ZTtcblx0XHRjb25zdCByb290XyA9IGUudGFyZ2V0LmZvcm07XG5cdFx0Y29uc3QgW29sZF9hcmVhXSA9IE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhyb290XywgJ3dvcmtfYXJlYScpO1xuXHRcdGxldCB3b3JrX2FyZWEgPSBudWxsO1xuXHRcdGNvbnN0IHByZXZpZXdsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHRcdHByZXZpZXdsaW5rLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcblx0XHRwcmV2aWV3bGluay50ZXh0Q29udGVudCA9IHdpbmRvdy53Z1VMUygn6aKE6KeIJywgJ+mgkOimvScpO1xuXHRcdCQocHJldmlld2xpbmspLm9uKCdjbGljaycsICgpID0+IHtcblx0XHRcdFR3aW5rbGUuYXJ2LmNhbGxiYWNrLnByZXZpZXcocm9vdF8pO1xuXHRcdH0pO1xuXHRcdHN3aXRjaCAodmFsdWVfKSB7XG5cdFx0XHRjYXNlICdld2lwJzpcblx0XHRcdFx0d29ya19hcmVhID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybS5lbGVtZW50KHtcblx0XHRcdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aKpeWRiue8lui+keS6ieiuricsICfloLHlkYrnt6jovK/niK3orbAnKSxcblx0XHRcdFx0XHRuYW1lOiAnd29ya19hcmVhJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdkeW5pbnB1dCcsXG5cdFx0XHRcdFx0bmFtZTogJ3BhZ2UnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+ebuOWFs+mhtemdou+8micsICfnm7jpl5zpoIHpnaLvvJonKSxcblx0XHRcdFx0XHRzdWJsYWJlbDogd2luZG93LndnVUxTKCfpobXpnaLvvJonLCAn6aCB6Z2i77yaJyksXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKCflpoLkuI3luIzmnJvorqnmiqXlkYrpk77mjqXliLDpobXpnaLvvIzor7fnlZnnqbonLCAn5aaC5LiN5biM5pyb6K6T5aCx5ZGK6YCj57WQ5Yiw6aCB6Z2i77yM6KuL55WZ56m6JyksXG5cdFx0XHRcdFx0bWluOiAxLFxuXHRcdFx0XHRcdG1heDogMTAsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAndGV4dGFyZWEnLFxuXHRcdFx0XHRcdG5hbWU6ICdyZWFzb24nLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+ivhOiuuu+8micsICfoqZXoq5bvvJonKSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRcdGlkOiAnYXJ2cHJldmlldycsXG5cdFx0XHRcdFx0bGFiZWw6IFtwcmV2aWV3bGlua10sXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdFx0XHRpZDogJ3R3aW5rbGVhcnYtcHJldmlld2JveCcsXG5cdFx0XHRcdFx0c3R5bGU6ICdkaXNwbGF5OiBub25lJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYSA9IHdvcmtfYXJlYS5yZW5kZXIoKTtcblx0XHRcdFx0b2xkX2FyZWEucmVwbGFjZVdpdGgod29ya19hcmVhKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICd1c2VybmFtZSc6XG5cdFx0XHRcdHdvcmtfYXJlYSA9IG5ldyBNb3JlYml0cy5xdWlja0Zvcm0uZWxlbWVudCh7XG5cdFx0XHRcdFx0dHlwZTogJ2ZpZWxkJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmiqXlkYrkuI3lvZPnlKjmiLflkI0nLCAn5aCx5ZGK5LiN55W25L2/55So6ICF5ZCN56ixJyksXG5cdFx0XHRcdFx0bmFtZTogJ3dvcmtfYXJlYScsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnaGVhZGVyJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfkuI3lvZPnlKjmiLflkI3nsbvlnosnLCAn5LiN55W25L2/55So6ICF5ZCN56ix6aGe5YilJyksXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+acieWFveaho+ahiOmmhuS4jeWFgeiuuOS9v+eUqOW4puacieivr+WvvOaAp+OAgeWuo+S8oOaAp+OAgeS+rui+seaAp+aIluegtOWdj+aAp+eahOeUqOaIt+WQjeOAguatpOWklu+8jOS9v+eUqOWfn+WQjeWPiumCrueuseWcsOWdgOeahOeUqOaIt+WQjeS6puiiq+emgeatouOAgui/meS6m+WHhuWImeS/seW6lOW6lOeUqOiHs+eUqOaIt+WQjeWPiuetvuWQjeOAguWcqOWFtuS7luivreiogOS4reS4jeW9k+eahOeUqOaIt+WQjeaIlumAmui/h+mUmeaLvOOAgeabv+S7o+OAgeaal+ekuuOAgeaLhuWtl+aIluS7u+S9lemXtOaOpeaWueazlei+vuaIkOeahOmdnuWmpeW9k+eUqOaIt+WQjeWQjOagt+inhuS4uui/neinhOOAgicsXG5cdFx0XHRcdFx0XHQn5pyJ54245qqU5qGI6aSo5LiN5YWB6Kix5L2/55So5bi25pyJ6Kqk5bCO5oCn44CB5a6j5YKz5oCn44CB5L6u6L6x5oCn5oiW56C05aOe5oCn55qE5L2/55So6ICF5ZCN56ix44CC5q2k5aSW77yM5L2/55So5Z+f5ZCN5Y+K6Zu75a2Q5L+h566x5L2N5Z2A55qE5L2/55So6ICF5ZCN56ix5Lqm6KKr56aB5q2i44CC6YCZ5Lqb5rqW5YmH5L+x5oeJ5oeJ55So6Iez5L2/55So6ICF5ZCN56ix5Y+K57C95ZCN44CC5Zyo5YW25LuW6Kqe6KiA5Lit5LiN55W255qE5L2/55So6ICF5ZCN56ix5oiW6YCa6YGO6Yyv5ou844CB5pu/5Luj44CB5pqX56S644CB5ouG5a2X5oiW5Lu75L2V6ZaT5o6l5pa55rOV6YGU5oiQ55qE6Z2e5aal55W25L2/55So6ICF5ZCN56ix5ZCM5qij6KaW54K66YGV6KaP44CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRcdG5hbWU6ICdhcnZ0eXBlJyxcblx0XHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+ivr+WvvOaAp+eUqOaIt+WQjScsICfoqqTlsI7mgKfkvb/nlKjogIXlkI3nqLEnKSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6IHdpbmRvdy53Z1VMUygn6K+v5a+85oCnJywgJ+iqpOWwjuaApycpLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+ivr+WvvOaAp+eUqOaIt+WQjemakOWQq+edgOS4jui0oeeMruiAheebuOWFs+aIluivr+WvvOS7luS6uueahOS6i+aDheOAguS+i+Wmgu+4sOS4jeWunuingueCueOAgeaal+ekuui0puWPt+aLpeacieeJueWumuadg+mZkOaIluaal+ekuuivpei0puWPt+W5tumdnueUseS4gOS6uuaLpeacieiAjOaYr+eUseS4gOS4que7hOe+pOOAgeS4gOS4qumhueebruaIluS4gOS4qumbhuS9k+i/kOS9nOOAgicsXG5cdFx0XHRcdFx0XHRcdFx0J+iqpOWwjuaAp+S9v+eUqOiAheWQjeeosemaseWQq+iRl+iIh+iyoueNu+iAheebuOmXnOaIluiqpOWwjuS7luS6uueahOS6i+aDheOAguS+i+Wmgu+4sOS4jeWvpuingOm7nuOAgeaal+ekuuizrOiZn+aTgeacieeJueWumuasiumZkOaIluaal+ekuuipsuizrOiZn+S4pumdnueUseS4gOS6uuaTgeacieiAjOaYr+eUseS4gOWAi+e+pOe1hOOAgeS4gOWAi+ioiOeVq+aIluS4gOWAi+mbhumrlOmBi+S9nOOAgidcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+Wuo+S8oOaAp+eUqOaIt+WQjScsICflrqPlgrPmgKfkvb/nlKjogIXlkI3nqLEnKSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6IHdpbmRvdy53Z1VMUygn5a6j5Lyg5oCnJywgJ+Wuo+WCs+aApycpLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+Wuo+S8oOaAp+eUqOaIt+WQjeS8muS6juacieWFveaho+ahiOmmhuS4iui1t+aOqOmUgOS4gOS4que7hOe+pOaIluS4gOmXtOWFrOWPuOeahOS9nOeUqOOAgicsXG5cdFx0XHRcdFx0XHRcdFx0J+Wuo+WCs+aAp+S9v+eUqOiAheWQjeeoseacg+aWvOacieeNuOaqlOahiOmkqOS4iui1t+aOqOmKt+S4gOWAi+e+pOe1hOaIluS4gOmWk+WFrOWPuOeahOS9nOeUqOOAgidcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aal+ekuuW5tumdnueUseS4gOS6uuaLpeaciScsICfmmpfnpLrkuKbpnZ7nlLHkuIDkurrmk4HmnIknKSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6ICdzaGFyZWQnLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+avj+S4qui0puWPt+WPquWPr+S7peS7o+ihqOS4quS6uu+8iOWuueiuuOS4gOS6m+S+i+WkluaDheWGte+8ie+8jOaJgOacieS4juS7luS6uuWIhuS6q+i0puWPt+eahOihjOS4uu+8iOWMheaLrOWIhuS6q+i0puWPt+Wvhuegge+8ieWdh+iiq+emgeatouOAgicsXG5cdFx0XHRcdFx0XHRcdFx0J+avj+WAi+izrOiZn+WPquWPr+S7peS7o+ihqOWAi+S6uu+8iOWuueioseS4gOS6m+S+i+WkluaDheazge+8ie+8jOaJgOacieiIh+S7luS6uuWIhuS6q+izrOiZn+eahOihjOeCuu+8iOWMheaLrOWIhuS6q+izrOiZn+WvhueivO+8ieWdh+iiq+emgeatouOAgidcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+S+rui+seaAp+eUqOaIt+WQjScsICfkvq7ovrHmgKfkvb/nlKjogIXlkI3nqLEnKSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6ICfkvq7ovrHmgKcnLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+S+rui+seaAp+eUqOaIt+WQjeS7pOWNj+iwg+e8lui+keWPmOW+l+WbsOmavu+8jOeUmuiHs+aXoOWPr+iDveOAgicsXG5cdFx0XHRcdFx0XHRcdFx0J+S+rui+seaAp+S9v+eUqOiAheWQjeeoseS7pOWNlOiqv+e3qOi8r+iuiuW+l+WbsOmbo++8jOeUmuiHs+eEoeWPr+iDveOAgidcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+egtOWdj+aAp+eUqOaIt+WQjScsICfnoLTlo57mgKfkvb/nlKjogIXlkI3nqLEnKSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6IHdpbmRvdy53Z1VMUygn56C05Z2P5oCnJywgJ+egtOWjnuaApycpLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+egtOWdj+aAp+eUqOaIt+WQjeWMheaLrOS6uui6q+aUu+WHu+OAgeS8quWGkuS7luS6uuaIluWFtuS7luS4gOWIh+acieedgOa4heaZsOWPr+ingeeahOegtOWdj+acieWFveaho+ahiOmmhuaEj+WbvueahOeUqOaIt+WQjeOAgicsXG5cdFx0XHRcdFx0XHRcdFx0J+egtOWjnuaAp+S9v+eUqOiAheWQjeeoseWMheaLrOS6uui6q+aUu+aTiuOAgeWBveWGkuS7luS6uuaIluWFtuS7luS4gOWIh+acieiRl+a4heaZsOWPr+imi+eahOegtOWjnuacieeNuOaqlOahiOmkqOaEj+WclueahOS9v+eUqOiAheWQjeeoseOAgidcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdFx0bGlzdDogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCflnKjpobXpnaLkuIrpmpDol4/nlKjmiLflkI3vvIjpnIDnm5HnnaPnmoTnlKjmiLflkI3or7fli7/kuo7nq5nlhoXmiqXlkYrvvIzli77pgInmraTpobnlubbkuI3mnoTmiJDog73lnKjnq5nlhoXmiqXlkYrnmoTnkIbnlLHvvIknLFxuXHRcdFx0XHRcdFx0XHRcdCflnKjpoIHpnaLkuIrpmrHol4/kvb/nlKjogIXlkI3nqLHvvIjpnIDnm6PnnaPnmoTkvb/nlKjogIXlkI3nqLHoq4vli7/mlrznq5nlhafloLHlkYrvvIzli77pgbjmraTpoIXkuKbkuI3mp4vmiJDog73lnKjnq5nlhafloLHlkYrnmoTnkIbnlLHvvIknXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn6Iul55So5oi35ZCN5LiN5b2T6K+35Yu+6YCJ5q2k6aG577yM5rOo5oSP77ya6K+36ICD6JmR56eB5LiL6IGU57O7566h55CG5ZGY5aSE55CG44CCJyxcblx0XHRcdFx0XHRcdFx0XHQn6Iul5L2/55So6ICF5ZCN56ix5LiN55W26KuL5Yu+6YG45q2k6aCF77yM5rOo5oSP77ya6KuL6ICD5oWu56eB5LiL6IGv57Wh566h55CG5ZOh6JmV55CG44CCJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRuYW1lOiAnaGlkZW5hbWUnLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogJ2hpZGVuYW1lJyxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0XHRzdHlsZTogJ2ZvbnQtd2VpZ2h0OiBib2xkOycsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAndGV4dGFyZWEnLFxuXHRcdFx0XHRcdG5hbWU6ICdyZWFzb24nLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+ivhOiuuu+8micsICfoqZXoq5bvvJonKSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRcdGlkOiAnYXJ2cHJldmlldycsXG5cdFx0XHRcdFx0bGFiZWw6IFtwcmV2aWV3bGlua10sXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdFx0XHRpZDogJ3R3aW5rbGVhcnYtcHJldmlld2JveCcsXG5cdFx0XHRcdFx0c3R5bGU6ICdkaXNwbGF5OiBub25lJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYSA9IHdvcmtfYXJlYS5yZW5kZXIoKTtcblx0XHRcdFx0b2xkX2FyZWEucmVwbGFjZVdpdGgod29ya19hcmVhKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdzcGknOlxuXHRcdFx0XHR3b3JrX2FyZWEgPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Y+R6LW35YKA5YSh6LCD5p+lJywgJ+eZvOi1t+WCgOWEoeiqv+afpScpLFxuXHRcdFx0XHRcdG5hbWU6ICd3b3JrX2FyZWEnLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0XHRuYW1lOiAnc29ja21hc3RlcicsXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKCfkuLvotKblj7fnmoTnlKjmiLflkI3vvIjkuI3lkKtVc2VyOuWJjee8gO+8iScsICfkuLvos6zomZ/nmoTkvb/nlKjogIXlkI3nqLHvvIjkuI3lkKtVc2VyOuWtl+mmlu+8iScpLFxuXHRcdFx0XHRcdHZhbHVlOiByb290Xy51aWQudmFsdWUsXG5cdFx0XHRcdFx0ZXZlbnQ6IFR3aW5rbGUuYXJ2LmNhbGxiYWNrLnNvY2ttYXN0ZXJfY2hhbmdlZCxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRcdGlkOiAndHdpbmtsZWFydi1zcGlub3RpY2Vib3gnLFxuXHRcdFx0XHRcdHN0eWxlOiAnZGlzcGxheTogbm9uZScsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnZHluaW5wdXQnLFxuXHRcdFx0XHRcdG5hbWU6ICdzb2NrcHVwcGV0Jyxcblx0XHRcdFx0XHRsYWJlbDogJ+WCgOWEoScsXG5cdFx0XHRcdFx0c3VibGFiZWw6ICflgoDlhKHvvJonLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn5YKA5YSh55qE55So5oi35ZCN77yI5LiN5ZCrVXNlcjrliY3nvIDvvIknLCAn5YKA5YSh55qE5L2/55So6ICF5ZCN56ix77yI5LiN5ZCrVXNlcjrlrZfpppbvvIknKSxcblx0XHRcdFx0XHRtaW46IDIsXG5cdFx0XHRcdFx0bWF4OiA5LFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ3RleHRhcmVhJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfor4Hmja7vvJonLCAn6K2J5pOa77yaJyksXG5cdFx0XHRcdFx0bmFtZTogJ3JlYXNvbicsXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+i+k+WFpeiDveWkn+eUqOadpeS9k+eOsOi/meS6m+eUqOaIt+WPr+iDvea7peeUqOWkmumHjei0puWPt+eahOivgeaNru+8jOi/memAmuW4uOWMheaLrOiMtummhuWPkeiogOOAgemhtemdouWOhuWPsuaIluWFtuS7luacieWFs+eahOS/oeaBr+OAguivt+mBv+WFjeWcqOatpOWkhOaPkOS+m+mdnuS4juWCgOWEoeaIlua7peeUqOWkmumHjei0puWPt+ebuOWFs+eahOWFtuS7luiuqOiuuuOAgicsXG5cdFx0XHRcdFx0XHQn6Ly45YWl6IO95aSg55So5L6G6auU54++6YCZ5Lqb5L2/55So6ICF5Y+v6IO95r+r55So5aSa6YeN6LOs6Jmf55qE6K2J5pOa77yM6YCZ6YCa5bi45YyF5ous6Iy26aSo55m86KiA44CB6aCB6Z2i5q235Y+y5oiW5YW25LuW5pyJ6Zec55qE6LOH6KiK44CC6KuL6YG/5YWN5Zyo5q2k6JmV5o+Q5L6b6Z2e6IiH5YKA5YSh5oiW5r+r55So5aSa6YeN6LOs6Jmf55u46Zec55qE5YW25LuW6KiO6KuW44CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6K+35rGC55So5oi35p+l5qC4JywgJ+iri+axguS9v+eUqOiAheafpeaguCcpLFxuXHRcdFx0XHRcdFx0XHRuYW1lOiAnY2hlY2t1c2VyJyxcblx0XHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCfnlKjmiLfmn6XmoLjmmK/kuIDnp43nlKjkuo7ojrflj5blgoDlhKHmjIfmjqfnm7jlhbPmioDmnK/or4Hmja7nmoTlt6XlhbfvvIzoi6XmsqHmnInmraPlvZPnkIbnlLHliJnkuI3kvJrkvb/nlKjvvIzmgqjlv4XpobvlnKjor4Hmja7lrZfmrrXlhYXliIbop6Pph4rkuLrku4DkuYjpnIDopoHkvb/nlKjor6Xlt6XlhbfjgILnlKjmiLfmn6XmoLjkuI3kvJrnlKjkuo7lhazlvIDov57mjqXnlKjmiLfotKblj7fkvb/nlKjnmoRJUOWcsOWdgOOAgicsXG5cdFx0XHRcdFx0XHRcdFx0J+S9v+eUqOiAheafpeaguOaYr+S4gOeorueUqOaWvOeNsuWPluWCgOWEoeaMh+aOp+ebuOmXnOaKgOihk+itieaTmueahOW3peWFt++8jOiLpeaykuacieato+eVtueQhueUseWJh+S4jeacg+S9v+eUqO+8jOaCqOW/hemgiOWcqOitieaTmuashOS9jeWFheWIhuino+mHi+eCuuS7gOm6vOmcgOimgeS9v+eUqOipsuW3peWFt+OAguS9v+eUqOiAheafpeaguOS4jeacg+eUqOaWvOWFrOmWi+mAo+aOpeS9v+eUqOiAheizrOiZn+S9v+eUqOeahElQ5L2N5Z2A44CCJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdFx0aWQ6ICdhcnZwcmV2aWV3Jyxcblx0XHRcdFx0XHRsYWJlbDogW3ByZXZpZXdsaW5rXSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRcdGlkOiAndHdpbmtsZWFydi1wcmV2aWV3Ym94Jyxcblx0XHRcdFx0XHRzdHlsZTogJ2Rpc3BsYXk6IG5vbmUnLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdFx0bGFiZWw6IFtcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn6K+35L2/55So5bi46K+G5Yaz5a6a5piv5ZCm5LulJywgJ+iri+S9v+eUqOW4uOitmOaxuuWumuaYr+WQpuS7pScpLFxuXHRcdFx0XHRcdFx0JCgnPGNvZGU+JykuYWRkQ2xhc3MoJ3R3LWFydi1zb2NrbWFzdGVyJykuY3NzKCdtYXJnaW4nLCAnMnB4OycpWzBdLFxuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHQn6YCa55+l55So5oi344CC6L+Z5LiN5piv5b+F6aG755qE77yM5a+55LqO5raJ5Y+K5paw55So5oi355qE5oql5ZGK6ICM6KiA77yM6YCa55+l5LuW5Lus6IO96K6p5oql5ZGK5pi+5b6X5pu05YWs5bmz77yM5L2G5piv6K645aSa5oOF5Ya15LiL77yI5aaC6ZW/5pyf56C05Z2P6ICF77yJ6YCa55+l5pu05Y+v6IO96YCC5b6X5YW25Y+N44CCJyxcblx0XHRcdFx0XHRcdFx0J+mAmuefpeS9v+eUqOiAheOAgumAmeS4jeaYr+W/hemgiOeahO+8jOWwjeaWvOa2ieWPiuaWsOS9v+eUqOiAheeahOWgseWRiuiAjOiogO+8jOmAmuefpeS7luWAkeiDveiuk+WgseWRiumhr+W+l+abtOWFrOW5s++8jOS9huaYr+ioseWkmuaDheazgeS4i++8iOWmgumVt+acn+egtOWjnuiAhe+8iemAmuefpeabtOWPr+iDvemBqeW+l+WFtuWPjeOAgidcblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYSA9IHdvcmtfYXJlYS5yZW5kZXIoKTtcblx0XHRcdFx0JCgnaW5wdXQ6dGV4dFtuYW1lPXNvY2twdXBwZXRdJywgd29ya19hcmVhKS5maXJzdCgpLnZhbChyb290Xy51aWQudmFsdWUpO1xuXHRcdFx0XHRvbGRfYXJlYS5yZXBsYWNlV2l0aCh3b3JrX2FyZWEpO1xuXHRcdFx0XHRyb290Xy5zcGlub3RpY2VwcmV2aWV3ZXIgPSBuZXcgTW9yZWJpdHMud2lraS5wcmV2aWV3KFxuXHRcdFx0XHRcdCQod29ya19hcmVhKS5maW5kKCcjdHdpbmtsZWFydi1zcGlub3RpY2Vib3gnKS5sYXN0KClbMF1cblx0XHRcdFx0KTtcblx0XHRcdFx0VHdpbmtsZS5hcnYuY2FsbGJhY2suc2V0X3NvY2ttYXN0ZXIocm9vdF8udWlkLnZhbHVlKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdC8qIGNhc2UgJ2Fpdic6ICovXG5cdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR3b3JrX2FyZWEgPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5oql5ZGK55So5oi356C05Z2PJywgJ+WgseWRiuS9v+eUqOiAheegtOWjnicpLFxuXHRcdFx0XHRcdG5hbWU6ICd3b3JrX2FyZWEnLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfmj5DmiqXlgoDlhKHlupTkvJjlhYjlj5HpgIHoh7PlgoDlhKHosIPmn6XvvIzpmaTpnZ7nm7jlhbPnmoTotKblj7fmnInpq5jpopHnjofjgIHmtonlj4rlpJrkuKrpobXpnaLnrYnntKfmgKXkuKXph43nmoTnoLTlnY/ooYzkuLrjgIInLFxuXHRcdFx0XHRcdFx0J+aPkOWgseWCgOWEoeaHieWEquWFiOeZvOmAgeiHs+WCgOWEoeiqv+afpe+8jOmZpOmdnuebuOmXnOeahOizrOiZn+aciemrmOmgu+eOh+OAgea2ieWPiuWkmuWAi+mggemdouetiee3iuaApeWatOmHjeeahOegtOWjnuihjOeCuuOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0XHRuYW1lOiAncGFnZScsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn55u45YWz6aG16Z2i77yaJywgJ+ebuOmXnOmggemdou+8micpLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn5aaC5LiN5biM5pyb6K6p5oql5ZGK6ZO+5o6l5Yiw6aG16Z2i77yM6K+355WZ56m6JywgJ+WmguS4jeW4jOacm+iuk+WgseWRiumAo+e1kOWIsOmggemdou+8jOiri+eVmeepuicpLFxuXHRcdFx0XHRcdHZhbHVlOiBtdy51dGlsLmdldFBhcmFtVmFsdWUoJ3ZhbmFydGljbGUnKSB8fCAnJyxcblx0XHRcdFx0XHRldmVudDogKGV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRjb25zdCB7dmFsdWV9ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRcdFx0Y29uc3Qgcm9vdCA9IGV2ZW50LnRhcmdldC5mb3JtO1xuXHRcdFx0XHRcdFx0aWYgKHZhbHVlID09PSAnJykge1xuXHRcdFx0XHRcdFx0XHRyb290LmJhZGlkLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0cm9vdC5nb29kaWQuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cm9vdC5iYWRpZC5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRyb290Lmdvb2RpZC5kaXNhYmxlZCA9IHJvb3QuYmFkaWQudmFsdWUgPT09ICcnO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRcdG5hbWU6ICdiYWRpZCcsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Y+X5Yiw56C05Z2P55qE5L+u6K6i54mI5pys77yaJywgJ+WPl+WIsOegtOWjnueahOS/ruiogueJiOacrO+8micpLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn55WZ56m65Lul55Wl6L+H5beu5byCJywgJ+eVmeepuuS7peeVpemBjuW3rueVsCcpLFxuXHRcdFx0XHRcdHZhbHVlOiBtdy51dGlsLmdldFBhcmFtVmFsdWUoJ3ZhbmFydGljbGVyZXZpZCcpIHx8ICcnLFxuXHRcdFx0XHRcdGRpc2FibGVkOiAhbXcudXRpbC5nZXRQYXJhbVZhbHVlKCd2YW5hcnRpY2xlJyksXG5cdFx0XHRcdFx0ZXZlbnQ6IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3Qge3ZhbHVlfSA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0XHRcdGNvbnN0IHJvb3QgPSBldmVudC50YXJnZXQuZm9ybTtcblx0XHRcdFx0XHRcdHJvb3QuZ29vZGlkLmRpc2FibGVkID0gdmFsdWUgPT09ICcnO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRcdG5hbWU6ICdnb29kaWQnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+egtOWdj+WJjeeahOS/ruiuoueJiOacrO+8micsICfnoLTlo57liY3nmoTkv67oqILniYjmnKzvvJonKSxcblx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoJ+eVmeepuuS7peeVpei/h+W3ruW8gueahOi+g+aXqeeJiOacrCcsICfnlZnnqbrku6XnlaXpgY7lt67nlbDnmoTovIPml6nniYjmnKwnKSxcblx0XHRcdFx0XHR2YWx1ZTogbXcudXRpbC5nZXRQYXJhbVZhbHVlKCd2YW5hcnRpY2xlZ29vZHJldmlkJykgfHwgJycsXG5cdFx0XHRcdFx0ZGlzYWJsZWQ6ICFtdy51dGlsLmdldFBhcmFtVmFsdWUoJ3ZhbmFydGljbGUnKSB8fCBtdy51dGlsLmdldFBhcmFtVmFsdWUoJ3ZhbmFydGljbGVyZXZpZCcpLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0XHRuYW1lOiAnYXJ2dHlwZScsXG5cdFx0XHRcdFx0bGlzdDogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflt7Llj5Hlh7rmnIDlkI7orablkYonLCAn5bey55m85Ye65pyA5b6M6K2m5ZGKJyksXG5cdFx0XHRcdFx0XHRcdHZhbHVlOiAnZmluYWwnLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bCB56aB6L+H5pyf5ZCO6ZqP5Y2z56C05Z2PJywgJ+WwgemOlumBjuacn+W+jOmaqOWNs+egtOWjnicpLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogJ3Bvc3RibG9jaycsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmmL7ogIzmmJPop4HnmoTnuq/noLTlnY/nlKjmiLcnLCAn6aGv6ICM5piT6KaL55qE57SU56C05aOe5L2/55So6ICFJyksXG5cdFx0XHRcdFx0XHRcdHZhbHVlOiAndmFuZGFsb25seScsXG5cdFx0XHRcdFx0XHRcdGRpc2FibGVkOiBtdy51dGlsLmlzSVBBZGRyZXNzKHJvb3RfLnVpZC52YWx1ZSksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmmL7ogIzmmJPop4HnmoRzcGFtYm905oiW5aSx56qD6LSm5Y+3JywgJ+mhr+iAjOaYk+imi+eahHNwYW1ib3TmiJblpLHnq4ros6zomZ8nKSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6ICdzcGFtYm90Jyxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+S7heeUqOadpeaVo+WPkeW5v+WRiuWuo+S8oOeahOeUqOaItycsICflg4XnlKjkvobmlaPnmbzlu6PlkYrlrqPlgrPnmoTkvb/nlKjogIUnKSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6ICdwcm9tb29ubHknLFxuXHRcdFx0XHRcdFx0XHRkaXNhYmxlZDogbXcudXRpbC5pc0lQQWRkcmVzcyhyb290Xy51aWQudmFsdWUpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYgKCFtdy51dGlsLmlzSVBBZGRyZXNzKG13LmNvbmZpZy5nZXQoJ3dnUmVsZXZhbnRVc2VyTmFtZScpKSkge1xuXHRcdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WcqOmhtemdouS4iuWPiue8lui+keaRmOimgemakOiXj+eUqOaIt+WQjScsICflnKjpoIHpnaLkuIrlj4rnt6jovK/mkZjopoHpmrHol4/kvb/nlKjogIXlkI3nqLEnKSxcblx0XHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0XHQn6Iul55So5oi35ZCN5LiN5b2T6K+35Yu+6YCJ5q2k6aG577yM5rOo5oSP77ya6K+36ICD6JmR56eB5LiL6IGU57O7566h55CG5ZGY5aSE55CG44CCJyxcblx0XHRcdFx0XHRcdFx0XHRcdCfoi6Xkvb/nlKjogIXlkI3nqLHkuI3nlbboq4vli77pgbjmraTpoIXvvIzms6jmhI/vvJroq4vogIPmha7np4HkuIvoga/ntaHnrqHnkIblk6HomZXnkIbjgIInXG5cdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRuYW1lOiAnaGlkZW5hbWUnLFxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiAnaGlkZW5hbWUnLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAndGV4dGFyZWEnLFxuXHRcdFx0XHRcdG5hbWU6ICdyZWFzb24nLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+ivhOiuuu+8micsICfoqZXoq5bvvJonKSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRcdGlkOiAnYXJ2cHJldmlldycsXG5cdFx0XHRcdFx0bGFiZWw6IFtwcmV2aWV3bGlua10sXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdFx0XHRpZDogJ3R3aW5rbGVhcnYtcHJldmlld2JveCcsXG5cdFx0XHRcdFx0c3R5bGU6ICdkaXNwbGF5OiBub25lJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYSA9IHdvcmtfYXJlYS5yZW5kZXIoKTtcblx0XHRcdFx0b2xkX2FyZWEucmVwbGFjZVdpdGgod29ya19hcmVhKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdHJvb3RfLnByZXZpZXdlciA9IG5ldyBNb3JlYml0cy53aWtpLnByZXZpZXcoJCh3b3JrX2FyZWEpLmZpbmQoJyN0d2lua2xlYXJ2LXByZXZpZXdib3gnKS5sYXN0KClbMF0pO1xuXHR9O1xuXHRUd2lua2xlLmFydi5jYWxsYmFjay5wcmV2aWV3ID0gKGZvcm0pID0+IHtcblx0XHRjb25zdCByZWFzb24gPSBUd2lua2xlLmFydi5jYWxsYmFjay5nZXRSZXBvcnRXaWtpdGV4dChmb3JtKTtcblx0XHRpZiAocmVhc29uID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgaW5wdXQgPSBNb3JlYml0cy5xdWlja0Zvcm0uZ2V0SW5wdXREYXRhKGZvcm0pO1xuXHRcdGxldCB0aXRsZTtcblx0XHRzd2l0Y2ggKGlucHV0LmNhdGVnb3J5KSB7XG5cdFx0XHRjYXNlICd2aXAnOlxuXHRcdFx0XHR0aXRsZSA9ICdMSUJfdGFsazrmiqXlkYrlvZPliY3noLTlnY8nO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ2V3aXAnOlxuXHRcdFx0XHR0aXRsZSA9ICdMSUJfdGFsazrnrqHnkIblkZjlkYrnpLrmnb8nO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ3VzZXJuYW1lJzpcblx0XHRcdFx0dGl0bGUgPSAnTElCX3RhbGs6566h55CG5ZGY5ZGK56S65p2/Jztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdzcGknOlxuXHRcdFx0XHR0aXRsZSA9ICdMSUJfdGFsazrnrqHnkIblkZjlkYrnpLrmnb8nO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRpdGxlID0gbXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0Zm9ybS5wcmV2aWV3ZXIuYmVnaW5SZW5kZXIoYF9fTk9UT0NfXyR7cmVhc29uWzBdfWAsIHRpdGxlKTtcblx0fTtcblx0VHdpbmtsZS5hcnYuY2FsbGJhY2suZ2V0UmVwb3J0V2lraXRleHQgPSAoZm9ybSkgPT4ge1xuXHRcdGNvbnN0IGlucHV0ID0gTW9yZWJpdHMucXVpY2tGb3JtLmdldElucHV0RGF0YShmb3JtKTtcblx0XHRsZXQgcmVhc29uID0gJyc7XG5cdFx0bGV0IGNvbW1lbnQgPSAnJztcblx0XHRjb25zdCB7dWlkfSA9IGlucHV0O1xuXHRcdGNvbnN0IGNoZWNrVGl0bGUgPSAodGl0bGUsIHJldmlkKSA9PiB7XG5cdFx0XHRpZiAoL2h0dHBzPzpcXC9cXC8vLnRlc3QodGl0bGUpKSB7XG5cdFx0XHRcdHZvaWQgbXcubm90aWZ5KHdpbmRvdy53Z1VMUygn6aG16Z2i5ZCN56ew5LiN6IO95L2/55So572R5Z2A44CCJywgJ+mggemdouWQjeeoseS4jeiDveS9v+eUqOe2suWdgOOAgicpLCB7XG5cdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVhcnYnLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0bGV0IHBhZ2VfO1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cGFnZV8gPSBuZXcgbXcuVGl0bGUodGl0bGUpO1xuXHRcdFx0fSBjYXRjaCB7XG5cdFx0XHRcdHZvaWQgbXcubm90aWZ5KFxuXHRcdFx0XHRcdGAke1xuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfigJwnLCAn44CMJykgK1xuXHRcdFx0XHRcdFx0dGl0bGUgK1xuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHQn4oCd5LiN5piv5LiA5Liq5pyJ5pWI55qE6aG16Z2i5ZCN56ew77yM5aaC6KaB5L2/55So5beu5byC6ZO+5o6l6K+35pS+5Zyo4oCc6K+E6K664oCdJyxcblx0XHRcdFx0XHRcdFx0J+OAjeS4jeaYr+S4gOWAi+acieaViOeahOmggemdouWQjeeose+8jOWmguimgeS9v+eUqOW3rueVsOmAo+e1kOiri+aUvuWcqOOAjOipleirluOAjSdcblx0XHRcdFx0XHRcdCkgK1xuXHRcdFx0XHRcdFx0KHJldmlkID8gd2luZG93LndnVUxTKCfvvIzmiJbmraPnoa7ovpPlhaXigJzkv67orqLniYjmnKzigJ0nLCAn77yM5oiW5q2j56K66Ly45YWl44CM5L+u6KiC54mI5pys44CNJykgOiAnJylcblx0XHRcdFx0XHR944CCYCxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0XHR0YWc6ICd0d2lua2xlYXJ2Jyxcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGlmIChwYWdlXy5uYW1lc3BhY2UgPT09IC0xKSB7XG5cdFx0XHRcdHZvaWQgbXcubm90aWZ5KFxuXHRcdFx0XHRcdGAke1xuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfigJwnLCAn44CMJykgK1xuXHRcdFx0XHRcdFx0dGl0bGUgK1xuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHQn4oCd5bGe5LqO54m55q6K6aG16Z2i77yM5aaC6KaB5L2/55So5beu5byC6ZO+5o6l6K+35pS+5Zyo4oCc6K+E6K664oCdJyxcblx0XHRcdFx0XHRcdFx0J+OAjeWxrOaWvOeJueauiumggemdou+8jOWmguimgeS9v+eUqOW3rueVsOmAo+e1kOiri+aUvuWcqOOAjOipleirluOAjSdcblx0XHRcdFx0XHRcdCkgK1xuXHRcdFx0XHRcdFx0KHJldmlkID8gd2luZG93LndnVUxTKCfvvIzmiJbmraPnoa7ovpPlhaXigJzkv67orqLniYjmnKzigJ0nLCAn77yM5oiW5q2j56K66Ly45YWl44CM5L+u6KiC54mI5pys44CNJykgOiAnJylcblx0XHRcdFx0XHR944CCYCxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0XHR0YWc6ICd0d2lua2xlYXJ2Jyxcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwYWdlXztcblx0XHR9O1xuXHRcdGxldCBwYWdlO1xuXHRcdHN3aXRjaCAoaW5wdXQuY2F0ZWdvcnkpIHtcblx0XHRcdC8vIFJlcG9ydCAzUlJcblx0XHRcdGNhc2UgJ2V3aXAnOiB7XG5cdFx0XHRcdGlmIChpbnB1dC5yZWFzb24gPT09ICcnKSB7XG5cdFx0XHRcdFx0dm9pZCBtdy5ub3RpZnkod2luZG93LndnVUxTKCfmgqjlv4XpobvmjIflrprnkIbnlLEnLCAn5oKo5b+F6aCI5oyH5a6a55CG55SxJyksIHtcblx0XHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVhcnYnLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZWFzb24gKz0gYD09IOe8lui+keaImOS4vuaKpe+8iCR7dWlkfe+8iSA9PVxcbmA7XG5cdFx0XHRcdHJlYXNvbiArPSBgKiAnJyd7e3ZhbmRhbHwkey9bPV0vLnRlc3QodWlkKSA/ICcxPScgOiAnJ30ke3VpZH19fScnJ1xcbmA7XG5cdFx0XHRcdGNvbnN0IHBhZ2VzID0gJCgnaW5wdXQ6dGV4dFtuYW1lPXBhZ2VdJywgZm9ybSkubWFwKChvLCBlKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuICQoZSkudmFsKCkgfHwgbnVsbDtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZvciAoY29uc3QgcGFnZV8gb2YgcGFnZXMpIHtcblx0XHRcdFx0XHRwYWdlID0gY2hlY2tUaXRsZShwYWdlXywgZmFsc2UpO1xuXHRcdFx0XHRcdGlmICghcGFnZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb21tZW50ICs9IGAqIHt7cGFnZWxpbmtzfCR7XG5cdFx0XHRcdFx0XHRwYWdlLmdldFByZWZpeGVkVGV4dCgpLmluY2x1ZGVzKCc9JykgPyAnMT0nIDogJydcblx0XHRcdFx0XHR9JHtwYWdlLmdldFByZWZpeGVkVGV4dCgpfX19XFxuYDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpbnB1dC5yZWFzb24gPSBpbnB1dC5yZWFzb24ucmVwbGFjZSgvXFxuXFxuKy9nLCAnXFxuJyk7XG5cdFx0XHRcdGlucHV0LnJlYXNvbiA9IGlucHV0LnJlYXNvbi5yZXBsYWNlKC9cXHI/XFxuL2csICdcXG4qOicpOyAvLyBpbmRlbnQgbmV3bGluZXNcblx0XHRcdFx0Y29tbWVudCArPSBgKiAke2lucHV0LnJlYXNvbn1cXG5gO1xuXHRcdFx0XHRjb21tZW50ID0gY29tbWVudC50cmltKCk7XG5cdFx0XHRcdGNvbW1lbnQgPSBNb3JlYml0cy5zdHJpbmcuYXBwZW5kUHVuY3R1YXRpb24oY29tbWVudCk7XG5cdFx0XHRcdHJlYXNvbiArPSBgJHtjb21tZW50fVxcbiog5o+Q5oql5Lq677yafn5gLmNvbmNhdCgnfn5cXG4qIOWkhOeQhu+8micpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdC8vIFJlcG9ydCBpbmFwcHJvcHJpYXRlIHVzZXJuYW1lXG5cdFx0XHRjYXNlICd1c2VybmFtZSc6IHtcblx0XHRcdFx0bGV0IHR5cGVzID0gaW5wdXQuYXJ2dHlwZS5tYXAoTW9yZWJpdHMuc3RyaW5nLnRvTG93ZXJDYXNlRmlyc3RDaGFyKTtcblx0XHRcdFx0Y29uc3QgaGFzU2hhcmVkID0gdHlwZXMuaW5jbHVkZXMoJ3NoYXJlZCcpO1xuXHRcdFx0XHRpZiAoaGFzU2hhcmVkKSB7XG5cdFx0XHRcdFx0dHlwZXMuc3BsaWNlKHR5cGVzLmluZGV4T2YoJ3NoYXJlZCcpLCAxKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0dHlwZXMuaW5jbHVkZXMoJ+S+rui+seaApycpICYmXG5cdFx0XHRcdFx0IWNvbmZpcm0oXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdCforablkYrvvJrkuKXph43nmoTkvq7ovrHmgKfnlKjmiLflkI3lkozpkojlr7nnibnlrprkuKrkurrnmoTkvq7ovrHmgKfnlKjmiLflkI3kuI3lupTlnKjlhazlvIDpobXpnaLmiqXlkYrvvIzogIzmmK/lupTlvZPnp4HkuIvogZTns7vnm5HnnaPlkZjlpITnkIbjgILmmK/lkKbnu6fnu63vvJ8nLFxuXHRcdFx0XHRcdFx0XHQn6K2m5ZGK77ya5Zq06YeN55qE5L6u6L6x5oCn5L2/55So6ICF5ZCN56ix5ZKM6Yed5bCN54m55a6a5YCL5Lq655qE5L6u6L6x5oCn5L2/55So6ICF5ZCN56ix5LiN5oeJ5Zyo5YWs6ZaL6aCB6Z2i5aCx5ZGK77yM6ICM5piv5oeJ55W256eB5LiL6IGv57Wh55uj552j5ZOh6JmV55CG44CC5piv5ZCm57m857qM77yfJ1xuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0eXBlcy5sZW5ndGggPD0gMikge1xuXHRcdFx0XHRcdHR5cGVzID0gdHlwZXMuam9pbign5ZKMJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dHlwZXMgPSBbdHlwZXMuc2xpY2UoMCwgLTEpLmpvaW4oJ+OAgScpLCB0eXBlcy5zbGljZSgtMSldLmpvaW4oJ+WSjCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbW1lbnQgKz0gYCp7e3VzZXItdWFhfDE9JHt1aWR9YDtcblx0XHRcdFx0aWYgKGlucHV0LmhpZGVuYW1lKSB7XG5cdFx0XHRcdFx0Y29tbWVudCArPSAnfGhpZGVuYW1lPTEnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbW1lbnQgKz0gJ319ICZuZGFzaDsgJztcblx0XHRcdFx0aWYgKHR5cGVzLmxlbmd0aCkge1xuXHRcdFx0XHRcdGNvbW1lbnQgKz0gdHlwZXMgKyB3aW5kb3cud2dVTFMoJ+eUqOaIt+WQjScsICfkvb/nlKjogIXlkI3nqLEnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodHlwZXMubGVuZ3RoICYmIGhhc1NoYXJlZCkge1xuXHRcdFx0XHRcdGNvbW1lbnQgKz0gJ++8jCc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGhhc1NoYXJlZCkge1xuXHRcdFx0XHRcdGNvbW1lbnQgKz0gd2luZG93LndnVUxTKCfmmpfnpLror6XotKblj7flubbpnZ7nlLHkuIDkurrmi6XmnIknLCAn5pqX56S66Kmy6LOs6Jmf5Lim6Z2e55Sx5LiA5Lq65pOB5pyJJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHR5cGVzLmxlbmd0aCB8fCBoYXNTaGFyZWQpIHtcblx0XHRcdFx0XHRjb21tZW50ICs9ICfjgIInO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChpbnB1dC5yZWFzb24pIHtcblx0XHRcdFx0XHRjb21tZW50ICs9IE1vcmViaXRzLnN0cmluZy50b1VwcGVyQ2FzZUZpcnN0Q2hhcihpbnB1dC5yZWFzb24pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbW1lbnQgPSBNb3JlYml0cy5zdHJpbmcuYXBwZW5kUHVuY3R1YXRpb24oY29tbWVudCk7XG5cdFx0XHRcdGNvbW1lbnQgKz0gJy0tfn4nLmNvbmNhdCgnfn4nKTtcblx0XHRcdFx0Y29tbWVudCA9IGNvbW1lbnQucmVwbGFjZSgvXFxyP1xcbi9nLCAnXFxuKjonKTsgLy8gaW5kZW50IG5ld2xpbmVzXG5cdFx0XHRcdHJlYXNvbiA9IGA9PSDkuI3lvZPnlKjmiLflkI3miqXlkYrvvIgke1xuXHRcdFx0XHRcdGlucHV0LmhpZGVuYW1lID8gd2luZG93LndnVUxTKCflt7LpmpDol4/nlKjmiLflkI0nLCAn5bey6Zqx6JeP5L2/55So6ICF5ZCN56ixJykgOiB1aWRcblx0XHRcdFx0fe+8iSA9PVxcbmA7XG5cdFx0XHRcdHJlYXNvbiArPSBjb21tZW50O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdC8vIExJQjpTUElcblx0XHRcdGNhc2UgJ3NwaSc6IHtcblx0XHRcdFx0aWYgKCFpbnB1dC5yZWFzb24pIHtcblx0XHRcdFx0XHR2b2lkIG13Lm5vdGlmeSh3aW5kb3cud2dVTFMoJ+ivt+i+k+WFpeivgeaNruOAgicsICfoq4vovLjlhaXorYnmk5rjgIInKSwge1xuXHRcdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdFx0dGFnOiAndHdpbmtsZWFydicsXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IHNvY2twdXBwZXRzID0gTW9yZWJpdHMuYXJyYXkudW5pcShcblx0XHRcdFx0XHRbLi4uJCgnaW5wdXQ6dGV4dFtuYW1lPXNvY2twdXBwZXRdJywgZm9ybSldLm1hcCgobykgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuICQobykudmFsKCkudHJpbSgpIHx8IG51bGw7XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0KTtcblx0XHRcdFx0aWYgKCFzb2NrcHVwcGV0c1swXSkge1xuXHRcdFx0XHRcdHZvaWQgbXcubm90aWZ5KHdpbmRvdy53Z1VMUygn5oKo5rKh5pyJ5oyH5a6a5Lu75L2V5YKA5YSh44CCJywgJ+aCqOaykuacieaMh+WumuS7u+S9leWCgOWEoeOAgicpLCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0XHR0YWc6ICd0d2lua2xlYXJ2Jyxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29tbWVudCArPSAne3snLmNvbmNhdCgnc3Vic3Q6JywgJ1NQSSByZXBvcnR8Jyk7XG5cdFx0XHRcdGlmICghc29ja3B1cHBldHMuaW5jbHVkZXMoaW5wdXQuc29ja21hc3RlcikpIHtcblx0XHRcdFx0XHRjb21tZW50ICs9ICcxPXt7Jy5jb25jYXQoXG5cdFx0XHRcdFx0XHQnc3Vic3Q6Jyxcblx0XHRcdFx0XHRcdCcjaWZleGlzdDp7eycsXG5cdFx0XHRcdFx0XHQnc3Vic3Q6Jyxcblx0XHRcdFx0XHRcdGBGVUxMUEFHRU5BTUV9fXx8JHtpbnB1dC5zb2NrbWFzdGVyfX19fGBcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbW1lbnQgKz0gYCR7c29ja3B1cHBldHNcblx0XHRcdFx0XHQubWFwKChzb2NrLCBpbmRleCkgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGAke2luZGV4ICsgMn09JHtzb2NrfWA7XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0XHQuam9pbignfCcpfVxcbnxldmlkZW5jZT0ke01vcmViaXRzLnN0cmluZy5hcHBlbmRQdW5jdHVhdGlvbihpbnB1dC5yZWFzb24pfVxcbmA7XG5cdFx0XHRcdGlmIChpbnB1dC5jaGVja3VzZXIpIHtcblx0XHRcdFx0XHRjb21tZW50ICs9ICd8Y2hlY2t1c2VyPXllcyc7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29tbWVudCArPSAnfX0nO1xuXHRcdFx0XHRyZWFzb24gPSBjb21tZW50O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVwb3J0IHVzZXIgZm9yIHZhbmRhbGlzbVxuXHRcdFx0LyogY2FzZSAnYWl2JzogKi9cblx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0aWYgKCFpbnB1dC5hcnZ0eXBlLmxlbmd0aCAmJiBpbnB1dC5yZWFzb24gPT09ICcnKSB7XG5cdFx0XHRcdFx0dm9pZCBtdy5ub3RpZnkod2luZG93LndnVUxTKCfmgqjlv4XpobvmjIflrprnkIbnlLEnLCAn5oKo5b+F6aCI5oyH5a6a55CG55SxJyksIHtcblx0XHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVhcnYnLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZWFzb24gKz0gYD09ICR7aW5wdXQuaGlkZW5hbWUgPyB3aW5kb3cud2dVTFMoJ+W3sumakOiXj+eUqOaIt+WQjScsICflt7LpmrHol4/kvb/nlKjogIXlkI3nqLEnKSA6IHVpZH0gPT1cXG5gO1xuXHRcdFx0XHRyZWFzb24gKz0gYCogJycne3t2YW5kYWx8JHsvWz1dLy50ZXN0KHVpZCkgPyAnMT0nIDogJyd9JHt1aWR9YDtcblx0XHRcdFx0aWYgKGlucHV0LmhpZGVuYW1lKSB7XG5cdFx0XHRcdFx0cmVhc29uICs9ICd8aGlkZW5hbWU9MSc7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmVhc29uICs9IFwifX0nJydcXG5cIjtcblx0XHRcdFx0Y29uc3QgdHlwZXMgPSBpbnB1dC5hcnZ0eXBlXG5cdFx0XHRcdFx0Lm1hcCgodikgPT4ge1xuXHRcdFx0XHRcdFx0c3dpdGNoICh2KSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ2ZpbmFsJzpcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gJ+W3suWPkeWHuuacgOWQjuitpuWRiic7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ3Bvc3RibG9jayc6XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuICflsIHnpoHov4fmnJ/lkI7pmo/ljbPnoLTlnY8nO1xuXHRcdFx0XHRcdFx0XHRjYXNlICdzcGFtYm90Jzpcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gJ+aYvuiAjOaYk+ingeeahHNwYW1ib3TmiJblpLHnqoPotKblj7cnO1xuXHRcdFx0XHRcdFx0XHRjYXNlICd2YW5kYWxvbmx5Jzpcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gJ+aYvuiAjOaYk+ingeeahOe6r+egtOWdj+eUqOaItyc7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ3Byb21vb25seSc6XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuICfku4XnlKjmnaXmlaPlj5Hlub/lkYrlrqPkvKDnmoTnlKjmiLcnO1xuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiAn5pyq55+l55CG55SxJztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdC5qb2luKCfvvIwnKTtcblx0XHRcdFx0aWYgKGlucHV0LnBhZ2UgIT09ICcnKSB7XG5cdFx0XHRcdFx0cGFnZSA9IGNoZWNrVGl0bGUoaW5wdXQucGFnZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0aWYgKCFwYWdlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvbW1lbnQgKz0gYCoge3twYWdlbGlua3N8JHtcblx0XHRcdFx0XHRcdHBhZ2UuZ2V0UHJlZml4ZWRUZXh0KCkuaW5jbHVkZXMoJz0nKSA/ICcxPScgOiAnJ1xuXHRcdFx0XHRcdH0ke3BhZ2UuZ2V0UHJlZml4ZWRUZXh0KCl9fX1gO1xuXHRcdFx0XHRcdGlmIChpbnB1dC5iYWRpZCkge1xuXHRcdFx0XHRcdFx0Y29tbWVudCArPSBg77yIe3tkaWZmfCR7cGFnZS5nZXRQcmVmaXhlZFRleHQoKX18JHtpbnB1dC5iYWRpZH18JHtpbnB1dC5nb29kaWQgPz8gJyd9fGRpZmZ9fe+8iWA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvbW1lbnQgKz0gJ1xcbic7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHR5cGVzKSB7XG5cdFx0XHRcdFx0Y29tbWVudCArPSBgKiAke3R5cGVzfWA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGlucHV0LnJlYXNvbiAhPT0gJycpIHtcblx0XHRcdFx0XHRpbnB1dC5yZWFzb24gPSBpbnB1dC5yZWFzb24ucmVwbGFjZSgvXFxuXFxuKy9nLCAnXFxuJyk7XG5cdFx0XHRcdFx0aW5wdXQucmVhc29uID0gaW5wdXQucmVhc29uLnJlcGxhY2UoL1xccj9cXG4vZywgJ1xcbio6Jyk7IC8vIGluZGVudCBuZXdsaW5lc1xuXHRcdFx0XHRcdGNvbW1lbnQgKz0gKHR5cGVzID8gJ+OAgicgOiAnKiAnKSArIGlucHV0LnJlYXNvbjtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb21tZW50ID0gY29tbWVudC50cmltKCk7XG5cdFx0XHRcdGNvbW1lbnQgPSBNb3JlYml0cy5zdHJpbmcuYXBwZW5kUHVuY3R1YXRpb24oY29tbWVudCk7XG5cdFx0XHRcdHJlYXNvbiArPSBgJHtjb21tZW50fVxcbiog5Y+R546w5Lq677yafn5gLmNvbmNhdCgnfn5cXG4qIOWkhOeQhu+8micpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIFtyZWFzb24sIGNvbW1lbnRdO1xuXHR9O1xuXHRUd2lua2xlLmFydi5jYWxsYmFjay5ldmFsdWF0ZSA9IChlKSA9PiB7XG5cdFx0Y29uc3QgZm9ybSA9IGUudGFyZ2V0O1xuXHRcdGNvbnN0IGlucHV0ID0gTW9yZWJpdHMucXVpY2tGb3JtLmdldElucHV0RGF0YShmb3JtKTtcblx0XHRjb25zdCB7dWlkfSA9IGlucHV0O1xuXHRcdGxldCByZWFzb247XG5cdFx0bGV0IHN1bW1hcnk7XG5cdFx0c3dpdGNoIChpbnB1dC5jYXRlZ29yeSkge1xuXHRcdFx0Ly8gUmVwb3J0IDNSUlxuXHRcdFx0Y2FzZSAnZXdpcCc6IHtcblx0XHRcdFx0cmVhc29uID0gVHdpbmtsZS5hcnYuY2FsbGJhY2suZ2V0UmVwb3J0V2lraXRleHQoZm9ybSk7XG5cdFx0XHRcdGlmIChyZWFzb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRzdW1tYXJ5ID0gYCR7d2luZG93LndnVUxTKCfmiqXlkYonLCAn5aCx5ZGKJyl9W1tTcGVjaWFsOkNvbnRyaWJzLyR7dWlkfXwke3VpZH1dXWA7XG5cdFx0XHRcdE1vcmViaXRzLnNpbXBsZVdpbmRvdy5zZXRCdXR0b25zRW5hYmxlZChmYWxzZSk7XG5cdFx0XHRcdE1vcmViaXRzLnN0YXR1cy5pbml0KGZvcm0pO1xuXHRcdFx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5yZWRpcmVjdCA9ICdMSUJfdGFsazrnrqHnkIblkZjlkYrnpLrmnb8nO1xuXHRcdFx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5ub3RpY2UgPSB3aW5kb3cud2dVTFMoJ+aKpeWRiuWujOaIkCcsICfloLHlkYrlrozmiJAnKTtcblx0XHRcdFx0Y29uc3QgZXdpcFBhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0XHRcdCdMSUJfdGFsazrnrqHnkIblkZjlkYrnpLrmnb8nLFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5aSE55CGRVdJUOivt+axgicsICfomZXnkIZFV0lQ6KuL5rGCJylcblx0XHRcdFx0KTtcblx0XHRcdFx0ZXdpcFBhZ2Uuc2V0Rm9sbG93UmVkaXJlY3QodHJ1ZSk7XG5cdFx0XHRcdGV3aXBQYWdlLmxvYWQoKCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHRleHQgPSBld2lwUGFnZS5nZXRQYWdlVGV4dCgpO1xuXHRcdFx0XHRcdGNvbnN0ICRld2lwTGluayA9ICc8YSByZWw9XCJub29wZW5lclwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIvd2lraS9MSUI6RVdJUFwiPkxJQjpFV0lQPC9hPic7XG5cdFx0XHRcdFx0Ly8gY2hlY2sgaWYgdXNlciBoYXMgYWxyZWFkeSBiZWVuIHJlcG9ydGVkXG5cdFx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdFx0bmV3IFJlZ0V4cChcblx0XHRcdFx0XHRcdFx0YD09PVxcXFxzKlxcXFx7XFxcXHtcXFxccyooPzpbVnZdYW5kYWwpXFxcXHMqXFxcXHxcXFxccyooPzoxPSk/XFxcXHMqJHtNb3JlYml0cy5zdHJpbmcuZXNjYXBlUmVnRXhwKFxuXHRcdFx0XHRcdFx0XHRcdHVpZFxuXHRcdFx0XHRcdFx0XHQpfVxcXFxzKlxcXFx9XFxcXH1cXFxccyo9PT1gXG5cdFx0XHRcdFx0XHQpLnRlc3QodGV4dClcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdGV3aXBQYWdlXG5cdFx0XHRcdFx0XHRcdC5nZXRTdGF0dXNFbGVtZW50KClcblx0XHRcdFx0XHRcdFx0LmVycm9yKHdpbmRvdy53Z1VMUygn5oql5ZGK5bey5a2Y5Zyo77yM5bCG5LiN5Lya5Yqg5YWl5paw55qEJywgJ+WgseWRiuW3suWtmOWcqO+8jOWwh+S4jeacg+WKoOWFpeaWsOeahCcpKTtcblx0XHRcdFx0XHRcdE1vcmViaXRzLnN0YXR1cy5wcmludFVzZXJUZXh0KFxuXHRcdFx0XHRcdFx0XHRyZWFzb25bMV0sXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5oKo6L6T5YWl55qE6K+E6K665bey5Zyo5LiL5pa55o+Q5L6b77yM5oKo5Y+v5Lul5bCG5YW25Yqg5YWl5YiwJyxcblx0XHRcdFx0XHRcdFx0XHQn5oKo6Ly45YWl55qE6KmV6KuW5bey5Zyo5LiL5pa55o+Q5L6b77yM5oKo5Y+v5Lul5bCH5YW25Yqg5YWl5YiwJ1xuXHRcdFx0XHRcdFx0XHQpICtcblx0XHRcdFx0XHRcdFx0XHQkZXdpcExpbmsgK1xuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5bey5a2Y5Zyo55qE5bCP6IqC5Lit77yaJywgJ+W3suWtmOWcqOeahOWwj+evgOS4re+8micpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRld2lwUGFnZS5zZXRQYWdlU2VjdGlvbigwKTtcblx0XHRcdFx0XHRld2lwUGFnZS5nZXRTdGF0dXNFbGVtZW50KCkuc3RhdHVzKHdpbmRvdy53Z1VMUygn5Yqg5YWl5paw5oql5ZGK4oCmJywgJ+WKoOWFpeaWsOWgseWRiuKApicpKTtcblx0XHRcdFx0XHRld2lwUGFnZS5zZXRFZGl0U3VtbWFyeShzdW1tYXJ5KTtcblx0XHRcdFx0XHRld2lwUGFnZS5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRcdFx0ZXdpcFBhZ2Uuc2V0QXBwZW5kVGV4dChgXFxuJHtyZWFzb25bMF19YCk7XG5cdFx0XHRcdFx0ZXdpcFBhZ2UuYXBwZW5kKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdC8vIFJlcG9ydCBpbmFwcHJvcHJpYXRlIHVzZXJuYW1lXG5cdFx0XHRjYXNlICd1c2VybmFtZSc6IHtcblx0XHRcdFx0cmVhc29uID0gVHdpbmtsZS5hcnYuY2FsbGJhY2suZ2V0UmVwb3J0V2lraXRleHQoZm9ybSk7XG5cdFx0XHRcdE1vcmViaXRzLnNpbXBsZVdpbmRvdy5zZXRCdXR0b25zRW5hYmxlZChmYWxzZSk7XG5cdFx0XHRcdE1vcmViaXRzLnN0YXR1cy5pbml0KGZvcm0pO1xuXHRcdFx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5yZWRpcmVjdCA9ICdMSUJfdGFsazrnrqHnkIblkZjlkYrnpLrmnb8nO1xuXHRcdFx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5ub3RpY2UgPSB3aW5kb3cud2dVTFMoJ+aKpeWRiuWujOaIkCcsICfloLHlkYrlrozmiJAnKTtcblx0XHRcdFx0Y29uc3QgdWFhUGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHRcdFx0J0xJQl90YWxrOueuoeeQhuWRmOWRiuekuuadvycsXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCflpITnkIZVQUHor7fmsYInLCAn6JmV55CGVUFB6KuL5rGCJylcblx0XHRcdFx0KTtcblx0XHRcdFx0dWFhUGFnZS5zZXRGb2xsb3dSZWRpcmVjdCh0cnVlKTtcblx0XHRcdFx0dWFhUGFnZS5sb2FkKCgpID0+IHtcblx0XHRcdFx0XHRjb25zdCB0ZXh0ID0gdWFhUGFnZS5nZXRQYWdlVGV4dCgpO1xuXHRcdFx0XHRcdC8vIGNoZWNrIGlmIHVzZXIgaGFzIGFscmVhZHkgYmVlbiByZXBvcnRlZFxuXHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdG5ldyBSZWdFeHAoXG5cdFx0XHRcdFx0XHRcdGBcXFxce1xcXFx7XFxcXHMqdXNlci11YWFcXFxccypcXFxcfFxcXFxzKigxXFxcXHMqPVxcXFxzKik/JHtNb3JlYml0cy5zdHJpbmcuZXNjYXBlUmVnRXhwKFxuXHRcdFx0XHRcdFx0XHRcdHVpZFxuXHRcdFx0XHRcdFx0XHQpfVxcXFxzKihcXFxcfHxcXFxcfSlgXG5cdFx0XHRcdFx0XHQpLnRlc3QodGV4dClcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdHVhYVBhZ2UuZ2V0U3RhdHVzRWxlbWVudCgpLmVycm9yKHdpbmRvdy53Z1VMUygn55So5oi35bey6KKr5YiX5YWl44CCJywgJ+S9v+eUqOiAheW3suiiq+WIl+WFpeOAgicpKTtcblx0XHRcdFx0XHRcdGNvbnN0ICR1YWFMaW5rID0gJzxhIHJlbD1cIm5vb3BlbmVyXCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIi93aWtpL0xJQjpVQUFcIj5MSUI6VUFBPC9hPic7XG5cdFx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMucHJpbnRVc2VyVGV4dChcblx0XHRcdFx0XHRcdFx0cmVhc29uWzFdLFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+aCqOi+k+WFpeeahOivhOiuuuW3suWcqOS4i+aWueaPkOS+m++8jOaCqOWPr+S7peWwhuWFtuaJi+W3peWKoOWFpScsXG5cdFx0XHRcdFx0XHRcdFx0J+aCqOi8uOWFpeeahOipleirluW3suWcqOS4i+aWueaPkOS+m++8jOaCqOWPr+S7peWwh+WFtuaJi+W3peWKoOWFpSdcblx0XHRcdFx0XHRcdFx0KSArXG5cdFx0XHRcdFx0XHRcdFx0JHVhYUxpbmsgK1xuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5LiK6K+l55So5oi355qE5oql5ZGK5Lit77yaJywgJ+S4iuipsuS9v+eUqOiAheeahOWgseWRiuS4re+8micpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR1YWFQYWdlLmdldFN0YXR1c0VsZW1lbnQoKS5zdGF0dXMod2luZG93LndnVUxTKCfliqDlhaXmlrDmiqXlkYrigKYnLCAn5Yqg5YWl5paw5aCx5ZGK4oCmJykpO1xuXHRcdFx0XHRcdHVhYVBhZ2Uuc2V0RWRpdFN1bW1hcnkod2luZG93LndnVUxTKCfmlrDmj5DmiqUnLCAn5paw5o+Q5aCxJykpO1xuXHRcdFx0XHRcdHVhYVBhZ2Uuc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0XHRcdHVhYVBhZ2Uuc2V0QXBwZW5kVGV4dChgXFxuXFxuJHtyZWFzb25bMF19YCk7XG5cdFx0XHRcdFx0dWFhUGFnZS5hcHBlbmQoKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0Ly8gTElCOlNQSVxuXHRcdFx0Y2FzZSAnc3BpJzoge1xuXHRcdFx0XHRyZWFzb24gPSBUd2lua2xlLmFydi5jYWxsYmFjay5nZXRSZXBvcnRXaWtpdGV4dChmb3JtKTtcblx0XHRcdFx0TW9yZWJpdHMuc2ltcGxlV2luZG93LnNldEJ1dHRvbnNFbmFibGVkKGZhbHNlKTtcblx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoZm9ybSk7XG5cdFx0XHRcdGNvbnN0IHJlcG9ydHBhZ2UgPSAnTElCX3RhbGs6566h55CG5ZGY5ZGK56S65p2/Jztcblx0XHRcdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQucmVkaXJlY3QgPSByZXBvcnRwYWdlO1xuXHRcdFx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5ub3RpY2UgPSB3aW5kb3cud2dVTFMoJ+aKpeWRiuWujOaIkCcsICfloLHlkYrlrozmiJAnKTtcblx0XHRcdFx0Y29uc3Qgc3BpUGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UocmVwb3J0cGFnZSwgd2luZG93LndnVUxTKCfmipPlj5borqjorrrpobXpnaInLCAn5oqT5Y+W6KiO6KuW6aCB6Z2iJykpO1xuXHRcdFx0XHRzcGlQYWdlLnNldEZvbGxvd1JlZGlyZWN0KHRydWUpO1xuXHRcdFx0XHRzcGlQYWdlLnNldEVkaXRTdW1tYXJ5KHdpbmRvdy53Z1VMUygn5Yqg5YWl5paw5o+Q5oqlJywgJ+WKoOWFpeaWsOaPkOWgsScpKTtcblx0XHRcdFx0c3BpUGFnZS5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRcdHNwaVBhZ2Uuc2V0QXBwZW5kVGV4dChyZWFzb25bMF0pO1xuXHRcdFx0XHRzcGlQYWdlLnNldFdhdGNobGlzdChUd2lua2xlLmdldFByZWYoJ3NwaVdhdGNoUmVwb3J0JykpO1xuXHRcdFx0XHRzcGlQYWdlLmFwcGVuZCgpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVwb3J0IHVzZXIgZm9yIHZhbmRhbGlzbVxuXHRcdFx0LyogY2FzZSAnYWl2JzogKi9cblx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0cmVhc29uID0gVHdpbmtsZS5hcnYuY2FsbGJhY2suZ2V0UmVwb3J0V2lraXRleHQoZm9ybSk7XG5cdFx0XHRcdGlmIChyZWFzb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRzdW1tYXJ5ID0gYCR7d2luZG93LndnVUxTKCfmiqXlkYonLCAn5aCx5ZGKJyl9W1tTcGVjaWFsOkNvbnRyaWJzLyR7dWlkfXwke3VpZH1dXWA7XG5cdFx0XHRcdGlmIChpbnB1dC5oaWRlbmFtZSkge1xuXHRcdFx0XHRcdHN1bW1hcnkgPSB3aW5kb3cud2dVTFMoJ+aKpeWRiuS4gOWQjeeUqOaItycsICfloLHlkYrkuIDlkI3kvb/nlKjogIUnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRNb3JlYml0cy5zaW1wbGVXaW5kb3cuc2V0QnV0dG9uc0VuYWJsZWQoZmFsc2UpO1xuXHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5pdChmb3JtKTtcblx0XHRcdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQucmVkaXJlY3QgPSAnTElCX3RhbGs65oql5ZGK5b2T5YmN56C05Z2PJztcblx0XHRcdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQubm90aWNlID0gd2luZG93LndnVUxTKCfmiqXlkYrlrozmiJAnLCAn5aCx5ZGK5a6M5oiQJyk7XG5cdFx0XHRcdGNvbnN0IGFpdlBhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0XHRcdCdMSUJfdGFsazrmiqXlkYrlvZPliY3noLTlnY8nLFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5aSE55CGVklQ6K+35rGCJywgJ+iZleeQhlZJUOiri+axgicpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGFpdlBhZ2Uuc2V0Rm9sbG93UmVkaXJlY3QodHJ1ZSk7XG5cdFx0XHRcdGFpdlBhZ2UubG9hZCgoKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgdGV4dCA9IGFpdlBhZ2UuZ2V0UGFnZVRleHQoKTtcblx0XHRcdFx0XHRjb25zdCAkYWl2TGluayA9ICc8YSByZWw9XCJub29wZW5lclwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIvd2lraS9MSUI6VklQXCI+TElCOlZJUDwvYT4nO1xuXHRcdFx0XHRcdC8vIGNoZWNrIGlmIHVzZXIgaGFzIGFscmVhZHkgYmVlbiByZXBvcnRlZFxuXHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdG5ldyBSZWdFeHAoXG5cdFx0XHRcdFx0XHRcdGA9PT1cXFxccypcXFxce1xcXFx7XFxcXHMqKD86W1Z2XWFuZGFsKVxcXFxzKlxcXFx8XFxcXHMqKD86MT0pP1xcXFxzKiR7TW9yZWJpdHMuc3RyaW5nLmVzY2FwZVJlZ0V4cChcblx0XHRcdFx0XHRcdFx0XHR1aWRcblx0XHRcdFx0XHRcdFx0KX1cXFxccypcXFxcfVxcXFx9XFxcXHMqPT09YFxuXHRcdFx0XHRcdFx0KS50ZXN0KHRleHQpXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRhaXZQYWdlXG5cdFx0XHRcdFx0XHRcdC5nZXRTdGF0dXNFbGVtZW50KClcblx0XHRcdFx0XHRcdFx0LmVycm9yKHdpbmRvdy53Z1VMUygn5oql5ZGK5bey5a2Y5Zyo77yM5bCG5LiN5Lya5Yqg5YWl5paw55qEJywgJ+WgseWRiuW3suWtmOWcqO+8jOWwh+S4jeacg+WKoOWFpeaWsOeahCcpKTtcblx0XHRcdFx0XHRcdE1vcmViaXRzLnN0YXR1cy5wcmludFVzZXJUZXh0KFxuXHRcdFx0XHRcdFx0XHRyZWFzb25bMV0sXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5oKo6L6T5YWl55qE6K+E6K665bey5Zyo5LiL5pa55o+Q5L6b77yM5oKo5Y+v5Lul5bCG5YW25Yqg5YWl5YiwJyxcblx0XHRcdFx0XHRcdFx0XHQn5oKo6Ly45YWl55qE6KmV6KuW5bey5Zyo5LiL5pa55o+Q5L6b77yM5oKo5Y+v5Lul5bCH5YW25Yqg5YWl5YiwJ1xuXHRcdFx0XHRcdFx0XHQpICtcblx0XHRcdFx0XHRcdFx0XHQkYWl2TGluayArXG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCflt7LlrZjlnKjnmoTlsI/oioLkuK3vvJonLCAn5bey5a2Y5Zyo55qE5bCP56+A5Lit77yaJylcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGFpdlBhZ2Uuc2V0UGFnZVNlY3Rpb24oMCk7XG5cdFx0XHRcdFx0YWl2UGFnZS5nZXRTdGF0dXNFbGVtZW50KCkuc3RhdHVzKHdpbmRvdy53Z1VMUygn5Yqg5YWl5paw5oql5ZGK4oCmJywgJ+WKoOWFpeaWsOWgseWRiuKApicpKTtcblx0XHRcdFx0XHRhaXZQYWdlLnNldEVkaXRTdW1tYXJ5KHN1bW1hcnkpO1xuXHRcdFx0XHRcdGFpdlBhZ2Uuc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0XHRcdGFpdlBhZ2Uuc2V0QXBwZW5kVGV4dChgXFxuJHtyZWFzb25bMF19YCk7XG5cdFx0XHRcdFx0YWl2UGFnZS5hcHBlbmQoKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0VHdpbmtsZS5hZGRJbml0Q2FsbGJhY2soVHdpbmtsZS5hcnYsICdhcnYnKTtcbn0pKGpRdWVyeSk7XG5cbmV4cG9ydCB7fTtcbiIsICIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4vLyBAdHMtbm9jaGVja1xuXG4vKiEgVHdpbmtsZS5qcyAtIHR3aW5rbGV3YXJuLmpzICovXG4oZnVuY3Rpb24gdHdpbmtsZXdhcm4oJCkge1xuXHRjb25zdCAkYm9keSA9ICQoJ2JvZHknKTtcblx0LyoqXG5cdCAqIHR3aW5rbGV3YXJuLmpzOiBXYXJuIG1vZHVsZVxuXHQgKiBNb2RlIG9mIGludm9jYXRpb246IFRhYiAoXCJXYXJuXCIpXG5cdCAqIEFjdGl2ZSBvbjogQW55IHBhZ2Ugd2l0aCByZWxldmFudCB1c2VyIG5hbWUgKHVzZXJzcGFjZSwgY29udHJpYnMsXG5cdCAqIGV0Yy4pLCBhcyB3ZWxsIGFzIHRoZSByb2xsYmFjayBzdWNjZXNzIHBhZ2Vcblx0ICovXG5cdGNvbnN0IHJlbGV2YW50VXNlck5hbWUgPSBtdy5jb25maWcuZ2V0KCd3Z1JlbGV2YW50VXNlck5hbWUnKTtcblx0VHdpbmtsZS53YXJuID0gKCkgPT4ge1xuXHRcdGlmIChyZWxldmFudFVzZXJOYW1lKSB7XG5cdFx0XHRUd2lua2xlLmFkZFBvcnRsZXRMaW5rKFxuXHRcdFx0XHRUd2lua2xlLndhcm4uY2FsbGJhY2ssXG5cdFx0XHRcdCforablkYonLFxuXHRcdFx0XHQndHctd2FybicsXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn6K2m5ZGK5oiW5o+Q6YaS55So5oi3JywgJ+itpuWRiuaIluaPkOmGkuS9v+eUqOiAhScpXG5cdFx0XHQpO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRUd2lua2xlLmdldFByZWYoJ2F1dG9NZW51QWZ0ZXJSb2xsYmFjaycpICYmXG5cdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPT09IDMgJiZcblx0XHRcdFx0bXcudXRpbC5nZXRQYXJhbVZhbHVlKCd2YW5hcnRpY2xlJykgJiZcblx0XHRcdFx0IW13LnV0aWwuZ2V0UGFyYW1WYWx1ZSgnbm9hdXRvd2FybicpXG5cdFx0XHQpIHtcblx0XHRcdFx0VHdpbmtsZS53YXJuLmNhbGxiYWNrKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIE1vZGlmeSBVUkwgb2YgdGFsayBwYWdlIG9uIHJvbGxiYWNrIHN1Y2Nlc3MgcGFnZXMsIG1ha2VzIHVzZSBvZiBhXG5cdFx0Ly8gY3VzdG9tIG1lc3NhZ2UgYm94IGluIFtbTWVkaWFXaWtpOlJvbGxiYWNrLXN1Y2Nlc3NdXVxuXHRcdGlmIChtdy5jb25maWcuZ2V0KCd3Z0FjdGlvbicpID09PSAncm9sbGJhY2snKSB7XG5cdFx0XHRjb25zdCAkdmFuZGFsVGFsa0xpbmsgPSAkYm9keS5maW5kKCcjbXctcm9sbGJhY2stc3VjY2VzcycpLmZpbmQoJy5tdy11c2VydG9vbGxpbmtzIGEnKS5maXJzdCgpO1xuXHRcdFx0aWYgKCR2YW5kYWxUYWxrTGluay5sZW5ndGgpIHtcblx0XHRcdFx0VHdpbmtsZS53YXJuLm1ha2VWYW5kYWxUYWxrTGluaygkdmFuZGFsVGFsa0xpbmssIE1vcmViaXRzLnBhZ2VOYW1lTm9ybSk7XG5cdFx0XHRcdCR2YW5kYWxUYWxrTGluay5jc3MoJ2ZvbnQtd2VpZ2h0JywgJ2JvbGQnKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKFxuXHRcdFx0bXcuY29uZmlnLmdldCgnd2dDYW5vbmljYWxTcGVjaWFsUGFnZU5hbWUnKSA9PT0gJ0FidXNlTG9nJyAmJlxuXHRcdFx0bXcuY29uZmlnLmdldCgnd2dBYnVzZUZpbHRlclZhcmlhYmxlcycpICE9PSBudWxsXG5cdFx0KSB7XG5cdFx0XHRjb25zdCBhZlRhbGtMaW5rID0gJGJvZHkuZmluZCgnLm13LXVzZXJ0b29sbGlua3MtdGFsaycpLmZpcnN0KCk7XG5cdFx0XHRpZiAoYWZUYWxrTGluay5sZW5ndGgpIHtcblx0XHRcdFx0VHdpbmtsZS53YXJuLm1ha2VWYW5kYWxUYWxrTGluayhhZlRhbGtMaW5rLCBtdy5jb25maWcuZ2V0KCd3Z0FidXNlRmlsdGVyVmFyaWFibGVzJykucGFnZV9wcmVmaXhlZHRpdGxlKTtcblx0XHRcdFx0YWZUYWxrTGluay5jc3MoJ2ZvbnQtd2VpZ2h0JywgJ2JvbGQnKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdFR3aW5rbGUud2Fybi5tYWtlVmFuZGFsVGFsa0xpbmsgPSAoJHZhbmRhbFRhbGtMaW5rLCBwYWdlbmFtZSkgPT4ge1xuXHRcdCR2YW5kYWxUYWxrTGluay53cmFwSW5uZXIoXG5cdFx0XHQkKCc8c3Bhbj4nKS5hdHRyKFxuXHRcdFx0XHQndGl0bGUnLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0J+WmguaenOWQiOmAgu+8jOaCqOWPr+S7peeUqFR3aW5rbGXlnKjor6XnlKjmiLforqjorrrpobXkuIrlgZrlh7rorablkYrjgIInLFxuXHRcdFx0XHRcdCflpoLmnpzlkIjpganvvIzmgqjlj6/ku6XnlKhUd2lua2xl5Zyo6Kmy5L2/55So6ICF6KiO6KuW6aCB5LiK5YGa5Ye66K2m5ZGK44CCJ1xuXHRcdFx0XHQpXG5cdFx0XHQpXG5cdFx0KTtcblx0XHRjb25zdCBleHRyYVBhcmFtID0gYHZhbmFydGljbGU9JHttdy51dGlsLnJhd3VybGVuY29kZShwYWdlbmFtZSl9YDtcblx0XHRjb25zdCBocmVmID0gJHZhbmRhbFRhbGtMaW5rLmF0dHIoJ2hyZWYnKTtcblx0XHRpZiAoaHJlZi5pbmNsdWRlcygnPycpKSB7XG5cdFx0XHQkdmFuZGFsVGFsa0xpbmsuYXR0cignaHJlZicsIGAke2hyZWZ9JiR7ZXh0cmFQYXJhbX1gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JHZhbmRhbFRhbGtMaW5rLmF0dHIoJ2hyZWYnLCBgJHtocmVmfT8ke2V4dHJhUGFyYW19YCk7XG5cdFx0fVxuXHR9O1xuXHQvLyBVc2VkIHRvIGNsb3NlIHdpbmRvdyB3aGVuIHN3aXRjaGluZyB0byBBUlYgaW4gYXV0b2xldmVsXG5cdFR3aW5rbGUud2Fybi5kaWFsb2cgPSBudWxsO1xuXHRUd2lua2xlLndhcm4uY2FsbGJhY2sgPSAoKSA9PiB7XG5cdFx0aWYgKFxuXHRcdFx0cmVsZXZhbnRVc2VyTmFtZSA9PT0gbXcuY29uZmlnLmdldCgnd2dVc2VyTmFtZScpICYmXG5cdFx0XHQhY29uZmlybSh3aW5kb3cud2dVTFMoJ+aCqOWwhuimgeitpuWRiuiHquW3se+8geaCqOehruWumuimgee7p+e7reWQl++8nycsICfmgqjlsIfopoHorablkYroh6rlt7HvvIHmgqjnorrlrpropoHnubznuozll47vvJ8nKSlcblx0XHQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0VHdpbmtsZS53YXJuLmRpYWxvZyA9IG5ldyBNb3JlYml0cy5zaW1wbGVXaW5kb3coNjAwLCA0NDApO1xuXHRcdGNvbnN0IHtkaWFsb2d9ID0gVHdpbmtsZS53YXJuO1xuXHRcdGRpYWxvZy5zZXRUaXRsZSh3aW5kb3cud2dVTFMoJ+itpuWRiuOAgeaPkOmGkueUqOaItycsICforablkYrjgIHmj5DphpLkvb/nlKjogIUnKSk7XG5cdFx0ZGlhbG9nLnNldFNjcmlwdE5hbWUoJ1R3aW5rbGUnKTtcblx0XHRkaWFsb2cuYWRkRm9vdGVyTGluayh3aW5kb3cud2dVTFMoJ+itpuWRiuiuvue9ricsICforablkYroqK3lrponKSwgJ0g6VFcvUFJFRiN3YXJuJyk7XG5cdFx0ZGlhbG9nLmFkZEZvb3Rlckxpbmsod2luZG93LndnVUxTKCdUd2lua2xl5biu5YqpJywgJ1R3aW5rbGXoqqrmmI4nKSwgJ0g6VFcvRE9DI3dhcm4nKTtcblx0XHRjb25zdCBmb3JtID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybShUd2lua2xlLndhcm4uY2FsbGJhY2suZXZhbHVhdGUpO1xuXHRcdGNvbnN0IG1haW5fc2VsZWN0ID0gZm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2ZpZWxkJyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+mAieaLqeimgeWPkemAgeeahOitpuWRiuaIluaPkOmGkuexu+WeiycsICfpgbjmk4fopoHlgrPpgIHnmoTorablkYrmiJbmj5DphpLpoZ7liKUnKSxcblx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn6aaW5YWI6YCJ5oup5LiA57uE77yM5YaN6YCJ5oup5YW35L2T55qE6K2m5ZGK5qih5p2/44CCJywgJ+mmluWFiOmBuOaTh+S4gOe1hO+8jOWGjemBuOaTh+WFt+mrlOeahOitpuWRiuaooeadv+OAgicpLFxuXHRcdH0pO1xuXHRcdGNvbnN0IG1haW5fZ3JvdXAgPSBtYWluX3NlbGVjdC5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHRuYW1lOiAnbWFpbl9ncm91cCcsXG5cdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCfmgqjlj6/lnKhUd2lua2xl5Y+C5pWw6K6+572u5Lit6K6+572u6buY6K6k6YCJ5oup55qE6YCJ6aG5Jyxcblx0XHRcdFx0J+aCqOWPr+WcqFR3aW5rbGXlgY/lpb3oqK3lrprkuK3oqK3lrprpoJDoqK3pgbjmk4fnmoTpgbjpoIUnXG5cdFx0XHQpLFxuXHRcdFx0ZXZlbnQ6IFR3aW5rbGUud2Fybi5jYWxsYmFjay5jaGFuZ2VfY2F0ZWdvcnksXG5cdFx0fSk7XG5cdFx0Y29uc3QgZGVmYXVsdEdyb3VwID0gTnVtYmVyLnBhcnNlSW50KFR3aW5rbGUuZ2V0UHJlZignZGVmYXVsdFdhcm5pbmdHcm91cCcpLCA2KTtcblx0XHRtYWluX2dyb3VwLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+iHquWKqOmAieaLqeWxgue6pycsICfoh6rli5Xpgbjmk4flsaTntJonKSxcblx0XHRcdHZhbHVlOiAnYXV0b2xldmVsJyxcblx0XHRcdHNlbGVjdGVkOiBkZWZhdWx0R3JvdXAgPT09IDcsXG5cdFx0fSk7XG5cdFx0bWFpbl9ncm91cC5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ29wdGlvbicsXG5cdFx0XHRsYWJlbDogJzHvvJrmj5DphpInLFxuXHRcdFx0dmFsdWU6ICdsZXZlbDEnLFxuXHRcdFx0c2VsZWN0ZWQ6IGRlZmF1bHRHcm91cCA9PT0gMSxcblx0XHR9KTtcblx0XHRtYWluX2dyb3VwLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdGxhYmVsOiAnMu+8muitpuWRiicsXG5cdFx0XHR2YWx1ZTogJ2xldmVsMicsXG5cdFx0XHRzZWxlY3RlZDogZGVmYXVsdEdyb3VwID09PSAyLFxuXHRcdH0pO1xuXHRcdGlmIChUd2lua2xlLmdldFByZWYoJ2NvbWJpbmVkU2luZ2xldE1lbnVzJykpIHtcblx0XHRcdG1haW5fZ3JvdXAuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ29wdGlvbicsXG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WNleWxgue6p+a2iOaBrycsICfllq7lsaTntJroqIrmga8nKSxcblx0XHRcdFx0dmFsdWU6ICdzaW5nbGVjb21iaW5lZCcsXG5cdFx0XHRcdHNlbGVjdGVkOiBkZWZhdWx0R3JvdXAgPT09IDMgfHwgZGVmYXVsdEdyb3VwID09PSA0LFxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1haW5fZ3JvdXAuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ29wdGlvbicsXG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WNleWxgue6p+aPkOmGkicsICfllq7lsaTntJrmj5DphpInKSxcblx0XHRcdFx0dmFsdWU6ICdzaW5nbGVub3RpY2UnLFxuXHRcdFx0XHRzZWxlY3RlZDogZGVmYXVsdEdyb3VwID09PSAzLFxuXHRcdFx0fSk7XG5cdFx0XHRtYWluX2dyb3VwLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdvcHRpb24nLFxuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfljZXlsYLnuqforablkYonLCAn5Zau5bGk57Sa6K2m5ZGKJyksXG5cdFx0XHRcdHZhbHVlOiAnc2luZ2xld2FybicsXG5cdFx0XHRcdHNlbGVjdGVkOiBkZWZhdWx0R3JvdXAgPT09IDQsXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKFR3aW5rbGUuZ2V0UHJlZignY3VzdG9tV2FybmluZ0xpc3QnKS5sZW5ndGgpIHtcblx0XHRcdG1haW5fZ3JvdXAuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ29wdGlvbicsXG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+iHquWumuS5ieitpuWRiicsICfoh6roqILorablkYonKSxcblx0XHRcdFx0dmFsdWU6ICdjdXN0b20nLFxuXHRcdFx0XHRzZWxlY3RlZDogZGVmYXVsdEdyb3VwID09PSA1LFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdG1haW5fZ3JvdXAuYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdvcHRpb24nLFxuXHRcdFx0bGFiZWw6ICfmiYDmnInorablkYrmqKHmnb8nLFxuXHRcdFx0dmFsdWU6ICdraXRjaGVuc2luaycsXG5cdFx0XHRzZWxlY3RlZDogZGVmYXVsdEdyb3VwID09PSA2LFxuXHRcdH0pO1xuXHRcdG1haW5fc2VsZWN0LmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdG5hbWU6ICdzdWJfZ3JvdXAnLFxuXHRcdFx0ZXZlbnQ6IFR3aW5rbGUud2Fybi5jYWxsYmFjay5jaGFuZ2Vfc3ViY2F0ZWdvcnksXG5cdFx0fSk7IC8vIFdpbGwgYmUgZW1wdHkgdG8gYmVnaW4gd2l0aC5cblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0bmFtZTogJ2FydGljbGUnLFxuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6aG16Z2i6ZO+5o6lJywgJ+mggemdoumAo+e1kCcpLFxuXHRcdFx0dmFsdWU6IG13LnV0aWwuZ2V0UGFyYW1WYWx1ZSgndmFuYXJ0aWNsZScpIHx8ICcnLFxuXHRcdFx0c2l6ZTogNTAsXG5cdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoJ+e7meaooeadv+S4reWKoOWFpeS4gOmhtemdoumTvuaOpe+8jOWPr+eVmeepuuOAgicsICfntabmqKHmnb/kuK3liqDlhaXkuIDpoIHpnaLpgKPntZDvvIzlj6/nlZnnqbrjgIInKSxcblx0XHRcdHBsYWNlaG9sZGVyOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCfku4XpmZDkuIDkuKrvvIzli7/kvb/nlKjnvZHlnYDjgIFbWyBdXe+8jOWPr+S9v+eUqFNwZWNpYWw6RGlmZicsXG5cdFx0XHRcdCflg4XpmZDkuIDlgIvvvIzli7/kvb/nlKjntrLlnYDjgIFbWyBdXe+8jOWPr+S9v+eUqFNwZWNpYWw6RGlmZidcblx0XHRcdCksXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRsYWJlbDogJycsXG5cdFx0XHRzdHlsZTogJ2NvbG9yOiAjZjAwJyxcblx0XHRcdGlkOiAndHdpbmtsZS13YXJuLXdhcm5pbmctbWVzc2FnZXMnLFxuXHRcdH0pO1xuXHRcdGNvbnN0IG1vcmUgPSBmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0bmFtZTogJ3JlYXNvbkdyb3VwJyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+itpuWRiuS/oeaBrycsICforablkYros4foqIonKSxcblx0XHR9KTtcblx0XHRtb3JlLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAndGV4dGFyZWEnLFxuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Y+v6YCJ5L+h5oGv77yaJywgJ+WPr+mBuOizh+ioiu+8micpLFxuXHRcdFx0bmFtZTogJ3JlYXNvbicsXG5cdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoJ+eQhueUseaIluaYr+mZhOWKoOS/oeaBrycsICfnkIbnlLHmiJbmmK/pmYTliqDos4foqIonKSxcblx0XHR9KTtcblx0XHRjb25zdCBwcmV2aWV3bGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblx0XHQkKHByZXZpZXdsaW5rKS5vbignY2xpY2snLCAoKSA9PiB7XG5cdFx0XHRUd2lua2xlLndhcm4uY2FsbGJhY2tzLnByZXZpZXcocmVzdWx0KTsgLy8gfHJlc3VsdHwgaXMgZGVmaW5lZCBiZWxvd1xuXHRcdH0pO1xuXG5cdFx0cHJldmlld2xpbmsuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuXHRcdHByZXZpZXdsaW5rLnRleHRDb250ZW50ID0gd2luZG93LndnVUxTKCfpooTop4gnLCAn6aCQ6Ka9Jyk7XG5cdFx0bW9yZS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRpZDogJ3dhcm5pbmdwcmV2aWV3Jyxcblx0XHRcdGxhYmVsOiBbcHJldmlld2xpbmtdLFxuXHRcdH0pO1xuXHRcdG1vcmUuYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0aWQ6ICd0d2lua2xld2Fybi1wcmV2aWV3Ym94Jyxcblx0XHRcdHN0eWxlOiAnZGlzcGxheTogbm9uZScsXG5cdFx0fSk7XG5cdFx0bW9yZS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ3N1Ym1pdCcsXG5cdFx0XHRsYWJlbDogJ+aPkOS6pCcsXG5cdFx0fSk7XG5cdFx0Y29uc3QgcmVzdWx0ID0gZm9ybS5yZW5kZXIoKTtcblx0XHRkaWFsb2cuc2V0Q29udGVudChyZXN1bHQpO1xuXHRcdGRpYWxvZy5kaXNwbGF5KCk7XG5cdFx0cmVzdWx0Lm1haW5fZ3JvdXAucm9vdCA9IHJlc3VsdDtcblx0XHRyZXN1bHQucHJldmlld2VyID0gbmV3IE1vcmViaXRzLndpa2kucHJldmlldygkKHJlc3VsdCkuZmluZCgnZGl2I3R3aW5rbGV3YXJuLXByZXZpZXdib3gnKS5sYXN0KClbMF0pO1xuXHRcdC8vIFBvdGVudGlhbCBub3RpY2VzIGZvciBzdGFsZW5lc3MgYW5kIG1pc3NlZCByZXZlcnRzXG5cdFx0bGV0IG1lc3NhZ2UgPSAnJztcblx0XHRsZXQgcXVlcnkgPSB7fTtcblx0XHRjb25zdCB2YW5yZXZpZCA9IG13LnV0aWwuZ2V0UGFyYW1WYWx1ZSgndmFuYXJ0aWNsZXJldmlkJyk7XG5cdFx0aWYgKHZhbnJldmlkKSB7XG5cdFx0XHQvLyBJZiB5b3UgdHJpZWQgcmV2ZXJ0aW5nLCBjaGVjayBpZiAqeW91KiBhY3R1YWxseSByZXZlcnRlZFxuXHRcdFx0aWYgKCFtdy51dGlsLmdldFBhcmFtVmFsdWUoJ25vYXV0b3dhcm4nKSAmJiBtdy51dGlsLmdldFBhcmFtVmFsdWUoJ3ZhbmFydGljbGUnKSkge1xuXHRcdFx0XHQvLyBWaWEgZmx1ZmYgbGlua1xuXHRcdFx0XHRxdWVyeSA9IHtcblx0XHRcdFx0XHRhY3Rpb246ICdxdWVyeScsXG5cdFx0XHRcdFx0dGl0bGVzOiBtdy51dGlsLmdldFBhcmFtVmFsdWUoJ3ZhbmFydGljbGUnKSxcblx0XHRcdFx0XHRwcm9wOiAncmV2aXNpb25zJyxcblx0XHRcdFx0XHRydnN0YXJ0aWQ6IHZhbnJldmlkLFxuXHRcdFx0XHRcdHJ2bGltaXQ6IDIsXG5cdFx0XHRcdFx0cnZkaXI6ICduZXdlcicsXG5cdFx0XHRcdFx0cnZwcm9wOiAndXNlcicsXG5cdFx0XHRcdH07XG5cdFx0XHRcdG5ldyBNb3JlYml0cy53aWtpLmFwaShcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+ajgOafpeaCqOaYr+WQpuaIkOWKn+WbnumAgOivpemhtemdoicsICfmqqLmn6XmgqjmmK/lkKbmiJDlip/lm57pgIDoqbLpoIHpnaInKSxcblx0XHRcdFx0XHRxdWVyeSxcblx0XHRcdFx0XHQoYXBpb2JqKSA9PiB7XG5cdFx0XHRcdFx0XHRjb25zdCByZXZlcnRVc2VyID0gJChhcGlvYmouZ2V0UmVzcG9uc2UoKSkuZmluZCgncmV2aXNpb25zIHJldicpWzFdLmdldEF0dHJpYnV0ZSgndXNlcicpO1xuXHRcdFx0XHRcdFx0aWYgKHJldmVydFVzZXIgJiYgcmV2ZXJ0VXNlciAhPT0gbXcuY29uZmlnLmdldCgnd2dVc2VyTmFtZScpKSB7XG5cdFx0XHRcdFx0XHRcdG1lc3NhZ2UgKz0gd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCflhbbku5bkurrlm57pgIDkuobor6XpobXpnaLvvIzlubblj6/og73lt7Lnu4/orablkYror6XnlKjmiLfjgIInLFxuXHRcdFx0XHRcdFx0XHRcdCflhbbku5bkurrlm57pgIDkuoboqbLpoIHpnaLvvIzkuKblj6/og73lt7LntpPorablkYroqbLkvb/nlKjogIXjgIInXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdCRib2R5LmZpbmQoJyN0d2lua2xlLXdhcm4td2FybmluZy1tZXNzYWdlcycpLnRleHQoYOitpuWRiu+8miR7bWVzc2FnZX1gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCkucG9zdCgpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gQ29uZmlybSBlZGl0IHdhc24ndCB0b28gb2xkIGZvciBhIHdhcm5pbmdcblx0XHRcdGNvbnN0IGNoZWNrU3RhbGUgPSAodmFudGltZXN0YW1wXykgPT4ge1xuXHRcdFx0XHRjb25zdCByZXZEYXRlID0gbmV3IE1vcmViaXRzLmRhdGUodmFudGltZXN0YW1wXyk7XG5cdFx0XHRcdGlmICh2YW50aW1lc3RhbXBfICYmIHJldkRhdGUuaXNWYWxpZCgpICYmIHJldkRhdGUuYWRkKDI0LCAnaG91cnMnKS5pc0JlZm9yZShuZXcgRGF0ZSgpKSkge1xuXHRcdFx0XHRcdG1lc3NhZ2UgKz0gd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+i/meeslOe8lui+keaYr+WcqDI05bCP5pe25YmN5YGa5Ye655qE77yM546w5Zyo6K2m5ZGK5Y+v6IO95bey6L+H5pe244CCJyxcblx0XHRcdFx0XHRcdCfpgJnnrYbnt6jovK/mmK/lnKgyNOWwj+aZguWJjeWBmuWHuueahO+8jOePvuWcqOitpuWRiuWPr+iDveW3sumBjuaZguOAgidcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdCRib2R5LmZpbmQoJyN0d2lua2xlLXdhcm4td2FybmluZy1tZXNzYWdlcycpLnRleHQoYOitpuWRiu+8miR7bWVzc2FnZX1gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGxldCB2YW50aW1lc3RhbXAgPSBtdy51dGlsLmdldFBhcmFtVmFsdWUoJ3ZhbnRpbWVzdGFtcCcpO1xuXHRcdFx0Ly8gUHJvdmlkZWQgZnJvbSBhIGZsdWZmIG1vZHVsZS1iYXNlZCByZXZlcnQsIG5vIEFQSSBsb29rdXAgbmVjZXNzYXJ5XG5cdFx0XHRpZiAodmFudGltZXN0YW1wKSB7XG5cdFx0XHRcdGNoZWNrU3RhbGUodmFudGltZXN0YW1wKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHF1ZXJ5ID0ge1xuXHRcdFx0XHRcdGFjdGlvbjogJ3F1ZXJ5Jyxcblx0XHRcdFx0XHRwcm9wOiAncmV2aXNpb25zJyxcblx0XHRcdFx0XHRydnByb3A6ICd0aW1lc3RhbXAnLFxuXHRcdFx0XHRcdHJldmlkczogdmFucmV2aWQsXG5cdFx0XHRcdH07XG5cdFx0XHRcdG5ldyBNb3JlYml0cy53aWtpLmFwaSh3aW5kb3cud2dVTFMoJ+iOt+WPlueJiOacrOaXtumXtOaIsycsICflj5blvpfniYjmnKzmmYLplpPmiLMnKSwgcXVlcnksIChhcGlvYmopID0+IHtcblx0XHRcdFx0XHR2YW50aW1lc3RhbXAgPSAkKGFwaW9iai5nZXRSZXNwb25zZSgpKS5maW5kKCdyZXZpc2lvbnMgcmV2JykuYXR0cigndGltZXN0YW1wJyk7XG5cdFx0XHRcdFx0Y2hlY2tTdGFsZSh2YW50aW1lc3RhbXApO1xuXHRcdFx0XHR9KS5wb3N0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNvbnN0IGluaXQgPSAoKSA9PiB7XG5cdFx0XHQvLyBXZSBtdXN0IGluaXQgdGhlIGZpcnN0IGNob2ljZSAoR2VuZXJhbCBOb3RlKTtcblx0XHRcdGNvbnN0IGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuXHRcdFx0ZXZ0LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRyZXN1bHQubWFpbl9ncm91cC5kaXNwYXRjaEV2ZW50KGV2dCk7XG5cdFx0fTtcblx0XHRpbml0KCk7XG5cdH07XG5cdC8vIFRoaXMgaXMgYWxsIHRoZSBtZXNzYWdlcyB0aGF0IG1pZ2h0IGJlIGRpc3BhdGNoZWQgYnkgdGhlIGNvZGVcblx0Ly8gRWFjaCBvZiB0aGUgaW5kaXZpZHVhbCB0ZW1wbGF0ZXMgcmVxdWlyZSB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uOlxuXHQvLyAgIGxhYmVsIChyZXF1aXJlZCk6IEEgc2hvcnQgZGVzY3JpcHRpb24gZGlzcGxheWVkIGluIHRoZSBkaWFsb2dcblx0Ly8gICBzdW1tYXJ5IChyZXF1aXJlZCk6IFRoZSBlZGl0IHN1bW1hcnkgdXNlZC4gSWYgYW4gYXJ0aWNsZSBuYW1lIGlzIGVudGVyZWQsIHRoZSBzdW1tYXJ5IGlzIHBvc3RmaXhlZCB3aXRoIFwib24gW1thcnRpY2xlXV1cIiwgYW5kIGl0IGlzIGFsd2F5cyBwb3N0Zml4ZWQgd2l0aCBcIi4gJHN1bW1hcnlBZFwiXG5cdC8vICAgc3VwcHJlc3NBcnRpY2xlSW5TdW1tYXJ5IChvcHRpb25hbCk6IFNldCB0byB0cnVlIHRvIHN1cHByZXNzIHNob3dpbmcgdGhlIGFydGljbGUgbmFtZSBpbiB0aGUgZWRpdCBzdW1tYXJ5LiBVc2VmdWwgaWYgdGhlIHdhcm5pbmcgcmVsYXRlcyB0byBhdHRhY2sgcGFnZXMsIG9yIHNvbWUgc3VjaC5cblx0VHdpbmtsZS53YXJuLm1lc3NhZ2VzID0ge1xuXHRcdGxldmVsczogW1xuXHRcdFx0e1xuXHRcdFx0XHRjYXRlZ29yeTogd2luZG93LndnVUxTKCfkuI3lkIznsbvlnovnmoTpnZ7lu7rorr7nvJbovpEnLCAn5LiN5ZCM6aGe5Yil55qE6Z2e5bu66Kit57eo6LyvJyksXG5cdFx0XHRcdGxpc3Q6IHtcblx0XHRcdFx0XHQndXctYWRkcGFpZCc6IHtcblx0XHRcdFx0XHRcdGxldmVsMToge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliqDlhaXku5jotLnlhoXlrrknLCAn5Yqg5YWl5LuY6LK75YWn5a65JyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5rOo5oSP77ya5Yqg5YWl5LuY6LS55YaF5a65JywgJ+azqOaEj++8muWKoOWFpeS7mOiyu+WFp+WuuScpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGxldmVsMjoge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflpJrmrKHliqDlhaXku5jotLnlhoXlrrknLCAn5aSa5qyh5Yqg5YWl5LuY6LK75YWn5a65JyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn6K2m5ZGK77ya5aSa5qyh5Yqg5YWl5LuY6LS55YaF5a65JywgJ+itpuWRiu+8muWkmuasoeWKoOWFpeS7mOiyu+WFp+WuuScpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdCd1dy1jb3B5cmlnaHQnOiB7XG5cdFx0XHRcdFx0XHRsZXZlbDE6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5L6154qv6JGX5L2c5p2DJywgJ+S+teeKr+eJiOasiicpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muS+teeKr+iRl+S9nOadgycsICfms6jmhI/vvJrkvrXniq/niYjmrIonKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRsZXZlbDI6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5aSa5qyh5L6154qv6JGX5L2c5p2DJywgJ+WkmuasoeS+teeKr+eJiOasiicpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+itpuWRiu+8muWkmuasoeS+teeKr+iRl+S9nOadgycsICforablkYrvvJrlpJrmrKHkvrXniq/niYjmrIonKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQndXctY3J5c3RhbCc6IHtcblx0XHRcdFx0XHRcdGxldmVsMToge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliqDlhaXoh4bmtYvmiJbmnKrnoa7orqTnmoTmtojmga8nLCAn5Yqg5YWl6IeG5ris5oiW5pyq56K66KqN55qE6KiK5oGvJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5rOo5oSP77ya5Yqg5YWl6IeG5rWL5oiW5pyq56Gu6K6k55qE5raI5oGvJywgJ+azqOaEj++8muWKoOWFpeiHhua4rOaIluacqueiuuiqjeeahOioiuaBrycpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGxldmVsMjoge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflpJrmrKHliqDlhaXoh4bmtYvmiJbmnKrnoa7orqTnmoTmtojmga8nLCAn5aSa5qyh5Yqg5YWl6IeG5ris5oiW5pyq56K66KqN55qE6KiK5oGvJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn6K2m5ZGK77ya5aSa5qyh5Yqg5YWl6IeG5rWL5oiW5pyq56Gu6K6k55qE5raI5oGvJyxcblx0XHRcdFx0XHRcdFx0XHQn6K2m5ZGK77ya5aSa5qyh5Yqg5YWl6IeG5ris5oiW5pyq56K66KqN55qE6KiK5oGvJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdCd1dy1kZWxldGUnOiB7XG5cdFx0XHRcdFx0XHRsZXZlbDE6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5LiN5oGw5b2T5Zyw56e76Zmk6aG16Z2i5YaF5a6544CB5qih5p2/5oiW6LWE5paZJywgJ+S4jeaBsOeVtuWcsOenu+mZpOmggemdouWFp+WuueOAgeaooeadv+aIluizh+aWmScpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+azqOaEj++8muS4jeaBsOW9k+WcsOenu+mZpOmhtemdouWGheWuueOAgeaooeadv+aIlui1hOaWmScsXG5cdFx0XHRcdFx0XHRcdFx0J+azqOaEj++8muS4jeaBsOeVtuWcsOenu+mZpOmggemdouWFp+WuueOAgeaooeadv+aIluizh+aWmSdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRsZXZlbDI6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5LiN5oGw5b2T5Zyw56e76Zmk6aG16Z2i5YaF5a6544CB5qih5p2/5oiW6LWE5paZJywgJ+S4jeaBsOeVtuWcsOenu+mZpOmggemdouWFp+WuueOAgeaooeadv+aIluizh+aWmScpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+itpuWRiu+8muS4jeaBsOW9k+WcsOenu+mZpOmhtemdouWGheWuueOAgeaooeadv+aIlui1hOaWmScsXG5cdFx0XHRcdFx0XHRcdFx0J+itpuWRiu+8muS4jeaBsOeVtuWcsOenu+mZpOmggemdouWFp+WuueOAgeaooeadv+aIluizh+aWmSdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQndXctaW1hZ2UnOiB7XG5cdFx0XHRcdFx0XHRsZXZlbDE6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zyo6aG16Z2i5Lit5Yqg5YWl5LiN5b2T5Zu+54mHJywgJ+WcqOmggemdouS4reWKoOWFpeS4jeeVtuWclueJhycpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muWcqOmhtemdouS4reWKoOWFpeS4jeW9k+WbvueJhycsICfms6jmhI/vvJrlnKjpoIHpnaLkuK3liqDlhaXkuI3nlbblnJbniYcnKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRsZXZlbDI6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zyo6aG16Z2i5Lit5Yqg5YWl5LiN5b2T5Zu+54mHJywgJ+WcqOmggemdouS4reWKoOWFpeS4jeeVtuWclueJhycpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+itpuWRiu+8muWcqOmhtemdouS4reWKoOWFpeS4jeW9k+WbvueJhycsICforablkYrvvJrlnKjpoIHpnaLkuK3liqDlhaXkuI3nlbblnJbniYcnKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQndXctbmV3cGFnZSc6IHtcblx0XHRcdFx0XHRcdGxldmVsMToge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliJvlu7rkuI3lvZPpobXpnaInLCAn5bu656uL5LiN55W26aCB6Z2iJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5rOo5oSP77ya5Yib5bu65LiN5b2T6aG16Z2iJywgJ+azqOaEj++8muW7uueri+S4jeeVtumggemdoicpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGxldmVsMjoge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliJvlu7rkuI3lvZPpobXpnaInLCAn5bu656uL5LiN55W26aCB6Z2iJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn6K2m5ZGK77ya5Yib5bu65LiN5b2T6aG16Z2iJywgJ+itpuWRiu+8muW7uueri+S4jeeVtumggemdoicpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdCd1dy1ub3InOiB7XG5cdFx0XHRcdFx0XHRsZXZlbDE6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zyo5p2h55uu5Lit5Yqg5YWl5Y6f5Yib56CU56m2JywgJ+WcqOaineebruS4reWKoOWFpeWOn+WJteeglOepticpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muWcqOadoeebruS4reWKoOWFpeWOn+WIm+eglOepticsICfms6jmhI/vvJrlnKjmop3nm67kuK3liqDlhaXljp/libXnoJTnqbYnKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRsZXZlbDI6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zyo5p2h55uu5Lit5Yqg5YWl5Y6f5Yib56CU56m2JywgJ+WcqOaineebruS4reWKoOWFpeWOn+WJteeglOepticpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+itpuWRiu+8muWcqOadoeebruS4reWKoOWFpeWOn+WIm+eglOepticsICforablkYrvvJrlnKjmop3nm67kuK3liqDlhaXljp/libXnoJTnqbYnKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQndXctb3Bvdic6IHtcblx0XHRcdFx0XHRcdGxldmVsMToge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfov53lj43lrqLop4Lljp/liJknLCAn6YGV5Y+N5a6i6KeA5Y6f5YmHJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5rOo5oSP77ya6L+d5Y+N5a6i6KeC5Y6f5YiZJywgJ+azqOaEj++8mumBleWPjeWuouingOWOn+WJhycpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGxldmVsMjoge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfov53lj43lrqLop4Lljp/liJknLCAn6YGV5Y+N5a6i6KeA5Y6f5YmHJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn6K2m5ZGK77ya6L+d5Y+N5a6i6KeC5Y6f5YiZJywgJ+itpuWRiu+8mumBleWPjeWuouingOWOn+WJhycpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdCd1dy1yZWRpcmVjdCc6IHtcblx0XHRcdFx0XHRcdGxldmVsMToge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliJvlu7rnoLTlnY/mgKfnmoTph43lrprlkJEnLCAn5bu656uL56C05aOe5oCn55qE6YeN5a6a5ZCRJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5rOo5oSP77ya5Yib5bu656C05Z2P5oCn55qE6YeN5a6a5ZCRJywgJ+azqOaEj++8muW7uueri+egtOWjnuaAp+eahOmHjeWumuWQkScpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGxldmVsMjoge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliJvlu7rmgbbmhI/ph43lrprlkJEnLCAn5bu656uL5oOh5oSP6YeN5a6a5ZCRJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn6K2m5ZGK77ya5Yib5bu65oG25oSP6YeN5a6a5ZCRJywgJ+itpuWRiu+8muW7uueri+aDoeaEj+mHjeWumuWQkScpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdCd1dy11cGxvYWQnOiB7XG5cdFx0XHRcdFx0XHRsZXZlbDE6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5LiK5Lyg5LiN5b2T5Zu+5YOPJywgJ+S4iuWCs+S4jeeVtuWcluWDjycpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muS4iuS8oOS4jeW9k+WbvuWDjycsICfms6jmhI/vvJrkuIrlgrPkuI3nlbblnJblg48nKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRsZXZlbDI6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5LiK5Lyg5LiN5b2T5Zu+5YOPJywgJ+S4iuWCs+S4jeeVtuWcluWDjycpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+itpuWRiu+8muS4iuS8oOS4jeW9k+WbvuWDjycsICforablkYrvvJrkuIrlgrPkuI3nlbblnJblg48nKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQndXctdmFuZGFsaXNtJzoge1xuXHRcdFx0XHRcdFx0bGV2ZWwxOiB7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aYjuaYvueahOegtOWdjycsICfmmI7poa/nmoTnoLTlo54nKSxcblx0XHRcdFx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKCfms6jmhI/vvJrmmI7mmL7noLTlnY8nLCAn5rOo5oSP77ya5piO6aGv56C05aOeJyksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0bGV2ZWwyOiB7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aYjuaYvueahOegtOWdjycsICfmmI7poa/nmoTnoLTlo54nKSxcblx0XHRcdFx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKCforablkYrvvJrmmI7mmL7noLTlnY8nLCAn6K2m5ZGK77ya5piO6aGv56C05aOeJyksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J3V3LXRkZWwnOiB7XG5cdFx0XHRcdFx0XHRsZXZlbDE6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5Zyo6Zeu6aKY5LuN5pyq6Kej5Yaz55qE5oOF5Ya15LiL56e76Zmk57u05oqk5oCn5qih5p2/Jyxcblx0XHRcdFx0XHRcdFx0XHQn5Zyo5ZWP6aGM5LuN5pyq6Kej5rG655qE5oOF5rOB5LiL56e76Zmk57at6K235oCn5qih5p2/J1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muenu+mZpOe7tOaKpOaAp+aooeadvycsICfms6jmhI/vvJrnp7vpmaTntq3orbfmgKfmqKHmnb8nKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRsZXZlbDI6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5Zyo6Zeu6aKY5LuN5pyq6Kej5Yaz55qE5oOF5Ya15LiL56e76Zmk57u05oqk5oCn5qih5p2/Jyxcblx0XHRcdFx0XHRcdFx0XHQn5Zyo5ZWP6aGM5LuN5pyq6Kej5rG655qE5oOF5rOB5LiL56e76Zmk57at6K235oCn5qih5p2/J1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+itpuWRiu+8muenu+mZpOe7tOaKpOaAp+aooeadvycsICforablkYrvvJrnp7vpmaTntq3orbfmgKfmqKHmnb8nKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNhdGVnb3J5OiB3aW5kb3cud2dVTFMoJ+WinuWKoOW5v+WRiicsICflop7liqDlu6PlkYonKSxcblx0XHRcdFx0bGlzdDoge1xuXHRcdFx0XHRcdCd1dy1zcGFtJzoge1xuXHRcdFx0XHRcdFx0bGV2ZWwxOiB7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WinuWKoOS4jeWQiOmAgueahOWklumDqOmTvuaOpScsICflop7liqDkuI3lkIjpgannmoTlpJbpg6jpgKPntZAnKSxcblx0XHRcdFx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKCfms6jmhI/vvJrlop7liqDkuI3lkIjpgILnmoTlpJbpg6jpk77mjqUnLCAn5rOo5oSP77ya5aKe5Yqg5LiN5ZCI6YGp55qE5aSW6YOo6YCj57WQJyksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0bGV2ZWwyOiB7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WinuWKoOWeg+WcvumTvuaOpScsICflop7liqDlnoPlnL7pgKPntZAnKSxcblx0XHRcdFx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKCforablkYrvvJrlop7liqDlnoPlnL7pk77mjqUnLCAn6K2m5ZGK77ya5aKe5Yqg5Z6D5Zy+6YCj57WQJyksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J3V3LWFkdmVydCc6IHtcblx0XHRcdFx0XHRcdGxldmVsMToge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliKnnlKjmnInlhb3moaPmoYjppobmnaXlj5HluIPlub/lkYrmiJbmjqjlub8nLCAn5Yip55So5pyJ54245qqU5qGI6aSo5L6G55m85biD5buj5ZGK5oiW5o6o5bujJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5rOo5oSP77ya5Yip55So5pyJ5YW95qGj5qGI6aaG5p2l5Y+R5biD5bm/5ZGK5oiW5o6o5bm/Jyxcblx0XHRcdFx0XHRcdFx0XHQn5rOo5oSP77ya5Yip55So5pyJ54245qqU5qGI6aSo5L6G55m85biD5buj5ZGK5oiW5o6o5bujJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGxldmVsMjoge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliKnnlKjmnInlhb3moaPmoYjppobmnaXlj5HluIPlub/lkYrmiJbmjqjlub8nLCAn5Yip55So5pyJ54245qqU5qGI6aSo5L6G55m85biD5buj5ZGK5oiW5o6o5bujJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn6K2m5ZGK77ya5Yip55So5pyJ5YW95qGj5qGI6aaG5p2l5Y+R5biD5bm/5ZGK5oiW5o6o5bm/Jyxcblx0XHRcdFx0XHRcdFx0XHQn6K2m5ZGK77ya5Yip55So5pyJ54245qqU5qGI6aSo5L6G55m85biD5buj5ZGK5oiW5o6o5bujJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2F0ZWdvcnk6IHdpbmRvdy53Z1VMUygn5Yqg5o+S5LiN5a6e44CB6K+96LCk5paH5a2XJywgJ+WKoOaPkuS4jeWvpuOAgeiqueisl+aWh+WtlycpLFxuXHRcdFx0XHRsaXN0OiB7XG5cdFx0XHRcdFx0J3V3LWJpb2cnOiB7XG5cdFx0XHRcdFx0XHRsZXZlbDE6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5Zyo5Lq654mp5Lyg6K6w5Lit5Yqg5YWl5rKh5pyJ5Y+v6Z2g5p2l5rqQ5L2Q6K+B6ICM5LiU5Y+v6IO95byV5Y+R5LqJ6K6u55qE5YaF5a65Jyxcblx0XHRcdFx0XHRcdFx0XHQn5Zyo5Lq654mp5YKz6KiY5Lit5Yqg5YWl5rKS5pyJ5Y+v6Z2g5L6G5rqQ5L2Q6K2J6ICM5LiU5Y+v6IO95byV55m854it6K2w55qE5YWn5a65J1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+azqOaEj++8muWcqOS6uueJqeS8oOiusOS4reWKoOWFpeayoeacieWPr+mdoOadpea6kOS9kOivgeiAjOS4lOWPr+iDveW8leWPkeS6ieiurueahOWGheWuuScsXG5cdFx0XHRcdFx0XHRcdFx0J+azqOaEj++8muWcqOS6uueJqeWCs+iomOS4reWKoOWFpeaykuacieWPr+mdoOS+hua6kOS9kOitieiAjOS4lOWPr+iDveW8leeZvOeIreitsOeahOWFp+WuuSdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRsZXZlbDI6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5Zyo5Lq654mp5Lyg6K6w5Lit5Yqg5YWl5rKh5pyJ5Y+v6Z2g5p2l5rqQ5L2Q6K+B6ICM5LiU5Y+v6IO95byV5Y+R5LqJ6K6u55qE5YaF5a65Jyxcblx0XHRcdFx0XHRcdFx0XHQn5Zyo5Lq654mp5YKz6KiY5Lit5Yqg5YWl5rKS5pyJ5Y+v6Z2g5L6G5rqQ5L2Q6K2J6ICM5LiU5Y+v6IO95byV55m854it6K2w55qE5YWn5a65J1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+itpuWRiu+8muWcqOS6uueJqeS8oOiusOS4reWKoOWFpeayoeacieWPr+mdoOadpea6kOS9kOivgeiAjOS4lOWPr+iDveW8leWPkeS6ieiurueahOWGheWuuScsXG5cdFx0XHRcdFx0XHRcdFx0J+itpuWRiu+8muWcqOS6uueJqeWCs+iomOS4reWKoOWFpeaykuacieWPr+mdoOS+hua6kOS9kOitieiAjOS4lOWPr+iDveW8leeZvOeIreitsOeahOWFp+WuuSdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQndXctZXJyb3InOiB7XG5cdFx0XHRcdFx0XHRsZXZlbDE6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5pWF5oSP5Yqg5YWl5LiN5a6e5YaF5a65JywgJ+aVheaEj+WKoOWFpeS4jeWvpuWFp+WuuScpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muaVheaEj+WKoOWFpeS4jeWunuWGheWuuScsICfms6jmhI/vvJrmlYXmhI/liqDlhaXkuI3lr6blhaflrrknKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRsZXZlbDI6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5pWF5oSP5Yqg5YWl5LiN5a6e5YaF5a65JywgJ+aVheaEj+WKoOWFpeS4jeWvpuWFp+WuuScpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+itpuWRiu+8muaVheaEj+WKoOWFpeS4jeWunuWGheWuuScsICforablkYrvvJrmlYXmhI/liqDlhaXkuI3lr6blhaflrrknKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQndXctdW5zb3VyY2VkJzoge1xuXHRcdFx0XHRcdFx0bGV2ZWwxOiB7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WKoOWFpeayoeacieWPr+mdoOadpea6kOS9kOivgeeahOWGheWuuScsICfliqDlhaXmspLmnInlj6/pnaDkvobmupDkvZDorYnnmoTlhaflrrknKSxcblx0XHRcdFx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCfms6jmhI/vvJrliqDlhaXmsqHmnInlj6/pnaDmnaXmupDkvZDor4HnmoTlhoXlrrknLFxuXHRcdFx0XHRcdFx0XHRcdCfms6jmhI/vvJrliqDlhaXmspLmnInlj6/pnaDkvobmupDkvZDorYnnmoTlhaflrrknXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0bGV2ZWwyOiB7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WKoOWFpeayoeacieWPr+mdoOadpea6kOS9kOivgeeahOWGheWuuScsICfliqDlhaXmspLmnInlj6/pnaDkvobmupDkvZDorYnnmoTlhaflrrknKSxcblx0XHRcdFx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCforablkYrvvJrliqDlhaXmsqHmnInlj6/pnaDmnaXmupDkvZDor4HnmoTlhoXlrrknLFxuXHRcdFx0XHRcdFx0XHRcdCforablkYrvvJrliqDlhaXmspLmnInlj6/pnaDkvobmupDkvZDorYnnmoTlhaflrrknXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjYXRlZ29yeTogd2luZG93LndnVUxTKCfnv7vor5Hlk4HotKgnLCAn57+76K2v5ZOB6LOqJyksXG5cdFx0XHRcdGxpc3Q6IHtcblx0XHRcdFx0XHQndXctcm91Z2h0cmFuc2xhdGlvbic6IHtcblx0XHRcdFx0XHRcdGxldmVsMToge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmgqjnv7vor5HnmoTotKjph4/mnInlvoXmlLnlloQnLCAn5oKo57+76K2v55qE6LOq6YeP5pyJ5b6F5pS55ZaEJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5rOo5oSP77ya5oKo57+76K+R55qE6LSo6YeP5pyJ5b6F5pS55ZaEJywgJ+azqOaEj++8muaCqOe/u+itr+eahOizqumHj+acieW+heaUueWWhCcpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGxldmVsMjoge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnspfliqPnv7vor5EnLCAn57KX5Yqj57+76K2vJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn6K2m5ZGK77ya57KX5Yqj57+76K+RJywgJ+itpuWRiu+8mueyl+WKo+e/u+itrycpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2F0ZWdvcnk6IHdpbmRvdy53Z1VMUygn6Z2e6IO95o6l5Y+X5LiU6L+d5Y+N5p2h5L6L55qE5Y2V5pa56Z2i6KGM5Li65oiW5pON5L2cJywgJ+mdnuiDveaOpeWPl+S4lOmBleWPjeaineS+i+eahOWWruaWuemdouihjOeCuuaIluaTjeS9nCcpLFxuXHRcdFx0XHRsaXN0OiB7XG5cdFx0XHRcdFx0J3V3LWFmZCc6IHtcblx0XHRcdFx0XHRcdGxldmVsMToge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnp7vpmaR7e2FmZH1977yI6aG16Z2i5a2Y5bqf6K6o6K6677yJ5qih5p2/JywgJ+enu+mZpHt7YWZkfX3vvIjpoIHpnaLlrZjlu6LoqI7oq5bvvInmqKHmnb8nKSxcblx0XHRcdFx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCfms6jmhI/vvJrnp7vpmaR7e2FmZH1977yI6aG16Z2i5a2Y5bqf6K6o6K6677yJ5qih5p2/Jyxcblx0XHRcdFx0XHRcdFx0XHQn5rOo5oSP77ya56e76Zmke3thZmR9fe+8iOmggemdouWtmOW7ouiojuirlu+8ieaooeadvydcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRsZXZlbDI6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn56e76Zmke3thZmR9fe+8iOmhtemdouWtmOW6n+iuqOiuuu+8ieaooeadvycsICfnp7vpmaR7e2FmZH1977yI6aCB6Z2i5a2Y5bui6KiO6KuW77yJ5qih5p2/JyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn6K2m5ZGK77ya56e76Zmke3thZmR9fe+8iOmhtemdouWtmOW6n+iuqOiuuu+8ieaooeadvycsXG5cdFx0XHRcdFx0XHRcdFx0J+itpuWRiu+8muenu+mZpHt7YWZkfX3vvIjpoIHpnaLlrZjlu6LoqI7oq5bvvInmqKHmnb8nXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J3V3LW1vcyc6IHtcblx0XHRcdFx0XHRcdGxldmVsMToge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfkuI3mgbDlvZPnmoTmnaHnm67moLzlvI/jgIHml6XmnJ/jgIHor63oqIDnrYknLCAn5LiN5oGw55W255qE5qKd55uu5qC85byP44CB5pel5pyf44CB6Kqe6KiA562JJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5rOo5oSP77ya5LiN5oGw5b2T55qE5p2h55uu5qC85byP44CB5pel5pyf44CB6K+t6KiA562JJyxcblx0XHRcdFx0XHRcdFx0XHQn5rOo5oSP77ya5LiN5oGw55W255qE5qKd55uu5qC85byP44CB5pel5pyf44CB6Kqe6KiA562JJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGxldmVsMjoge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfkuI3mgbDlvZPnmoTmnaHnm67moLzlvI/jgIHml6XmnJ/jgIHor63oqIDnrYknLCAn5LiN5oGw55W255qE5qKd55uu5qC85byP44CB5pel5pyf44CB6Kqe6KiA562JJyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn6K2m5ZGK77ya5LiN5oGw5b2T55qE5p2h55uu5qC85byP44CB5pel5pyf44CB6K+t6KiA562JJyxcblx0XHRcdFx0XHRcdFx0XHQn6K2m5ZGK77ya5LiN5oGw55W255qE5qKd55uu5qC85byP44CB5pel5pyf44CB6Kqe6KiA562JJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdCd1dy1tb3ZlJzoge1xuXHRcdFx0XHRcdFx0bGV2ZWwxOiB7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+aXoOaVheenu+WKqOadoeebri/mlrDlkI3np7DkuI3nrKblkIjlkb3lkI3op4TojIMnLFxuXHRcdFx0XHRcdFx0XHRcdCfnhKHmlYXnp7vli5Xmop3nm64v5paw5ZCN56ix5LiN56ym5ZCI5ZG95ZCN6KaP56+EJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muS4jeaBsOW9k+WcsOenu+WKqOmhtemdoicsICfms6jmhI/vvJrkuI3mgbDnlbblnLDnp7vli5XpoIHpnaInKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRsZXZlbDI6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5oqK6aG16Z2i56e75Yqo5Yiw5LiN5oGw5b2T44CB6L+d5Y+N5ZG95ZCN5bi46KeE5oiW6L+d5Y+N5YWx6K+G55qE5qCH6aKYJyxcblx0XHRcdFx0XHRcdFx0XHQn5oqK6aCB6Z2i56e75YuV5Yiw5LiN5oGw55W244CB6YGV5Y+N5ZG95ZCN5bi46KaP5oiW6YGV5Y+N5YWx6K2Y55qE5qiZ6aGMJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+itpuWRiu+8muS4jeaBsOW9k+WcsOenu+WKqOmhtemdoicsICforablkYrvvJrkuI3mgbDnlbblnLDnp7vli5XpoIHpnaInKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQndXctc3BlZWR5Jzoge1xuXHRcdFx0XHRcdFx0bGV2ZWwxOiB7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+enu+mZpHt7ZGVsZXRlfX3vvIjlv6vpgJ/liKDpmaTvvInmqKHmnb8nLCAn56e76Zmke3tkZWxldGV9fe+8iOW/q+mAn+WIqumZpO+8ieaooeadvycpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+azqOaEj++8muenu+mZpHt7ZGVsZXRlfX3vvIjlv6vpgJ/liKDpmaTvvInmqKHmnb8nLFxuXHRcdFx0XHRcdFx0XHRcdCfms6jmhI/vvJrnp7vpmaR7e2RlbGV0ZX1977yI5b+r6YCf5Yiq6Zmk77yJ5qih5p2/J1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGxldmVsMjoge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnp7vpmaR7e2RlbGV0ZX1977yI5b+r6YCf5Yig6Zmk77yJ5qih5p2/JywgJ+enu+mZpHt7ZGVsZXRlfX3vvIjlv6vpgJ/liKrpmaTvvInmqKHmnb8nKSxcblx0XHRcdFx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCforablkYrvvJrnp7vpmaR7e2RlbGV0ZX1977yI5b+r6YCf5Yig6Zmk77yJ5qih5p2/Jyxcblx0XHRcdFx0XHRcdFx0XHQn6K2m5ZGK77ya56e76Zmke3tkZWxldGV9fe+8iOW/q+mAn+WIqumZpO+8ieaooeadvydcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQndXctdGFsa3BhZ2UnOiB7XG5cdFx0XHRcdFx0XHRsZXZlbDE6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6L+d5Y+N6K6o6K666aG16KeE6IyDJywgJ+mBleWPjeiojuirlumggeimj+evhCcpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8mui/neWPjeiuqOiuuumhteinhOiMgycsICfms6jmhI/vvJrpgZXlj43oqI7oq5bpoIHopo/nr4QnKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRsZXZlbDI6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6L+d5Y+N6K6o6K666aG16KeE6IyDJywgJ+mBleWPjeiojuirlumggeimj+evhCcpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+itpuWRiu+8mui/neWPjeiuqOiuuumhteinhOiMgycsICforablkYrvvJrpgZXlj43oqI7oq5bpoIHopo/nr4QnKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQndXctdHB2Jzoge1xuXHRcdFx0XHRcdFx0bGV2ZWwxOiB7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiAn5L+u5pS55LuW5Lq655WZ6KiAJyxcblx0XHRcdFx0XHRcdFx0c3VtbWFyeTogJ+azqOaEj++8muS/ruaUueS7luS6uueVmeiogCcsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0bGV2ZWwyOiB7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiAn5L+u5pS55LuW5Lq655WZ6KiAJyxcblx0XHRcdFx0XHRcdFx0c3VtbWFyeTogJ+itpuWRiu+8muS/ruaUueS7luS6uueVmeiogCcsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjYXRlZ29yeTogd2luZG93LndnVUxTKCflr7nlhbbku5bnlKjmiLflkozmnaHnm67nmoTmgIHluqYnLCAn5bCN5YW25LuW55So5oi25ZKM5qKd55uu55qE5oWL5bqmJyksXG5cdFx0XHRcdGxpc3Q6IHtcblx0XHRcdFx0XHQndXctaWxsZWdhbCc6IHtcblx0XHRcdFx0XHRcdGxldmVsMToge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliqDlhaXov53ms5Xov53op4TlhoXlrrknLCAn5Yqg5YWl6YGV5rOV6YGV6KaP5YWn5a65JyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5rOo5oSP77ya5Yqg5YWl6L+d5rOV6L+d6KeE5YaF5a65JywgJ+azqOaEj++8muWKoOWFpemBleazlemBleimj+WFp+WuuScpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGxldmVsMjoge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliqDlhaXov53ms5Xov53op4TlhoXlrrknLCAn5Yqg5YWl6YGV5rOV6YGV6KaP5YWn5a65JyksXG5cdFx0XHRcdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn6K2m5ZGK77ya5Yqg5YWl6L+d5rOV6L+d6KeE5YaF5a65JywgJ+itpuWRiu+8muWKoOWFpemBleazlemBleimj+WFp+WuuScpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdCd1dy1vd24nOiB7XG5cdFx0XHRcdFx0XHRsZXZlbDE6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Li75byg5p2h55uu5omA5pyJ5p2DJywgJ+S4u+W8teaineebruaJgOacieasiicpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muS4u+W8oOadoeebruaJgOacieadgycsICfms6jmhI/vvJrkuLvlvLXmop3nm67miYDmnInmrIonKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRsZXZlbDI6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Li75byg5p2h55uu55qE5omA5pyJ5p2DJywgJ+S4u+W8teaineebrueahOaJgOacieasiicpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+itpuWRiu+8muS4u+W8oOadoeebrueahOaJgOacieadgycsICforablkYrvvJrkuLvlvLXmop3nm67nmoTmiYDmnInmrIonKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQndXctc29jaWFsbWVkaWEnOiB7XG5cdFx0XHRcdFx0XHRsZXZlbDE6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bCG5pyJ5YW95qGj5qGI6aaG5b2T5L2c56S+5Lqk5aqS5L2T5L2/55SoJywgJ+Wwh+acieeNuOaqlOahiOmkqOeVtuS9nOekvuS6pOWqkumrlOS9v+eUqCcpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+azqOaEj++8muWwhuacieWFveaho+ahiOmmhuW9k+S9nOekvuS6pOWqkuS9k+S9v+eUqCcsXG5cdFx0XHRcdFx0XHRcdFx0J+azqOaEj++8muWwh+acieeNuOaqlOahiOmkqOeVtuS9nOekvuS6pOWqkumrlOS9v+eUqCdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRsZXZlbDI6IHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bCG5pyJ5YW95qGj5qGI6aaG5b2T5L2c56S+5Lqk5aqS5L2T5L2/55SoJywgJ+Wwh+acieeNuOaqlOahiOmkqOeVtuS9nOekvuS6pOWqkumrlOS9v+eUqCcpLFxuXHRcdFx0XHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+itpuWRiu+8muWwhuacieWFveaho+ahiOmmhuW9k+S9nOekvuS6pOWqkuS9k+S9v+eUqCcsXG5cdFx0XHRcdFx0XHRcdFx0J+itpuWRiu+8muWwh+acieeNuOaqlOahiOmkqOeVtuS9nOekvuS6pOWqkumrlOS9v+eUqCdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRzaW5nbGVub3RpY2U6IHtcblx0XHRcdCd1dy0ycmVkaXJlY3QnOiB7XG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WcqOenu+WKqOmhtemdouWQjuW6lOivpeS/ruWkjeWPjOmHjemHjeWumuWQkScsICflnKjnp7vli5XpoIHpnaLlvozmh4noqbLkv67lvqnpm5nph43ph43lrprlkJEnKSxcblx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKCfms6jmhI/vvJrlnKjnp7vliqjpobXpnaLlkI7lupTor6Xkv67lpI3lj4zph43ph43lrprlkJEnLCAn5rOo5oSP77ya5Zyo56e75YuV6aCB6Z2i5b6M5oeJ6Kmy5L+u5b6p6ZuZ6YeN6YeN5a6a5ZCRJyksXG5cdFx0XHR9LFxuXHRcdFx0J3V3LWFpdic6IHtcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Li+5oql5LqL6aG55bm25LiN5piv56C05Z2P6KGM5Li6JywgJ+iIieWgseS6i+mgheS4puS4jeaYr+egtOWjnuihjOS4uicpLFxuXHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muS4jeaBsOW9k+WcsOS4vuaKpeegtOWdjycsICfms6jmhI/vvJrkuI3mgbDnlbblnLDoiInloLHnoLTlo54nKSxcblx0XHRcdH0sXG5cdFx0XHQndXctYXJ0aWNsZXNpZyc6IHtcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zyo5p2h55uu5Lit562+5ZCNJywgJ+WcqOaineebruS4reewveWQjScpLFxuXHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muWcqOadoeebruS4reetvuWQjScsICfms6jmhI/vvJrlnKjmop3nm67kuK3nsL3lkI0nKSxcblx0XHRcdH0sXG5cdFx0XHQndXctYXV0b2Jpb2dyYXBoeSc6IHtcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Yib5bu66Ieq5LygJywgJ+W7uueri+iHquWCsycpLFxuXHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muWIm+W7uuiHquS8oCcsICfms6jmhI/vvJrlu7rnq4voh6rlgrMnKSxcblx0XHRcdH0sXG5cdFx0XHQndXctYmFkY2F0Jzoge1xuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliqDlhaXplJnor6/nmoTpobXpnaLliIbnsbsnLCAn5Yqg5YWl6Yyv6Kqk55qE6aCB6Z2i5YiG6aGeJyksXG5cdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5rOo5oSP77ya5Yqg5YWl6ZSZ6K+v55qE6aG16Z2i5YiG57G7JywgJ+azqOaEj++8muWKoOWFpemMr+iqpOeahOmggemdouWIhumhnicpLFxuXHRcdFx0fSxcblx0XHRcdCd1dy1iaXRlJzoge1xuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfkvKTlrrPmlrDmiYsnLCAn5YK35a6z5paw5omLJyksXG5cdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5rOo5oSP77ya5Lyk5a6z5paw5omLJywgJ+azqOaEj++8muWCt+Wus+aWsOaJiycpLFxuXHRcdFx0fSxcblx0XHRcdCd1dy1jaGluZXNlJzoge1xuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfor7fkvb/nlKjmoIflh4bmsYnor63msp/pgJonLCAn6KuL5L2/55So5qiZ5rqW5ryi6Kqe5rqd6YCaJyksXG5cdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5rOo5oSP77ya6K+35L2/55So5qCH5YeG5rGJ6K+t5rKf6YCaJywgJ+azqOaEj++8muiri+S9v+eUqOaomea6lua8ouiqnua6nemAmicpLFxuXHRcdFx0fSxcblx0XHRcdCd1dy1jcG1vdmUnOiB7XG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WJqui0tOenu+WKqCcsICfliarosrznp7vli5UnKSxcblx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKCfms6jmhI/vvJrliarotLTnp7vliqgnLCAn5rOo5oSP77ya5Ymq6LK856e75YuVJyksXG5cdFx0XHR9LFxuXHRcdFx0J3V3LWRhYic6IHtcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5raI5q2n5LmJ6aG15qC85byP6ZSZ6K+vJywgJ+a2iOatp+e+qemggeagvOW8j+mMr+iqpCcpLFxuXHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8mua2iOatp+S5iemhteagvOW8j+mUmeivrycsICfms6jmhI/vvJrmtojmrafnvqnpoIHmoLzlvI/pjK/oqqQnKSxcblx0XHRcdH0sXG5cdFx0XHQndXctbmV3cGFnZS1kcmFmdCc6IHtcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5pyA6L+R5Yib5bu655qE6aG16Z2i6KKr56e75Yqo5Yiw6I2J56i/JywgJ+acgOi/keW7uueri+eahOmggemdouiiq+enu+WLleWIsOiNieeovycpLFxuXHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muacgOi/keWIm+W7uueahOmhtemdouiiq+enu+WKqOWIsOiNieeovycsICfms6jmhI/vvJrmnIDov5Hlu7rnq4vnmoTpoIHpnaLooqvnp7vli5XliLDojYnnqL8nKSxcblx0XHRcdH0sXG5cdFx0XHQndXctc2VsZnJldmVydCc6IHtcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHQn5oSf6LCi5oKo6Ieq6KGM5Zue6YCA6Ieq5bex55qE5rWL6K+V77yM5Lul5ZCO5LiN6KaB5YaN6L+Z5qC35YGa5LqGJyxcblx0XHRcdFx0XHQn5oSf6Kyd5oKo6Ieq6KGM5Zue6YCA6Ieq5bex55qE5ris6Kmm77yM5Lul5b6M5LiN6KaB5YaN6YCZ5qij5YGa5LqGJ1xuXHRcdFx0XHQpLFxuXHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muWbnumAgOS4quS6uueahOa1i+ivlScsICfms6jmhI/vvJrlm57pgIDlgIvkurrnmoTmuKzoqaYnKSxcblx0XHRcdH0sXG5cdFx0XHQndXctc3Vic3R1Yic6IHtcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Yib5bu65bCP5bCP5L2c5ZOBJywgJ+W7uueri+Wwj+Wwj+S9nOWTgScpLFxuXHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+itpuWRiu+8muWIm+W7uuWwj+Wwj+S9nOWTgScsICforablkYrvvJrlu7rnq4vlsI/lsI/kvZzlk4EnKSxcblx0XHRcdH0sXG5cdFx0XHQndXctdGFsa2luYXJ0aWNsZSc6IHtcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zyo5p2h55uu6aG15Lit55WZ5LiL5oSP6KeBJywgJ+WcqOaineebrumggeS4reeVmeS4i+aEj+imiycpLFxuXHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muWcqOadoeebrumhteS4reeVmeS4i+aEj+ingScsICfms6jmhI/vvJrlnKjmop3nm67poIHkuK3nlZnkuIvmhI/oposnKSxcblx0XHRcdH0sXG5cdFx0XHQndXctdW5zaWduZWQnOiB7XG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+ayoeacieWcqOiuqOiuuumhteS4iuetvuWQjScsICfmspLmnInlnKjoqI7oq5bpoIHkuIrnsL3lkI0nKSxcblx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKCfms6jmhI/vvJrmsqHmnInlnKjorqjorrrpobXkuIrnrb7lkI0nLCAn5rOo5oSP77ya5rKS5pyJ5Zyo6KiO6KuW6aCB5LiK57C95ZCNJyksXG5cdFx0XHR9LFxuXHRcdFx0J3V3LXdyb25nY3NkJzoge1xuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflv6vpgJ/liKDpmaTnkIbnlLHkuI3lvZMnLCAn5b+r6YCf5Yiq6Zmk55CG55Sx5LiN55W2JyksXG5cdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5rOo5oSP77ya5b+r6YCf5Yig6Zmk55CG55Sx5LiN5b2TJywgJ+azqOaEj++8muW/q+mAn+WIqumZpOeQhueUseS4jeeVticpLFxuXHRcdFx0fSxcblx0XHRcdCd1dy13cm9uZ3N1bW1hcnknOiB7XG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WcqOe8lui+keaRmOimgeWItumAoOS4jemAguW9k+eahOWGheWuuScsICflnKjnt6jovK/mkZjopoHoo73pgKDkuI3pgannlbbnmoTlhaflrrknKSxcblx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKCforablkYrvvJrlnKjnvJbovpHmkZjopoHliLbpgKDkuI3pgILlvZPnmoTlhoXlrrknLCAn6K2m5ZGK77ya5Zyo57eo6Lyv5pGY6KaB6KO96YCg5LiN6YGp55W255qE5YWn5a65JyksXG5cdFx0XHR9LFxuXHRcdH0sXG5cdFx0c2luZ2xld2Fybjoge1xuXHRcdFx0J3V3LTNycic6IHtcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn55So5oi35r2c5Zyo6L+d5Y+N5Zue6YCA5LiN6L+H5LiJ5Y6f5YiZ55qE5Y+v6IO95oCnJywgJ+eUqOaItua9m+WcqOmBleWPjeWbnumAgOS4jemBjuS4ieWOn+WJh+eahOWPr+iDveaApycpLFxuXHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0J+itpuWRiu+8mueUqOaIt+a9nOWcqOi/neWPjeWbnumAgOS4jei/h+S4ieWOn+WImeeahOWPr+iDveaApycsXG5cdFx0XHRcdFx0J+itpuWRiu+8mueUqOaItua9m+WcqOmBleWPjeWbnumAgOS4jemBjuS4ieWOn+WJh+eahOWPr+iDveaApydcblx0XHRcdFx0KSxcblx0XHRcdH0sXG5cdFx0XHQndXctYXR0YWNrJzoge1xuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfkurrouqvmlLvlh7snLCAn5Lq66Lqr5pS75pOKJyksXG5cdFx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn6K2m5ZGK77ya5Lq66Lqr5pS75Ye7JywgJ+itpuWRiu+8muS6uui6q+aUu+aTiicpLFxuXHRcdFx0XHRzdXBwcmVzc0FydGljbGVJblN1bW1hcnk6IHRydWUsXG5cdFx0XHR9LFxuXHRcdFx0J3V3LWNvaSc6IHtcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Yip55uK5Yay56qBJywgJ+WIqeebiuihneeqgScpLFxuXHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+azqOaEj++8muWIqeebiuWGsueqgScsICfms6jmhI/vvJrliKnnm4rooZ3nqoEnKSxcblx0XHRcdH0sXG5cdFx0XHQndXctZmFrZXNvdXJjZSc6IHtcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6Jma5p6E5pWw5o2u5rqQ5oiW5byV5paHJywgJ+iZm+ani+izh+aWmeS+hua6kOaIluW8leaWhycpLFxuXHRcdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+itpuWRiu+8muiZmuaehOaVsOaNrua6kOaIluW8leaWhycsICforablkYrvvJromZvmp4vos4fmlpnkvobmupDmiJblvJXmlocnKSxcblx0XHRcdH0sXG5cdFx0XHQndXctcGluZm8nOiB7XG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+W8oOi0tOS7luS6uumakOengScsICflvLXosrzku5bkurrpmrHnp4EnKSxcblx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKCforablkYrvvJrlvKDotLTku5bkurrpmpDnp4EnLCAn6K2m5ZGK77ya5by16LK85LuW5Lq66Zqx56eBJyksXG5cdFx0XHR9LFxuXHRcdFx0J3V3LWlsbGVnYWxhdmF0YXInOiB7XG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WktOWDj+i/neinhCcsICfpoK3lg4/pgZXopo8nKSxcblx0XHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKCfmgqjov5HmnJ/kuIrkvKDnmoTlpLTlg4/ov53op4QnLCAn5oKo6L+R5pyf5LiK5YKz55qE6aCt5YOP6YGV6KaPJyksXG5cdFx0XHR9LFxuXHRcdH0sXG5cdH07XG5cdC8vIFVzZWQgcmVwZWF0ZWRseSBiZWxvdyBhY3Jvc3MgbWVudSByZWJ1aWxkc1xuXHRUd2lua2xlLndhcm4ucHJldl9hcnRpY2xlID0gbnVsbDtcblx0VHdpbmtsZS53YXJuLnByZXZfcmVhc29uID0gbnVsbDtcblx0VHdpbmtsZS53YXJuLnRhbGtwYWdlT2JqID0gbnVsbDtcblx0VHdpbmtsZS53YXJuLmNhbGxiYWNrLmNoYW5nZV9jYXRlZ29yeSA9IGZ1bmN0aW9uIGNoYW5nZV9jYXRlZ29yeShlKSB7XG5cdFx0Y29uc3Qge3ZhbHVlfSA9IGUudGFyZ2V0O1xuXHRcdGNvbnN0IHtzdWJfZ3JvdXB9ID0gZS50YXJnZXQucm9vdDtcblx0XHRzdWJfZ3JvdXAubWFpbl9ncm91cCA9IHZhbHVlO1xuXHRcdGxldCBvbGRfc3VidmFsdWUgPSBzdWJfZ3JvdXAudmFsdWU7XG5cdFx0bGV0IG9sZF9zdWJ2YWx1ZV9yZTtcblx0XHRpZiAob2xkX3N1YnZhbHVlKSB7XG5cdFx0XHRpZiAodmFsdWUgPT09ICdraXRjaGVuc2luaycpIHtcblx0XHRcdFx0Ly8gRXhhY3QgbWF0Y2ggcG9zc2libGUgaW4ga2l0Y2hlbnNpbmsgbWVudVxuXHRcdFx0XHRvbGRfc3VidmFsdWVfcmUgPSBuZXcgUmVnRXhwKG13LnV0aWwuZXNjYXBlUmVnRXhwKG9sZF9zdWJ2YWx1ZSkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b2xkX3N1YnZhbHVlID0gb2xkX3N1YnZhbHVlLnJlcGxhY2UoL1xcZCooaW0pPyQvLCAnJyk7XG5cdFx0XHRcdG9sZF9zdWJ2YWx1ZV9yZSA9IG5ldyBSZWdFeHAoYCR7bXcudXRpbC5lc2NhcGVSZWdFeHAob2xkX3N1YnZhbHVlKX0oXFxcXGQqPykkYCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlIChzdWJfZ3JvdXAuaGFzQ2hpbGROb2RlcygpKSB7XG5cdFx0XHRzdWJfZ3JvdXAucmVtb3ZlQ2hpbGQoc3ViX2dyb3VwLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblx0XHRsZXQgc2VsZWN0ZWQgPSBmYWxzZTtcblx0XHQvLyB3b3JrZXIgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBjb21ibyBib3ggZW50cmllc1xuXHRcdGNvbnN0IGNyZWF0ZUVudHJpZXMgPSAoY29udGVudHMsIGNvbnRhaW5lciwgd3JhcEluT3B0Z3JvdXAsIHZhbCA9IHZhbHVlKSA9PiB7XG5cdFx0XHQvLyBsZXZlbDItPjIsIHNpbmdsZXdhcm4tPicnOyBhbHNvIHVzZWQgdG8gZGlzdGluZ3Vpc2ggdGhlXG5cdFx0XHQvLyBzY2FsZWQgbGV2ZWxzIGZyb20gc2luZ2xlbm90aWNlLCBzaW5nbGV3YXJuLCBhbmQgY3VzdG9tXG5cdFx0XHRjb25zdCBsZXZlbCA9IHZhbC5yZXBsYWNlKC9eXFxEKy9nLCAnJyk7XG5cdFx0XHQvLyBkdWUgdG8gYW4gYXBwYXJlbnQgaU9TIGJ1Zywgd2UgaGF2ZSB0byBhZGQgYW4gb3B0aW9uLWdyb3VwIHRvIHByZXZlbnQgdHJ1bmNhdGlvbiBvZiB0ZXh0XG5cdFx0XHQvLyAoc2VhcmNoIFdUOlRXIGFyY2hpdmVzIGZvciBcIlByb2JsZW0gc2VsZWN0aW5nIHdhcm5pbmdzIG9uIGFuIGlQaG9uZVwiKVxuXHRcdFx0aWYgKHdyYXBJbk9wdGdyb3VwICYmICQuY2xpZW50LnByb2ZpbGUoKS5wbGF0Zm9ybSA9PT0gJ2lwaG9uZScpIHtcblx0XHRcdFx0bGV0IHdyYXBwZXJPcHRncm91cCA9IG5ldyBNb3JlYml0cy5xdWlja0Zvcm0uZWxlbWVudCh7XG5cdFx0XHRcdFx0dHlwZTogJ29wdGdyb3VwJyxcblx0XHRcdFx0XHRsYWJlbDogJ+WPr+eUqOaooeadvycsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3cmFwcGVyT3B0Z3JvdXAgPSB3cmFwcGVyT3B0Z3JvdXAucmVuZGVyKCk7XG5cdFx0XHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZCh3cmFwcGVyT3B0Z3JvdXApO1xuXHRcdFx0XHRjb250YWluZXIgPSB3cmFwcGVyT3B0Z3JvdXA7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKGNvbnN0IFtpdGVtS2V5LCBpdGVtUHJvcGVydGllc10gb2YgT2JqZWN0LmVudHJpZXMoY29udGVudHMpKSB7XG5cdFx0XHRcdC8vIFNraXAgaWYgdGhlIGN1cnJlbnQgdGVtcGxhdGUgZG9lc24ndCBoYXZlIGEgdmVyc2lvbiBmb3IgdGhlIGN1cnJlbnQgbGV2ZWxcblx0XHRcdFx0aWYgKCEhbGV2ZWwgJiYgIWl0ZW1Qcm9wZXJ0aWVzW3ZhbF0pIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3Qga2V5ID0gdHlwZW9mIGl0ZW1LZXkgPT09ICdzdHJpbmcnID8gaXRlbUtleSA6IGl0ZW1Qcm9wZXJ0aWVzLnZhbHVlO1xuXHRcdFx0XHRjb25zdCB0ZW1wbGF0ZSA9IGtleSArIGxldmVsO1xuXHRcdFx0XHRjb25zdCBlbGVtID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybS5lbGVtZW50KHtcblx0XHRcdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdFx0XHRsYWJlbDogYHt7JHt0ZW1wbGF0ZX19fTogJHtsZXZlbCA/IGl0ZW1Qcm9wZXJ0aWVzW3ZhbF0ubGFiZWwgOiBpdGVtUHJvcGVydGllcy5sYWJlbH1gLFxuXHRcdFx0XHRcdHZhbHVlOiB0ZW1wbGF0ZSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdC8vIFNlbGVjdCBpdGVtIGJlc3QgY29ycmVzcG9uZGluZyB0byBwcmV2aW91cyBzZWxlY3Rpb25cblx0XHRcdFx0aWYgKCFzZWxlY3RlZCAmJiBvbGRfc3VidmFsdWUgJiYgb2xkX3N1YnZhbHVlX3JlLnRlc3QodGVtcGxhdGUpKSB7XG5cdFx0XHRcdFx0ZWxlbS5kYXRhLnNlbGVjdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRzZWxlY3RlZCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgZWxlbVJlbmRlcmVkID0gY29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW0ucmVuZGVyKCkpO1xuXHRcdFx0XHQkKGVsZW1SZW5kZXJlZCkuZGF0YSgnbWVzc2FnZURhdGEnLCBpdGVtUHJvcGVydGllcyk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRzd2l0Y2ggKHZhbHVlKSB7XG5cdFx0XHRjYXNlICdzaW5nbGVub3RpY2UnOlxuXHRcdFx0Y2FzZSAnc2luZ2xld2Fybic6XG5cdFx0XHRcdGNyZWF0ZUVudHJpZXMoVHdpbmtsZS53YXJuLm1lc3NhZ2VzW3ZhbHVlXSwgc3ViX2dyb3VwLCB0cnVlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdzaW5nbGVjb21iaW5lZCc6IHtcblx0XHRcdFx0Y29uc3QgdW5Tb3J0ZWRTaW5nbGV0cyA9IHtcblx0XHRcdFx0XHQuLi5Ud2lua2xlLndhcm4ubWVzc2FnZXMuc2luZ2xlbm90aWNlLFxuXHRcdFx0XHRcdC4uLlR3aW5rbGUud2Fybi5tZXNzYWdlcy5zaW5nbGV3YXJuLFxuXHRcdFx0XHR9O1xuXHRcdFx0XHRjb25zdCBzb3J0ZWRTaW5nbGV0TWVzc2FnZXMgPSB7fTtcblx0XHRcdFx0Zm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModW5Tb3J0ZWRTaW5nbGV0cykuc29ydCgpKSB7XG5cdFx0XHRcdFx0c29ydGVkU2luZ2xldE1lc3NhZ2VzW2tleV0gPSB1blNvcnRlZFNpbmdsZXRzW2tleV07XG5cdFx0XHRcdH1cblx0XHRcdFx0Y3JlYXRlRW50cmllcyhzb3J0ZWRTaW5nbGV0TWVzc2FnZXMsIHN1Yl9ncm91cCwgdHJ1ZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0Y2FzZSAnY3VzdG9tJzpcblx0XHRcdFx0Y3JlYXRlRW50cmllcyhUd2lua2xlLmdldFByZWYoJ2N1c3RvbVdhcm5pbmdMaXN0JyksIHN1Yl9ncm91cCwgdHJ1ZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAna2l0Y2hlbnNpbmsnOlxuXHRcdFx0XHRmb3IgKGNvbnN0IGx2bCBvZiBbJ2xldmVsMScsICdsZXZlbDInXSkge1xuXHRcdFx0XHRcdGZvciAoY29uc3QgbGV2ZWxHcm91cCBvZiBUd2lua2xlLndhcm4ubWVzc2FnZXMubGV2ZWxzKSB7XG5cdFx0XHRcdFx0XHRjcmVhdGVFbnRyaWVzKGxldmVsR3JvdXAubGlzdCwgc3ViX2dyb3VwLCB0cnVlLCBsdmwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRjcmVhdGVFbnRyaWVzKFR3aW5rbGUud2Fybi5tZXNzYWdlcy5zaW5nbGVub3RpY2UsIHN1Yl9ncm91cCwgdHJ1ZSk7XG5cdFx0XHRcdGNyZWF0ZUVudHJpZXMoVHdpbmtsZS53YXJuLm1lc3NhZ2VzLnNpbmdsZXdhcm4sIHN1Yl9ncm91cCwgdHJ1ZSk7XG5cdFx0XHRcdGNyZWF0ZUVudHJpZXMoVHdpbmtsZS5nZXRQcmVmKCdjdXN0b21XYXJuaW5nTGlzdCcpLCBzdWJfZ3JvdXAsIHRydWUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ2xldmVsMSc6XG5cdFx0XHRjYXNlICdsZXZlbDInOlxuXHRcdFx0XHQvLyBDcmVhdGVzIHN1Ymdyb3VwIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGVyZSBpcyBhbnl0aGluZyB0byBwbGFjZSBpbiBpdDtcblx0XHRcdFx0Ly8gbGVhdmVzIFwiUmVtb3ZhbCBvZiBkZWxldGlvbiB0YWdzXCIgZW1wdHkgZm9yIGxldmVsIDJcblx0XHRcdFx0Zm9yIChjb25zdCBsZXZlbEdyb3VwIG9mIFR3aW5rbGUud2Fybi5tZXNzYWdlcy5sZXZlbHMpIHtcblx0XHRcdFx0XHRsZXQgb3B0Z3JvdXAgPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0XHRcdFx0dHlwZTogJ29wdGdyb3VwJyxcblx0XHRcdFx0XHRcdGxhYmVsOiBsZXZlbEdyb3VwLmNhdGVnb3J5LFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdG9wdGdyb3VwID0gb3B0Z3JvdXAucmVuZGVyKCk7XG5cdFx0XHRcdFx0c3ViX2dyb3VwLmFwcGVuZENoaWxkKG9wdGdyb3VwKTtcblx0XHRcdFx0XHQvLyBjcmVhdGUgdGhlIG9wdGlvbnNcblx0XHRcdFx0XHRjcmVhdGVFbnRyaWVzKGxldmVsR3JvdXAubGlzdCwgb3B0Z3JvdXAsIGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ2F1dG9sZXZlbCc6IHtcblx0XHRcdFx0Ly8gQ2hlY2sgdXNlciBwYWdlIHRvIGRldGVybWluZSBhcHByb3ByaWF0ZSBsZXZlbFxuXHRcdFx0XHRjb25zdCBhdXRvbGV2ZWxQcm9jID0gKCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHdpa2l0ZXh0ID0gVHdpbmtsZS53YXJuLnRhbGtwYWdlT2JqLmdldFBhZ2VUZXh0KCk7XG5cdFx0XHRcdFx0Ly8gaGlzdG9yeSBub3QgbmVlZGVkIGZvciBhdXRvbGV2ZWxcblx0XHRcdFx0XHRjb25zdCBbbGF0ZXN0XSA9IFR3aW5rbGUud2Fybi5jYWxsYmFja3MuZGF0ZVByb2Nlc3Npbmcod2lraXRleHQpO1xuXHRcdFx0XHRcdC8vIFBzZXVkby1wYXJhbXMgd2l0aCBvbmx5IHdoYXQncyBuZWVkZWQgdG8gcGFyc2UgdGhlIGxldmVsIGkuZS4gbm8gbWVzc2FnZURhdGFcblx0XHRcdFx0XHRjb25zdCBwYXJhbXMgPSB7XG5cdFx0XHRcdFx0XHRzdWJfZ3JvdXA6IG9sZF9zdWJ2YWx1ZSxcblx0XHRcdFx0XHRcdGFydGljbGU6IGUudGFyZ2V0LnJvb3QuYXJ0aWNsZS52YWx1ZSxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGNvbnN0IGx2bCA9IGBsZXZlbCR7VHdpbmtsZS53YXJuLmNhbGxiYWNrcy5hdXRvbGV2ZWxQYXJzZVdpa2l0ZXh0KHdpa2l0ZXh0LCBwYXJhbXMsIGxhdGVzdClbMV19YDtcblx0XHRcdFx0XHQvLyBJZGVudGljYWwgdG8gbGV2ZWwxLCBldGMuIGFib3ZlIGJ1dCBleHBsaWNpdGx5IHByb3ZpZGVzIHRoZSBsZXZlbFxuXHRcdFx0XHRcdGZvciAoY29uc3QgbGV2ZWxHcm91cCBvZiBUd2lua2xlLndhcm4ubWVzc2FnZXMubGV2ZWxzKSB7XG5cdFx0XHRcdFx0XHRsZXQgb3B0Z3JvdXAgPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0XHRcdFx0XHR0eXBlOiAnb3B0Z3JvdXAnLFxuXHRcdFx0XHRcdFx0XHRsYWJlbDogbGV2ZWxHcm91cC5jYXRlZ29yeSxcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0b3B0Z3JvdXAgPSBvcHRncm91cC5yZW5kZXIoKTtcblx0XHRcdFx0XHRcdHN1Yl9ncm91cC5hcHBlbmRDaGlsZChvcHRncm91cCk7XG5cdFx0XHRcdFx0XHQvLyBjcmVhdGUgdGhlIG9wdGlvbnNcblx0XHRcdFx0XHRcdGNyZWF0ZUVudHJpZXMobGV2ZWxHcm91cC5saXN0LCBvcHRncm91cCwgZmFsc2UsIGx2bCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgc3ViY2F0ZWdvcnkgY2hhbmdlLCBhZGQgc2VsZWN0IG1lbnUsIGV0Yy5cblx0XHRcdFx0XHRUd2lua2xlLndhcm4uY2FsbGJhY2sucG9zdENhdGVnb3J5Q2xlYW51cChlKTtcblx0XHRcdFx0fTtcblx0XHRcdFx0aWYgKFR3aW5rbGUud2Fybi50YWxrcGFnZU9iaikge1xuXHRcdFx0XHRcdGF1dG9sZXZlbFByb2MoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zdCB1c2VydGFsa19wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRcdGBVc2VyX3RhbGs6JHtyZWxldmFudFVzZXJOYW1lfWAsXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WKoOi9veS4iuasoeitpuWRiicsICfovInlhaXkuIrmrKHorablkYonKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0dXNlcnRhbGtfcGFnZS5zZXRGb2xsb3dSZWRpcmVjdCh0cnVlLCBmYWxzZSk7XG5cdFx0XHRcdFx0dXNlcnRhbGtfcGFnZS5sb2FkKFxuXHRcdFx0XHRcdFx0KHBhZ2VvYmopID0+IHtcblx0XHRcdFx0XHRcdFx0VHdpbmtsZS53YXJuLnRhbGtwYWdlT2JqID0gcGFnZW9iajsgLy8gVXBkYXRlIHRhbGtwYWdlT2JqXG5cdFx0XHRcdFx0XHRcdGF1dG9sZXZlbFByb2MoKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHQoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdC8vIENhdGNoIGFuZCB3YXJuIGlmIHRoZSB0YWxrcGFnZSBjYW4ndCBsb2FkLFxuXHRcdFx0XHRcdFx0XHQvLyBtb3N0IGxpa2VseSBiZWNhdXNlIGl0J3MgYSBjcm9zcy1uYW1lc3BhY2UgcmVkaXJlY3Rcblx0XHRcdFx0XHRcdFx0Ly8gU3VwZXJzZWRlcyB0aGUgdHlwaWNhbCAkYXV0b2xldmVsTWVzc2FnZSBhZGRlZCBpbiBhdXRvbGV2ZWxQYXJzZVdpa2l0ZXh0XG5cdFx0XHRcdFx0XHRcdGNvbnN0ICRub1RhbGtQYWdlTm9kZSA9ICQoJzxzdHJvbmc+Jylcblx0XHRcdFx0XHRcdFx0XHQuYXR0cignaWQnLCAndHdpbmtsZS13YXJuLWF1dG9sZXZlbC1tZXNzYWdlJylcblx0XHRcdFx0XHRcdFx0XHQuY3NzKCdjb2xvcicsICcjZjAwJylcblx0XHRcdFx0XHRcdFx0XHQudGV4dChcblx0XHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHRcdFx0J+aXoOazleWKoOi9veeUqOaIt+iuqOiuuumhte+8jOi/meWPr+iDveaYr+WboOS4uuWug+aYr+i3qOWRveWQjeepuumXtOmHjeWumuWQke+8jOiHquWKqOmAieaLqeitpuWRiue6p+WIq+WwhuS4jeS8mui/kOS9nOOAgicsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCfnhKHms5XovInlhaXkvb/nlKjogIXoqI7oq5bpoIHvvIzpgJnlj6/og73mmK/lm6DngrrlroPmmK/ot6jlkb3lkI3nqbrplpPph43mlrDlsI7lkJHvvIzoh6rli5Xpgbjmk4forablkYrntJrliKXlsIfkuI3mnIPpgYvkvZzjgIInXG5cdFx0XHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0JG5vVGFsa1BhZ2VOb2RlLmluc2VydEJlZm9yZSgkYm9keS5maW5kKCcjdHdpbmtsZS13YXJuLXdhcm5pbmctbWVzc2FnZXMnKSk7XG5cdFx0XHRcdFx0XHRcdC8vIElmIGEgcHJldmlldyB3YXMgb3BlbmVkIHdoaWxlIGluIGEgZGlmZmVyZW50IG1vZGUsIGNsb3NlIGl0XG5cdFx0XHRcdFx0XHRcdC8vIFNob3VsZCBudWxsaWZ5IHRoZSBuZWVkIHRvIGNhdGNoIHRoZSBlcnJvciBpbiBwcmV2aWV3IGNhbGxiYWNrXG5cdFx0XHRcdFx0XHRcdGUudGFyZ2V0LnJvb3QucHJldmlld2VyLmNsb3NlUHJldmlldygpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR2b2lkIG13Lm5vdGlmeSh3aW5kb3cud2dVTFMoJ3R3aW5rbGV3YXJu77ya5pyq55+l55qE6K2m5ZGK57uEJywgJ3R3aW5rbGV3YXJu77ya5pyq55+l55qE6K2m5ZGK57WEJyksIHtcblx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0dGFnOiAndHdpbmtsZXdhcm4nLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdC8vIFRyaWdnZXIgc3ViY2F0ZWdvcnkgY2hhbmdlLCBhZGQgc2VsZWN0IG1lbnUsIGV0Yy5cblx0XHQvLyBIZXJlIGJlY2F1c2Ugb2YgdGhlIGFzeW5jIGxvYWQgZm9yIGF1dG9sZXZlbFxuXHRcdGlmICh2YWx1ZSAhPT0gJ2F1dG9sZXZlbCcpIHtcblx0XHRcdC8vIHJlc2V0IGFueSBhdXRvbGV2ZWwtc3BlY2lmaWMgbWVzc2FnZXMgd2hpbGUgd2UncmUgaGVyZVxuXHRcdFx0JGJvZHkuZmluZCgnI3R3aW5rbGUtd2Fybi1hdXRvbGV2ZWwtbWVzc2FnZScpLnJlbW92ZSgpO1xuXHRcdFx0VHdpbmtsZS53YXJuLmNhbGxiYWNrLnBvc3RDYXRlZ29yeUNsZWFudXAoZSk7XG5cdFx0fVxuXHR9O1xuXHRUd2lua2xlLndhcm4uY2FsbGJhY2sucG9zdENhdGVnb3J5Q2xlYW51cCA9IChlKSA9PiB7XG5cdFx0Ly8gY2xlYXIgb3ZlcnJpZGRlbiBsYWJlbCBvbiBhcnRpY2xlIHRleHRib3hcblx0XHRNb3JlYml0cy5xdWlja0Zvcm0uc2V0RWxlbWVudFRvb2x0aXBWaXNpYmlsaXR5KGUudGFyZ2V0LnJvb3QuYXJ0aWNsZSwgdHJ1ZSk7XG5cdFx0TW9yZWJpdHMucXVpY2tGb3JtLnJlc2V0RWxlbWVudExhYmVsKGUudGFyZ2V0LnJvb3QuYXJ0aWNsZSk7XG5cdFx0Ly8gVHJpZ2dlciBjdXN0b20gbGFiZWwvY2hhbmdlIG9uIG1haW4gY2F0ZWdvcnkgY2hhbmdlXG5cdFx0VHdpbmtsZS53YXJuLmNhbGxiYWNrLmNoYW5nZV9zdWJjYXRlZ29yeShlKTtcblx0XHQvLyBVc2Ugc2VsZWN0MiB0byBtYWtlIHRoZSBzZWxlY3QgbWVudSBzZWFyY2hhYmxlXG5cdFx0aWYgKCFUd2lua2xlLmdldFByZWYoJ29sZFNlbGVjdCcpKSB7XG5cdFx0XHQkYm9keVxuXHRcdFx0XHQuZmluZCgnc2VsZWN0W25hbWU9c3ViX2dyb3VwXScpXG5cdFx0XHRcdC5zZWxlY3QyKHtcblx0XHRcdFx0XHR3aWR0aDogJzEwMCUnLFxuXHRcdFx0XHRcdG1hdGNoZXI6IE1vcmViaXRzLnNlbGVjdDIubWF0Y2hlcnMub3B0Z3JvdXBGdWxsLFxuXHRcdFx0XHRcdHRlbXBsYXRlUmVzdWx0OiBNb3JlYml0cy5zZWxlY3QyLmhpZ2hsaWdodFNlYXJjaE1hdGNoZXMsXG5cdFx0XHRcdFx0bGFuZ3VhZ2U6IHtcblx0XHRcdFx0XHRcdHNlYXJjaGluZzogTW9yZWJpdHMuc2VsZWN0Mi5xdWVyeUludGVyY2VwdG9yLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5jaGFuZ2UoVHdpbmtsZS53YXJuLmNhbGxiYWNrLmNoYW5nZV9zdWJjYXRlZ29yeSk7XG5cdFx0XHQkYm9keS5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb24nKS5vbigna2V5ZG93bicsIE1vcmViaXRzLnNlbGVjdDIuYXV0b1N0YXJ0KS50cmlnZ2VyKCdmb2N1cycpO1xuXHRcdFx0bXcudXRpbC5hZGRDU1MoXG5cdFx0XHRcdC8qIEluY3JlYXNlIGhlaWdodDtcblx0XHRcdFx0ICogUmVkdWNlIHBhZGRpbmc7XG5cdFx0XHRcdCAqIEFkanVzdCBmb250IHNpemUuXG5cdFx0XHRcdCAqICovXG5cdFx0XHRcdCcuc2VsZWN0Mi1jb250YWluZXIgLnNlbGVjdDItZHJvcGRvd24gLnNlbGVjdDItcmVzdWx0cz4uc2VsZWN0Mi1yZXN1bHRzX19vcHRpb25ze21heC1oZWlnaHQ6MzUwcHh9LnNlbGVjdDItcmVzdWx0cyAuc2VsZWN0Mi1yZXN1bHRzX19ncm91cCwuc2VsZWN0Mi1yZXN1bHRzIC5zZWxlY3QyLXJlc3VsdHNfX29wdGlvbntwYWRkaW5nLXRvcDoxcHg7cGFkZGluZy1ib3R0b206MXB4fS5zZWxlY3QyLWNvbnRhaW5lciAuc2VsZWN0Mi1kcm9wZG93biAuc2VsZWN0Mi1yZXN1bHRzLC5zZWxlY3QyLWNvbnRhaW5lciAuc2VsZWN0aW9uIC5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWR7Zm9udC1zaXplOjEzcHh9J1xuXHRcdFx0KTtcblx0XHR9XG5cdH07XG5cdFR3aW5rbGUud2Fybi5jYWxsYmFjay5jaGFuZ2Vfc3ViY2F0ZWdvcnkgPSAoZSkgPT4ge1xuXHRcdGNvbnN0IG1haW5fZ3JvdXAgPSBlLnRhcmdldC5mb3JtLm1haW5fZ3JvdXAudmFsdWU7XG5cdFx0Y29uc3Qge3ZhbHVlfSA9IGUudGFyZ2V0LmZvcm0uc3ViX2dyb3VwO1xuXHRcdC8vIFRhZ3MgdGhhdCBkb24ndCB0YWtlIGEgbGlua2VkIGFydGljbGUsIGJ1dCBzb21ldGhpbmcgZWxzZSAob2Z0ZW4gYSB1c2VybmFtZSkuXG5cdFx0Ly8gVGhlIHZhbHVlIG9mIGVhY2ggdGFnIGlzIHRoZSBsYWJlbCBuZXh0IHRvIHRoZSBpbnB1dCBmaWVsZFxuXHRcdGNvbnN0IG5vdExpbmtlZEFydGljbGUgPSB7XG5cdFx0XHQndXctYml0ZSc6IHdpbmRvdy53Z1VMUygn6KKr4oCc5ZKs5Yiw4oCd55qE55So5oi377yI5LiN5ZCrVXNlcjrvvIkgJywgJ+iiq+OAjOWSrOWIsOOAjeeahOS9v+eUqOiAhe+8iOS4jeWQq1VzZXI677yJICcpLFxuXHRcdFx0J3V3LWFpdic6IHdpbmRvdy53Z1VMUygn5Y+v6YCJ6L6T5YWl6KKr6K2m5ZGK55qE55So5oi35ZCN77yI5LiN5ZCrVXNlcjrvvIkgJywgJ+WPr+mBuOi8uOWFpeiiq+itpuWRiueahOS9v+eUqOiAheWQjeeose+8iOS4jeWQq1VzZXI677yJICcpLFxuXHRcdH07XG5cdFx0aWYgKFsnc2luZ2xlbm90aWNlJywgJ3NpbmdsZXdhcm4nLCAnc2luZ2xlY29tYmluZWQnLCAna2l0Y2hlbnNpbmsnXS5pbmNsdWRlcyhtYWluX2dyb3VwKSkge1xuXHRcdFx0aWYgKG5vdExpbmtlZEFydGljbGVbdmFsdWVdKSB7XG5cdFx0XHRcdGlmIChUd2lua2xlLndhcm4ucHJldl9hcnRpY2xlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0VHdpbmtsZS53YXJuLnByZXZfYXJ0aWNsZSA9IGUudGFyZ2V0LmZvcm0uYXJ0aWNsZS52YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlLnRhcmdldC5mb3JtLmFydGljbGUubm90QXJ0aWNsZSA9IHRydWU7XG5cdFx0XHRcdGUudGFyZ2V0LmZvcm0uYXJ0aWNsZS52YWx1ZSA9ICcnO1xuXHRcdFx0XHQvLyBjaGFuZ2UgZm9ybSBsYWJlbHMgYWNjb3JkaW5nIHRvIHRoZSB3YXJuaW5nIHNlbGVjdGVkXG5cdFx0XHRcdE1vcmViaXRzLnF1aWNrRm9ybS5zZXRFbGVtZW50VG9vbHRpcFZpc2liaWxpdHkoZS50YXJnZXQuZm9ybS5hcnRpY2xlLCBmYWxzZSk7XG5cdFx0XHRcdE1vcmViaXRzLnF1aWNrRm9ybS5vdmVycmlkZUVsZW1lbnRMYWJlbChlLnRhcmdldC5mb3JtLmFydGljbGUsIG5vdExpbmtlZEFydGljbGVbdmFsdWVdKTtcblx0XHRcdH0gZWxzZSBpZiAoZS50YXJnZXQuZm9ybS5hcnRpY2xlLm5vdEFydGljbGUpIHtcblx0XHRcdFx0aWYgKFR3aW5rbGUud2Fybi5wcmV2X2FydGljbGUgIT09IG51bGwpIHtcblx0XHRcdFx0XHRlLnRhcmdldC5mb3JtLmFydGljbGUudmFsdWUgPSBUd2lua2xlLndhcm4ucHJldl9hcnRpY2xlO1xuXHRcdFx0XHRcdFR3aW5rbGUud2Fybi5wcmV2X2FydGljbGUgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGUudGFyZ2V0LmZvcm0uYXJ0aWNsZS5ub3RBcnRpY2xlID0gZmFsc2U7XG5cdFx0XHRcdE1vcmViaXRzLnF1aWNrRm9ybS5zZXRFbGVtZW50VG9vbHRpcFZpc2liaWxpdHkoZS50YXJnZXQuZm9ybS5hcnRpY2xlLCB0cnVlKTtcblx0XHRcdFx0TW9yZWJpdHMucXVpY2tGb3JtLnJlc2V0RWxlbWVudExhYmVsKGUudGFyZ2V0LmZvcm0uYXJ0aWNsZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIGFkZCBiaWcgcmVkIG5vdGljZSwgd2FybmluZyB1c2VycyBhYm91dCBob3cgdG8gdXNlIHt7dXctW2NvaS1ddXNlcm5hbWV9fSBhcHByb3ByaWF0ZWx5XG5cdFx0JGJvZHkuZmluZCgnI3R3LXdhcm4tcmVkLW5vdGljZScpLnJlbW92ZSgpO1xuXHR9O1xuXHRUd2lua2xlLndhcm4uY2FsbGJhY2tzID0ge1xuXHRcdGdldFdhcm5pbmdXaWtpdGV4dDogKHRlbXBsYXRlTmFtZSwgYXJ0aWNsZSwgcmVhc29uLCBpc0N1c3RvbSwgbm9TaWduKSA9PiB7XG5cdFx0XHRsZXQgdGV4dCA9ICd7eycuY29uY2F0KCdzdWJzdDonLCB0ZW1wbGF0ZU5hbWUpO1xuXHRcdFx0Ly8gYWRkIGxpbmtlZCBhcnRpY2xlIGZvciB1c2VyIHdhcm5pbmdzXG5cdFx0XHRpZiAoYXJ0aWNsZSkge1xuXHRcdFx0XHR0ZXh0ICs9IGB8MT0ke2FydGljbGV9YDtcblx0XHRcdH1cblx0XHRcdGlmIChyZWFzb24pIHtcblx0XHRcdFx0Ly8gYWRkIGV4dHJhIG1lc3NhZ2Vcblx0XHRcdFx0dGV4dCArPSBgfDI9JHtyZWFzb259YDtcblx0XHRcdH1cblx0XHRcdHRleHQgKz0gJ3xzdWJzdD0nLmNvbmNhdCgnc3Vic3Q6Jyk7XG5cdFx0XHRpZiAoIW5vU2lnbikge1xuXHRcdFx0XHR0ZXh0ICs9ICd8c2lnPX5+Jy5jb25jYXQoJ35+Jyk7XG5cdFx0XHR9XG5cdFx0XHR0ZXh0ICs9ICd9fSc7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9LFxuXHRcdHNob3dQcmV2aWV3OiAoZm9ybSwgdGVtcGxhdGVuYW1lKSA9PiB7XG5cdFx0XHRjb25zdCBpbnB1dCA9IE1vcmViaXRzLnF1aWNrRm9ybS5nZXRJbnB1dERhdGEoZm9ybSk7XG5cdFx0XHQvLyBQcm92aWRlZCBvbiBhdXRvbGV2ZWwsIG5vdCBvdGhlcndpc2Vcblx0XHRcdHRlbXBsYXRlbmFtZSB8fD0gaW5wdXQuc3ViX2dyb3VwO1xuXHRcdFx0Y29uc3QgbGlua2VkYXJ0aWNsZSA9IGlucHV0LmFydGljbGU7XG5cdFx0XHRjb25zdCB0ZW1wbGF0ZXRleHQgPSBUd2lua2xlLndhcm4uY2FsbGJhY2tzLmdldFdhcm5pbmdXaWtpdGV4dChcblx0XHRcdFx0dGVtcGxhdGVuYW1lLFxuXHRcdFx0XHRsaW5rZWRhcnRpY2xlLFxuXHRcdFx0XHRpbnB1dC5yZWFzb24sXG5cdFx0XHRcdGlucHV0Lm1haW5fZ3JvdXAgPT09ICdjdXN0b20nXG5cdFx0XHQpO1xuXHRcdFx0Zm9ybS5wcmV2aWV3ZXIuYmVnaW5SZW5kZXIodGVtcGxhdGV0ZXh0LCBgVXNlcl90YWxrOiR7cmVsZXZhbnRVc2VyTmFtZX1gKTsgLy8gRm9yY2Ugd2lraXRleHQvY29ycmVjdCB1c2VybmFtZVxuXHRcdH0sXG5cblx0XHQvLyBKdXN0IGEgcGFzcy10aHJvdWdoIHVubGVzcyB0aGUgYXV0b2xldmVsIG9wdGlvbiB3YXMgc2VsZWN0ZWRcblx0XHRwcmV2aWV3OiAoZm9ybSkgPT4ge1xuXHRcdFx0aWYgKGZvcm0ubWFpbl9ncm91cC52YWx1ZSA9PT0gJ2F1dG9sZXZlbCcpIHtcblx0XHRcdFx0Ly8gQWx3YXlzIGdldCBhIG5ldywgdXBkYXRlZCB0YWxrcGFnZSBmb3IgYXV0b2xldmVsIHByb2Nlc3Npbmdcblx0XHRcdFx0Y29uc3QgdXNlcnRhbGtfcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHRcdFx0YFVzZXJfdGFsazoke3JlbGV2YW50VXNlck5hbWV9YCxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WKoOi9veS4iuasoeitpuWRiicsICfovInlhaXkuIrmrKHorablkYonKVxuXHRcdFx0XHQpO1xuXHRcdFx0XHR1c2VydGFsa19wYWdlLnNldEZvbGxvd1JlZGlyZWN0KHRydWUsIGZhbHNlKTtcblx0XHRcdFx0Ly8gV2lsbCBmYWlsIHNpbGVudGx5IGlmIHRoZSB0YWxrIHBhZ2UgaXMgYSBjcm9zcy1ucyByZWRpcmVjdCxcblx0XHRcdFx0Ly8gcmVtb3ZhbCBvZiB0aGUgcHJldmlldyBib3ggaGFuZGxlZCB3aGVuIGxvYWRpbmcgdGhlIG1lbnVcblx0XHRcdFx0dXNlcnRhbGtfcGFnZS5sb2FkKChwYWdlb2JqKSA9PiB7XG5cdFx0XHRcdFx0VHdpbmtsZS53YXJuLnRhbGtwYWdlT2JqID0gcGFnZW9iajsgLy8gVXBkYXRlIHRhbGtwYWdlT2JqXG5cdFx0XHRcdFx0Y29uc3Qgd2lraXRleHQgPSBwYWdlb2JqLmdldFBhZ2VUZXh0KCk7XG5cdFx0XHRcdFx0Ly8gaGlzdG9yeSBub3QgbmVlZGVkIGZvciBhdXRvbGV2ZWxcblx0XHRcdFx0XHRjb25zdCBbbGF0ZXN0XSA9IFR3aW5rbGUud2Fybi5jYWxsYmFja3MuZGF0ZVByb2Nlc3Npbmcod2lraXRleHQpO1xuXHRcdFx0XHRcdGNvbnN0IHBhcmFtcyA9IHtcblx0XHRcdFx0XHRcdHN1Yl9ncm91cDogZm9ybS5zdWJfZ3JvdXAudmFsdWUsXG5cdFx0XHRcdFx0XHRhcnRpY2xlOiBmb3JtLmFydGljbGUudmFsdWUsXG5cdFx0XHRcdFx0XHRtZXNzYWdlRGF0YTogJChmb3JtLnN1Yl9ncm91cClcblx0XHRcdFx0XHRcdFx0LmZpbmQoYG9wdGlvblt2YWx1ZT1cIiR7JChmb3JtLnN1Yl9ncm91cCkudmFsKCl9XCJdYClcblx0XHRcdFx0XHRcdFx0LmRhdGEoJ21lc3NhZ2VEYXRhJyksXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRjb25zdCBbdGVtcGxhdGVdID0gVHdpbmtsZS53YXJuLmNhbGxiYWNrcy5hdXRvbGV2ZWxQYXJzZVdpa2l0ZXh0KHdpa2l0ZXh0LCBwYXJhbXMsIGxhdGVzdCk7XG5cdFx0XHRcdFx0VHdpbmtsZS53YXJuLmNhbGxiYWNrcy5zaG93UHJldmlldyhmb3JtLCB0ZW1wbGF0ZSk7XG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHRlbXBsYXRlcyBoYXZlIGRpdmVyZ2VkLCBmYWtlIGEgY2hhbmdlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gdG8gcmVsb2FkIHRoZSBtZW51IHdpdGggdGhlIHVwZGF0ZWQgcGFnZW9ialxuXHRcdFx0XHRcdGlmIChmb3JtLnN1Yl9ncm91cC52YWx1ZSAhPT0gdGVtcGxhdGUpIHtcblx0XHRcdFx0XHRcdGNvbnN0IGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuXHRcdFx0XHRcdFx0ZXZ0LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRmb3JtLm1haW5fZ3JvdXAuZGlzcGF0Y2hFdmVudChldnQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRUd2lua2xlLndhcm4uY2FsbGJhY2tzLnNob3dQcmV2aWV3KGZvcm0pO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0LyoqXG5cdFx0ICogVXNlZCBpbiB0aGUgbWFpbiBhbmQgYXV0b2xldmVsIGxvb3BzIHRvIGRldGVybWluZSB3aGVuIHRvIHdhcm5cblx0XHQgKiBhYm91dCBleGNlc3NpdmVseSByZWNlbnQsIHN0YWxlLCBvciBpZGVudGljYWwgd2FybmluZ3MuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gd2lraXRleHQgIFRoZSB0ZXh0IG9mIGEgdXNlcidzIHRhbGsgcGFnZSwgZnJvbSBnZXRQYWdlVGV4dCgpXG5cdFx0ICogQHJldHVybnMge09iamVjdFtdfSAtIEFycmF5IG9mIG9iamVjdHM6IGxhdGVzdCBjb250YWlucyBtb3N0IHJlY2VudFxuXHRcdCAqIHdhcm5pbmcgYW5kIGRhdGU7IGhpc3RvcnkgbGlzdHMgYWxsIHByaW9yIHdhcm5pbmdzXG5cdFx0ICovXG5cdFx0ZGF0ZVByb2Nlc3Npbmc6ICh3aWtpdGV4dCkgPT4ge1xuXHRcdFx0Y29uc3QgaGlzdG9yeV9yZSA9XG5cdFx0XHRcdC88IS0tXFxzP1RlbXBsYXRlOihbdVVddy0uKj8pXFxzPy0tPi4qPyhcXGR7NH0p5bm0KFxcZHsxLDJ9KeaciChcXGR7MSwyfSnml6UgXFwoW+aXpeS4gOS6jOS4ieWbm+S6lOWFrV1cXCkgKFxcZHsxLDJ9KTooXFxkezEsMn0pIFxcKENTVFxcKS9nO1xuXHRcdFx0Y29uc3QgaGlzdG9yeSA9IHt9O1xuXHRcdFx0Y29uc3QgbGF0ZXN0ID0ge1xuXHRcdFx0XHRkYXRlOiBuZXcgTW9yZWJpdHMuZGF0ZSgwKSxcblx0XHRcdFx0dHlwZTogJycsXG5cdFx0XHR9O1xuXHRcdFx0bGV0IGN1cnJlbnQ7XG5cdFx0XHR3aGlsZSAoKGN1cnJlbnQgPSBoaXN0b3J5X3JlLmV4ZWMod2lraXRleHQpKSAhPT0gbnVsbCkge1xuXHRcdFx0XHRjb25zdCBbLCB0ZW1wbGF0ZV0gPSBjdXJyZW50O1xuXHRcdFx0XHRjb25zdCBjdXJyZW50X2RhdGUgPSBuZXcgTW9yZWJpdHMuZGF0ZShcblx0XHRcdFx0XHRgJHtjdXJyZW50WzJdfS0ke2N1cnJlbnRbM119LSR7Y3VycmVudFs0XX0gJHtjdXJyZW50WzVdfToke2N1cnJlbnRbNl19IChDU1QpYFxuXHRcdFx0XHQpO1xuXHRcdFx0XHRpZiAoISh0ZW1wbGF0ZSBpbiBoaXN0b3J5KSB8fCBoaXN0b3J5W3RlbXBsYXRlXS5pc0JlZm9yZShjdXJyZW50X2RhdGUpKSB7XG5cdFx0XHRcdFx0aGlzdG9yeVt0ZW1wbGF0ZV0gPSBjdXJyZW50X2RhdGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFsYXRlc3QuZGF0ZS5pc0FmdGVyKGN1cnJlbnRfZGF0ZSkpIHtcblx0XHRcdFx0XHRsYXRlc3QuZGF0ZSA9IGN1cnJlbnRfZGF0ZTtcblx0XHRcdFx0XHRsYXRlc3QudHlwZSA9IHRlbXBsYXRlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gW2xhdGVzdCwgaGlzdG9yeV07XG5cdFx0fSxcblx0XHQvKipcblx0XHQgKiBNYWluIGxvb3AgZm9yIGRlY2lkaW5nIHdoYXQgdGhlIGxldmVsIHNob3VsZCBpbmNyZW1lbnQgdG8uIE1vc3Qgb2Zcblx0XHQgKiB0aGlzIGlzIHJlYWxseSBqdXN0IGVycm9yIGNhdGNoaW5nIGFuZCB1cGRhdGluZyB0aGUgc3Vic2VxdWVudCBkYXRhLlxuXHRcdCAqIE1heSBwcm9kdWNlIHVwIHRvIHR3byBub3RpY2VzIGluIGEgdHdpbmtsZS13YXJuLWF1dG9sZXZlbC1tZXNzYWdlcyBkaXZcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB3aWtpdGV4dCAgVGhlIHRleHQgb2YgYSB1c2VyJ3MgdGFsayBwYWdlLCBmcm9tIGdldFBhZ2VUZXh0KCkgKHJlcXVpcmVkKVxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgIFBhcmFtcyBvYmplY3Q6IHN1Yl9ncm91cCBpcyB0aGUgdGVtcGxhdGUgKHJlcXVpcmVkKTtcblx0XHQgKiBhcnRpY2xlIGlzIHRoZSB1c2VyLXByb3ZpZGVkIGFydGljbGUgKGZvcm0uYXJ0aWNsZSkgdXNlZCB0byBsaW5rIEFSViBvbiByZWNlbnQgbGV2ZWwyIHdhcm5pbmdzO1xuXHRcdCAqIG1lc3NhZ2VEYXRhIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIGdldHRpbmcgdGhlIGZ1bGwgdGVtcGxhdGUsIGFzIGl0J3Ncblx0XHQgKiB1c2VkIHRvIGVuc3VyZSBhIHZhbGlkIHRlbXBsYXRlIG9mIHRoYXQgbGV2ZWwgZXhpc3RzXG5cdFx0ICogQHBhcmFtIHtPYmplY3R9IGxhdGVzdCAgRmlyc3QgZWxlbWVudCBvZiB0aGUgYXJyYXkgcmV0dXJuZWQgZnJvbVxuXHRcdCAqIGRhdGVQcm9jZXNzaW5nLiBQcm92aWRlZCBoZXJlIHJhdGhlciB0aGFuIHByb2Nlc3NlZCB3aXRoaW4gdG8gYXZvaWRcblx0XHQgKiByZXBlYXRlZCBjYWxsIHRvIGRhdGVQcm9jZXNzaW5nXG5cdFx0ICogQHBhcmFtIHsoRGF0ZXxNb3JlYml0cy5kYXRlKX0gZGF0ZSAgRGF0ZSBmcm9tIHdoaWNoIHN0YWxlbmVzcyBpcyBkZXRlcm1pbmVkXG5cdFx0ICogQHBhcmFtIHtNb3JlYml0cy5zdGF0dXN9IHN0YXRlbGVtICBTdGF0dXMgZWxlbWVudCwgb25seSB1c2VkIGZvciBoYW5kbGluZyBlcnJvciBpbiBmaW5hbCBleGVjdXRpb25cblx0XHQgKlxuXHRcdCAqIEByZXR1cm5zIHtBcnJheX0gLSBBcnJheSB0aGF0IGNvbnRhaW5zIHRoZSBmdWxsIHRlbXBsYXRlIGFuZCBqdXN0IHRoZSB3YXJuaW5nIGxldmVsXG5cdFx0ICovXG5cdFx0YXV0b2xldmVsUGFyc2VXaWtpdGV4dDogKHdpa2l0ZXh0LCBwYXJhbXMsIGxhdGVzdCwgZGF0ZSwgc3RhdGVsZW0pID0+IHtcblx0XHRcdGxldCBsZXZlbDsgLy8gdW5kZWZpbmVkIHJhdGhlciB0aGFuICcnIG1lYW5zIHRoZSBpc05hTiBiZWxvdyB3aWxsIHJldHVybiB0cnVlXG5cdFx0XHRpZiAoL1xcZD8kLy50ZXN0KGxhdGVzdC50eXBlKSkge1xuXHRcdFx0XHQvLyBsZXZlbDEtMlxuXHRcdFx0XHRsZXZlbCA9IE51bWJlci5wYXJzZUludChsYXRlc3QudHlwZS5yZXBsYWNlKC8uKihcXGQpPyQvLCAnJDEnKSwgMTApO1xuXHRcdFx0fSBlbHNlIGlmIChsYXRlc3QudHlwZSkge1xuXHRcdFx0XHRsZXZlbCA9IDE7IC8vIHNpbmdsZW5vdGljZSBvciBub3QgZm91bmRcblx0XHRcdH1cblx0XHRcdGNvbnN0ICRhdXRvbGV2ZWxNZXNzYWdlID0gJCgnPGRpdj4nKS5hdHRyKCdpZCcsICd0d2lua2xlLXdhcm4tYXV0b2xldmVsLW1lc3NhZ2UnKTtcblx0XHRcdGlmIChOdW1iZXIuaXNOYU4obGV2ZWwpKSB7XG5cdFx0XHRcdC8vIE5vIHByaW9yIHdhcm5pbmdzIGZvdW5kLCB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdFx0XHRsZXZlbCA9IDE7XG5cdFx0XHR9IGVsc2UgaWYgKGxldmVsID4gMiB8fCBsZXZlbCA8IDEpIHtcblx0XHRcdFx0Ly8gU2hvdWxkbid0IGhhcHBlblxuXHRcdFx0XHRjb25zdCBtZXNzYWdlID0gd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdCfml6Dms5Xop6PmnpDkuIrmrKHnmoTorablkYrlsYLnuqfvvIzor7fmiYvliqjpgInmi6nkuIDkuKrorablkYrlsYLnuqfjgIInLFxuXHRcdFx0XHRcdCfnhKHms5Xop6PmnpDkuIrmrKHnmoTorablkYrlsaTntJrvvIzoq4vmiYvli5Xpgbjmk4fkuIDlgIvorablkYrlsaTntJrjgIInXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGlmIChzdGF0ZWxlbSkge1xuXHRcdFx0XHRcdHN0YXRlbGVtLmVycm9yKG1lc3NhZ2UpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZvaWQgbXcubm90aWZ5KG1lc3NhZ2UsIHtcblx0XHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHRcdHRhZzogJ3R3aW5rbGV3YXJuJyxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRlIHx8PSBuZXcgRGF0ZSgpO1xuXHRcdFx0XHRjb25zdCBhdXRvVGltZW91dCA9IG5ldyBNb3JlYml0cy5kYXRlKGxhdGVzdC5kYXRlLmdldFRpbWUoKSkuYWRkKFxuXHRcdFx0XHRcdE51bWJlci5wYXJzZUludChUd2lua2xlLmdldFByZWYoJ2F1dG9sZXZlbFN0YWxlRGF5cycpLCAxMCksXG5cdFx0XHRcdFx0J2RheSdcblx0XHRcdFx0KTtcblx0XHRcdFx0aWYgKGF1dG9UaW1lb3V0LmlzQWZ0ZXIoZGF0ZSkpIHtcblx0XHRcdFx0XHRpZiAobGV2ZWwgPT09IDIpIHtcblx0XHRcdFx0XHRcdGxldmVsID0gMjtcblx0XHRcdFx0XHRcdC8vIEJhc2ljYWxseSBpbmRpY2F0ZXMgd2hldGhlciB3ZSdyZSBpbiB0aGUgZmluYWwgTWFpbiBldmFsdWF0aW9uIG9yIG5vdCxcblx0XHRcdFx0XHRcdC8vIGFuZCB0aHVzIHdoZXRoZXIgd2UgY2FuIGNvbnRpbnVlIG9yIG5lZWQgdG8gZGlzcGxheSB0aGUgd2FybmluZyBhbmQgbGlua1xuXHRcdFx0XHRcdFx0aWYgKCFzdGF0ZWxlbSkge1xuXHRcdFx0XHRcdFx0XHRjb25zdCAkbGluayA9ICQoJzxhPicpXG5cdFx0XHRcdFx0XHRcdFx0LmF0dHIoJ2hyZWYnLCAnIycpXG5cdFx0XHRcdFx0XHRcdFx0LnRleHQod2luZG93LndnVUxTKCfljZXlh7vmraTlpITmiZPlvIDlkYrnirblt6XlhbcnLCAn6bue5pOK5q2k6JmV5omT6ZaL5ZGK54uA5bel5YW3JykpXG5cdFx0XHRcdFx0XHRcdFx0LmNzcygnZm9udC13ZWlnaHQnLCAnYm9sZCcpXG5cdFx0XHRcdFx0XHRcdFx0Lm9uKCdjbGljaycsICgpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLnJlZGlyZWN0ID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0XHRcdFR3aW5rbGUud2Fybi5kaWFsb2cuY2xvc2UoKTtcblx0XHRcdFx0XHRcdFx0XHRcdFR3aW5rbGUuYXJ2LmNhbGxiYWNrKHJlbGV2YW50VXNlck5hbWUpO1xuXHRcdFx0XHRcdFx0XHRcdFx0JGJvZHkuZmluZCgnaW5wdXRbbmFtZT1wYWdlXScpLnZhbChwYXJhbXMuYXJ0aWNsZSk7IC8vIFRhcmdldCBwYWdlXG5cdFx0XHRcdFx0XHRcdFx0XHQkYm9keS5maW5kKCdpbnB1dFt2YWx1ZT1maW5hbF0nKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7IC8vIFZhbmRhbGlzbSBhZnRlciBmaW5hbFxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IHN0YXR1c05vZGUgPSAkKCc8ZGl2PicpXG5cdFx0XHRcdFx0XHRcdFx0LmNzcygnY29sb3InLCAnI2YwMCcpXG5cdFx0XHRcdFx0XHRcdFx0LnRleHQoXG5cdFx0XHRcdFx0XHRcdFx0XHRyZWxldmFudFVzZXJOYW1lICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfmnIDlkI7mlLbliLDkuobkuIDkuKrlsYLnuqcy6K2m5ZGK77yIJywgJ+acgOW+jOaUtuWIsOS6huS4gOWAi+WxpOe0mjLorablkYrvvIgnKSArXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxhdGVzdC50eXBlICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCfvvInvvIzmiYDku6XlsIblhbbmiqXlkYrnu5nnrqHnkIbkurrlkZjkvJrmr5TovoPlpb3vvJsnLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCfvvInvvIzmiYDku6XlsIflhbbloLHlkYrntabnrqHnkIbkurrlk6HmnIPmr5TovIPlpb3vvJsnXG5cdFx0XHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRzdGF0dXNOb2RlLmFwcGVuZCgkbGlua1swXSk7XG5cdFx0XHRcdFx0XHRcdCRhdXRvbGV2ZWxNZXNzYWdlLmFwcGVuZChzdGF0dXNOb2RlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ly8gQXV0b21hdGljYWxseSBpbmNyZWFzZSBzZXZlcml0eVxuXHRcdFx0XHRcdFx0bGV2ZWwgKz0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gUmVzZXQgd2FybmluZyBsZXZlbCBpZiBtb3N0LXJlY2VudCB3YXJuaW5nIGlzIHRvbyBvbGRcblx0XHRcdFx0XHRsZXZlbCA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdCRhdXRvbGV2ZWxNZXNzYWdlLnByZXBlbmQoXG5cdFx0XHRcdCQoXG5cdFx0XHRcdFx0YDxkaXY+JHt3aW5kb3cud2dVTFMoJ+WwhuWPkemAgScsICflsIfnmbzpgIEnKX08c3BhbiBzdHlsZT1cImZvbnQtd2VpZ2h0OiBib2xkO1wiPiR7d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+Wxgue6pycsXG5cdFx0XHRcdFx0XHQn5bGk57SaJ1xuXHRcdFx0XHRcdCl9JHtsZXZlbH08L3NwYW4+6K2m5ZGK5qih5p2/44CCPC9kaXY+YFxuXHRcdFx0XHQpXG5cdFx0XHQpO1xuXHRcdFx0Ly8gUGxhY2UgYWZ0ZXIgdGhlIHN0YWxlIGFuZCBvdGhlci11c2VyLXJldmVydGVkICh0ZXh0LW9ubHkpIG1lc3NhZ2VzXG5cdFx0XHQkYm9keS5maW5kKCcjdHdpbmtsZS13YXJuLWF1dG9sZXZlbC1tZXNzYWdlJykucmVtb3ZlKCk7IC8vIGNsZWFuIHNsYXRlXG5cdFx0XHQkYXV0b2xldmVsTWVzc2FnZS5pbnNlcnRBZnRlcigkYm9keS5maW5kKCcjdHdpbmtsZS13YXJuLXdhcm5pbmctbWVzc2FnZXMnKSk7XG5cdFx0XHRsZXQgdGVtcGxhdGUgPSBwYXJhbXMuc3ViX2dyb3VwLnJlcGxhY2UoLyguKilcXGQkLywgJyQxJyk7XG5cdFx0XHQvLyBWYWxpZGF0ZSB3YXJuaW5nIGxldmVsLCBmYWxsaW5nIGJhY2sgdG8gdGhlIHV3LWdlbmVyaWMgc2VyaWVzLlxuXHRcdFx0Ly8gT25seSBhIGZldyBpdGVtcyBhcmUgbWlzc2luZyBhIGxldmVsLCBhbmQgaW4gYWxsIGJ1dCBhIGhhbmRmdWxcblx0XHRcdC8vIG9mIGNhc2VzLCB0aGUgdXctZ2VuZXJpYyBzZXJpZXMgaXMgZXhwbGljaXRseSB1c2VkIGVsc2V3aGVyZS5cblx0XHRcdGlmIChwYXJhbXMubWVzc2FnZURhdGEgJiYgIXBhcmFtcy5tZXNzYWdlRGF0YVtgbGV2ZWwke2xldmVsfWBdKSB7XG5cdFx0XHRcdHRlbXBsYXRlID0gJ3V3LWdlbmVyaWMnO1xuXHRcdFx0fVxuXHRcdFx0dGVtcGxhdGUgKz0gbGV2ZWw7XG5cdFx0XHRyZXR1cm4gW3RlbXBsYXRlLCBsZXZlbF07XG5cdFx0fSxcblx0XHRtYWluOiAocGFnZW9iaikgPT4ge1xuXHRcdFx0Y29uc3QgdGV4dCA9IHBhZ2VvYmouZ2V0UGFnZVRleHQoKTtcblx0XHRcdGNvbnN0IHN0YXRlbGVtID0gcGFnZW9iai5nZXRTdGF0dXNFbGVtZW50KCk7XG5cdFx0XHRjb25zdCBwYXJhbXMgPSBwYWdlb2JqLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0bGV0IHttZXNzYWdlRGF0YX0gPSBwYXJhbXM7XG5cdFx0XHRjb25zdCB3YXJuaW5nSGlzdG9yeSA9IFR3aW5rbGUud2Fybi5jYWxsYmFja3MuZGF0ZVByb2Nlc3NpbmcodGV4dCk7XG5cdFx0XHRjb25zdCBbbGF0ZXN0LCBoaXN0b3J5XSA9IHdhcm5pbmdIaXN0b3J5O1xuXHRcdFx0Y29uc3Qgbm93ID0gbmV3IE1vcmViaXRzLmRhdGUocGFnZW9iai5nZXRMb2FkVGltZSgpKTtcblx0XHRcdFR3aW5rbGUud2Fybi50YWxrcGFnZU9iaiA9IHBhZ2VvYmo7IC8vIFVwZGF0ZSB0YWxrcGFnZU9iaiwganVzdCBpbiBjYXNlXG5cdFx0XHRpZiAocGFyYW1zLm1haW5fZ3JvdXAgPT09ICdhdXRvbGV2ZWwnKSB7XG5cdFx0XHRcdC8vIFt0ZW1wbGF0ZSwgbGV2ZWxdXG5cdFx0XHRcdGNvbnN0IHRlbXBsYXRlQW5kTGV2ZWwgPSBUd2lua2xlLndhcm4uY2FsbGJhY2tzLmF1dG9sZXZlbFBhcnNlV2lraXRleHQoXG5cdFx0XHRcdFx0dGV4dCxcblx0XHRcdFx0XHRwYXJhbXMsXG5cdFx0XHRcdFx0bGF0ZXN0LFxuXHRcdFx0XHRcdG5vdyxcblx0XHRcdFx0XHRzdGF0ZWxlbVxuXHRcdFx0XHQpO1xuXHRcdFx0XHQvLyBPbmx5IGlmIHRoZXJlJ3MgYSBjaGFuZ2UgZnJvbSB0aGUgcHJpb3IgZGlzcGxheS9sb2FkXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRwYXJhbXMuc3ViX2dyb3VwICE9PSB0ZW1wbGF0ZUFuZExldmVsWzBdICYmXG5cdFx0XHRcdFx0IWNvbmZpcm0oXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WwhuWPkemAgee7meeUqOaIt3t7JywgJ+Wwh+eZvOmAgee1puS9v+eUqOiAhXt7JykgK1xuXHRcdFx0XHRcdFx0XHR0ZW1wbGF0ZUFuZExldmVsWzBdICtcblx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCd9feaooeadv++8jOWlveWQl++8nycsICd9feaooeadv++8jOWlveWXju+8nycpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRzdGF0ZWxlbS5lcnJvcih3aW5kb3cud2dVTFMoJ+eUqOaIt+WPlua2iCcsICfkvb/nlKjogIXlj5bmtognKSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIFVwZGF0ZSBwYXJhbXMgbm93IHRoYXQgd2UndmUgc2VsZWN0ZWQgYSB3YXJuaW5nXG5cdFx0XHRcdFtwYXJhbXMuc3ViX2dyb3VwXSA9IHRlbXBsYXRlQW5kTGV2ZWw7XG5cdFx0XHRcdG1lc3NhZ2VEYXRhID0gcGFyYW1zLm1lc3NhZ2VEYXRhW2BsZXZlbCR7dGVtcGxhdGVBbmRMZXZlbFsxXX1gXTtcblx0XHRcdH0gZWxzZSBpZiAoXG5cdFx0XHRcdHBhcmFtcy5zdWJfZ3JvdXAgaW4gaGlzdG9yeSAmJlxuXHRcdFx0XHRuZXcgTW9yZWJpdHMuZGF0ZShoaXN0b3J5W3BhcmFtcy5zdWJfZ3JvdXBdKS5hZGQoMSwgJ2RheScpLmlzQWZ0ZXIobm93KSAmJlxuXHRcdFx0XHQhY29uZmlybShcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+i/kTI05bCP5pe25YaF5LiA5Liq5ZCM5qC355qEICcsICfov5EyNOWwj+aZguWFp+S4gOWAi+WQjOaoo+eahCAnKSArXG5cdFx0XHRcdFx0XHRwYXJhbXMuc3ViX2dyb3VwICtcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygnIOaooeadv+W3suiiq+WPkeWHuuOAglxcbuaYr+WQpue7p+e7re+8nycsICcg5qih5p2/5bey6KKr55m85Ye644CCXFxu5piv5ZCm57m857qM77yfJylcblx0XHRcdFx0KVxuXHRcdFx0KSB7XG5cdFx0XHRcdHN0YXRlbGVtLmVycm9yKHdpbmRvdy53Z1VMUygn55So5oi35Y+W5raIJywgJ+S9v+eUqOiAheWPlua2iCcpKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0bGF0ZXN0LmRhdGUuYWRkKDEsICdtaW51dGUnKTsgLy8gYWZ0ZXIgbG9uZyBkZWJhdGUsIG9uZSBtaW51dGUgaXMgbWF4XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGxhdGVzdC5kYXRlLmlzQWZ0ZXIobm93KSAmJlxuXHRcdFx0XHQhY29uZmlybShcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+i/kTHliIbpkp/lhoUgJywgJ+i/kTHliIbpkJjlhacgJykgK1xuXHRcdFx0XHRcdFx0bGF0ZXN0LnR5cGUgK1xuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCcg5qih5p2/5bey6KKr5Y+R5Ye644CCXFxu5piv5ZCm57un57ut77yfJywgJyDmqKHmnb/lt7Looqvnmbzlh7rjgIJcXG7mmK/lkKbnubznuozvvJ8nKVxuXHRcdFx0XHQpXG5cdFx0XHQpIHtcblx0XHRcdFx0c3RhdGVsZW0uZXJyb3Iod2luZG93LndnVUxTKCfnlKjmiLflj5bmtognLCAn5L2/55So6ICF5Y+W5raIJykpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHQvLyBidWlsZCB0aGUgZWRpdCBzdW1tYXJ5XG5cdFx0XHQvLyBGdW5jdGlvbiB0byBoYW5kbGUgZ2VuZXJhdGlvbiBvZiBzdW1tYXJ5IHByZWZpeCBmb3IgY3VzdG9tIHRlbXBsYXRlc1xuXHRcdFx0Y29uc3QgY3VzdG9tUHJvY2VzcyA9ICh0ZW1wbGF0ZSkgPT4ge1xuXHRcdFx0XHRbdGVtcGxhdGVdID0gdGVtcGxhdGUuc3BsaXQoJ3wnKTtcblx0XHRcdFx0bGV0IHByZWZpeDtcblx0XHRcdFx0c3dpdGNoICh0ZW1wbGF0ZS5zbGljZSgtMSkpIHtcblx0XHRcdFx0XHRjYXNlICcxJzpcblx0XHRcdFx0XHRcdHByZWZpeCA9ICfms6jmhI8nO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnMic6XG5cdFx0XHRcdFx0XHRwcmVmaXggPSAn6K2m5ZGKJztcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdC8vIGZhbGxzIHRocm91Z2hcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0cHJlZml4ID0gJ+aPkOmGkic7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gYCR7cHJlZml4fe+8miR7TW9yZWJpdHMuc3RyaW5nLnRvVXBwZXJDYXNlRmlyc3RDaGFyKG1lc3NhZ2VEYXRhLmxhYmVsKX1gO1xuXHRcdFx0fTtcblx0XHRcdGxldCBzdW1tYXJ5O1xuXHRcdFx0aWYgKHBhcmFtcy5tYWluX2dyb3VwID09PSAnY3VzdG9tJykge1xuXHRcdFx0XHRzdW1tYXJ5ID0gY3VzdG9tUHJvY2VzcyhwYXJhbXMuc3ViX2dyb3VwKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIE5vcm1hbGl6ZSBraXRjaGVuc2luayB0byB0aGUgMS0yIHN0eWxlXG5cdFx0XHRcdGlmIChwYXJhbXMubWFpbl9ncm91cCA9PT0gJ2tpdGNoZW5zaW5rJyAmJiAhL15EKyQvLnRlc3QocGFyYW1zLnN1Yl9ncm91cCkpIHtcblx0XHRcdFx0XHRsZXQgc3ViID0gcGFyYW1zLnN1Yl9ncm91cC5zbGljZSgtMSk7XG5cdFx0XHRcdFx0aWYgKHN1YiA9PT0gJ20nKSB7XG5cdFx0XHRcdFx0XHRzdWIgPSBwYXJhbXMuc3ViX2dyb3VwLnNsaWNlKC0zKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qgb3ZlcndyaXRlIHV3LTNyciwgdGVjaG5pY2FsbHkgdW5uZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoL1xcZC8udGVzdChzdWIpKSB7XG5cdFx0XHRcdFx0XHRwYXJhbXMubWFpbl9ncm91cCA9IGBsZXZlbCR7c3VifWA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIHNpbmdsZXQgfHwgbGV2ZWwxLTIsIG5vIG5lZWQgdG8gL15cXEQrJC8udGVzdChwYXJhbXMubWFpbl9ncm91cClcblx0XHRcdFx0c3VtbWFyeSA9XG5cdFx0XHRcdFx0bWVzc2FnZURhdGEuc3VtbWFyeSB8fCAobWVzc2FnZURhdGFbcGFyYW1zLm1haW5fZ3JvdXBdICYmIG1lc3NhZ2VEYXRhW3BhcmFtcy5tYWluX2dyb3VwXS5zdW1tYXJ5KTtcblx0XHRcdFx0Ly8gTm90IGluIFR3aW5rbGUud2Fybi5tZXNzYWdlcywgYXNzdW1lIGN1c3RvbSB0ZW1wbGF0ZVxuXHRcdFx0XHRzdW1tYXJ5IHx8PSBjdXN0b21Qcm9jZXNzKHBhcmFtcy5zdWJfZ3JvdXApO1xuXHRcdFx0XHRpZiAobWVzc2FnZURhdGEuc3VwcHJlc3NBcnRpY2xlSW5TdW1tYXJ5ICE9PSB0cnVlICYmIHBhcmFtcy5hcnRpY2xlKSB7XG5cdFx0XHRcdFx0aWYgKHBhcmFtcy5zdWJfZ3JvdXAgPT09ICd1dy1haXYnKSB7XG5cdFx0XHRcdFx0XHQvLyB0aGVzZSB0ZW1wbGF0ZXMgcmVxdWlyZSBhIHVzZXJuYW1lXG5cdFx0XHRcdFx0XHRzdW1tYXJ5ICs9IGDvvIgke3dpbmRvdy53Z1VMUygn5a+55LqOJywgJ+WwjeaWvCcpfVtbVXNlcjoke3BhcmFtcy5hcnRpY2xlfV1d77yJYDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHBhcmFtcy5zdWJfZ3JvdXAgPT09ICd1dy1iaXRlJykge1xuXHRcdFx0XHRcdFx0Ly8gdGhpcyB0ZW1wbGF0ZSByZXF1aXJlcyBhIHVzZXJuYW1lXG5cdFx0XHRcdFx0XHRzdW1tYXJ5ICs9IGDvvIwke3dpbmRvdy53Z1VMUygn5LqOJywgJ+aWvCcpfVtbVXNlciB0YWxrOiR7cGFyYW1zLmFydGljbGV9XV1gO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzdW1tYXJ5ICs9IGAke3dpbmRvdy53Z1VMUygn77yM5LqOW1snLCAn77yM5pa8W1snKSArIHBhcmFtcy5hcnRpY2xlfV1dYDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHBhZ2VvYmouc2V0RWRpdFN1bW1hcnkoc3VtbWFyeSk7XG5cdFx0XHRwYWdlb2JqLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdHBhZ2VvYmouc2V0V2F0Y2hsaXN0KFR3aW5rbGUuZ2V0UHJlZignd2F0Y2hXYXJuaW5ncycpKTtcblx0XHRcdC8vIEdldCBhY3R1YWwgd2FybmluZyB0ZXh0XG5cdFx0XHRjb25zdCB3YXJuaW5nVGV4dCA9IFR3aW5rbGUud2Fybi5jYWxsYmFja3MuZ2V0V2FybmluZ1dpa2l0ZXh0KFxuXHRcdFx0XHRwYXJhbXMuc3ViX2dyb3VwLFxuXHRcdFx0XHRwYXJhbXMuYXJ0aWNsZSxcblx0XHRcdFx0cGFyYW1zLnJlYXNvbixcblx0XHRcdFx0cGFyYW1zLm1haW5fZ3JvdXAgPT09ICdjdXN0b20nXG5cdFx0XHQpO1xuXHRcdFx0bGV0IHNlY3Rpb25FeGlzdHMgPSBmYWxzZTtcblx0XHRcdGxldCBzZWN0aW9uTnVtYmVyID0gMDtcblx0XHRcdC8vIE9ubHkgY2hlY2sgc2VjdGlvbnMgaWYgdGhlcmUgYXJlIHNlY3Rpb25zIG9yIHRoZXJlJ3MgYSBjaGFuY2Ugd2Ugd29uJ3QgY3JlYXRlIG91ciBvd25cblx0XHRcdGlmICghbWVzc2FnZURhdGEuaGVhZGluZyAmJiB0ZXh0Lmxlbmd0aCkge1xuXHRcdFx0XHQvLyBHZXQgYWxsIHNlY3Rpb25zXG5cdFx0XHRcdGNvbnN0IHNlY3Rpb25zID0gdGV4dC5tYXRjaCgvXig9PSopLitcXDEvZ20pO1xuXHRcdFx0XHRpZiAoc2VjdGlvbnMgJiYgc2VjdGlvbnMubGVuZ3RoICE9PSAwKSB7XG5cdFx0XHRcdFx0Ly8gRmluZCB0aGUgaW5kZXggb2YgdGhlIHNlY3Rpb24gaGVhZGVyIGluIHF1ZXN0aW9uXG5cdFx0XHRcdFx0Y29uc3QgZGF0ZUhlYWRlclJlZ2V4ID0gbm93Lm1vbnRoSGVhZGVyUmVnZXgoKTtcblx0XHRcdFx0XHRzZWN0aW9uTnVtYmVyID0gMDtcblx0XHRcdFx0XHQvLyBGaW5kIHRoaXMgbW9udGgncyBzZWN0aW9uIGFtb25nIEwyIHNlY3Rpb25zLCBwcmVmZXJyaW5nIHRoZSBib3R0b20tbW9zdFxuXHRcdFx0XHRcdHNlY3Rpb25FeGlzdHMgPSBzZWN0aW9ucy5yZXZlcnNlKCkuc29tZSgoc2VjLCBpZHgpID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiAoXG5cdFx0XHRcdFx0XHRcdC9eKD09KVtePV0uK1xcMS9tLnRlc3Qoc2VjKSAmJlxuXHRcdFx0XHRcdFx0XHRkYXRlSGVhZGVyUmVnZXgudGVzdChzZWMpICYmXG5cdFx0XHRcdFx0XHRcdHR5cGVvZiAoc2VjdGlvbk51bWJlciA9IHNlY3Rpb25zLmxlbmd0aCAtIDEgLSBpZHgpID09PSAnbnVtYmVyJ1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKHNlY3Rpb25FeGlzdHMpIHtcblx0XHRcdFx0Ly8gYXBwZW5kIHRvIGV4aXN0aW5nIHNlY3Rpb25cblx0XHRcdFx0cGFnZW9iai5zZXRQYWdlU2VjdGlvbihzZWN0aW9uTnVtYmVyICsgMSk7XG5cdFx0XHRcdHBhZ2VvYmouc2V0QXBwZW5kVGV4dChgXFxuXFxuJHt3YXJuaW5nVGV4dH1gKTtcblx0XHRcdFx0cGFnZW9iai5hcHBlbmQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChtZXNzYWdlRGF0YS5oZWFkaW5nKSB7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIG5ldyBzZWN0aW9uXG5cdFx0XHRcdFx0cGFnZW9iai5zZXROZXdTZWN0aW9uVGl0bGUobWVzc2FnZURhdGEuaGVhZGluZyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluZm8oXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+S/oeaBrycsICfos4foqIonKSxcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5pyq5om+5Yiw5b2T5pyI55qE5LqM57qn5qCH6aKY77yM5bCG5Yib5bu65paw55qEJywgJ+acquaJvuWIsOeVtuaciOeahOS6jOe0muaomemhjO+8jOWwh+W7uueri+aWsOeahCcpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRwYWdlb2JqLnNldE5ld1NlY3Rpb25UaXRsZShub3cubW9udGhIZWFkZXIoMCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHBhZ2VvYmouc2V0TmV3U2VjdGlvblRleHQod2FybmluZ1RleHQpO1xuXHRcdFx0XHRwYWdlb2JqLm5ld1NlY3Rpb24oKTtcblx0XHRcdH1cblx0XHR9LFxuXHR9O1xuXHRUd2lua2xlLndhcm4uY2FsbGJhY2suZXZhbHVhdGUgPSAoZSkgPT4ge1xuXHRcdGNvbnN0IHVzZXJUYWxrUGFnZSA9IGBVc2VyX3RhbGs6JHtyZWxldmFudFVzZXJOYW1lfWA7XG5cdFx0Ly8gcmVhc29uLCBtYWluX2dyb3VwLCBzdWJfZ3JvdXAsIGFydGljbGVcblx0XHRjb25zdCBwYXJhbXMgPSBNb3JlYml0cy5xdWlja0Zvcm0uZ2V0SW5wdXREYXRhKGUudGFyZ2V0KTtcblx0XHRpZiAocGFyYW1zLmFydGljbGUpIHtcblx0XHRcdGlmICgvaHR0cHM/OlxcL1xcLy8udGVzdChwYXJhbXMuYXJ0aWNsZSkpIHtcblx0XHRcdFx0dm9pZCBtdy5ub3RpZnkod2luZG93LndnVUxTKCfigJzpobXpnaLpk77mjqXigJ3kuI3og73kvb/nlKjnvZHlnYDjgIInLCAn44CM6aCB6Z2i6YCj57WQ44CN5LiN6IO95L2/55So57ay5Z2A44CCJyksIHtcblx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0dGFnOiAnd2FybicsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCBhcnRpY2xlID0gbmV3IG13LlRpdGxlKHBhcmFtcy5hcnRpY2xlKTtcblx0XHRcdFx0cGFyYW1zLmFydGljbGUgPSBhcnRpY2xlLmdldFByZWZpeGVkVGV4dCgpO1xuXHRcdFx0XHRpZiAoYXJ0aWNsZS5nZXRGcmFnbWVudCgpKSB7XG5cdFx0XHRcdFx0cGFyYW1zLmFydGljbGUgKz0gYCMke2FydGljbGUuZ2V0RnJhZ21lbnQoKX1gO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIHtcblx0XHRcdFx0YWxlcnQoXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+KAnOmhtemdoumTvuaOpeKAneS4jeWQiOazle+8jOS7heiDvei+k+WFpeS4gOS4qumhtemdouWQjeensO+8jOWLv+S9v+eUqOe9keWdgOOAgVtbIF1d77yM5Y+v5L2/55SoU3BlY2lhbDpEaWZm44CCJyxcblx0XHRcdFx0XHRcdCfjgIzpoIHpnaLpgKPntZDjgI3kuI3lkIjms5XvvIzlg4Xog73ovLjlhaXkuIDlgIvpoIHpnaLlkI3nqLHvvIzli7/kvb/nlKjntrLlnYDjgIFbWyBdXe+8jOWPr+S9v+eUqFNwZWNpYWw6RGlmZuOAgidcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gVGhlIGF1dG9sZXZlbCBvcHRpb24gd2lsbCBhbHJlYWR5IGtub3cgYnkgbm93IGlmIGEgdXNlciB0YWxrIHBhZ2Vcblx0XHQvLyBpcyBhIGNyb3NzLW5hbWVzcGFjZSByZWRpcmVjdCAodmlhICEhVHdpbmtsZS53YXJuLnRhbGtwYWdlT2JqKSwgc29cblx0XHQvLyB0ZWNobmljYWxseSB3ZSBjb3VsZCBhbGVydCBhbiBlcnJvciBoZXJlLCBidXQgdGhlIHVzZXIgd2lsbCBoYXZlXG5cdFx0Ly8gYWxyZWFkeSBpZ25vcmVkIHRoZSBib2xkIHJlZCBlcnJvciBhYm92ZS4gTW9yZW92ZXIsIHRoZXkgcHJvYmFibHlcblx0XHQvLyAqZG9uJ3QqIHdhbnQgdG8gYWN0dWFsbHkgaXNzdWUgYSB3YXJuaW5nLCBzbyB0aGUgZXJyb3IgaGFuZGxpbmdcblx0XHQvLyBhZnRlciB0aGUgZm9ybSBpcyBzdWJtaXR0ZWQgaXMgcHJvYmFibHkgcHJlZmVyYWJsZVxuXHRcdC8vIEZpbmQgdGhlIHNlbGVjdGVkIDxvcHRpb24+IGVsZW1lbnQgc28gd2UgY2FuIGZldGNoIHRoZSBkYXRhIHN0cnVjdHVyZVxuXHRcdGNvbnN0ICRzZWxlY3RlZEVsID0gJChlLnRhcmdldC5zdWJfZ3JvdXApLmZpbmQoYG9wdGlvblt2YWx1ZT1cIiR7JChlLnRhcmdldC5zdWJfZ3JvdXApLnZhbCgpfVwiXWApO1xuXHRcdHBhcmFtcy5tZXNzYWdlRGF0YSA9ICRzZWxlY3RlZEVsLmRhdGEoJ21lc3NhZ2VEYXRhJyk7XG5cdFx0aWYgKHBhcmFtcy5tZXNzYWdlRGF0YSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR2b2lkIG13Lm5vdGlmeSh3aW5kb3cud2dVTFMoJ+ivt+mAieaLqeitpuWRiuaooeadv+OAgicsICfoq4vpgbjmk4forablkYrmqKHmnb/jgIInKSwge1xuXHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdHRhZzogJ3dhcm4nLFxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdE1vcmViaXRzLnNpbXBsZVdpbmRvdy5zZXRCdXR0b25zRW5hYmxlZChmYWxzZSk7XG5cdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoZS50YXJnZXQpO1xuXHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLnJlZGlyZWN0ID0gdXNlclRhbGtQYWdlO1xuXHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLm5vdGljZSA9IHdpbmRvdy53Z1VMUygn6K2m5ZGK5a6M5oiQ77yM5bCG5Zyo5Yeg56eS5ZCO5Yi35pawJywgJ+itpuWRiuWujOaIkO+8jOWwh+WcqOW5vuenkuW+jOmHjeaWsOaVtOeQhicpO1xuXHRcdGNvbnN0IHlzYXJjaGl2ZXNfcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHR1c2VyVGFsa1BhZ2UsXG5cdFx0XHR3aW5kb3cud2dVTFMoJ+eUqOaIt+iuqOiuuumhteS/ruaUuScsICfkvb/nlKjogIXoqI7oq5bpoIHkv67mlLknKVxuXHRcdCk7XG5cdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYXJhbXMpO1xuXHRcdHlzYXJjaGl2ZXNfcGFnZS5zZXRGb2xsb3dSZWRpcmVjdCh0cnVlLCBmYWxzZSk7XG5cdFx0eXNhcmNoaXZlc19wYWdlLmxvYWQoVHdpbmtsZS53YXJuLmNhbGxiYWNrcy5tYWluKTtcblx0fTtcblx0VHdpbmtsZS5hZGRJbml0Q2FsbGJhY2soVHdpbmtsZS53YXJuLCAnd2FybicpO1xufSkoalF1ZXJ5KTtcblxuZXhwb3J0IHt9O1xuIiwgIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQge2FwaX0gZnJvbSAnLi9hcGknO1xuaW1wb3J0IHtnZW5lcmF0ZUFycmF5fSBmcm9tICdleHQuZ2FkZ2V0LlV0aWwnO1xuXG4vKiEgVHdpbmtsZS5qcyAtIHR3aW5rbGVibG9jay5qcyAqL1xuKGZ1bmN0aW9uIHR3aW5rbGVibG9jaygkKSB7XG5cdGNvbnN0ICRib2R5ID0gJCgnYm9keScpO1xuXHRsZXQgcmVsZXZhbnRVc2VyTmFtZTtcblx0bGV0IGJsb2NrZWRVc2VyTmFtZTtcblx0Y29uc3QgbWVudUZvcm1hdHRlZE5hbWVzcGFjZXMgPSB7XG5cdFx0Li4ubXcuY29uZmlnLmdldCgnd2dGb3JtYXR0ZWROYW1lc3BhY2VzJyksXG5cdH07XG5cdG1lbnVGb3JtYXR0ZWROYW1lc3BhY2VzWzBdID0gd2luZG93LndnVUxTKCfvvIjmnaHnm67vvIknLCAn77yI5qKd55uu77yJJyk7XG5cdGNvbnN0IGJsb2NrQWN0aW9uVGV4dCA9IHtcblx0XHRibG9jazogd2luZG93LndnVUxTKCflsIHnpoEnLCAn5bCB6Y6WJyksXG5cdFx0cmVibG9jazogd2luZG93LndnVUxTKCfph43mlrDlsIHnpoEnLCAn6YeN5paw5bCB6Y6WJyksXG5cdFx0dW5ibG9jazogd2luZG93LndnVUxTKCfop6PpmaTlsIHnpoEnLCAn6Kej6Zmk5bCB6Y6WJyksXG5cdH07XG5cdC8qKlxuXHQgKiB0d2lua2xlYmxvY2suanM6IEJsb2NrIG1vZHVsZVxuXHQgKiBNb2RlIG9mIGludm9jYXRpb246IFRhYiAoXCJCbG9ja1wiKVxuXHQgKiBBY3RpdmUgb246IEFueSBwYWdlIHdpdGggcmVsZXZhbnQgdXNlciBuYW1lICh1c2Vyc3BhY2UsIGNvbnRyaWJzLCBldGMuKVxuXHQgKi9cblx0VHdpbmtsZS5ibG9jayA9ICgpID0+IHtcblx0XHRyZWxldmFudFVzZXJOYW1lID0gbXcuY29uZmlnLmdldCgnd2dSZWxldmFudFVzZXJOYW1lJyk7XG5cdFx0Ly8gc2hvdWxkIHNob3cgb24gQ29udHJpYnV0aW9ucyBvciBCbG9jayBwYWdlcywgYW55d2hlcmUgdGhlcmUncyBhIHJlbGV2YW50IHVzZXJcblx0XHQvLyBJZ25vcmUgcmFuZ2VzIHdpZGVyIHRoYW4gdGhlIENJRFIgbGltaXRcblx0XHQvLyBFbmFibGUgZm9yIG5vbi1hZG1pbnNcblx0XHRpZiAoXG5cdFx0XHQoTW9yZWJpdHMudXNlcklzU3lzb3AgfHwgIW13LnV0aWwuaXNJUEFkZHJlc3MocmVsZXZhbnRVc2VyTmFtZSwgdHJ1ZSkpICYmXG5cdFx0XHRyZWxldmFudFVzZXJOYW1lICYmXG5cdFx0XHQoIU1vcmViaXRzLmlwLmlzUmFuZ2UocmVsZXZhbnRVc2VyTmFtZSkgfHwgTW9yZWJpdHMuaXAudmFsaWRDSURSKHJlbGV2YW50VXNlck5hbWUpKVxuXHRcdCkge1xuXHRcdFx0VHdpbmtsZS5hZGRQb3J0bGV0TGluayhcblx0XHRcdFx0VHdpbmtsZS5ibG9jay5jYWxsYmFjayxcblx0XHRcdFx0d2luZG93LndnVUxTKCflsIHnpoEnLCAn5bCB6Y6WJyksXG5cdFx0XHRcdCd0dy1ibG9jaycsXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn5bCB56aB55u45YWz55So5oi3JywgJ+WwgemOluebuOmXnOS9v+eUqOiAhScpXG5cdFx0XHQpO1xuXHRcdH1cblx0fTtcblx0VHdpbmtsZS5ibG9jay5jYWxsYmFjayA9ICgpID0+IHtcblx0XHRpZiAoXG5cdFx0XHRyZWxldmFudFVzZXJOYW1lID09PSBtdy5jb25maWcuZ2V0KCd3Z1VzZXJOYW1lJykgJiZcblx0XHRcdCFjb25maXJtKFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0J+aCqOWNs+WwhuWvueiHquW3seaJp+ihjOWwgeemgeebuOWFs+aTjeS9nO+8geehruiupOimgee7p+e7reWQl++8nycsXG5cdFx0XHRcdFx0J+aCqOWNs+Wwh+WwjeiHquW3seWft+ihjOWwgemOluebuOmXnOaTjeS9nO+8geeiuuiqjeimgee5vOe6jOWXju+8nydcblx0XHRcdFx0KVxuXHRcdFx0KVxuXHRcdCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRUd2lua2xlLmJsb2NrLmN1cnJlbnRCbG9ja0luZm8gPSB1bmRlZmluZWQ7XG5cdFx0VHdpbmtsZS5ibG9jay5maWVsZF9ibG9ja19vcHRpb25zID0ge307XG5cdFx0VHdpbmtsZS5ibG9jay5maWVsZF90ZW1wbGF0ZV9vcHRpb25zID0ge307XG5cdFx0Y29uc3QgV2luZG93ID0gbmV3IE1vcmViaXRzLnNpbXBsZVdpbmRvdyg2NTAsIDUzMCk7XG5cdFx0Ly8gbmVlZCB0byBiZSB2ZXJib3NlIGFib3V0IHdobyB3ZSdyZSBibG9ja2luZ1xuXHRcdFdpbmRvdy5zZXRUaXRsZShcblx0XHRcdHdpbmRvdy53Z1VMUygn5bCB56aB5oiW5ZCRJywgJ+WwgemOluaIluWQkScpICsgcmVsZXZhbnRVc2VyTmFtZSArIHdpbmRvdy53Z1VMUygn5Y+R5Ye65bCB56aB5qih5p2/JywgJ+eZvOWHuuWwgemOluaooeadvycpXG5cdFx0KTtcblx0XHRXaW5kb3cuc2V0U2NyaXB0TmFtZSgnVHdpbmtsZScpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygn5bCB56aB5p2h5L6LJywgJ+WwgemOluaineS+iycpLCAnTElCOkJMT0NLJyk7XG5cdFx0V2luZG93LmFkZEZvb3Rlckxpbmsod2luZG93LndnVUxTKCflsIHnpoHorr7nva4nLCAn5bCB6Y6W6Kit5a6aJyksICdIOlRXL1BSRUYjYmxvY2snKTtcblx0XHRXaW5kb3cuYWRkRm9vdGVyTGluayh3aW5kb3cud2dVTFMoJ1R3aW5rbGXluK7liqknLCAnVHdpbmtsZeiqquaYjicpLCAnSDpUVy9ET0MjYmxvY2snKTtcblx0XHRjb25zdCBmb3JtID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybShUd2lua2xlLmJsb2NrLmNhbGxiYWNrLmV2YWx1YXRlKTtcblx0XHRjb25zdCBhY3Rpb25maWVsZCA9IGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmk43kvZznsbvlnosnLCAn5pON5L2c6aGe5YilJyksXG5cdFx0fSk7XG5cdFx0YWN0aW9uZmllbGQuYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRuYW1lOiAnYWN0aW9udHlwZScsXG5cdFx0XHRldmVudDogVHdpbmtsZS5ibG9jay5jYWxsYmFjay5jaGFuZ2VfYWN0aW9uLFxuXHRcdFx0bGlzdDogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bCB56aB55So5oi3JywgJ+WwgemOluS9v+eUqOiAhScpLFxuXHRcdFx0XHRcdHZhbHVlOiAnYmxvY2snLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfnlKjpgInmi6nnmoTpgInpobnlhajnq5nlsIHnpoHnm7jlhbPnlKjmiLfvvIzoi6XmnKrli77pgInpg6jliIblsIHnpoHliJnkuLrlhajnq5nlsIHnpoHjgIInLFxuXHRcdFx0XHRcdFx0J+eUqOmBuOaTh+eahOmBuOmgheWFqOermeWwgemOluebuOmXnOS9v+eUqOiAhe+8jOiLpeacquWLvumBuOmDqOWIhuWwgemOluWJh+eCuuWFqOermeWwgemOluOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGhpZGRlbjogIU1vcmViaXRzLnVzZXJJc1N5c29wLFxuXHRcdFx0XHRcdGNoZWNrZWQ6IE1vcmViaXRzLnVzZXJJc1N5c29wLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6YOo5YiG5bCB56aBJywgJ+mDqOWIhuWwgemOlicpLFxuXHRcdFx0XHRcdHZhbHVlOiAncGFydGlhbCcsXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKCflkK/nlKjpg6jliIblsIHnpoHlj4rpg6jliIblsIHnpoHmqKHmnb/jgIInLCAn5ZWf55So6YOo5YiG5bCB6Y6W5Y+K6YOo5YiG5bCB6Y6W5qih5p2/44CCJyksXG5cdFx0XHRcdFx0aGlkZGVuOiAhTW9yZWJpdHMudXNlcklzU3lzb3AsXG5cdFx0XHRcdFx0Y2hlY2tlZDogVHdpbmtsZS5nZXRQcmVmKCdkZWZhdWx0VG9QYXJ0aWFsQmxvY2tzJyksIC8vIE92ZXJyaWRkZW4gaWYgYWxyZWFkeSBibG9ja2VkXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliqDlhaXlsIHnpoHmqKHmnb/liLDnlKjmiLforqjorrrpobUnLCAn5Yqg5YWl5bCB6Y6W5qih5p2/5Yiw5L2/55So6ICF6KiO6KuW6aCBJyksXG5cdFx0XHRcdFx0dmFsdWU6ICd0ZW1wbGF0ZScsXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+iLpeaJp+ihjOWwgeemgeeahOeuoeeQhuWRmOW/mOiusOWPkeWHuuWwgeemgeaooeadv++8jOaIluS9oOWwgeemgeS6hueUqOaIt+iAjOayoeaciee7meWFtuWPkeWHuuaooeadv++8jOWImeS9oOWPr+S7peeUqOatpOadpeWPkeWHuuWQiOmAgueahOaooeadv+OAguWLvumAiemDqOWIhuWwgeemgeS7peS9v+eUqOmDqOWIhuWwgeemgeaooeadv+OAgicsXG5cdFx0XHRcdFx0XHQn6Iul5Z+36KGM5bCB6Y6W55qE566h55CG5ZOh5b+Y6KiY55m85Ye65bCB6Y6W5qih5p2/77yM5oiW5L2g5bCB6Y6W5LqG5L2/55So6ICF6ICM5rKS5pyJ57Wm5YW255m85Ye65qih5p2/77yM5YmH5L2g5Y+v5Lul55So5q2k5L6G55m85Ye65ZCI6YGp55qE5qih5p2/44CC5Yu+6YG46YOo5YiG5bCB6Y6W5Lul5L2/55So6YOo5YiG5bCB6Y6W5qih5p2/44CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0Ly8gRGlzYWxsb3cgd2hlbiB2aWV3aW5nIHRoZSBibG9jayBkaWFsb2cgb24gYW4gSVAgcmFuZ2Vcblx0XHRcdFx0XHRoaWRkZW46ICFNb3JlYml0cy51c2VySXNTeXNvcCxcblx0XHRcdFx0XHRjaGVja2VkOiBNb3JlYml0cy51c2VySXNTeXNvcCAmJiAhTW9yZWJpdHMuaXAuaXNSYW5nZShyZWxldmFudFVzZXJOYW1lKSxcblx0XHRcdFx0XHRkaXNhYmxlZDogTW9yZWJpdHMuaXAuaXNSYW5nZShyZWxldmFudFVzZXJOYW1lKSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+agh+iusOeUqOaIt+mhtScsICfmqJnoqJjkvb/nlKjogIXpoIHpnaInKSxcblx0XHRcdFx0XHR2YWx1ZTogJ3RhZycsXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+WwhueUqOaIt+mhteabv+aNouaIkOebuOWFs+eahOagh+iusOaooeadv++8jOS7hemZkOawuOS5heWwgeemgeS9v+eUqOOAgicsXG5cdFx0XHRcdFx0XHQn5bCH5L2/55So6ICF6aCB6Z2i5pu/5o+b5oiQ55u46Zec55qE5qiZ6KiY5qih5p2/77yM5YOF6ZmQ5rC45LmF5bCB6Y6W5L2/55So44CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0aGlkZGVuOiB0cnVlLFxuXHRcdFx0XHRcdGNoZWNrZWQ6ICFNb3JlYml0cy51c2VySXNTeXNvcCxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+S/neaKpOeUqOaIt+mhtScsICfkv53orbfkvb/nlKjogIXpoIHpnaInKSxcblx0XHRcdFx0XHR2YWx1ZTogJ3Byb3RlY3QnLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn5YWo5L+d5oqk55So5oi36aG177yM5LuF6ZmQ5rC45LmF5bCB56aB5L2/55So44CCJywgJ+WFqOS/neitt+S9v+eUqOiAhemggemdou+8jOWDhemZkOawuOS5heWwgemOluS9v+eUqOOAgicpLFxuXHRcdFx0XHRcdGhpZGRlbjogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+ino+mZpOWwgeemgeeUqOaItycsICfop6PpmaTlsIHpjpbkvb/nlKjogIUnKSxcblx0XHRcdFx0XHR2YWx1ZTogJ3VuYmxvY2snLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn6Kej6Zmk5bCB56aB55u45YWz55So5oi344CCJywgJ+ino+mZpOWwgemOluebuOmXnOS9v+eUqOiAheOAgicpLFxuXHRcdFx0XHRcdGhpZGRlbjogIU1vcmViaXRzLnVzZXJJc1N5c29wLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9KTtcblx0XHQvKipcblx0XHQgKiBBZGQgb3B0aW9uIGZvciBJUHY2IHJhbmdlcyBzbWFsbGVyIHRoYW4gLzY0IHRvIHVwZ3JhZGUgdG8gdGhlIDY0XG5cdFx0ICogQ0lEUi4gVGhpcyBpcyBvbmUgb2YgdGhlIGZldyBwbGFjZXMgd2hlcmUgd2Ugd2FudFxuXHRcdCAqIHdnUmVsZXZhbnRVc2VyTmFtZSBzaW5jZSB0aGlzIGRlcGVuZHMgZW50aXJlbHkgb24gdGhlIG9yaWdpbmFsIHVzZXIuXG5cdFx0ICogSW4gdGhlb3J5LCB3ZSBzaG91bGRuJ3QgdXNlIE1vcmViaXRzLmlwLmdldDY0IGhlcmUgc2luY2Ugc2luY2Ugd2Ugd2FudFxuXHRcdCAqIHRvIGV4Y2x1ZGUgZnVuY3Rpb25hbGx5LWVxdWl2YWxlbnQgLzY0cy4gIFRoYXQnZCBiZTpcblx0XHQgKiAvLyBpZiAobXcudXRpbC5pc0lQdjZBZGRyZXNzKG13LmNvbmZpZy5nZXQoJ3dnUmVsZXZhbnRVc2VyTmFtZScpLCB0cnVlKSAmJlxuXHRcdCAqIC8vIChtdy51dGlsLmlzSVB2NkFkZHJlc3MobXcuY29uZmlnLmdldCgnd2dSZWxldmFudFVzZXJOYW1lJykpIHx8IHBhcnNlSW50KG13LmNvbmZpZy5nZXQoJ3dnUmVsZXZhbnRVc2VyTmFtZScpLnJlcGxhY2UoL14oLis/KVxcLz8oXFxkezEsM30pPyQvLCAnJDInKSwgMTApID4gNjQpKSB7XG5cdFx0ICogSW4gcHJhY3RpY2UsIHRob3VnaCwgc2luY2UgZnVuY3Rpb25hbGx5LWVxdWl2YWxlbnQgcmFuZ2VzIGFyZVxuXHRcdCAqIChtaXMpdHJlYXRlZCBhcyBzZXBhcmF0ZSBieSBNZWRpYVdpa2kncyBsb2dnaW5nLFxuXHRcdCAqIHVzaW5nIE1vcmViaXRzLmlwLmdldDY0IHByb3ZpZGVzIGEgbW9kaWN1bSBvZiByZWxpZWYgaW4gdGhpc2UgY2FzZS5cblx0XHQgKi9cblx0XHRjb25zdCBzaXh0eUZvdXIgPSBNb3JlYml0cy5pcC5nZXQ2NChtdy5jb25maWcuZ2V0KCd3Z1JlbGV2YW50VXNlck5hbWUnKSk7XG5cdFx0aWYgKHNpeHR5Rm91ciAmJiBzaXh0eUZvdXIgIT09IG13LmNvbmZpZy5nZXQoJ3dnUmVsZXZhbnRVc2VyTmFtZScpKSB7XG5cdFx0XHRjb25zdCBibG9jazY0ZmllbGQgPSBmb3JtLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+i9rOaNouS4ui82NOauteWwgeemgScsICfovYnmj5vngrovNjTmrrXlsIHpjpYnKSxcblx0XHRcdFx0bmFtZTogJ2ZpZWxkXzY0Jyxcblx0XHRcdH0pO1xuXHRcdFx0YmxvY2s2NGZpZWxkLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRzdHlsZTogJ21hcmdpbi1ib3R0b206IDAuNWVtJyxcblx0XHRcdFx0bGFiZWw6IFt3Z1VMUygn55u05o6l5bCB56aBLzY05q615pyJ55uK5peg5a6z44CCJywgJ+ebtOaOpeWwgemOli82NOauteacieebiueEoeWus+OAgicpXSxcblx0XHRcdH0pO1xuXHRcdFx0YmxvY2s2NGZpZWxkLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdG5hbWU6ICdibG9jazY0Jyxcblx0XHRcdFx0ZXZlbnQ6IFR3aW5rbGUuYmxvY2suY2FsbGJhY2suY2hhbmdlX2Jsb2NrNjQsXG5cdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRjaGVja2VkOiBUd2lua2xlLmdldFByZWYoJ2RlZmF1bHRUb0Jsb2NrNjQnKSxcblx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aUueaIkOWwgeemgS82NCcsICfmlLnmiJDlsIHpjpYvNjQnKSxcblx0XHRcdFx0XHRcdHZhbHVlOiAnYmxvY2s2NCcsXG5cdFx0XHRcdFx0XHR0b29sdGlwOiBNb3JlYml0cy5pcC5pc1JhbmdlKG13LmNvbmZpZy5nZXQoJ3dnUmVsZXZhbnRVc2VyTmFtZScpKVxuXHRcdFx0XHRcdFx0XHQ/IHdpbmRvdy53Z1VMUygn5bCG5LiN5Lya5Y+R6YCB5qih5p2/6YCa55+l44CCJywgJ+Wwh+S4jeacg+eZvOmAgeaooeadv+mAmuefpeOAgicpXG5cdFx0XHRcdFx0XHRcdDogd2luZG93LndnVUxTKCfku7vkvZXmqKHmnb/lsIbkvJrlj5HpgIHnu5nljp/lp4tJUO+8micsICfku7vkvZXmqKHmnb/lsIfmnIPnmbzpgIHntabljp/lp4tJUO+8micpICtcblx0XHRcdFx0XHRcdFx0XHRtdy5jb25maWcuZ2V0KCd3Z1JlbGV2YW50VXNlck5hbWUnKSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfpu5jorqQnLCAn6aCQ6KitJyksXG5cdFx0XHRuYW1lOiAnZmllbGRfcHJlc2V0Jyxcblx0XHR9KTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5qih5p2/6YCJ6aG5JywgJ+aooeadv+mBuOmghScpLFxuXHRcdFx0bmFtZTogJ2ZpZWxkX3RlbXBsYXRlX29wdGlvbnMnLFxuXHRcdH0pO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflsIHnpoHpgInpobknLCAn5bCB6Y6W6YG46aCFJyksXG5cdFx0XHRuYW1lOiAnZmllbGRfYmxvY2tfb3B0aW9ucycsXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2ZpZWxkJyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+agh+iusOeUqOaIt+mhtScsICfmqJnoqJjkvb/nlKjogIXpoIHpnaInKSxcblx0XHRcdG5hbWU6ICdmaWVsZF90YWdfb3B0aW9ucycsXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2ZpZWxkJyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+ino+mZpOWwgeemgemAiemhuScsICfop6PpmaTlsIHpjpbpgbjpoIUnKSxcblx0XHRcdG5hbWU6ICdmaWVsZF91bmJsb2NrX29wdGlvbnMnLFxuXHRcdH0pO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdzdWJtaXQnLFxuXHRcdFx0bGFiZWw6ICfmj5DkuqQnLFxuXHRcdH0pO1xuXHRcdGNvbnN0IHJlc3VsdCA9IGZvcm0ucmVuZGVyKCk7XG5cdFx0V2luZG93LnNldENvbnRlbnQocmVzdWx0KTtcblx0XHRXaW5kb3cuZGlzcGxheSgpO1xuXHRcdHJlc3VsdC5yb290ID0gcmVzdWx0O1xuXHRcdFR3aW5rbGUuYmxvY2suZmV0Y2hVc2VySW5mbygoKSA9PiB7XG5cdFx0XHRpZiAoVHdpbmtsZS5ibG9jay5pc1JlZ2lzdGVyZWQpIHtcblx0XHRcdFx0Y29uc3QgJGZvcm0gPSAkKHJlc3VsdCk7XG5cdFx0XHRcdE1vcmViaXRzLnF1aWNrRm9ybS5zZXRFbGVtZW50VmlzaWJpbGl0eSgkZm9ybS5maW5kKCdbbmFtZT1hY3Rpb250eXBlXVt2YWx1ZT10YWddJykucGFyZW50KCksIHRydWUpO1xuXHRcdFx0XHRpZiAoTW9yZWJpdHMudXNlcklzU3lzb3ApIHtcblx0XHRcdFx0XHRNb3JlYml0cy5xdWlja0Zvcm0uc2V0RWxlbWVudFZpc2liaWxpdHkoXG5cdFx0XHRcdFx0XHQkZm9ybS5maW5kKCdbbmFtZT1hY3Rpb250eXBlXVt2YWx1ZT1wcm90ZWN0XScpLnBhcmVudCgpLFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIFRvZ2dsZSBpbml0aWFsIHBhcnRpYWwgc3RhdGUgZGVwZW5kaW5nIG9uIHByaW9yIGJsb2NrIHR5cGUsXG5cdFx0XHQvLyB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0VG9QYXJ0aWFsQmxvY2tzIHByZWZcblx0XHRcdGlmIChibG9ja2VkVXNlck5hbWUgPT09IHJlbGV2YW50VXNlck5hbWUpIHtcblx0XHRcdFx0JChyZXN1bHQpXG5cdFx0XHRcdFx0LmZpbmQoJ1tuYW1lPWFjdGlvbnR5cGVdW3ZhbHVlPXBhcnRpYWxdJylcblx0XHRcdFx0XHQucHJvcCgnY2hlY2tlZCcsIFR3aW5rbGUuYmxvY2suY3VycmVudEJsb2NrSW5mby5wYXJ0aWFsID09PSAnJyk7XG5cdFx0XHR9XG5cdFx0XHQvLyBjbGVhbiB1cCBwcmVzZXQgZGF0YSAoZGVmYXVsdHMsIGV0Yy4pLCBkb25lIGV4YWN0bHkgb25jZSwgbXVzdCBiZSBiZWZvcmUgVHdpbmtsZS5ibG9jay5jYWxsYmFjay5jaGFuZ2VfYWN0aW9uIGlzIGNhbGxlZFxuXHRcdFx0VHdpbmtsZS5ibG9jay50cmFuc2Zvcm1CbG9ja1ByZXNldHMoKTtcblx0XHRcdC8vIGluaXQgdGhlIGNvbnRyb2xzIGFmdGVyIHVzZXIgYW5kIGJsb2NrIGluZm8gaGF2ZSBiZWVuIGZldGNoZWRcblx0XHRcdGNvbnN0IGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuXHRcdFx0ZXZ0LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRpZiAocmVzdWx0LmJsb2NrNjQgJiYgcmVzdWx0LmJsb2NrNjQuY2hlY2tlZCkge1xuXHRcdFx0XHQvLyBDYWxscyB0aGUgc2FtZSBjaGFuZ2VfYWN0aW9uIGV2ZW50IG9uY2UgZmluaXNoZWRcblx0XHRcdFx0cmVzdWx0LmJsb2NrNjQuZGlzcGF0Y2hFdmVudChldnQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzdWx0LmFjdGlvbnR5cGVbMF0uZGlzcGF0Y2hFdmVudChldnQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xuXHQvLyBTdG9yZSBmZXRjaGVkIHVzZXIgZGF0YSwgb25seSByZWxldmFudCBpZiBzd2l0Y2hpbmcgSVB2NiB0byBhIC82NFxuXHRUd2lua2xlLmJsb2NrLmZldGNoZWREYXRhID0ge307XG5cdC8vIFByb2Nlc3NlcyB0aGUgZGF0YSBmcm9tIGEgYSBxdWVyeSByZXNwb25zZSwgc2VwYXJhdGVkIGZyb21cblx0Ly8gVHdpbmtsZS5ibG9jay5mZXRjaFVzZXJJbmZvIHRvIGFsbG93IHJlcHJvY2Vzc2luZyBvZiBhbHJlYWR5LWZldGNoZWQgZGF0YVxuXHRUd2lua2xlLmJsb2NrLnByb2Nlc3NVc2VySW5mbyA9IChkYXRhLCBmbikgPT4ge1xuXHRcdGxldCBbYmxvY2tpbmZvXSA9IGRhdGEucXVlcnkuYmxvY2tzO1xuXHRcdGNvbnN0IFt1c2VyaW5mb10gPSBkYXRhLnF1ZXJ5LnVzZXJzO1xuXHRcdC8vIElmIGFuIElQIGlzIGJsb2NrZWQgKmFuZCogcmFuZ2VibG9ja2VkLCB0aGUgYWJvdmUgZmluZHNcblx0XHQvLyB3aGljaGV2ZXIgYmxvY2sgaXMgbW9yZSByZWNlbnQsIG5vdCBuZWNlc3NhcmlseSBjb3JyZWN0LlxuXHRcdC8vIFRocmVlIHNlZW1zLi4uIHVubGlrZWx5XG5cdFx0aWYgKGRhdGEucXVlcnkuYmxvY2tzLmxlbmd0aCA+IDEgJiYgYmxvY2tpbmZvLnVzZXIgIT09IHJlbGV2YW50VXNlck5hbWUpIHtcblx0XHRcdFssIGJsb2NraW5mb10gPSBkYXRhLnF1ZXJ5LmJsb2Nrcztcblx0XHR9XG5cdFx0Ly8gQ2FjaGUgcmVzcG9uc2UsIHVzZWQgd2hlbiB0b2dnbGluZyAvNjQgYmxvY2tzXG5cdFx0VHdpbmtsZS5ibG9jay5mZXRjaGVkRGF0YVt1c2VyaW5mby5uYW1lXSA9IGRhdGE7XG5cdFx0VHdpbmtsZS5ibG9jay5pc1JlZ2lzdGVyZWQgPSAhIXVzZXJpbmZvLnVzZXJpZDtcblx0XHRpZiAoVHdpbmtsZS5ibG9jay5pc1JlZ2lzdGVyZWQpIHtcblx0XHRcdFR3aW5rbGUuYmxvY2sudXNlcklzQm90ID1cblx0XHRcdFx0ISF1c2VyaW5mby5ncm91cG1lbWJlcnNoaXBzICYmXG5cdFx0XHRcdHVzZXJpbmZvLmdyb3VwbWVtYmVyc2hpcHNcblx0XHRcdFx0XHQubWFwKChlKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZS5ncm91cDtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdC5pbmNsdWRlcygnYm90Jyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3aW5rbGUuYmxvY2sudXNlcklzQm90ID0gZmFsc2U7XG5cdFx0fVxuXHRcdGlmIChibG9ja2luZm8pIHtcblx0XHRcdC8vIGhhbmRsZSBmcnVzdHJhdGluZyBzeXN0ZW0gb2YgaW52ZXJ0ZWQgYm9vbGVhbiB2YWx1ZXNcblx0XHRcdGJsb2NraW5mby5kaXNhYmxldGFsayA9IGJsb2NraW5mby5hbGxvd3VzZXJ0YWxrID09PSB1bmRlZmluZWQ7XG5cdFx0XHRibG9ja2luZm8uaGFyZGJsb2NrID0gYmxvY2tpbmZvLmFub25vbmx5ID09PSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdC8vIHdpbGwgdW5kZWZpbmUgaWYgbm8gYmxvY2tzIHByZXNlbnRcblx0XHRUd2lua2xlLmJsb2NrLmN1cnJlbnRCbG9ja0luZm8gPSBibG9ja2luZm87XG5cdFx0YmxvY2tlZFVzZXJOYW1lID0gVHdpbmtsZS5ibG9jay5jdXJyZW50QmxvY2tJbmZvICYmIFR3aW5rbGUuYmxvY2suY3VycmVudEJsb2NrSW5mby51c2VyO1xuXHRcdC8vIFNlbWktYnVzdGVkIG9uIHJhbmdlcy5cblx0XHQvLyBCYXNpY2FsbHksIGxvZ2V2ZW50cyBkb2Vzbid0IHRyZWF0IGZ1bmN0aW9uYWxseS1lcXVpdmFsZW50IHJhbmdlc1xuXHRcdC8vIGFzIGVxdWl2YWxlbnQsIG1lYW5pbmcgYW55IGZ1bmN0aW9uYWxseS1lcXVpdmFsZW50IElQIHJhbmdlIGlzXG5cdFx0Ly8gbWlzaW50ZXJwcmV0ZWQgYnkgdGhlIGxvZyB0aHJvdWdob3V0LiAgV2l0aG91dCBsb2dldmVudHNcblx0XHQvLyByZWRpcmVjdGluZyAobGlrZSBTcGVjaWFsOkJsb2NrIGRvZXMpIHdlIHdvdWxkIG5lZWQgYSBmdW5jdGlvbiB0b1xuXHRcdC8vIHBhcnNlIHJhbmdlcywgd2hpY2ggaXMgYSBwYWluLiAgSVBVdGlscyBoYXMgdGhlIGNvZGUsIGJ1dCBpdCdkIGJlIGFcblx0XHQvLyBsb3Qgb2YgY3J1ZnQgZm9yIG9uZSBwdXJwb3NlLlxuXHRcdFR3aW5rbGUuYmxvY2suaGFzQmxvY2tMb2cgPSAhIWRhdGEucXVlcnkubG9nZXZlbnRzLmxlbmd0aDtcblx0XHRUd2lua2xlLmJsb2NrLmJsb2NrTG9nID0gVHdpbmtsZS5ibG9jay5oYXNCbG9ja0xvZyAmJiBkYXRhLnF1ZXJ5LmxvZ2V2ZW50cztcblx0XHQvLyBVc2VkIGxhdGVyIHRvIGNoZWNrIGlmIGJsb2NrIHN0YXR1cyBjaGFuZ2VkIHdoaWxlIGZpbGxpbmcgb3V0IHRoZSBmb3JtXG5cdFx0VHdpbmtsZS5ibG9jay5ibG9ja0xvZ0lkID0gVHdpbmtsZS5ibG9jay5oYXNCbG9ja0xvZyA/IGRhdGEucXVlcnkubG9nZXZlbnRzWzBdLmxvZ2lkIDogZmFsc2U7XG5cdFx0aWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0cmV0dXJuIGZuKCk7XG5cdFx0fVxuXHR9O1xuXHRUd2lua2xlLmJsb2NrLmZldGNoVXNlckluZm8gPSAoZm4pID0+IHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdGZvcm1hdDogJ2pzb24nLFxuXHRcdFx0YWN0aW9uOiAncXVlcnknLFxuXHRcdFx0bGlzdDogJ2Jsb2Nrc3x1c2Vyc3xsb2dldmVudHMnLFxuXHRcdFx0bGV0eXBlOiAnYmxvY2snLFxuXHRcdFx0bGVsaW1pdDogMixcblx0XHRcdGxldGl0bGU6IGBVc2VyOiR7cmVsZXZhbnRVc2VyTmFtZX1gLFxuXHRcdFx0Ymtwcm9wOiAnZXhwaXJ5fHJlYXNvbnxmbGFnc3xyZXN0cmljdGlvbnN8cmFuZ2V8dXNlcicsXG5cdFx0XHR1c3VzZXJzOiByZWxldmFudFVzZXJOYW1lLFxuXHRcdH07XG5cdFx0Ly8gYmt1c2VycyBkb2Vzbid0IGNhdGNoIHNpbmdsZSBJUHMgYmxvY2tlZCBhcyBwYXJ0IG9mIGEgcmFuZ2UgYmxvY2tcblx0XHRpZiAobXcudXRpbC5pc0lQQWRkcmVzcyhyZWxldmFudFVzZXJOYW1lLCB0cnVlKSkge1xuXHRcdFx0cXVlcnkuYmtpcCA9IHJlbGV2YW50VXNlck5hbWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHF1ZXJ5LmJrdXNlcnMgPSByZWxldmFudFVzZXJOYW1lO1xuXHRcdFx0Ly8gZ3JvdXBtZW1iZXJzaGlwcyBvbmx5IHJlbGV2YW50IGZvciByZWdpc3RlcmVkIHVzZXJzXG5cdFx0XHRxdWVyeS51c3Byb3AgPSAnZ3JvdXBtZW1iZXJzaGlwcyc7XG5cdFx0fVxuXHRcdHZvaWQgYXBpLmdldChxdWVyeSkudGhlbihcblx0XHRcdChkYXRhKSA9PiB7XG5cdFx0XHRcdFR3aW5rbGUuYmxvY2sucHJvY2Vzc1VzZXJJbmZvKGRhdGEsIGZuKTtcblx0XHRcdH0sXG5cdFx0XHQoZXJyb3IpID0+IHtcblx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoJGJvZHkuZmluZCgnZGl2W25hbWU9XCJjdXJyZW50YmxvY2tcIl0gc3BhbicpLmxhc3QoKVswXSk7XG5cdFx0XHRcdE1vcmViaXRzLnN0YXR1cy53YXJuKHdpbmRvdy53Z1VMUygn5oqT5Y+W55So5oi35L+h5oGv5Ye66ZSZJywgJ+aKk+WPluS9v+eUqOiAheizh+ioiuWHuumMrycpLCBlcnJvcik7XG5cdFx0XHR9XG5cdFx0KTtcblx0fTtcblx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay5zYXZlRmllbGRzZXQgPSAoZmllbGRzZXQpID0+IHtcblx0XHRUd2lua2xlLmJsb2NrWyQoZmllbGRzZXQpLnByb3AoJ25hbWUnKV0gPSB7fTtcblx0XHRmb3IgKGNvbnN0IGVsIG9mICQoZmllbGRzZXQpLnNlcmlhbGl6ZUFycmF5KCkpIHtcblx0XHRcdC8vIG5hbWVzcGFjZXMgYW5kIHBhZ2VzIGZvciBwYXJ0aWFsIGJsb2NrcyBhcmUgb3ZlcndyaXR0ZW5cblx0XHRcdC8vIGhlcmUsIGJ1dCB3ZSdyZSBoYW5kbGluZyB0aGVtIGVsc2V3aGVyZSBzbyB0aGF0J3MgZmluZVxuXHRcdFx0VHdpbmtsZS5ibG9ja1skKGZpZWxkc2V0KS5wcm9wKCduYW1lJyldW2VsLm5hbWVdID0gZWwudmFsdWU7XG5cdFx0fVxuXHR9O1xuXHRUd2lua2xlLmJsb2NrLmNhbGxiYWNrLmNoYW5nZV9ibG9jazY0ID0gKGUpID0+IHtcblx0XHRjb25zdCAkZm9ybSA9ICQoZS50YXJnZXQuZm9ybSk7XG5cdFx0Y29uc3QgJGJsb2NrNjQgPSAkZm9ybS5maW5kKCdbbmFtZT1ibG9jazY0XScpO1xuXHRcdC8vIFNob3cvaGlkZSBibG9jazY0IGJ1dHRvblxuXHRcdC8vIFNpbmdsZSBJUHY2LCBvciBJUHY2IHJhbmdlIHNtYWxsZXIgdGhhbiBhIC82NFxuXHRcdGNvbnN0IHByaW9yTmFtZSA9IHJlbGV2YW50VXNlck5hbWU7XG5cdFx0aWYgKCRibG9jazY0LmlzKCc6Y2hlY2tlZCcpKSB7XG5cdFx0XHRyZWxldmFudFVzZXJOYW1lID0gTW9yZWJpdHMuaXAuZ2V0NjQobXcuY29uZmlnLmdldCgnd2dSZWxldmFudFVzZXJOYW1lJykpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZWxldmFudFVzZXJOYW1lID0gbXcuY29uZmlnLmdldCgnd2dSZWxldmFudFVzZXJOYW1lJyk7XG5cdFx0fVxuXHRcdC8vIE5vIHRlbXBsYXRlcyBmb3IgcmFuZ2VzLCBidXQgaWYgdGhlIG9yaWdpbmFsIHVzZXIgaXMgYSBzaW5nbGUgSVAsIG9mZmVyIHRoZSBvcHRpb25cblx0XHQvLyAoZG9uZSBzZXBhcmF0ZWx5IGluIFR3aW5rbGUuYmxvY2suY2FsbGJhY2suaXNzdWVfdGVtcGxhdGUpXG5cdFx0Y29uc3Qgb3JpZ2luYWxJc1JhbmdlID0gTW9yZWJpdHMuaXAuaXNSYW5nZShtdy5jb25maWcuZ2V0KCd3Z1JlbGV2YW50VXNlck5hbWUnKSk7XG5cdFx0JGZvcm1cblx0XHRcdC5maW5kKCdbbmFtZT1hY3Rpb250eXBlXVt2YWx1ZT10ZW1wbGF0ZV0nKVxuXHRcdFx0LnByb3AoJ2Rpc2FibGVkJywgb3JpZ2luYWxJc1JhbmdlKVxuXHRcdFx0LnByb3AoJ2NoZWNrZWQnLCAhb3JpZ2luYWxJc1JhbmdlKTtcblx0XHQvLyBSZWZldGNoL3JlcHJvY2VzcyB1c2VyIGluZm8gdGhlbiByZWdlbmVyYXRlIHRoZSBtYWluIGNvbnRlbnRcblx0XHRjb25zdCByZWdlbmVyYXRlRm9ybSA9ICgpID0+IHtcblx0XHRcdC8vIFR3ZWFrIHRpdGxlYmFyIHRleHQuICBJbiB0aGVvcnksIHdlIGNvdWxkIHNhdmUgdGhlIGRpYWxvZ1xuXHRcdFx0Ly8gYXQgaW5pdGlhbGl6YXRpb24gYW5kIHRoZW4gdXNlIGAuc2V0VGl0bGVgIG9yXG5cdFx0XHQvLyBgZGlhbG9nKCdvcHRpb24nLCAndGl0bGUnKWAsIGJ1dCBpbiBwcmFjdGljZSB0aGF0IHN3YWxsb3dzXG5cdFx0XHQvLyB0aGUgc2NyaXB0TmFtZSBhbmQgcmVxdWlyZXMgYC5kaXNwbGF5YGluZywgd2hpY2gganVtcHMgdGhlXG5cdFx0XHQvLyB3aW5kb3cuICBJdCdzIGp1c3QgYSBsaW5lIG9mIHRleHQsIHNvIHRoaXMgaXMgZmluZS5cblx0XHRcdGNvbnN0IHRpdGxlQmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVpLWRpYWxvZy10aXRsZScpLmZpcnN0Q2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0XHR0aXRsZUJhci5ub2RlVmFsdWUgPSB0aXRsZUJhci5ub2RlVmFsdWUucmVwbGFjZShwcmlvck5hbWUsIHJlbGV2YW50VXNlck5hbWUpO1xuXHRcdFx0Ly8gQ29ycmVjdCBwYXJ0aWFsIHN0YXRlXG5cdFx0XHQkZm9ybS5maW5kKCdbbmFtZT1hY3Rpb250eXBlXVt2YWx1ZT1wYXJ0aWFsXScpLnByb3AoJ2NoZWNrZWQnLCBUd2lua2xlLmdldFByZWYoJ2RlZmF1bHRUb1BhcnRpYWxCbG9ja3MnKSk7XG5cdFx0XHRpZiAoYmxvY2tlZFVzZXJOYW1lID09PSByZWxldmFudFVzZXJOYW1lKSB7XG5cdFx0XHRcdCRmb3JtXG5cdFx0XHRcdFx0LmZpbmQoJ1tuYW1lPWFjdGlvbnR5cGVdW3ZhbHVlPXBhcnRpYWxdJylcblx0XHRcdFx0XHQucHJvcCgnY2hlY2tlZCcsIFR3aW5rbGUuYmxvY2suY3VycmVudEJsb2NrSW5mby5wYXJ0aWFsID09PSAnJyk7XG5cdFx0XHR9XG5cdFx0XHQvLyBTZXQgY29udGVudCBhcHByb3ByaWF0ZWx5XG5cdFx0XHRUd2lua2xlLmJsb2NrLmNhbGxiYWNrLmNoYW5nZV9hY3Rpb24oZSk7XG5cdFx0fTtcblx0XHRpZiAoVHdpbmtsZS5ibG9jay5mZXRjaGVkRGF0YVtyZWxldmFudFVzZXJOYW1lXSkge1xuXHRcdFx0VHdpbmtsZS5ibG9jay5wcm9jZXNzVXNlckluZm8oVHdpbmtsZS5ibG9jay5mZXRjaGVkRGF0YVtyZWxldmFudFVzZXJOYW1lXSwgcmVnZW5lcmF0ZUZvcm0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2lua2xlLmJsb2NrLmZldGNoVXNlckluZm8ocmVnZW5lcmF0ZUZvcm0pO1xuXHRcdH1cblx0fTtcblx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay5jaGFuZ2VfYWN0aW9uID0gKGUpID0+IHtcblx0XHRsZXQgZmllbGRfcHJlc2V0O1xuXHRcdGxldCBmaWVsZF90ZW1wbGF0ZV9vcHRpb25zO1xuXHRcdGxldCBmaWVsZF9ibG9ja19vcHRpb25zO1xuXHRcdGxldCBmaWVsZF90YWdfb3B0aW9ucztcblx0XHRsZXQgZmllbGRfdW5ibG9ja19vcHRpb25zO1xuXHRcdGNvbnN0ICRmb3JtID0gJChlLnRhcmdldC5mb3JtKTtcblx0XHQvLyBNYWtlIGlmcyBzaG9ydGVyXG5cdFx0Y29uc3QgJGJsb2NrID0gJGZvcm0uZmluZCgnW25hbWU9YWN0aW9udHlwZV1bdmFsdWU9YmxvY2tdJyk7XG5cdFx0bGV0IGJsb2NrQm94ID0gJGJsb2NrLmlzKCc6Y2hlY2tlZCcpO1xuXHRcdGNvbnN0ICR0ZW1wbGF0ZSA9ICRmb3JtLmZpbmQoJ1tuYW1lPWFjdGlvbnR5cGVdW3ZhbHVlPXRlbXBsYXRlXScpO1xuXHRcdGxldCB0ZW1wbGF0ZUJveCA9ICR0ZW1wbGF0ZS5pcygnOmNoZWNrZWQnKTtcblx0XHRjb25zdCAkdGFnID0gJGZvcm0uZmluZCgnW25hbWU9YWN0aW9udHlwZV1bdmFsdWU9dGFnXScpO1xuXHRcdGNvbnN0IHRhZ0JveCA9ICR0YWcuaXMoJzpjaGVja2VkJyk7XG5cdFx0Y29uc3QgJHByb3RlY3QgPSAkZm9ybS5maW5kKCdbbmFtZT1hY3Rpb250eXBlXVt2YWx1ZT1wcm90ZWN0XScpO1xuXHRcdGNvbnN0ICRwYXJ0aWFsID0gJGZvcm0uZmluZCgnW25hbWU9YWN0aW9udHlwZV1bdmFsdWU9cGFydGlhbF0nKTtcblx0XHRjb25zdCBwYXJ0aWFsQm94ID0gJHBhcnRpYWwuaXMoJzpjaGVja2VkJyk7XG5cdFx0Y29uc3QgJHVuYmxvY2sgPSAkZm9ybS5maW5kKCdbbmFtZT1hY3Rpb250eXBlXVt2YWx1ZT11bmJsb2NrXScpO1xuXHRcdGNvbnN0IHVuYmxvY2tCb3ggPSAkdW5ibG9jay5pcygnOmNoZWNrZWQnKTtcblx0XHRsZXQgYmxvY2tHcm91cCA9IHBhcnRpYWxCb3ggPyBUd2lua2xlLmJsb2NrLmJsb2NrR3JvdXBzUGFydGlhbCA6IFR3aW5rbGUuYmxvY2suYmxvY2tHcm91cHM7XG5cdFx0aWYgKGUudGFyZ2V0LnZhbHVlID09PSAndW5ibG9jaycpIHtcblx0XHRcdGlmICghVHdpbmtsZS5ibG9jay5jdXJyZW50QmxvY2tJbmZvKSB7XG5cdFx0XHRcdCR1bmJsb2NrLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG5cdFx0XHRcdHZvaWQgbXcubm90aWZ5KHdpbmRvdy53Z1VMUygn55So5oi35rKh5pyJ6KKr5bCB56aBJywgJ+S9v+eUqOiAheaykuacieiiq+WwgemOlicpLCB7XG5cdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVibG9jaycsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHQkYmxvY2sucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcblx0XHRcdGJsb2NrQm94ID0gZmFsc2U7XG5cdFx0XHQkdGVtcGxhdGUucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcblx0XHRcdHRlbXBsYXRlQm94ID0gZmFsc2U7XG5cdFx0XHQkdGFnLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG5cdFx0XHQkcHJvdGVjdC5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuXHRcdFx0JHBhcnRpYWwucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JHVuYmxvY2sucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcblx0XHR9XG5cdFx0JHBhcnRpYWwucHJvcCgnZGlzYWJsZWQnLCAhYmxvY2tCb3ggJiYgIXRlbXBsYXRlQm94KTtcblx0XHQvLyBBZGQgY3VycmVudCBibG9jayBwYXJhbWV0ZXJzIGFzIGRlZmF1bHQgcHJlc2V0XG5cdFx0Y29uc3QgcHJpb3IgPSB7XG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflvZPliY3lsIHnpoEnLCAn55uu5YmN5bCB6Y6WJyksXG5cdFx0fTtcblx0XHRpZiAoYmxvY2tlZFVzZXJOYW1lID09PSByZWxldmFudFVzZXJOYW1lKSB7XG5cdFx0XHRUd2lua2xlLmJsb2NrLmJsb2NrUHJlc2V0c0luZm8ucHJpb3IgPSBUd2lua2xlLmJsb2NrLmN1cnJlbnRCbG9ja0luZm87XG5cdFx0XHQvLyB2YWx1ZSBub3QgYSB2YWxpZCB0ZW1wbGF0ZSBzZWxlY3Rpb24sIGNob3NlbiBiZWxvdyBieSBzZXR0aW5nIHRlbXBsYXRlTmFtZVxuXHRcdFx0cHJpb3IubGlzdCA9IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+W9k+WJjeWwgeemgeiuvue9ricsICfnm67liY3lsIHpjpboqK3lrponKSxcblx0XHRcdFx0XHR2YWx1ZTogJ3ByaW9yJyxcblx0XHRcdFx0XHRzZWxlY3RlZDogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdF07XG5cdFx0XHQvLyBBcnJheXMgb2Ygb2JqZWN0cyBhcmUgYW5ub3lpbmcgdG8gY2hlY2tcblx0XHRcdGlmIChcblx0XHRcdFx0IWJsb2NrR3JvdXAuc29tZSgoYmcpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gYmcubGFiZWwgPT09IHByaW9yLmxhYmVsO1xuXHRcdFx0XHR9KVxuXHRcdFx0KSB7XG5cdFx0XHRcdGJsb2NrR3JvdXBbYmxvY2tHcm91cC5sZW5ndGhdID0gcHJpb3I7XG5cdFx0XHR9XG5cdFx0XHQvLyBBbHdheXMgZW5zdXJlIHByb3BlciB0ZW1wbGF0ZSBleGlzdHMvaXMgc2VsZWN0ZWQgd2hlbiBzd2l0Y2hpbmcgbW9kZXNcblx0XHRcdGlmIChwYXJ0aWFsQm94KSB7XG5cdFx0XHRcdFR3aW5rbGUuYmxvY2suYmxvY2tQcmVzZXRzSW5mby5wcmlvci50ZW1wbGF0ZU5hbWUgPSBNb3JlYml0cy5zdHJpbmcuaXNJbmZpbml0eShcblx0XHRcdFx0XHRUd2lua2xlLmJsb2NrLmN1cnJlbnRCbG9ja0luZm8uZXhwaXJ5XG5cdFx0XHRcdClcblx0XHRcdFx0XHQ/ICd1dy1wYmxvY2tpbmRlZidcblx0XHRcdFx0XHQ6ICd1dy1wYmxvY2snO1xuXHRcdFx0fSBlbHNlIGlmIChUd2lua2xlLmJsb2NrLmlzUmVnaXN0ZXJlZCkge1xuXHRcdFx0XHRUd2lua2xlLmJsb2NrLmJsb2NrUHJlc2V0c0luZm8ucHJpb3IudGVtcGxhdGVOYW1lID0gTW9yZWJpdHMuc3RyaW5nLmlzSW5maW5pdHkoXG5cdFx0XHRcdFx0VHdpbmtsZS5ibG9jay5jdXJyZW50QmxvY2tJbmZvLmV4cGlyeVxuXHRcdFx0XHQpXG5cdFx0XHRcdFx0PyAndXctYmxvY2tpbmRlZidcblx0XHRcdFx0XHQ6ICd1dy1ibG9jayc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRUd2lua2xlLmJsb2NrLmJsb2NrUHJlc2V0c0luZm8ucHJpb3IudGVtcGxhdGVOYW1lID0gJ3V3LWFibG9jayc7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEJ1dCBmaXJzdCByZW1vdmUgYW55IHByaW9yIHByaW9yXG5cdFx0XHRibG9ja0dyb3VwID0gYmxvY2tHcm91cC5maWx0ZXIoKGJnKSA9PiB7XG5cdFx0XHRcdHJldHVybiBiZy5sYWJlbCAhPT0gcHJpb3IubGFiZWw7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay5zYXZlRmllbGRzZXQoJGJvZHkuZmluZCgnW25hbWU9ZmllbGRfYmxvY2tfb3B0aW9uc10nKSk7XG5cdFx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay5zYXZlRmllbGRzZXQoJGJvZHkuZmluZCgnW25hbWU9ZmllbGRfdGVtcGxhdGVfb3B0aW9uc10nKSk7XG5cdFx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay5zYXZlRmllbGRzZXQoJGJvZHkuZmluZCgnW25hbWU9ZmllbGRfdGFnX29wdGlvbnNdJykpO1xuXHRcdFR3aW5rbGUuYmxvY2suY2FsbGJhY2suc2F2ZUZpZWxkc2V0KCRib2R5LmZpbmQoJ1tuYW1lPWZpZWxkX3VuYmxvY2tfb3B0aW9uc10nKSk7XG5cdFx0aWYgKGJsb2NrQm94KSB7XG5cdFx0XHRmaWVsZF9wcmVzZXQgPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfpu5jorqQnLCAn6aCQ6KitJyksXG5cdFx0XHRcdG5hbWU6ICdmaWVsZF9wcmVzZXQnLFxuXHRcdFx0fSk7XG5cdFx0XHRmaWVsZF9wcmVzZXQuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHRcdG5hbWU6ICdwcmVzZXQnLFxuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfpgInmi6npu5jorqTvvJonLCAn6YG45pOH6aCQ6Kit77yaJyksXG5cdFx0XHRcdGV2ZW50OiBUd2lua2xlLmJsb2NrLmNhbGxiYWNrLmNoYW5nZV9wcmVzZXQsXG5cdFx0XHRcdGxpc3Q6IFR3aW5rbGUuYmxvY2suY2FsbGJhY2suZmlsdGVyZWRfYmxvY2tfZ3JvdXBzKGJsb2NrR3JvdXApLFxuXHRcdFx0fSk7XG5cdFx0XHRmaWVsZF9ibG9ja19vcHRpb25zID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybS5lbGVtZW50KHtcblx0XHRcdFx0dHlwZTogJ2ZpZWxkJyxcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bCB56aB6YCJ6aG5JywgJ+WwgemOlumBuOmghScpLFxuXHRcdFx0XHRuYW1lOiAnZmllbGRfYmxvY2tfb3B0aW9ucycsXG5cdFx0XHR9KTtcblx0XHRcdGZpZWxkX2Jsb2NrX29wdGlvbnMuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdG5hbWU6ICdjdXJyZW50YmxvY2snLFxuXHRcdFx0XHRsYWJlbDogJyAnLFxuXHRcdFx0fSk7XG5cdFx0XHRmaWVsZF9ibG9ja19vcHRpb25zLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRuYW1lOiAnaGFzYmxvY2tsb2cnLFxuXHRcdFx0XHRsYWJlbDogJyAnLFxuXHRcdFx0fSk7XG5cdFx0XHRmaWVsZF9ibG9ja19vcHRpb25zLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0XHRuYW1lOiAnZXhwaXJ5X3ByZXNldCcsXG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+i/h+acn+aXtumXtO+8micsICfpgY7mnJ/mmYLplpPvvJonKSxcblx0XHRcdFx0ZXZlbnQ6IFR3aW5rbGUuYmxvY2suY2FsbGJhY2suY2hhbmdlX2V4cGlyeSxcblx0XHRcdFx0bGlzdDogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+iHquWumuS5iScsICfoh6roqIInKSxcblx0XHRcdFx0XHRcdHZhbHVlOiAnY3VzdG9tJyxcblx0XHRcdFx0XHRcdHNlbGVjdGVkOiB0cnVlLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5peg6ZmQ5pyfJywgJ+eEoemZkOacnycpLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICdpbmZpbml0eScsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCcz5bCP5pe2JywgJzPlsI/mmYInKSxcblx0XHRcdFx0XHRcdHZhbHVlOiAnMyBob3VycycsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCcxMuWwj+aXticsICcxMuWwj+aZgicpLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICcxMiBob3VycycsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJzHlpKknLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICcxIGRheScsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCczMeWwj+aXticsICczMeWwj+aZgicpLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICczMSBob3VycycsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJzLlpKknLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICcyIGRheXMnLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICcz5aSpJyxcblx0XHRcdFx0XHRcdHZhbHVlOiAnMyBkYXlzJyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJzHlkagnLCAnMemAsScpLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICcxIHdlZWsnLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygnMuWRqCcsICcy6YCxJyksXG5cdFx0XHRcdFx0XHR2YWx1ZTogJzIgd2Vla3MnLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygnMeS4quaciCcsICcx5YCL5pyIJyksXG5cdFx0XHRcdFx0XHR2YWx1ZTogJzEgbW9udGgnLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygnM+S4quaciCcsICcz5YCL5pyIJyksXG5cdFx0XHRcdFx0XHR2YWx1ZTogJzMgbW9udGhzJyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJzbkuKrmnIgnLCAnNuWAi+aciCcpLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICc2IG1vbnRocycsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJzHlubQnLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICcxIHllYXInLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6ICcy5bm0Jyxcblx0XHRcdFx0XHRcdHZhbHVlOiAnMiB5ZWFycycsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJzPlubQnLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICczIHllYXJzJyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdLFxuXHRcdFx0fSk7XG5cdFx0XHRmaWVsZF9ibG9ja19vcHRpb25zLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdG5hbWU6ICdleHBpcnknLFxuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfoh6rlrprkuYnov4fmnJ/ml7bpl7QnLCAn6Ieq6KiC6YGO5pyf5pmC6ZaTJyksXG5cdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHQn5oKo5Y+v5Lul5L2/55So55u45a+55pe26Ze077yM5aaC4oCcMSBtaW51dGXigJ3miJbigJwxOSBkYXlz4oCd77yb5oiW57ud5a+55pe26Ze077yM4oCceXl5eW1tZGRoaG1t4oCd77yI5aaC4oCcMjAwNjAyMDExNDA14oCd5pivMjAwNuW5tDLmnIgx5pelMTQ6MDUgVVRD44CC77yJJyxcblx0XHRcdFx0XHQn5oKo5Y+v5Lul5L2/55So55u45bCN5pmC6ZaT77yM5aaC44CMMSBtaW51dGXjgI3miJbjgIwxOSBkYXlz44CN77yb5oiW57WV5bCN5pmC6ZaT77yM44CMeXl5eW1tZGRoaG1t44CN77yI5aaC44CMMjAwNjAyMDExNDA144CN5pivMjAwNuW5tDLmnIgx5pelMTQ6MDUgVVRD44CC77yJJ1xuXHRcdFx0XHQpLFxuXHRcdFx0XHR2YWx1ZTogVHdpbmtsZS5ibG9jay5maWVsZF9ibG9ja19vcHRpb25zLmV4cGlyeSB8fCBUd2lua2xlLmJsb2NrLmZpZWxkX3RlbXBsYXRlX29wdGlvbnMudGVtcGxhdGVfZXhwaXJ5LFxuXHRcdFx0fSk7XG5cdFx0XHRpZiAocGFydGlhbEJveCkge1xuXHRcdFx0XHQvLyBQYXJ0aWFsIGJsb2NrXG5cdFx0XHRcdGZpZWxkX2Jsb2NrX29wdGlvbnMuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdFx0XHRtdWx0aXBsZTogdHJ1ZSxcblx0XHRcdFx0XHRuYW1lOiAncGFnZXJlc3RyaWN0aW9ucycsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6aG16Z2i5bCB56aBJywgJ+mggemdouWwgemOlicpLFxuXHRcdFx0XHRcdHZhbHVlOiAnJyxcblx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoJ+acgOWkmjEw5Liq6aG16Z2i44CCJywgJ+acgOWkmjEw5YCL6aCB6Z2i44CCJyksXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRjb25zdCBucyA9IGZpZWxkX2Jsb2NrX29wdGlvbnMuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdFx0XHRtdWx0aXBsZTogdHJ1ZSxcblx0XHRcdFx0XHRuYW1lOiAnbmFtZXNwYWNlcmVzdHJpY3Rpb25zJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflkb3lkI3nqbrpl7TlsIHnpoEnLCAn5ZG95ZCN56m66ZaT5bCB6Y6WJyksXG5cdFx0XHRcdFx0dmFsdWU6ICcnLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn5oyH5a6a5bCB56aB55qE5ZG95ZCN56m66Ze044CCJywgJ+aMh+WumuWwgemOlueahOWRveWQjeepuumWk+OAgicpLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0Zm9yIChjb25zdCBbbnVtYmVyLCBuYW1lXSBvZiBPYmplY3QuZW50cmllcyhtZW51Rm9ybWF0dGVkTmFtZXNwYWNlcykpIHtcblx0XHRcdFx0XHQvLyBJZ25vcmUgLTE6IFNwZWNpYWw7IC0yOiBNZWRpYTsgYW5kIDIzMDAtMjMwMzogR2FkZ2V0ICh0YWxrKSBhbmQgR2FkZ2V0IGRlZmluaXRpb24gKHRhbGspXG5cdFx0XHRcdFx0aWYgKG51bWJlciA+PSAwICYmIG51bWJlciA8IDgzMCkge1xuXHRcdFx0XHRcdFx0bnMuYXBwZW5kKHtcblx0XHRcdFx0XHRcdFx0dHlwZTogJ29wdGlvbicsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiBuYW1lLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogbnVtYmVyLFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBibG9ja29wdGlvbnMgPSBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRjaGVja2VkOiBUd2lua2xlLmJsb2NrLmZpZWxkX2Jsb2NrX29wdGlvbnMubm9jcmVhdGUsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn56aB5q2i5Yib5bu66LSm5Y+3JywgJ+emgeatouW7uueri+izrOiZnycpLFxuXHRcdFx0XHRcdG5hbWU6ICdub2NyZWF0ZScsXG5cdFx0XHRcdFx0dmFsdWU6ICcxJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGNoZWNrZWQ6IFR3aW5rbGUuYmxvY2suZmllbGRfYmxvY2tfb3B0aW9ucy5ub2VtYWlsLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+eUteWtkOmCruS7tuWBnOeUqCcsICfpm7vlrZDpg7Xku7blgZznlKgnKSxcblx0XHRcdFx0XHRuYW1lOiAnbm9lbWFpbCcsXG5cdFx0XHRcdFx0dmFsdWU6ICcxJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGNoZWNrZWQ6IFR3aW5rbGUuYmxvY2suZmllbGRfYmxvY2tfb3B0aW9ucy5kaXNhYmxldGFsayxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfkuI3og73nvJbovpHoh6rlt7HnmoTorqjorrrpobUnLCAn5LiN6IO957eo6Lyv6Ieq5bex55qE6KiO6KuW6aCBJyksXG5cdFx0XHRcdFx0bmFtZTogJ2Rpc2FibGV0YWxrJyxcblx0XHRcdFx0XHR2YWx1ZTogJzEnLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHBhcnRpYWxCb3hcblx0XHRcdFx0XHRcdD8gd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCfoi6Xkvb/nlKjpg6jliIblsIHnpoHvvIzkuI3lupTpgInmi6nmraTpobnvvIzpmaTpnZ7mgqjkuZ/mg7PopoHnpoHmraLnvJbovpHnlKjmiLforqjorrrpobXjgIInLFxuXHRcdFx0XHRcdFx0XHRcdCfoi6Xkvb/nlKjpg6jliIblsIHpjpbvvIzkuI3mh4npgbjmk4fmraTpoIXvvIzpmaTpnZ7mgqjkuZ/mg7PopoHnpoHmraLnt6jovK/kvb/nlKjogIXoqI7oq5bpoIHjgIInXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdDogJycsXG5cdFx0XHRcdH0sXG5cdFx0XHRdO1xuXHRcdFx0aWYgKFR3aW5rbGUuYmxvY2suaXNSZWdpc3RlcmVkKSB7XG5cdFx0XHRcdGJsb2Nrb3B0aW9uc1tibG9ja29wdGlvbnMubGVuZ3RoXSA9IHtcblx0XHRcdFx0XHRjaGVja2VkOiBUd2lua2xlLmJsb2NrLmZpZWxkX2Jsb2NrX29wdGlvbnMuYXV0b2Jsb2NrLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+iHquWKqOWwgeemgScsICfoh6rli5XlsIHpjpYnKSxcblx0XHRcdFx0XHRuYW1lOiAnYXV0b2Jsb2NrJyxcblx0XHRcdFx0XHR2YWx1ZTogJzEnLFxuXHRcdFx0XHR9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YmxvY2tvcHRpb25zW2Jsb2Nrb3B0aW9ucy5sZW5ndGhdID0ge1xuXHRcdFx0XHRcdGNoZWNrZWQ6IFR3aW5rbGUuYmxvY2suZmllbGRfYmxvY2tfb3B0aW9ucy5oYXJkYmxvY2ssXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6Zi75q2i55m75b2V55So5oi35L2/55So6K+lSVDlnLDlnYDnvJbovpEnLCAn6Zi75q2i55m75YWl5L2/55So6ICF5L2/55So6KmySVDkvY3lnYDnt6jovK8nKSxcblx0XHRcdFx0XHRuYW1lOiAnaGFyZGJsb2NrJyxcblx0XHRcdFx0XHR2YWx1ZTogJzEnLFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0YmxvY2tvcHRpb25zW2Jsb2Nrb3B0aW9ucy5sZW5ndGhdID1cblx0XHRcdFx0KHtcblx0XHRcdFx0XHRjaGVja2VkOiBUd2lua2xlLmJsb2NrLmZpZWxkX2Jsb2NrX29wdGlvbnMud2F0Y2h1c2VyLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+ebkeinhuivpeeUqOaIt+eahOeUqOaIt+mhteWSjOiuqOiuuumhtScsICfnm6PoppboqbLkvb/nlKjogIXnmoTkvb/nlKjogIXpoIHpnaLlkozoqI7oq5bpoIEnKSxcblx0XHRcdFx0XHRuYW1lOiAnd2F0Y2h1c2VyJyxcblx0XHRcdFx0XHR2YWx1ZTogJzEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y2hlY2tlZDogdHJ1ZSxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmoIforrDlvZPliY3nmoTnoLTlnY/kuK3nmoTor7fmsYInLCAn5qiZ6KiY55W25YmN55qE56C05aOe5Lit55qE6KuL5rGCJyksXG5cdFx0XHRcdFx0bmFtZTogJ2Nsb3NldmlwJyxcblx0XHRcdFx0XHR2YWx1ZTogJzEnLFxuXHRcdFx0XHR9KTtcblx0XHRcdGZpZWxkX2Jsb2NrX29wdGlvbnMuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0bmFtZTogJ2Jsb2Nrb3B0aW9ucycsXG5cdFx0XHRcdGxpc3Q6IGJsb2Nrb3B0aW9ucyxcblx0XHRcdH0pO1xuXHRcdFx0ZmllbGRfYmxvY2tfb3B0aW9ucy5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAndGV4dGFyZWEnLFxuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnkIbnlLHvvIjnlKjkuo7lsIHnpoHml6Xlv5fvvInvvJonLCAn55CG55Sx77yI55So5pa85bCB6Y6W5pel6KqM77yJ77yaJyksXG5cdFx0XHRcdG5hbWU6ICdyZWFzb24nLFxuXHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0J+ivt+iAg+iZkeWcqOm7mOiupOeahOa2iOaBr+S4reWKoOWFpeacieeUqOeahOivpue7huS/oeaBr+OAgicsXG5cdFx0XHRcdFx0J+iri+iAg+aFruWcqOmgkOioreeahOioiuaBr+S4reWKoOWFpeacieeUqOeahOips+e0sOizh+ioiuOAgidcblx0XHRcdFx0KSxcblx0XHRcdFx0dmFsdWU6IFR3aW5rbGUuYmxvY2suZmllbGRfYmxvY2tfb3B0aW9ucy5yZWFzb24sXG5cdFx0XHR9KTtcblx0XHRcdGZpZWxkX2Jsb2NrX29wdGlvbnMuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdG5hbWU6ICdmaWxlcmxvZ19sYWJlbCcsXG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WPguinge+8micsICflj4PopovvvJonKSxcblx0XHRcdFx0c3R5bGU6ICdkaXNwbGF5OmlubGluZS1ibG9jaztmb250LXN0eWxlOm5vcm1hbCAhaW1wb3J0YW50Jyxcblx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdCflnKjlsIHnpoHnkIbnlLHkuK3moIfmuIXnibnmrormg4XlhrXku6Xkvpvlhbbku5bnrqHnkIblkZjlj4LogIMnLFxuXHRcdFx0XHRcdCflnKjlsIHpjpbnkIbnlLHkuK3mqJnmuIXnibnmrormg4Xms4Hku6Xkvpvlhbbku5bnrqHnkIblk6Hlj4PogIMnXG5cdFx0XHRcdCksXG5cdFx0XHR9KTtcblx0XHRcdGZpZWxkX2Jsb2NrX29wdGlvbnMuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0bmFtZTogJ2ZpbHRlcl9zZWVfYWxzbycsXG5cdFx0XHRcdGV2ZW50OiBUd2lua2xlLmJsb2NrLmNhbGxiYWNrLnRvZ2dsZV9zZWVfYWxzb3MsXG5cdFx0XHRcdHN0eWxlOiAnZGlzcGxheTppbmxpbmUtYmxvY2s7IG1hcmdpbi1yaWdodDo1cHgnLFxuXHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6L+H5ruk5Zmo5pel5b+XJywgJ+mBjua/vuWZqOaXpeiqjCcpLFxuXHRcdFx0XHRcdFx0Y2hlY2tlZDogZmFsc2UsXG5cdFx0XHRcdFx0XHR2YWx1ZTogd2luZG93LndnVUxTKCfov4fmu6Tlmajml6Xlv5cnLCAn6YGO5r++5Zmo5pel6KqMJyksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSxcblx0XHRcdH0pO1xuXHRcdFx0ZmllbGRfYmxvY2tfb3B0aW9ucy5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRuYW1lOiAnZGVsZXRlZF9zZWVfYWxzbycsXG5cdFx0XHRcdGV2ZW50OiBUd2lua2xlLmJsb2NrLmNhbGxiYWNrLnRvZ2dsZV9zZWVfYWxzb3MsXG5cdFx0XHRcdHN0eWxlOiAnZGlzcGxheTppbmxpbmUtYmxvY2s7IG1hcmdpbi1yaWdodDo1cHgnLFxuXHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bey5Yig6Zmk55qE57yW6L6RJywgJ+W3suWIqumZpOeahOe3qOi8rycpLFxuXHRcdFx0XHRcdFx0Y2hlY2tlZDogZmFsc2UsXG5cdFx0XHRcdFx0XHR2YWx1ZTogd2luZG93LndnVUxTKCflt7LliKDpmaTnmoTnvJbovpEnLCAn5bey5Yiq6Zmk55qE57eo6LyvJyksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSxcblx0XHRcdH0pO1xuXHRcdFx0ZmllbGRfYmxvY2tfb3B0aW9ucy5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRuYW1lOiAnZmlsdGVyX3NlZV9hbHNvJyxcblx0XHRcdFx0ZXZlbnQ6IFR3aW5rbGUuYmxvY2suY2FsbGJhY2sudG9nZ2xlX3NlZV9hbHNvcyxcblx0XHRcdFx0c3R5bGU6ICdkaXNwbGF5OmlubGluZS1ibG9jazsgbWFyZ2luLXJpZ2h0OjVweCcsXG5cdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnlKjmiLforqjorrrpobUnLCAn5L2/55So6ICF6KiO6KuW6aCBJyksXG5cdFx0XHRcdFx0XHRjaGVja2VkOiBmYWxzZSxcblx0XHRcdFx0XHRcdHZhbHVlOiB3aW5kb3cud2dVTFMoJ+eUqOaIt+iuqOiuuumhtScsICfkvb/nlKjogIXoqI7oq5bpoIEnKSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdLFxuXHRcdFx0fSk7XG5cdFx0XHRmaWVsZF9ibG9ja19vcHRpb25zLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdG5hbWU6ICdmaWx0ZXJfc2VlX2Fsc28nLFxuXHRcdFx0XHRldmVudDogVHdpbmtsZS5ibG9jay5jYWxsYmFjay50b2dnbGVfc2VlX2Fsc29zLFxuXHRcdFx0XHRzdHlsZTogJ2Rpc3BsYXk6aW5saW5lLWJsb2NrOyBtYXJnaW4tcmlnaHQ6NXB4Jyxcblx0XHRcdFx0bGlzdDogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+i/h+WOu+eahOWwgeemgeiusOW9lScsICfpgY7ljrvnmoTlsIHpjpboqJjpjIQnKSxcblx0XHRcdFx0XHRcdGNoZWNrZWQ6IGZhbHNlLFxuXHRcdFx0XHRcdFx0dmFsdWU6IHdpbmRvdy53Z1VMUygn6L+H5Y6755qE5bCB56aB6K6w5b2VJywgJ+mBjuWOu+eahOWwgemOluiomOmMhCcpLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdF0sXG5cdFx0XHR9KTtcblx0XHRcdC8vIFlldC1hbm90aGVyLWxvZ2V2ZW50cy1kb2Vzbid0LWhhbmRsZS1yYW5nZXMtd2VsbFxuXHRcdFx0aWYgKGJsb2NrZWRVc2VyTmFtZSA9PT0gcmVsZXZhbnRVc2VyTmFtZSkge1xuXHRcdFx0XHRmaWVsZF9ibG9ja19vcHRpb25zLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2hpZGRlbicsXG5cdFx0XHRcdFx0bmFtZTogJ3JlYmxvY2snLFxuXHRcdFx0XHRcdHZhbHVlOiAnMScsXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAodGVtcGxhdGVCb3gpIHtcblx0XHRcdGZpZWxkX3RlbXBsYXRlX29wdGlvbnMgPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmqKHmnb/pgInpobknLCAn5qih5p2/6YG46aCFJyksXG5cdFx0XHRcdG5hbWU6ICdmaWVsZF90ZW1wbGF0ZV9vcHRpb25zJyxcblx0XHRcdH0pO1xuXHRcdFx0ZmllbGRfdGVtcGxhdGVfb3B0aW9ucy5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdFx0bmFtZTogJ3RlbXBsYXRlJyxcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6YCJ5oup6K6o6K666aG15qih5p2/77yaJywgJ+mBuOaTh+iojuirlumggeaooeadv++8micpLFxuXHRcdFx0XHRldmVudDogVHdpbmtsZS5ibG9jay5jYWxsYmFjay5jaGFuZ2VfdGVtcGxhdGUsXG5cdFx0XHRcdGxpc3Q6IFR3aW5rbGUuYmxvY2suY2FsbGJhY2suZmlsdGVyZWRfYmxvY2tfZ3JvdXBzKGJsb2NrR3JvdXAsIHRydWUpLFxuXHRcdFx0XHR2YWx1ZTogVHdpbmtsZS5ibG9jay5maWVsZF90ZW1wbGF0ZV9vcHRpb25zLnRlbXBsYXRlLFxuXHRcdFx0fSk7XG5cdFx0XHRmaWVsZF90ZW1wbGF0ZV9vcHRpb25zLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdG5hbWU6ICdhcnRpY2xlJyxcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6ZO+5o6l6aG16Z2iJywgJ+mAo+e1kOmggemdoicpLFxuXHRcdFx0XHR2YWx1ZTogJycsXG5cdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHQn5Y+v5Lul6ZqP6YCa55+l6ZO+5o6l6aG16Z2i77yM5L6L5aaC56C05Z2P55qE55uu5qCH44CC5rKh5pyJ5p2h55uu6ZyA6KaB6ZO+5o6l5YiZ6K+355WZ56m644CCJyxcblx0XHRcdFx0XHQn5Y+v5Lul6Zqo6YCa55+l6YCj57WQ6aCB6Z2i77yM5L6L5aaC56C05aOe55qE55uu5qiZ44CC5rKS5pyJ5qKd55uu6ZyA6KaB6YCj57WQ5YmH6KuL55WZ56m644CCJ1xuXHRcdFx0XHQpLFxuXHRcdFx0fSk7XG5cdFx0XHQvLyBPbmx5IHZpc2libGUgaWYgcGFydGlhbCBhbmQgbm90IGJsb2NraW5nXG5cdFx0XHRmaWVsZF90ZW1wbGF0ZV9vcHRpb25zLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdG5hbWU6ICdhcmVhJyxcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bCB56aB6IyD5Zu0JywgJ+WwgemOluevhOWcjScpLFxuXHRcdFx0XHR2YWx1ZTogJycsXG5cdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHQn6Zi75q2i55So5oi357yW6L6R55qE6aG16Z2i5oiW5ZG95ZCN56m66Ze055qE5Y+v6YCJ6K+05piO44CCJyxcblx0XHRcdFx0XHQn6Zi75q2i5L2/55So6ICF57eo6Lyv55qE6aCB6Z2i5oiW5ZG95ZCN56m66ZaT55qE5Y+v6YG46Kqq5piO44CCJ1xuXHRcdFx0XHQpLFxuXHRcdFx0fSk7XG5cdFx0XHRpZiAoIWJsb2NrQm94KSB7XG5cdFx0XHRcdGZpZWxkX3RlbXBsYXRlX29wdGlvbnMuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRcdG5hbWU6ICd0ZW1wbGF0ZV9leHBpcnknLFxuXHRcdFx0XHRcdGxhYmVsOiAn5bCB56aB5pyf6ZmQ77yaJyxcblx0XHRcdFx0XHR2YWx1ZTogJycsXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKCflsIHnpoHml7bplb/vvIzlpoIyNOWwj+aXtuOAgTLlkajjgIHml6DpmZDmnJ/nrYnjgIInLCAn5bCB6Y6W5pmC6ZW377yM5aaCMjTlsI/mmYLjgIEy6YCx44CB54Sh6ZmQ5pyf562J44CCJyksXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0ZmllbGRfdGVtcGxhdGVfb3B0aW9ucy5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRuYW1lOiAnYmxvY2tfcmVhc29uJyxcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn4oCc55Sx5LqO4oCm4oCm5oKo5bey6KKr5bCB56aB4oCdJywgJ+OAjOeUseaWvOKApuKApuaCqOW3suiiq+WwgemOluOAjScpLFxuXHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0J+WPr+mAieeahOeQhueUse+8jOeUqOS6juabv+aNoum7mOiupOeQhueUseOAguWPquWcqOW4uOinhOWwgeemgeaooeadv+S4reacieaViOOAgicsXG5cdFx0XHRcdFx0J+WPr+mBuOeahOeQhueUse+8jOeUqOaWvOabv+aPm+mgkOioreeQhueUseOAguWPquWcqOW4uOimj+WwgemOluaooeadv+S4reacieaViOOAgidcblx0XHRcdFx0KSxcblx0XHRcdFx0dmFsdWU6IFR3aW5rbGUuYmxvY2suZmllbGRfdGVtcGxhdGVfb3B0aW9ucy5ibG9ja19yZWFzb24sXG5cdFx0XHRcdHNpemU6IDYwLFxuXHRcdFx0fSk7XG5cdFx0XHRpZiAoYmxvY2tCb3gpIHtcblx0XHRcdFx0ZmllbGRfdGVtcGxhdGVfb3B0aW9ucy5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdFx0bmFtZTogJ2JsYW5rX2R1cmF0aW9uJyxcblx0XHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+S4jeWcqOaooeadv+S4reWMheWQq+Wwgeemgeacn+mZkCcsICfkuI3lnKjmqKHmnb/kuK3ljIXlkKvlsIHpjpbmnJ/pmZAnKSxcblx0XHRcdFx0XHRcdFx0Y2hlY2tlZDogVHdpbmtsZS5ibG9jay5maWVsZF90ZW1wbGF0ZV9vcHRpb25zLmJsYW5rX2R1cmF0aW9uLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+aooeadv+WwhuS8muaYvuekuuKAnOS4gOauteaXtumXtOKAneiAjOS4jeaYr+WFt+S9k+aXtumVvycsXG5cdFx0XHRcdFx0XHRcdFx0J+aooeadv+Wwh+acg+mhr+ekuuOAjOS4gOauteaZgumWk+OAjeiAjOS4jeaYr+WFt+mrlOaZgumVtydcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmaWVsZF90ZW1wbGF0ZV9vcHRpb25zLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+S4jeiDvee8lui+keiHquW3seeahOiuqOiuuumhtScsICfkuI3og73nt6jovK/oh6rlt7HnmoToqI7oq5bpoIEnKSxcblx0XHRcdFx0XHRcdFx0bmFtZTogJ25vdGFsaycsXG5cdFx0XHRcdFx0XHRcdGNoZWNrZWQ6IFR3aW5rbGUuYmxvY2suZmllbGRfdGVtcGxhdGVfb3B0aW9ucy5ub3RhbGssXG5cdFx0XHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn55So5q2k5Zyo5bCB56aB5qih5p2/5Lit5oyH5piO6K+l55So5oi357yW6L6R6K6o6K666aG155qE5p2D6ZmQ5bey6KKr56e76ZmkJyxcblx0XHRcdFx0XHRcdFx0XHQn55So5q2k5Zyo5bCB6Y6W5qih5p2/5Lit5oyH5piO6Kmy5L2/55So6ICF57eo6Lyv6KiO6KuW6aCB55qE5qyK6ZmQ5bey6KKr56e76ZmkJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5LiN6IO95Y+R6YCB55S15a2Q6YKu5Lu2JywgJ+S4jeiDveWCs+mAgembu+WtkOmDteS7ticpLFxuXHRcdFx0XHRcdFx0XHRuYW1lOiAnbm9lbWFpbF90ZW1wbGF0ZScsXG5cdFx0XHRcdFx0XHRcdGNoZWNrZWQ6IFR3aW5rbGUuYmxvY2suZmllbGRfdGVtcGxhdGVfb3B0aW9ucy5ub2VtYWlsX3RlbXBsYXRlLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+eUqOatpOWcqOWwgeemgeaooeadv+S4reaMh+aYjuivpeeUqOaIt+WPkemAgeeUteWtkOmCruS7tueahOadg+mZkOW3suiiq+enu+mZpCcsXG5cdFx0XHRcdFx0XHRcdFx0J+eUqOatpOWcqOWwgemOluaooeadv+S4reaMh+aYjuipsuS9v+eUqOiAheWCs+mAgembu+WtkOmDteS7tueahOasiumZkOW3suiiq+enu+mZpCdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+S4jeiDveWIm+W7uui0puWPtycsICfkuI3og73lu7rnq4vos6zomZ8nKSxcblx0XHRcdFx0XHRcdFx0bmFtZTogJ25vY3JlYXRlX3RlbXBsYXRlJyxcblx0XHRcdFx0XHRcdFx0Y2hlY2tlZDogVHdpbmtsZS5ibG9jay5maWVsZF90ZW1wbGF0ZV9vcHRpb25zLm5vY3JlYXRlX3RlbXBsYXRlLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+eUqOatpOWcqOWwgeemgeaooeadv+S4reaMh+aYjuivpeeUqOaIt+WIm+W7uui0puWPt+eahOadg+mZkOW3suiiq+enu+mZpCcsXG5cdFx0XHRcdFx0XHRcdFx0J+eUqOatpOWcqOWwgemOluaooeadv+S4reaMh+aYjuipsuS9v+eUqOiAheW7uueri+izrOiZn+eahOasiumZkOW3suiiq+enu+mZpCdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCAkcHJldmlld2xpbmsgPSAkKCc8YT4nKS5hdHRyKCdpZCcsICd0d2lua2xlYmxvY2stcHJldmlldy1saW5rJykudGV4dCh3aW5kb3cud2dVTFMoJ+mihOiniCcsICfpoJDopr0nKSk7XG5cdFx0XHQkcHJldmlld2xpbmsub2ZmKCdjbGljaycpLm9uKCdjbGljaycsICgpID0+IHtcblx0XHRcdFx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay5wcmV2aWV3KCRmb3JtWzBdKTtcblx0XHRcdH0pO1xuXHRcdFx0JHByZXZpZXdsaW5rLmNzcyh7XG5cdFx0XHRcdGN1cnNvcjogJ3BvaW50ZXInLFxuXHRcdFx0fSk7XG5cdFx0XHRmaWVsZF90ZW1wbGF0ZV9vcHRpb25zLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRpZDogJ2Jsb2NrcHJldmlldycsXG5cdFx0XHRcdGxhYmVsOiBbJHByZXZpZXdsaW5rWzBdXSxcblx0XHRcdH0pO1xuXHRcdFx0ZmllbGRfdGVtcGxhdGVfb3B0aW9ucy5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdFx0aWQ6ICd0d2lua2xlYmxvY2stcHJldmlld2JveCcsXG5cdFx0XHRcdHN0eWxlOiAnZGlzcGxheTogbm9uZScsXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKHRhZ0JveCkge1xuXHRcdFx0ZmllbGRfdGFnX29wdGlvbnMgPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmoIforrDnlKjmiLfpobUnLCAn5qiZ6KiY5L2/55So6ICF6aCB6Z2iJyksXG5cdFx0XHRcdG5hbWU6ICdmaWVsZF90YWdfb3B0aW9ucycsXG5cdFx0XHR9KTtcblx0XHRcdGZpZWxkX3RhZ19vcHRpb25zLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdG5hbWU6ICd0YWcnLFxuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfpgInmi6nnlKjmiLfpobXmqKHmnb/vvJonLCAn6YG45pOH5L2/55So6ICF6aCB6Z2i5qih5p2/77yaJyksXG5cdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogYHt7QmxvY2tlZCB1c2VyfX3vvJoke3dpbmRvdy53Z1VMUygn5LiA6Iis5rC45LmF5bCB56aBJywgJ+S4gOiIrOawuOS5heWwgemOlicpfWAsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJ0Jsb2NrZWQgdXNlcicsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogYHt7U29ja3B1cHBldH1977yaJHt3aW5kb3cud2dVTFMoJ+WCgOWEoei0puWPtycsICflgoDlhKHos6zomZ8nKX1gLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICdTb2NrcHVwcGV0Jyxcblx0XHRcdFx0XHRcdHN1Ymdyb3VwOiBbXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lOiAnc3BwVXNlcm5hbWUnLFxuXHRcdFx0XHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Li76LSm5Y+355So5oi35ZCN77yaJywgJ+S4u+izrOiZn+S9v+eUqOiAheWQjeeose+8micpLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZTogJ3NwcFR5cGUnLFxuXHRcdFx0XHRcdFx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+eKtuaAge+8micsICfni4DmhYvvvJonKSxcblx0XHRcdFx0XHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6ICdvcHRpb24nLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogJ2Jsb2NrZWQnLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsYWJlbDogYGJsb2NrZWQgLSAke3dpbmRvdy53Z1VMUygn5LuF5L6d6KGM5Li66K+B5o2u6K6k5a6aJywgJ+WDheS+neihjOeCuuitieaTmuiqjeWumicpfWAsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNlbGVjdGVkOiB0cnVlLFxuXHRcdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogJ29wdGlvbicsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlOiAncHJvdmVuJyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0bGFiZWw6IGBwcm92ZW4gLSAke3dpbmRvdy53Z1VMUygn57uP5YKA5YSh6LCD5p+l56Gu6K6kJywgJ+e2k+WCgOWEoeiqv+afpeeiuuiqjScpfWAsXG5cdFx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsdWU6ICdjb25maXJtZWQnLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsYWJlbDogYGNvbmZpcm1lZCAtICR7d2luZG93LndnVUxTKCfnu4/mn6XmoLjnoa7orqQnLCAn57aT5p+l5qC456K66KqNJyl9YCxcblx0XHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdG5hbWU6ICdzcHBFdmlkZW5jZScsXG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmoLnmja7igKbigKbnoa7lrprvvJonLCAn5qC55pOa4oCm4oCm56K65a6a77yaJyksXG5cdFx0XHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdFx0J+e6r+aWh+Wtl+aIluaYr+W4pltbXV3nmoTpk77mjqXvvIzkvovlpoLvvJpbW1NwZWNpYWw65Zu65a6a6ZO+5o6lL3h4eHh4eHh4fOeUqOaIt+afpeaguF1dJyxcblx0XHRcdFx0XHRcdFx0XHRcdCfntJTmloflrZfmiJbmmK/luLZbW11d55qE6YCj57WQ77yM5L6L5aaC77yaW1tTcGVjaWFsOuWbuuWumumTvuaOpS94eHh4eHh4eHznlKjmiLbmn6XmoLhdXSdcblx0XHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiBge3tTb2NrcHVwcGV0ZWVyfGJsb2NrZWR9fe+8miR7d2luZG93LndnVUxTKCflgoDlhKHkuLvotKblj7cnLCAn5YKA5YSh5Li76LOs6JmfJyl9YCxcblx0XHRcdFx0XHRcdHZhbHVlOiAnU29ja3B1cHBldGVlcicsXG5cdFx0XHRcdFx0XHRzdWJncm91cDogW1xuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0XHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5hbWU6ICdzcG1DaGVja2VkJyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsdWU6ICdzcG1DaGVja2VkJyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn57uP55So5oi35p+l5qC456Gu6K6kJywgJ+e2k+S9v+eUqOiAheafpeaguOeiuuiqjScpLFxuXHRcdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRdLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZTogJ3NwbUV2aWRlbmNlJyxcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+mineWklueQhueUse+8micsICfpoY3lpJbnkIbnlLHvvJonKSxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdF0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAodW5ibG9ja0JveCkge1xuXHRcdFx0ZmllbGRfdW5ibG9ja19vcHRpb25zID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybS5lbGVtZW50KHtcblx0XHRcdFx0dHlwZTogJ2ZpZWxkJyxcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6Kej6Zmk5bCB56aB6YCJ6aG5JywgJ+ino+mZpOWwgemOlumBuOmghScpLFxuXHRcdFx0XHRuYW1lOiAnZmllbGRfdW5ibG9ja19vcHRpb25zJyxcblx0XHRcdH0pO1xuXHRcdFx0ZmllbGRfdW5ibG9ja19vcHRpb25zLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICd0ZXh0YXJlYScsXG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+eQhueUse+8iOeUqOS6juWwgeemgeaXpeW/l++8ie+8micsICfnkIbnlLHvvIjnlKjmlrzlsIHpjpbml6XoqozvvInvvJonKSxcblx0XHRcdFx0bmFtZTogJ3JlYXNvbicsXG5cdFx0XHRcdHZhbHVlOiBUd2lua2xlLmJsb2NrLmZpZWxkX3VuYmxvY2tfb3B0aW9ucy5yZWFzb24sXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0bGV0IG9sZGZpZWxkO1xuXHRcdGlmIChmaWVsZF9wcmVzZXQpIHtcblx0XHRcdFtvbGRmaWVsZF0gPSAkZm9ybS5maW5kKCdmaWVsZHNldFtuYW1lPVwiZmllbGRfcHJlc2V0XCJdJyk7XG5cdFx0XHRvbGRmaWVsZC5yZXBsYWNlV2l0aChmaWVsZF9wcmVzZXQucmVuZGVyKCkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkZm9ybS5maW5kKCdmaWVsZHNldFtuYW1lPVwiZmllbGRfcHJlc2V0XCJdJykuaGlkZSgpO1xuXHRcdH1cblx0XHRpZiAoZmllbGRfYmxvY2tfb3B0aW9ucykge1xuXHRcdFx0W29sZGZpZWxkXSA9ICRmb3JtLmZpbmQoJ2ZpZWxkc2V0W25hbWU9XCJmaWVsZF9ibG9ja19vcHRpb25zXCJdJyk7XG5cdFx0XHRvbGRmaWVsZC5yZXBsYWNlV2l0aChmaWVsZF9ibG9ja19vcHRpb25zLnJlbmRlcigpKTtcblx0XHRcdCRmb3JtLmZpbmQoJ2ZpZWxkc2V0W25hbWU9XCJmaWVsZF82NFwiXScpLnNob3coKTtcblx0XHRcdCRmb3JtLmZpbmQoJ1tuYW1lPXBhZ2VyZXN0cmljdGlvbnNdJykuc2VsZWN0Mih7XG5cdFx0XHRcdHdpZHRoOiAnMTAwJScsXG5cdFx0XHRcdHBsYWNlaG9sZGVyOiB3aW5kb3cud2dVTFMoJ+i+k+WFpeimgemYu+atoueUqOaIt+e8lui+keeahOmhtemdoicsICfovLjlhaXopoHpmLvmraLkvb/nlKjogIXnt6jovK/nmoTpoIHpnaInKSxcblx0XHRcdFx0bGFuZ3VhZ2U6IHtcblx0XHRcdFx0XHRlcnJvckxvYWRpbmc6ICgpID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiB3aW5kb3cud2dVTFMoJ+aQnOe0ouivjeaxh+S4jeWujOaVtOaIluaXoOaViCcsICfmkJzlsIvoqZ7lvZnkuI3lrozmlbTmiJbnhKHmlYgnKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRtYXhpbXVtU2VsZWN0aW9uTGVuZ3RoOiAxMCxcblx0XHRcdFx0bWluaW11bUlucHV0TGVuZ3RoOiAxLFxuXHRcdFx0XHRhamF4OiB7XG5cdFx0XHRcdFx0dXJsOiBtdy51dGlsLndpa2lTY3JpcHQoJ2FwaScpLFxuXHRcdFx0XHRcdGRhdGFUeXBlOiAnanNvbicsXG5cdFx0XHRcdFx0ZGVsYXk6IDEwMCxcblx0XHRcdFx0XHRkYXRhOiAocGFyYW1zKSA9PiB7XG5cdFx0XHRcdFx0XHRjb25zdCB0aXRsZSA9IG13LlRpdGxlLm5ld0Zyb21UZXh0KHBhcmFtcy50ZXJtKTtcblx0XHRcdFx0XHRcdGlmICghdGl0bGUpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0YWN0aW9uOiAncXVlcnknLFxuXHRcdFx0XHRcdFx0XHRmb3JtYXQ6ICdqc29uJyxcblx0XHRcdFx0XHRcdFx0bGlzdDogJ2FsbHBhZ2VzJyxcblx0XHRcdFx0XHRcdFx0YXBmcm9tOiB0aXRsZS50aXRsZSxcblx0XHRcdFx0XHRcdFx0YXBuYW1lc3BhY2U6IHRpdGxlLm5hbWVzcGFjZSxcblx0XHRcdFx0XHRcdFx0YXBsaW1pdDogJzEwJyxcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRwcm9jZXNzUmVzdWx0czogKGRhdGEpID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHM6IGRhdGEucXVlcnkuYWxscGFnZXMubWFwKChwYWdlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgdGl0bGUgPSBtdy5UaXRsZS5uZXdGcm9tVGV4dChwYWdlLnRpdGxlLCBwYWdlLm5zKS50b1RleHQoKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWQ6IHRpdGxlLFxuXHRcdFx0XHRcdFx0XHRcdFx0dGV4dDogdGl0bGUsXG5cdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0fSksXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRlbXBsYXRlU2VsZWN0aW9uOiAoY2hvaWNlKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuICQoJzxhPicpXG5cdFx0XHRcdFx0XHQudGV4dChjaG9pY2UudGV4dClcblx0XHRcdFx0XHRcdC5hdHRyKHtcblx0XHRcdFx0XHRcdFx0aHJlZjogbXcudXRpbC5nZXRVcmwoY2hvaWNlLnRleHQpLFxuXHRcdFx0XHRcdFx0XHR0YXJnZXQ6ICdfYmxhbmsnLFxuXHRcdFx0XHRcdFx0XHRyZWw6ICdub29wZW5lciBub3JlZmVycmVyJyxcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSk7XG5cdFx0XHQkZm9ybS5maW5kKCdbbmFtZT1uYW1lc3BhY2VyZXN0cmljdGlvbnNdJykuc2VsZWN0Mih7XG5cdFx0XHRcdHdpZHRoOiAnMTAwJScsXG5cdFx0XHRcdG1hdGNoZXI6IE1vcmViaXRzLnNlbGVjdDIubWF0Y2hlcnMud29yZEJlZ2lubmluZyxcblx0XHRcdFx0bGFuZ3VhZ2U6IHtcblx0XHRcdFx0XHRzZWFyY2hpbmc6IE1vcmViaXRzLnNlbGVjdDIucXVlcnlJbnRlcmNlcHRvcixcblx0XHRcdFx0fSxcblx0XHRcdFx0dGVtcGxhdGVSZXN1bHQ6IE1vcmViaXRzLnNlbGVjdDIuaGlnaGxpZ2h0U2VhcmNoTWF0Y2hlcyxcblx0XHRcdFx0cGxhY2Vob2xkZXI6IHdpbmRvdy53Z1VMUygn6YCJ5oup6KaB56aB5q2i55So5oi357yW6L6R55qE5ZG95ZCN56m66Ze0JywgJ+mBuOaTh+imgeemgeatouS9v+eUqOiAhee3qOi8r+eahOWRveWQjeepuumWkycpLFxuXHRcdFx0fSk7XG5cdFx0XHRtdy51dGlsLmFkZENTUyhcblx0XHRcdFx0LyogUmVkdWNlIHBhZGRpbmc7XG5cdFx0XHRcdCAqIEFkanVzdCBmb250IHNpemU7XG5cdFx0XHRcdCAqIFJlbW92ZSBibGFjayBib3JkZXI7XG5cdFx0XHRcdCAqIE1ha2UgdGhlIHRpbnkgY3Jvc3MgbGFyZ2VyXG5cdFx0XHRcdCAqL1xuXHRcdFx0XHQnLnNlbGVjdDItcmVzdWx0cyAuc2VsZWN0Mi1yZXN1bHRzX19vcHRpb257cGFkZGluZy10b3A6MXB4O3BhZGRpbmctYm90dG9tOjFweH0uc2VsZWN0Mi1jb250YWluZXIgLnNlbGVjdDItZHJvcGRvd24gLnNlbGVjdDItcmVzdWx0cywuc2VsZWN0Mi1jb250YWluZXIgLnNlbGVjdGlvbiAuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVke2ZvbnQtc2l6ZToxM3B4fS5zZWxlY3QyLWNvbnRhaW5lci0tZGVmYXVsdC5zZWxlY3QyLWNvbnRhaW5lci0tZm9jdXMgLnNlbGVjdDItc2VsZWN0aW9uLS1tdWx0aXBsZXtib3JkZXI6MXB4IHNvbGlkICNhYWF9LnNlbGVjdDItc2VsZWN0aW9uX19jaG9pY2VfX3JlbW92ZXtmb250LXNpemU6MTI1JX0nXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkZm9ybS5maW5kKCdmaWVsZHNldFtuYW1lPVwiZmllbGRfYmxvY2tfb3B0aW9uc1wiXScpLmhpZGUoKTtcblx0XHRcdCRmb3JtLmZpbmQoJ2ZpZWxkc2V0W25hbWU9XCJmaWVsZF82NFwiXScpLmhpZGUoKTtcblx0XHRcdC8vIENsZWFyIHNlbGVjdDIgb3B0aW9uc1xuXHRcdFx0JGZvcm0uZmluZCgnW25hbWU9cGFnZXJlc3RyaWN0aW9uc10nKS52YWwobnVsbCkudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0XHQkZm9ybS5maW5kKCdbbmFtZT1uYW1lc3BhY2VyZXN0cmljdGlvbnNdJykudmFsKG51bGwpLnRyaWdnZXIoJ2NoYW5nZScpO1xuXHRcdH1cblx0XHRpZiAoZmllbGRfdGVtcGxhdGVfb3B0aW9ucykge1xuXHRcdFx0W29sZGZpZWxkXSA9ICRmb3JtLmZpbmQoJ2ZpZWxkc2V0W25hbWU9XCJmaWVsZF90ZW1wbGF0ZV9vcHRpb25zXCJdJyk7XG5cdFx0XHRvbGRmaWVsZC5yZXBsYWNlV2l0aChmaWVsZF90ZW1wbGF0ZV9vcHRpb25zLnJlbmRlcigpKTtcblx0XHRcdGUudGFyZ2V0LmZvcm0ucm9vdC5wcmV2aWV3ZXIgPSBuZXcgTW9yZWJpdHMud2lraS5wcmV2aWV3KFxuXHRcdFx0XHQkKGUudGFyZ2V0LmZvcm0ucm9vdCkuZmluZCgnI3R3aW5rbGVibG9jay1wcmV2aWV3Ym94JykubGFzdCgpWzBdXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkZm9ybS5maW5kKCdmaWVsZHNldFtuYW1lPVwiZmllbGRfdGVtcGxhdGVfb3B0aW9uc1wiXScpLmhpZGUoKTtcblx0XHR9XG5cdFx0aWYgKGZpZWxkX3RhZ19vcHRpb25zKSB7XG5cdFx0XHRbb2xkZmllbGRdID0gJGZvcm0uZmluZCgnZmllbGRzZXRbbmFtZT1cImZpZWxkX3RhZ19vcHRpb25zXCJdJyk7XG5cdFx0XHRvbGRmaWVsZC5yZXBsYWNlV2l0aChmaWVsZF90YWdfb3B0aW9ucy5yZW5kZXIoKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCRmb3JtLmZpbmQoJ2ZpZWxkc2V0W25hbWU9XCJmaWVsZF90YWdfb3B0aW9uc1wiXScpLmhpZGUoKTtcblx0XHR9XG5cdFx0aWYgKGZpZWxkX3VuYmxvY2tfb3B0aW9ucykge1xuXHRcdFx0W29sZGZpZWxkXSA9ICRmb3JtLmZpbmQoJ2ZpZWxkc2V0W25hbWU9XCJmaWVsZF91bmJsb2NrX29wdGlvbnNcIl0nKTtcblx0XHRcdG9sZGZpZWxkLnJlcGxhY2VXaXRoKGZpZWxkX3VuYmxvY2tfb3B0aW9ucy5yZW5kZXIoKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCRmb3JtLmZpbmQoJ2ZpZWxkc2V0W25hbWU9XCJmaWVsZF91bmJsb2NrX29wdGlvbnNcIl0nKS5oaWRlKCk7XG5cdFx0fVxuXHRcdC8vIEFueSBibG9jaywgaW5jbHVkaW5nIHJhbmdlc1xuXHRcdGlmIChUd2lua2xlLmJsb2NrLmN1cnJlbnRCbG9ja0luZm8pIHtcblx0XHRcdC8vIGZhbHNlIGZvciBhbiBpcCBjb3ZlcmVkIGJ5IGEgcmFuZ2Ugb3IgYSBzbWFsbGVyIHJhbmdlIHdpdGhpbiBhIGxhcmdlciByYW5nZTtcblx0XHRcdC8vIHRydWUgZm9yIGEgdXNlciwgc2luZ2xlIGlwIGJsb2NrLCBvciB0aGUgZXhhY3QgcmFuZ2UgZm9yIGEgcmFuZ2UgYmxvY2tcblx0XHRcdGNvbnN0IHNhbWVVc2VyID0gYmxvY2tlZFVzZXJOYW1lID09PSByZWxldmFudFVzZXJOYW1lO1xuXHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoJGJvZHkuZmluZCgnZGl2W25hbWU9XCJjdXJyZW50YmxvY2tcIl0gc3BhbicpLmxhc3QoKVswXSk7XG5cdFx0XHRsZXQgc3RhdHVzU3RyID0gYCR7cmVsZXZhbnRVc2VyTmFtZX3lt7Looqske1xuXHRcdFx0XHRUd2lua2xlLmJsb2NrLmN1cnJlbnRCbG9ja0luZm8ucGFydGlhbCA9PT0gJydcblx0XHRcdFx0XHQ/IHdpbmRvdy53Z1VMUygn6YOo5YiG5bCB56aBJywgJ+mDqOWIhuWwgemOlicpXG5cdFx0XHRcdFx0OiB3aW5kb3cud2dVTFMoJ+WFqOermeWwgeemgScsICflhajnq5nlsIHpjpYnKVxuXHRcdFx0fWA7XG5cdFx0XHQvLyBSYW5nZSBibG9ja2VkXG5cdFx0XHRpZiAoVHdpbmtsZS5ibG9jay5jdXJyZW50QmxvY2tJbmZvLnJhbmdlc3RhcnQgIT09IFR3aW5rbGUuYmxvY2suY3VycmVudEJsb2NrSW5mby5yYW5nZWVuZCkge1xuXHRcdFx0XHRpZiAoc2FtZVVzZXIpIHtcblx0XHRcdFx0XHRzdGF0dXNTdHIgKz0gd2luZG93LndnVUxTKCfvvIjmrrXlsIHnpoHvvIknLCAn77yI5q615bCB6Y6W77yJJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gQ2hhbmdlIG9yZGVyXG5cdFx0XHRcdFx0Ly8gTGluayB0byB0aGUgZnVsbCByYW5nZVxuXHRcdFx0XHRcdGNvbnN0ICRyYW5nZWJsb2NrbG9nbGluayA9ICQoJzxzcGFuPicpLmFwcGVuZChcblx0XHRcdFx0XHRcdCQoXG5cdFx0XHRcdFx0XHRcdGA8YSByZWw9XCJub29wZW5lclwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIke213LnV0aWwuZ2V0VXJsKCdTcGVjaWFsOkxvZycsIHtcblx0XHRcdFx0XHRcdFx0XHRhY3Rpb246ICd2aWV3Jyxcblx0XHRcdFx0XHRcdFx0XHRwYWdlOiBibG9ja2VkVXNlck5hbWUsXG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogJ2Jsb2NrJyxcblx0XHRcdFx0XHRcdFx0fSl9XCI+JHtcblx0XHRcdFx0XHRcdFx0XHRNb3JlYml0cy5pcC5nZXQ2NChyZWxldmFudFVzZXJOYW1lKSA9PT0gYmxvY2tlZFVzZXJOYW1lID8gJy82NCcgOiBibG9ja2VkVXNlck5hbWVcblx0XHRcdFx0XHRcdFx0fTwvYT4pYFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0c3RhdHVzU3RyICs9XG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ++8iOS9jeS6jicsICfvvIjkvY3mlrwnKSArXG5cdFx0XHRcdFx0XHQkcmFuZ2VibG9ja2xvZ2xpbmsuaHRtbCgpICtcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5q615bCB56aB5YaF77yJJywgJ+auteWwgemOluWFp++8iScpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoVHdpbmtsZS5ibG9jay5jdXJyZW50QmxvY2tJbmZvLmV4cGlyeSA9PT0gJ2luZmluaXR5Jykge1xuXHRcdFx0XHRzdGF0dXNTdHIgKz0gd2luZG93LndnVUxTKCfvvIjml6DpmZDmnJ/vvIknLCAn77yI54Sh6ZmQ5pyf77yJJyk7XG5cdFx0XHR9IGVsc2UgaWYgKG5ldyBNb3JlYml0cy5kYXRlKFR3aW5rbGUuYmxvY2suY3VycmVudEJsb2NrSW5mby5leHBpcnkpLmlzVmFsaWQoKSkge1xuXHRcdFx0XHRzdGF0dXNTdHIgKz0gYCR7XG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfvvIjnu4jmraLkuo4nLCAn77yI57WC5q2i5pa8JykgK1xuXHRcdFx0XHRcdG5ldyBNb3JlYml0cy5kYXRlKFR3aW5rbGUuYmxvY2suY3VycmVudEJsb2NrSW5mby5leHBpcnkpLmNhbGVuZGFyKCd1dGMnKVxuXHRcdFx0XHR977yJYDtcblx0XHRcdH1cblx0XHRcdGxldCBpbmZvU3RyID0gd2luZG93LndnVUxTKCfmraTooajljZXlsIYnLCAn5q2k6KGo5Zau5bCHJyk7XG5cdFx0XHRpZiAoc2FtZVVzZXIpIHtcblx0XHRcdFx0aW5mb1N0ciArPSB3aW5kb3cud2dVTFMoJ+abtOaUueWwgeemgScsICforormm7TlsIHpjpYnKTtcblx0XHRcdFx0aWYgKFR3aW5rbGUuYmxvY2suY3VycmVudEJsb2NrSW5mby5wYXJ0aWFsID09PSB1bmRlZmluZWQgJiYgcGFydGlhbEJveCkge1xuXHRcdFx0XHRcdGluZm9TdHIgKz0gd2luZG93LndnVUxTKCfkuLrpg6jliIblsIHnpoEnLCAn54K66YOo5YiG5bCB6Y6WJyk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoVHdpbmtsZS5ibG9jay5jdXJyZW50QmxvY2tJbmZvLnBhcnRpYWwgPT09ICcnICYmICFwYXJ0aWFsQm94KSB7XG5cdFx0XHRcdFx0aW5mb1N0ciArPSB3aW5kb3cud2dVTFMoJ+S4uuWFqOermeWwgeemgScsICfngrrlhajnq5nlsIHpjpYnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmZvU3RyICs9ICfjgIInO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aW5mb1N0ciArPVxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5Yqg5LiK6aKd5aSW55qEJywgJ+WKoOS4iumhjeWklueahCcpICtcblx0XHRcdFx0XHQocGFydGlhbEJveCA/ICfpg6jliIYnIDogJycpICtcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WwgeemgeOAgicsICflsIHpjpbjgIInKTtcblx0XHRcdH1cblx0XHRcdE1vcmViaXRzLnN0YXR1cy53YXJuKHN0YXR1c1N0ciwgaW5mb1N0cik7XG5cdFx0XHQvLyBEZWZhdWx0IHRvIHRoZSBjdXJyZW50IGJsb2NrIGNvbmRpdGlvbnMgb24gaW50aWFsIGZvcm0gZ2VuZXJhdGlvblxuXHRcdFx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay51cGRhdGVfZm9ybShlLCBUd2lua2xlLmJsb2NrLmN1cnJlbnRCbG9ja0luZm8pO1xuXHRcdH1cblx0XHQvLyBUaGlzIGlzIHdoZXJlIFQxNDY2MjggcmVhbGx5IGNvbWVzIGludG8gcGxheTogYSByYW5nZWJsb2NrIHdpbGxcblx0XHQvLyBvbmx5IHJldHVybiB0aGUgY29ycmVjdCBibG9jayBsb2cgaWYgd2dSZWxldmFudFVzZXJOYW1lIGlzIHRoZVxuXHRcdC8vIGV4YWN0IHJhbmdlLCBub3QgbWVyZWx5IGEgZnVudGlvbmFsIGVxdWl2YWxlbnRcblx0XHRpZiAoVHdpbmtsZS5ibG9jay5oYXNCbG9ja0xvZykge1xuXHRcdFx0Ly8gQWRkIG1vcmUgZGV0YWlsc1xuXHRcdFx0Y29uc3QgYmxvY2tsb2dpbmZvID0gW107XG5cdFx0XHRjb25zdCAkYmxvY2tsb2dsaW5rID0gJCgnPHNwYW4+JykuYXBwZW5kKFxuXHRcdFx0XHQkKFxuXHRcdFx0XHRcdGA8YSByZWw9XCJub29wZW5lclwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIke213LnV0aWwuZ2V0VXJsKCdTcGVjaWFsOkxvZycsIHtcblx0XHRcdFx0XHRcdGFjdGlvbjogJ3ZpZXcnLFxuXHRcdFx0XHRcdFx0cGFnZTogcmVsZXZhbnRVc2VyTmFtZSxcblx0XHRcdFx0XHRcdHR5cGU6ICdibG9jaycsXG5cdFx0XHRcdFx0fSl9XCI+JHt3aW5kb3cud2dVTFMoJ+WwgeemgeaXpeW/lycsICflsIHpjpbml6XoqownKX08L2E+KWBcblx0XHRcdFx0KVxuXHRcdFx0KTtcblx0XHRcdGlmIChUd2lua2xlLmJsb2NrLmN1cnJlbnRCbG9ja0luZm8pIHtcblx0XHRcdFx0YmxvY2tsb2dpbmZvW2Jsb2NrbG9naW5mby5sZW5ndGhdID0gd2luZG93LndnVUxTKCflsIHnpoHor6bmg4UnLCAn5bCB6Y6W6Kmz5oOFJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCBbbGFzdEJsb2NrQWN0aW9uXSA9IFR3aW5rbGUuYmxvY2suYmxvY2tMb2c7XG5cdFx0XHRcdGNvbnN0IGJsb2NrQWN0aW9uID0gbGFzdEJsb2NrQWN0aW9uLmFjdGlvbiA9PT0gJ3VuYmxvY2snID8gVHdpbmtsZS5ibG9jay5ibG9ja0xvZ1sxXSA6IGxhc3RCbG9ja0FjdGlvbjtcblx0XHRcdFx0YmxvY2tsb2dpbmZvW2Jsb2NrbG9naW5mby5sZW5ndGhdID1cblx0XHRcdFx0XHQoYOatpCR7XG5cdFx0XHRcdFx0XHRNb3JlYml0cy5pcC5pc1JhbmdlKHJlbGV2YW50VXNlck5hbWUpXG5cdFx0XHRcdFx0XHRcdD8gd2luZG93LndnVUxTKCdJUOiMg+WbtCcsICdJUOevhOWcjScpXG5cdFx0XHRcdFx0XHRcdDogd2luZG93LndnVUxTKCfnlKjmiLcnLCAn5L2/55So6ICFJylcblx0XHRcdFx0XHR95pu+5ZyoYCxcblx0XHRcdFx0XHQkKCc8Yj4nKS50ZXh0KG5ldyBNb3JlYml0cy5kYXRlKGJsb2NrQWN0aW9uLnRpbWVzdGFtcCkuY2FsZW5kYXIoJ3V0YycpKVswXSxcblx0XHRcdFx0XHRg6KKrJHtibG9ja0FjdGlvbi51c2VyfSR7d2luZG93LndnVUxTKCflsIHnpoEnLCAn5bCB6Y6WJyl9YCxcblx0XHRcdFx0XHQkKCc8Yj4nKS50ZXh0KE1vcmViaXRzLnN0cmluZy5mb3JtYXRUaW1lKGJsb2NrQWN0aW9uLnBhcmFtcy5kdXJhdGlvbikpWzBdKTtcblx0XHRcdFx0aWYgKGxhc3RCbG9ja0FjdGlvbi5hY3Rpb24gPT09ICd1bmJsb2NrJykge1xuXHRcdFx0XHRcdGJsb2NrbG9naW5mb1tibG9ja2xvZ2luZm8ubGVuZ3RoXSA9XG5cdFx0XHRcdFx0XHRg77yMJHtuZXcgTW9yZWJpdHMuZGF0ZShsYXN0QmxvY2tBY3Rpb24udGltZXN0YW1wKS5jYWxlbmRhcigndXRjJyl96Kej5bCBYDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBibG9jayBvciByZWJsb2NrXG5cdFx0XHRcdFx0YmxvY2tsb2dpbmZvW2Jsb2NrbG9naW5mby5sZW5ndGhdID1cblx0XHRcdFx0XHRcdGDvvIwke25ldyBNb3JlYml0cy5kYXRlKGJsb2NrQWN0aW9uLnBhcmFtcy5leHBpcnkpLmNhbGVuZGFyKCd1dGMnKX0ke3dpbmRvdy53Z1VMUygn6L+H5pyfJywgJ+mBjuacnycpfWA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdE1vcmViaXRzLnN0YXR1cy5pbml0KCRib2R5LmZpbmQoJ2RpdltuYW1lPVwiaGFzYmxvY2tsb2dcIl0gc3BhbicpLmxhc3QoKVswXSk7XG5cdFx0XHRNb3JlYml0cy5zdGF0dXMud2FybihibG9ja2xvZ2luZm8sICRibG9ja2xvZ2xpbmtbMF0pO1xuXHRcdH1cblx0XHQvLyBNYWtlIHN1cmUgYWxsIHRoZSBmaWVsZHMgYXJlIGNvcnJlY3QgYmFzZWQgb24gaW5pdGlhbCBkZWZhdWx0c1xuXHRcdGlmIChibG9ja0JveCkge1xuXHRcdFx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay5jaGFuZ2VfcHJlc2V0KGUpO1xuXHRcdH0gZWxzZSBpZiAodGVtcGxhdGVCb3gpIHtcblx0XHRcdFR3aW5rbGUuYmxvY2suY2FsbGJhY2suY2hhbmdlX3RlbXBsYXRlKGUpO1xuXHRcdH1cblx0fTtcblx0LyoqXG5cdCAqIEtlZXAgYWxwaGFiZXRpemVkIGJ5IGtleSBuYW1lLCBUd2lua2xlLmJsb2NrLmJsb2NrR3JvdXBzIGVzdGFibGlzaGVzXG5cdCAqICAgIHRoZSBvcmRlciB0aGV5IHdpbGwgYXBwZWFyIGluIHRoZSBpbnRlcmZhY2Vcblx0ICpcblx0ICogQmxvY2sgcHJlc2V0IGZvcm1hdCwgYWxsIGtleXMgYWNjZXB0IG9ubHkgJ3RydWUnIChvbWl0IGZvciBmYWxzZSkgZXhjZXB0IHdoZXJlIG5vdGVkOlxuXHQgKiA8dGl0bGUgb2YgYmxvY2sgdGVtcGxhdGU+IDoge1xuXHQgKiAgIGF1dG9ibG9jazogPGF1dG9ibG9jayBhbnkgSVAgYWRkcmVzc2VzIHVzZWQgKGZvciByZWdpc3RlcmVkIHVzZXJzIG9ubHkpPlxuXHQgKiAgIGRpc2FibGV0YWxrOiA8ZGlzYWJsZSB1c2VyIGZyb20gZWRpdGluZyB0aGVpciBvd24gdGFsayBwYWdlIHdoaWxlIGJsb2NrZWQ+XG5cdCAqICAgZXhwaXJ5OiA8c3RyaW5nIC0gZXhwaXJ5IHRpbWVzdGFtcCwgY2FuIGluY2x1ZGUgcmVsYXRpdmUgdGltZXMgbGlrZSBcIjUgbW9udGhzXCIsIFwiMiB3ZWVrc1wiIGV0Yz5cblx0ICogICBmb3JBbm9uT25seTogPHNob3cgYmxvY2sgb3B0aW9uIGluIHRoZSBpbnRlcmZhY2Ugb25seSBpZiB0aGUgcmVsZXZhbnQgdXNlciBpcyBhbiBJUD5cblx0ICogICBmb3JSZWdpc3RlcmVkT25seTogPHNob3cgYmxvY2sgb3B0aW9uIGluIHRoZSBpbnRlcmZhY2Ugb25seSBpZiB0aGUgcmVsZXZhbnQgdXNlciBpcyByZWdpc3RlcmVkPlxuXHQgKiAgIGxhYmVsOiA8c3RyaW5nIC0gbGFiZWwgZm9yIHRoZSBvcHRpb24gb2YgdGhlIGRyb3Bkb3duIGluIHRoZSBpbnRlcmZhY2UgKGtlZXAgYnJpZWYpPlxuXHQgKiAgIG5vZW1haWw6IHByZXZlbnQgdGhlIHVzZXIgZnJvbSBzZW5kaW5nIGVtYWlsIHRocm91Z2ggU3BlY2lhbDpFbWFpbHVzZXJcblx0ICogICBwYWdlUGFyYW06IDxzZXQgaWYgdGhlIGFzc29jaWF0ZWQgYmxvY2sgdGVtcGxhdGUgYWNjZXB0cyBhIHBhZ2UgcGFyYW1ldGVyPlxuXHQgKiAgIHByZXBlbmRSZWFzb246IDxzdHJpbmcgLSBwcmVwZW5kcyB0aGUgdmFsdWUgb2YgJ3JlYXNvbicgdG8gdGhlIGVuZCBvZiB0aGUgZXhpc3RpbmcgcmVhc29uLCBuYW1lbHkgZm9yIHdoZW4gcmV2b2tpbmcgdGFsayBwYWdlIGFjY2Vzcz5cblx0ICogICBub2NyZWF0ZTogPGJsb2NrIGFjY291bnQgY3JlYXRpb24gZnJvbSB0aGUgdXNlcidzIElQIChmb3IgYW5vbnltb3VzIHVzZXJzIG9ubHkpPlxuXHQgKiAgIG5vbnN0YW5kYXJkOiA8dGVtcGxhdGUgZG9lcyBub3QgY29uZm9ybSB0byBzdGV3YXJkc2hpcCBvZiBbW2Vud2lraTpXaWtpUHJvamVjdCBVc2VyIFdhcm5pbmdzXV0gYW5kIG1heSBub3QgYWNjZXB0IHN0YW5kYXJkIHBhcmFtZXRlcnM+XG5cdCAqICAgcmVhc29uOiA8c3RyaW5nIC0gYmxvY2sgcmF0aW9uYWxlLCBhcyB3b3VsZCBhcHBlYXIgaW4gdGhlIGJsb2NrIGxvZyxcblx0ICogICAgICAgICAgICBhbmQgdGhlIGVkaXQgc3VtbWFyeSBmb3Igd2hlbiBhZGRpbmcgYmxvY2sgdGVtcGxhdGUsIHVubGVzcyAnc3VtbWFyeScgaXMgc2V0PlxuXHQgKiAgIHJlYXNvblBhcmFtOiA8c2V0IGlmIHRoZSBhc3NvY2lhdGVkIGJsb2NrIHRlbXBsYXRlIGFjY2VwdHMgYSByZWFzb24gcGFyYW1ldGVyPlxuXHQgKiAgIHNpZzogPHN0cmluZyAtIHNldCB0byB+fn5+IGlmIGJsb2NrIHRlbXBsYXRlIGRvZXMgbm90IGFjY2VwdCBcInRydWVcIiBhcyB0aGUgdmFsdWUsIG9yIHNldCBudWxsIHRvIG9taXQgc2lnIHBhcmFtIGFsdG9nZXRoZXI+XG5cdCAqICAgc3VtbWFyeTogPHN0cmluZyAtIGVkaXQgc3VtbWFyeSBmb3Igd2hlbiBhZGRpbmcgYmxvY2sgdGVtcGxhdGUgdG8gdXNlcidzIHRhbGsgcGFnZSwgaWYgbm90IHNldCwgJ3JlYXNvbicgaXMgdXNlZD5cblx0ICogICBzdXBwcmVzc0FydGljbGVJblN1bW1hcnk6IDxzZXQgdG8gc3VwcHJlc3Mgc2hvd2luZyB0aGUgYXJ0aWNsZSBuYW1lIGluIHRoZSBlZGl0IHN1bW1hcnksIGFzIHdpdGggYXR0YWNrIHBhZ2VzPlxuXHQgKiAgIHRlbXBsYXRlTmFtZTogPHN0cmluZyAtIG5hbWUgb2YgdGVtcGxhdGUgdG8gdXNlIChpbnN0ZWFkIG9mIGtleSBuYW1lKSwgZW50cnkgd2lsbCBiZSBvbWl0dGVkIGZyb20gdGhlIFRlbXBsYXRlcyBsaXN0LlxuXHQgKiAgICAgICAgICAgICAgICAgIChlLmcuIHVzZSBhbm90aGVyIHRlbXBsYXRlIGJ1dCB3aXRoIGRpZmZlcmVudCBibG9jayBvcHRpb25zKT5cblx0ICogICB1c2VJbml0aWFsT3B0aW9uczogPHdoZW4gcHJlc2V0IGlzIGNob3Nlbiwgb25seSBjaGFuZ2UgZ2l2ZW4gYmxvY2sgb3B0aW9ucywgbGVhdmUgb3RoZXJzIGFzIHRoZXkgd2VyZT5cblx0ICpcblx0ICogV0FSTklORzogJ2Fub25vbmx5JyBhbmQgJ2FsbG93dXNlcnRhbGsnIGFyZSBlbmFibGVkIGJ5IGRlZmF1bHQuXG5cdCAqICAgVG8gZGlzYWJsZSwgc2V0ICdoYXJkYmxvY2snIGFuZCAnZGlzYWJsZXRhbGsnLCByZXNwZWN0aXZlbHlcblx0ICovXG5cdFR3aW5rbGUuYmxvY2suYmxvY2tQcmVzZXRzSW5mbyA9IHtcblx0XHQvLyB1dy1wcmVmaXhlZFxuXHRcdCd1dy1ibG9jayc6IHtcblx0XHRcdGF1dG9ibG9jazogdHJ1ZSxcblx0XHRcdGV4cGlyeTogJzEgZGF5Jyxcblx0XHRcdGZvclJlZ2lzdGVyZWRPbmx5OiB0cnVlLFxuXHRcdFx0bm9jcmVhdGU6IHRydWUsXG5cdFx0XHRwYWdlUGFyYW06IHRydWUsXG5cdFx0XHRyZWFzb25QYXJhbTogdHJ1ZSxcblx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5bCB56aB6YCa55+lJywgJ+WwgemOlumAmuefpScpLFxuXHRcdFx0c3VwcHJlc3NBcnRpY2xlSW5TdW1tYXJ5OiB0cnVlLFxuXHRcdH0sXG5cdFx0J3V3LWJsb2NraW5kZWYnOiB7XG5cdFx0XHRhdXRvYmxvY2s6IHRydWUsXG5cdFx0XHRleHBpcnk6ICdpbmZpbml0eScsXG5cdFx0XHRmb3JSZWdpc3RlcmVkT25seTogdHJ1ZSxcblx0XHRcdG5vY3JlYXRlOiB0cnVlLFxuXHRcdFx0cGFnZVBhcmFtOiB0cnVlLFxuXHRcdFx0cmVhc29uUGFyYW06IHRydWUsXG5cdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+WwgeemgemAmuefpScsICflsIHpjpbpgJrnn6UnKSxcblx0XHRcdHN1cHByZXNzQXJ0aWNsZUluU3VtbWFyeTogdHJ1ZSxcblx0XHR9LFxuXHRcdCd1dy1ibG9ja25vdGFsayc6IHtcblx0XHRcdGRpc2FibGV0YWxrOiB0cnVlLFxuXHRcdFx0cGFnZVBhcmFtOiB0cnVlLFxuXHRcdFx0cmVhc29uUGFyYW06IHRydWUsXG5cdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+WwgeemgemAmuefpe+8muemgeatoue8lui+keiuqOiuuumhtScsICflsIHpjpbpgJrnn6XvvJrnpoHmraLnt6jovK/oqI7oq5bpoIEnKSxcblx0XHRcdHN1cHByZXNzQXJ0aWNsZUluU3VtbWFyeTogdHJ1ZSxcblx0XHR9LFxuXHRcdCd1dy0zYmxvY2snOiB7XG5cdFx0XHRhdXRvYmxvY2s6IHRydWUsXG5cdFx0XHRleHBpcnk6ICcxIGRheScsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdHBhZ2VQYXJhbTogdHJ1ZSxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCfov53lj41bW0xJQjozUlJ85Zue6YCA5LiN6L+H5LiJ5Y6f5YiZXV0nLCAn6YGV5Y+NW1tMSUI6M1JSfOWbnumAgOS4jemBjuS4ieWOn+WJh11dJyksXG5cdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCflsIHnpoHpgJrnn6XvvJrov53lj41bW0xJQjozUlJ85Zue6YCA5LiN6L+H5LiJ5Y6f5YiZXV0nLFxuXHRcdFx0XHQn5bCB6Y6W6YCa55+l77ya6YGV5Y+NW1tMSUI6M1JSfOWbnumAgOS4jemBjuS4ieWOn+WJh11dJ1xuXHRcdFx0KSxcblx0XHR9LFxuXHRcdCd1dy1hZGJsb2NrJzoge1xuXHRcdFx0YXV0b2Jsb2NrOiB0cnVlLFxuXHRcdFx0bm9jcmVhdGU6IHRydWUsXG5cdFx0XHRwYWdlUGFyYW06IHRydWUsXG5cdFx0XHRyZWFzb246IHdpbmRvdy53Z1VMUygn5pWj5Y+RW1tMSUI6U09BUHzmlaPlj5Hlub/lkYrmiJblrqPkvKBdXScsICfmlaPnmbxbW0xJQjpTT0FQfOaVo+eZvOW7o+WRiuaIluWuo+WCs11dJyksXG5cdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCflsIHnpoHpgJrnn6XvvJrmlaPlj5FbW0xJQjpTT0FQfOaVo+WPkeW5v+WRiuaIluWuo+S8oF1dJyxcblx0XHRcdFx0J+WwgemOlumAmuefpe+8muaVo+eZvFtbTElCOlNPQVB85pWj55m85buj5ZGK5oiW5a6j5YKzXV0nXG5cdFx0XHQpLFxuXHRcdH0sXG5cdFx0J3V3LWF0dGFja2Jsb2NrJzoge1xuXHRcdFx0YXV0b2Jsb2NrOiB0cnVlLFxuXHRcdFx0ZXhwaXJ5OiAnMSBkYXknLFxuXHRcdFx0bm9jcmVhdGU6IHRydWUsXG5cdFx0XHRyZWFzb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0J1tbTElCOkNJVnzooYzkuLrml6DnpLxdXeaIlltbTElCOk5QQXzkurrouqvmlLvlh7tdXScsXG5cdFx0XHRcdCdbW0xJQjpDSVZ86KGM54K654Sh56auXV3miJZbW0xJQjpOUEF85Lq66Lqr5pS75pOKXV0nXG5cdFx0XHQpLFxuXHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKFxuXHRcdFx0XHQn5bCB56aB6YCa55+l77yaW1tMSUI6Q0lWfOihjOS4uuaXoOekvF1d5oiWW1tMSUI6TlBBfOS6uui6q+aUu+WHu11dJyxcblx0XHRcdFx0J+WwgemOlumAmuefpe+8mltbTElCOkNJVnzooYzngrrnhKHnpq5dXeaIlltbTElCOk5QQXzkurrouqvmlLvmk4pdXSdcblx0XHRcdCksXG5cdFx0fSxcblx0XHQndXctY29weXJpZ2h0YmxvY2snOiB7XG5cdFx0XHRhdXRvYmxvY2s6IHRydWUsXG5cdFx0XHRleHBpcnk6ICdpbmZpbml0eScsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdHBhZ2VQYXJhbTogdHJ1ZSxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCfmjIHnu61bW0xJQjpDT1BZVklPfOS+teeKr+iRl+S9nOadg11dJywgJ+aMgee6jFtbTElCOkNPUFlWSU985L6154qv6JGX5L2c5qyKXV0nKSxcblx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0J+WwgeemgemAmuefpe+8muaMgee7rVtbTElCOkNPUFlWSU985L6154qv6JGX5L2c5p2DXV0nLFxuXHRcdFx0XHQn5bCB6Y6W6YCa55+l77ya5oyB57qMW1tMSUI6Q09QWVZJT3zkvrXniq/okZfkvZzmrIpdXSdcblx0XHRcdCksXG5cdFx0XHR0ZW1wbGF0ZU5hbWU6ICd1dy1ibG9ja2luZGVmJyxcblx0XHR9LFxuXHRcdCd1dy1kYmxvY2snOiB7XG5cdFx0XHRhdXRvYmxvY2s6IHRydWUsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdHBhZ2VQYXJhbTogdHJ1ZSxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCfmjIHnu61bW0xJQjpWQU585Yig6Zmk5YaF5a65XV0nLCAn5oyB57qMW1tMSUI6VkFOfOWIqumZpOWFp+WuuV1dJyksXG5cdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+WwgeemgemAmuefpe+8muaMgee7rVtbTElCOlZBTnzliKDpmaTlhoXlrrldXScsICflsIHpjpbpgJrnn6XvvJrmjIHnuoxbW0xJQjpWQU585Yiq6Zmk5YWn5a65XV0nKSxcblx0XHR9LFxuXHRcdCd1dy1oYmxvY2snOiB7XG5cdFx0XHRhdXRvYmxvY2s6IHRydWUsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdHBhZ2VQYXJhbTogdHJ1ZSxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCdbW0xJQjrpqprmibB86aqa5omwXV3lhbbku5bnlKjmiLcnLCAnW1tMSUI66ai35pO+fOmot+aTvl1d5YW25LuW5L2/55So6ICFJyksXG5cdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+WwgeemgemAmuefpe+8mltbTElCOumqmuaJsHzpqprmibBdXeWFtuS7lueUqOaItycsICflsIHpjpbpgJrnn6XvvJpbW0xJQjrpqLfmk7586ai35pO+XV3lhbbku5bkvb/nlKjogIUnKSxcblx0XHR9LFxuXHRcdCd1dy12YmxvY2snOiB7XG5cdFx0XHRhdXRvYmxvY2s6IHRydWUsXG5cdFx0XHRleHBpcnk6ICcxIGRheScsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdHBhZ2VQYXJhbTogdHJ1ZSxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCdbW0xJQjpWQU5856C05Z2PXV0nLCAnW1tMSUI6VkFOfOegtOWjnl1dJyksXG5cdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+WwgeemgemAmuefpe+8mltbTElCOlZBTnznoLTlnY9dXScsICflsIHpjpbpgJrnn6XvvJpbW0xJQjpWQU5856C05aOeXV0nKSxcblx0XHR9LFxuXHRcdCd1dy1pbGxlZ2FsYmxvY2snOiB7XG5cdFx0XHRhdXRvYmxvY2s6IHRydWUsXG5cdFx0XHRleHBpcnk6ICcxIGRheScsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdHBhZ2VQYXJhbTogdHJ1ZSxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCfmjIHnu63liqDlhaXpnZ7ms5XlhoXlrrknLCAn5oyB57qM5Yqg5YWl6Z2e5rOV5YWn5a65JyksXG5cdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+WwgeemgemAmuefpe+8muaMgee7reWKoOWFpemdnuazleWGheWuuScsICflsIHpjpbpgJrnn6XvvJrmjIHnuozliqDlhaXpnZ7ms5XlhaflrrknKSxcblx0XHR9LFxuXHRcdCd1dy1zb2NrYmxvY2snOiB7XG5cdFx0XHRhdXRvYmxvY2s6IHRydWUsXG5cdFx0XHRleHBpcnk6ICcxIHdlZWsnLFxuXHRcdFx0Zm9yUmVnaXN0ZXJlZE9ubHk6IHRydWUsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCfmu6XnlKhbW0xJQjpTT0NLfOWkmuS4qui0puWPt11dJywgJ+a/q+eUqFtbTElCOlNPQ0t85aSa5YCL6LOs6JmfXV0nKSxcblx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5bCB56aB6YCa55+l77ya5rul55SoW1tMSUI6U09DS3zlpJrkuKrotKblj7ddXScsICflsIHpjpbpgJrnn6XvvJrmv6vnlKhbW0xJQjpTT0NLfOWkmuWAi+izrOiZn11dJyksXG5cdFx0XHR0ZW1wbGF0ZU5hbWU6ICd1dy1ibG9jaycsXG5cdFx0fSxcblx0XHQvLyB1dy11LXByZWZpeGVkXG5cdFx0J3V3LXVibG9jayc6IHtcblx0XHRcdGV4cGlyeTogJ2luZmluaXR5Jyxcblx0XHRcdGZvclJlZ2lzdGVyZWRPbmx5OiB0cnVlLFxuXHRcdFx0cmVhc29uOiBge3t1dy11YmxvY2t9fTwhLS0gJHt3aW5kb3cud2dVTFMoJ+S4jeW9k+eUqOaIt+WQjeOAgei9r+WwgeemgScsICfkuI3nlbbkvb/nlKjogIXlkI3nqLEnKX0gLS0+YCxcblx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0J+WwgeemgemAmuefpe+8muaCqOeahOeUqOaIt+WQjei/neWPjVtbTElCOlV855So5oi35ZCN5p2h5L6LXV0nLFxuXHRcdFx0XHQn5bCB6Y6W6YCa55+l77ya5oKo55qE5L2/55So6ICF5ZCN56ix6YGV5Y+NW1tMSUI6VXzkvb/nlKjogIXlkI3nqLHmop3kvotdXSdcblx0XHRcdCksXG5cdFx0fSxcblx0XHQndXctdWJsb2NrLWlsbGVnYWwnOiB7XG5cdFx0XHRhdXRvYmxvY2s6IHRydWUsXG5cdFx0XHRleHBpcnk6ICdpbmZpbml0eScsXG5cdFx0XHRmb3JSZWdpc3RlcmVkT25seTogdHJ1ZSxcblx0XHRcdG5vY3JlYXRlOiB0cnVlLFxuXHRcdFx0cmVhc29uOiBge3t1dy11YmxvY2staWxsZWdhbH19PCEtLSAke3dpbmRvdy53Z1VMUygn5LiN5ZCI6KeE55qE55So5oi35ZCNJywgJ+S4jeWQiOimj+eahOS9v+eUqOiAheWQjeeosScpfSAtLT5gLFxuXHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKFxuXHRcdFx0XHQn5bCB56aB6YCa55+l77ya5oKo55qE55So5oi35ZCN6L+d5Y+NW1tMSUI6VXznlKjmiLflkI3mnaHkvotdXScsXG5cdFx0XHRcdCflsIHpjpbpgJrnn6XvvJrmgqjnmoTkvb/nlKjogIXlkI3nqLHpgZXlj41bW0xJQjpVfOS9v+eUqOiAheWQjeeoseaineS+i11dJ1xuXHRcdFx0KSxcblx0XHR9LFxuXHRcdCd1dy11YmxvY2stc3VnZ2VzdGl2ZSc6IHtcblx0XHRcdGF1dG9ibG9jazogdHJ1ZSxcblx0XHRcdGV4cGlyeTogJ2luZmluaXR5Jyxcblx0XHRcdGZvclJlZ2lzdGVyZWRPbmx5OiB0cnVlLFxuXHRcdFx0bm9jcmVhdGU6IHRydWUsXG5cdFx0XHRyZWFzb246IGB7e3V3LXVibG9jay1zdWdnZXN0aXZlfX08IS0tICR7d2luZG93LndnVUxTKCfor6/lr7zjgIHmt7fmt4bmgKfnlKjmiLflkI0nLCAn6Kqk5bCO44CB5re35reG5oCn5L2/55So6ICF5ZCN56ixJyl9IC0tPmAsXG5cdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCflsIHnpoHpgJrnn6XvvJrmgqjnmoTnlKjmiLflkI3ov53lj41bW0xJQjpVfOeUqOaIt+WQjeadoeS+i11dJyxcblx0XHRcdFx0J+WwgemOlumAmuefpe+8muaCqOeahOS9v+eUqOiAheWQjeeosemBleWPjVtbTElCOlV85L2/55So6ICF5ZCN56ix5qKd5L6LXV0nXG5cdFx0XHQpLFxuXHRcdH0sXG5cdFx0J3V3LXVibG9jay1zcGFtJzoge1xuXHRcdFx0YXV0b2Jsb2NrOiB0cnVlLFxuXHRcdFx0ZXhwaXJ5OiAnaW5maW5pdHknLFxuXHRcdFx0Zm9yUmVnaXN0ZXJlZE9ubHk6IHRydWUsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdHJlYXNvbjogYHt7dXctdWJsb2NrLXNwYW19fTwhLS0gJHt3aW5kb3cud2dVTFMoJ+Wuo+S8oOaAp+eUqOaIt+WQjeaIluWuo+S8oOaAp+e8lui+kScsICflrqPlgrPmgKfkvb/nlKjogIXlkI3nqLHmiJblrqPlgrPmgKfnt6jovK8nKX0gLS0+YCxcblx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0J+WwgeemgemAmuefpe+8muaCqOeahOeUqOaIt+WQjei/neWPjVtbTElCOlV855So5oi35ZCN5p2h5L6LXV0nLFxuXHRcdFx0XHQn5bCB6Y6W6YCa55+l77ya5oKo55qE5L2/55So6ICF5ZCN56ix6YGV5Y+NW1tMSUI6VXzkvb/nlKjogIXlkI3nqLHmop3kvotdXSdcblx0XHRcdCksXG5cdFx0fSxcblx0XHQvLyBvdGhlciBibG9jayB0ZW1wbGF0ZXNcblx0XHQncmFuZ2UgYmxvY2snOiB7XG5cdFx0XHRleHBpcnk6ICcxIHdlZWsnLFxuXHRcdFx0cmVhc29uOiAne3tyYW5nZSBibG9ja319Jyxcblx0XHRcdG5vY3JlYXRlOiB0cnVlLFxuXHRcdFx0bm9uc3RhbmRhcmQ6IHRydWUsXG5cdFx0XHRmb3JBbm9uT25seTogdHJ1ZSxcblx0XHRcdHNpZzogJ35+Jy5jb25jYXQoJ35+JyksXG5cdFx0fSxcblx0XHQnYmxvY2tlZCBwcm94eSc6IHtcblx0XHRcdGV4cGlyeTogJzIgeWVhcnMnLFxuXHRcdFx0Zm9yQW5vbk9ubHk6IHRydWUsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdG5vbnN0YW5kYXJkOiB0cnVlLFxuXHRcdFx0aGFyZGJsb2NrOiB0cnVlLFxuXHRcdFx0cmVhc29uOiAne3tibG9ja2VkIHByb3h5fX0nLFxuXHRcdFx0c2lnOiBudWxsLFxuXHRcdH0sXG5cdFx0Y2hlY2t1c2VyYmxvY2s6IHtcblx0XHRcdGV4cGlyeTogJzEgd2VlaycsXG5cdFx0XHRmb3JBbm9uT25seTogdHJ1ZSxcblx0XHRcdG5vY3JlYXRlOiB0cnVlLFxuXHRcdFx0bm9uc3RhbmRhcmQ6IHRydWUsXG5cdFx0XHRyZWFzb246ICd7e2NoZWNrdXNlcmJsb2NrfX0nLFxuXHRcdFx0c2lnOiAnfn4nLmNvbmNhdCgnfn4nKSxcblx0XHR9LFxuXHRcdCdjaGVja3VzZXJibG9jay1hY2NvdW50Jzoge1xuXHRcdFx0YXV0b2Jsb2NrOiB0cnVlLFxuXHRcdFx0ZXhwaXJ5OiAnaW5maW5pdHknLFxuXHRcdFx0Zm9yUmVnaXN0ZXJlZE9ubHk6IHRydWUsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdG5vbnN0YW5kYXJkOiB0cnVlLFxuXHRcdFx0cmVhc29uOiAne3tjaGVja3VzZXJibG9jay1hY2NvdW50fX0nLFxuXHRcdFx0c2lnOiAnfn4nLmNvbmNhdCgnfn4nKSxcblx0XHR9LFxuXHRcdCdzY2hvb2wgYmxvY2snOiB7XG5cdFx0XHRleHBpcnk6ICcxIHdlZWsnLFxuXHRcdFx0Zm9yQW5vbk9ubHk6IHRydWUsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdG5vbnN0YW5kYXJkOiB0cnVlLFxuXHRcdFx0cmVhc29uOiAne3tzY2hvb2wgYmxvY2t9fScsXG5cdFx0XHRzaWc6ICd+ficuY29uY2F0KCd+ficpLFxuXHRcdH0sXG5cdFx0J0JvdCBibG9jayBtZXNzYWdlJzoge1xuXHRcdFx0ZXhwaXJ5OiAnaW5maW5pdHknLFxuXHRcdFx0Zm9yUmVnaXN0ZXJlZE9ubHk6IHRydWUsXG5cdFx0XHRyZWFzb246IHdpbmRvdy53Z1VMUygn5py65Zmo5Lq65pWF6ZqcJywgJ+apn+WZqOS6uuaVhemanCcpLFxuXHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKCflsIHnpoHpgJrnn6XvvJrmnLrlmajkurrmlYXpmpwnLCAn5bCB6Y6W6YCa55+l77ya5qmf5Zmo5Lq65pWF6ZqcJyksXG5cdFx0XHRzaWc6ICd+ficuY29uY2F0KCd+ficpLFxuXHRcdH0sXG5cdFx0Ly8gb3RoZXIgYmxvY2sgcmVhc29uc1xuXHRcdGJpb2Jsb2NrOiB7XG5cdFx0XHRhdXRvYmxvY2s6IHRydWUsXG5cdFx0XHRleHBpcnk6ICcxIGRheScsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdHBhZ2VQYXJhbTogdHJ1ZSxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCfov53lj43nlJ/ogIXkvKDorrDmnaHkvosnLCAn6YGV5Y+N55Sf6ICF5YKz6KiY5qKd5L6LJyksXG5cdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+WwgeemgemAmuefpe+8mui/neWPjeeUn+iAheS8oOiusOadoeS+iycsICflsIHpjpbpgJrnn6XvvJrpgZXlj43nlJ/ogIXlgrPoqJjmop3kvosnKSxcblx0XHRcdHRlbXBsYXRlTmFtZTogJ3V3LXZibG9jaycsXG5cdFx0fSxcblx0XHR1Y2Jsb2NrOiB7XG5cdFx0XHRhdXRvYmxvY2s6IHRydWUsXG5cdFx0XHRleHBpcnk6ICcxIGRheScsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdHBhZ2VQYXJhbTogdHJ1ZSxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCflsaHmrKHlop7liqDmsqHmnIlbW0xJQjpSU3zlj6/pnaDmnaXmupBdXeeahOi1hOaWmScsICflsaLmrKHlop7liqDmspLmnIlbW0xJQjpSU3zlj6/pnaDkvobmupBdXeeahOizh+aWmScpLFxuXHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKFxuXHRcdFx0XHQn5bCB56aB6YCa55+l77ya5bGh5qyh5aKe5Yqg5rKh5pyJW1tMSUI6UlN85Y+v6Z2g5p2l5rqQXV3nmoTotYTmlpknLFxuXHRcdFx0XHQn5bCB6Y6W6YCa55+l77ya5bGi5qyh5aKe5Yqg5rKS5pyJW1tMSUI6UlN85Y+v6Z2g5L6G5rqQXV3nmoTos4fmlpknXG5cdFx0XHQpLFxuXHRcdFx0dGVtcGxhdGVOYW1lOiAndXctYmxvY2snLFxuXHRcdH0sXG5cdFx0bnBibG9jazoge1xuXHRcdFx0YXV0b2Jsb2NrOiB0cnVlLFxuXHRcdFx0ZXhwaXJ5OiAnMSBkYXknLFxuXHRcdFx0bm9jcmVhdGU6IHRydWUsXG5cdFx0XHRwYWdlUGFyYW06IHRydWUsXG5cdFx0XHRyZWFzb246IHdpbmRvdy53Z1VMUygn5Zyo5p2h55uu5Lit5aKe5Yqg5peg5oSP5LmJ5paH5a2XJywgJ+WcqOaineebruS4reWinuWKoOeEoeaEj+e+qeaWh+WtlycpLFxuXHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKCflsIHnpoHpgJrnn6XvvJrlnKjmnaHnm67kuK3lop7liqDml6DmhI/kuYnmloflrZcnLCAn5bCB6Y6W6YCa55+l77ya5Zyo5qKd55uu5Lit5aKe5Yqg54Sh5oSP576p5paH5a2XJyksXG5cdFx0XHR0ZW1wbGF0ZU5hbWU6ICd1dy12YmxvY2snLFxuXHRcdH0sXG5cdFx0J3BvaW50LWJsb2NrJzoge1xuXHRcdFx0YXV0b2Jsb2NrOiB0cnVlLFxuXHRcdFx0ZXhwaXJ5OiAnMSBkYXknLFxuXHRcdFx0bm9jcmVhdGU6IHRydWUsXG5cdFx0XHRwYWdlUGFyYW06IHRydWUsXG5cdFx0XHRyZWFzb25QYXJhbTogdHJ1ZSxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCfmjIHnu63miZPliLbluqbmk6bovrnnkIMnLCAn5oyB57qM5omT5Yi25bqm5pOm6YKK55CDJyksXG5cdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoJ+WwgeemgemAmuefpe+8muaMgee7reaJk+WItuW6puaTpui+ueeQgycsICflsIHpjpbpgJrnn6XvvJrmjIHnuozmiZPliLbluqbmk6bpgornkIMnKSxcblx0XHRcdHRlbXBsYXRlTmFtZTogJ3V3LWJsb2NrJyxcblx0XHR9LFxuXHRcdCdzb2NrLWNvbnRyaWJzJzoge1xuXHRcdFx0YXV0b2Jsb2NrOiB0cnVlLFxuXHRcdFx0ZXhwaXJ5OiAnaW5maW5pdHknLFxuXHRcdFx0Zm9yUmVnaXN0ZXJlZE9ubHk6IHRydWUsXG5cdFx0XHRub2NyZWF0ZTogdHJ1ZSxcblx0XHRcdHJlYXNvblBhcmFtOiB0cnVlLFxuXHRcdFx0cmVhc29uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCfnoa7orqTkuLpbW0xJQjpTT0NLfOWCgOWEoV1d5oiW55yf5Lq65YKA5YShIC0g5qC55o2u55So5oi36LSh54yu56Gu5a6aJyxcblx0XHRcdFx0J+eiuuiqjeeCultbTElCOlNPQ0t85YKA5YShXV3miJbnnJ/kurrlgoDlhKEgLSDmoLnmk5rkvb/nlKjogIXosqLnjbvnorrlrponXG5cdFx0XHQpLFxuXHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKFxuXHRcdFx0XHQn5bCB56aB6YCa55+l77ya56Gu6K6k5Li6W1tMSUI6U09DS3zlgoDlhKFdXeaIluecn+S6uuWCgOWEoScsXG5cdFx0XHRcdCflsIHpjpbpgJrnn6XvvJrnorroqo3ngrpbW0xJQjpTT0NLfOWCgOWEoV1d5oiW55yf5Lq65YKA5YShJ1xuXHRcdFx0KSxcblx0XHRcdHRlbXBsYXRlTmFtZTogJ3V3LWJsb2NraW5kZWYnLFxuXHRcdH0sXG5cdFx0J3NvY2stY3UnOiB7XG5cdFx0XHRhdXRvYmxvY2s6IHRydWUsXG5cdFx0XHRleHBpcnk6ICdpbmZpbml0eScsXG5cdFx0XHRmb3JSZWdpc3RlcmVkT25seTogdHJ1ZSxcblx0XHRcdG5vY3JlYXRlOiB0cnVlLFxuXHRcdFx0cmVhc29uUGFyYW06IHRydWUsXG5cdFx0XHRyZWFzb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0J+ehruiupOS4ultbTElCOlNPQ0t85YKA5YShXV3miJbnnJ/kurrlgoDlhKEgLSDnlKjmiLfmn6XmoLjnoa7orqQnLFxuXHRcdFx0XHQn56K66KqN54K6W1tMSUI6U09DS3zlgoDlhKFdXeaIluecn+S6uuWCgOWEoSAtIOS9v+eUqOiAheafpeaguOeiuuiqjSdcblx0XHRcdCksXG5cdFx0XHRzdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCflsIHnpoHpgJrnn6XvvJrnoa7orqTkuLpbW0xJQjpTT0NLfOWCgOWEoV1d5oiW55yf5Lq65YKA5YShJyxcblx0XHRcdFx0J+WwgemOlumAmuefpe+8mueiuuiqjeeCultbTElCOlNPQ0t85YKA5YShXV3miJbnnJ/kurrlgoDlhKEnXG5cdFx0XHQpLFxuXHRcdFx0dGVtcGxhdGVOYW1lOiAndXctYmxvY2tpbmRlZicsXG5cdFx0fSxcblx0XHQndXctdWJsb2NrLWF0dGFjayc6IHtcblx0XHRcdGF1dG9ibG9jazogdHJ1ZSxcblx0XHRcdGV4cGlyeTogJ2luZmluaXR5Jyxcblx0XHRcdGZvclJlZ2lzdGVyZWRPbmx5OiB0cnVlLFxuXHRcdFx0bm9jcmVhdGU6IHRydWUsXG5cdFx0XHRyZWFzb246IGB7e3V3LXVibG9jay1hdHRhY2t9fTwhLS0gJHt3aW5kb3cud2dVTFMoJ+aUu+WHu+aAp+eUqOaIt+WQjScsICfmlLvmk4rmgKfkvb/nlKjogIXlkI3nqLEnKX0gLS0+YCxcblx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUygn5bCB56aB6YCa55+l77ya5pS75Ye75oCn55So5oi35ZCNJywgJ+WwgemOlumAmuefpe+8muaUu+aTiuaAp+S9v+eUqOiAheWQjeeosScpLFxuXHRcdH0sXG5cdFx0Ly8gQmVnaW4gcGFydGlhbCBibG9jayB0ZW1wbGF0ZXMsIGFjY2Vzc2VkIGluIFR3aW5rbGUuYmxvY2suYmxvY2tHcm91cHNQYXJ0aWFsXG5cdFx0J3V3LXBibG9jayc6IHtcblx0XHRcdGF1dG9ibG9jazogdHJ1ZSxcblx0XHRcdGV4cGlyeTogJzEgZGF5Jyxcblx0XHRcdG5vY3JlYXRlOiBmYWxzZSxcblx0XHRcdHBhZ2VQYXJhbTogZmFsc2UsXG5cdFx0XHRyZWFzb25QYXJhbTogdHJ1ZSxcblx0XHRcdHN1bW1hcnk6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0J+WwgeemgemAmuefpe+8muaCqOW3suiiq+emgeatoue8lui+keacieWFveaho+ahiOmmhueahOmDqOWIhuWMuuWfnycsXG5cdFx0XHRcdCflsIHpjpbpgJrnn6XvvJrmgqjlt7LooqvnpoHmraLnt6jovK/mnInnjbjmqpTmoYjppKjnmoTpg6jliIbljYDln58nXG5cdFx0XHQpLFxuXHRcdH0sXG5cdFx0J3V3LXBibG9ja2luZGVmJzoge1xuXHRcdFx0YXV0b2Jsb2NrOiB0cnVlLFxuXHRcdFx0ZXhwaXJ5OiAnaW5maW5pdHknLFxuXHRcdFx0bm9jcmVhdGU6IGZhbHNlLFxuXHRcdFx0cGFnZVBhcmFtOiBmYWxzZSxcblx0XHRcdHJlYXNvblBhcmFtOiB0cnVlLFxuXHRcdFx0c3VtbWFyeTogd2luZG93LndnVUxTKFxuXHRcdFx0XHQn5bCB56aB6YCa55+l77ya5oKo5bey6KKr5rC45LmF56aB5q2i57yW6L6R5pyJ5YW95qGj5qGI6aaG55qE6YOo5YiG5Yy65Z+fJyxcblx0XHRcdFx0J+WwgemOlumAmuefpe+8muaCqOW3suiiq+awuOS5heemgeatoue3qOi8r+acieeNuOaqlOahiOmkqOeahOmDqOWIhuWNgOWfnydcblx0XHRcdCksXG5cdFx0fSxcblx0fTtcblx0VHdpbmtsZS5ibG9jay50cmFuc2Zvcm1CbG9ja1ByZXNldHMgPSAoKSA9PiB7XG5cdFx0Ly8gTWVyZ2UgY3VzdG9tIHJlYXNvblxuXHRcdGZvciAoY29uc3QgaXRlbSBvZiBUd2lua2xlLmdldFByZWYoJ2N1c3RvbUJsb2NrUmVhc29uTGlzdCcpKSB7XG5cdFx0XHRjb25zdCBuZXdLZXkgPSBgJHtpdGVtLnZhbHVlfXwke2l0ZW0ubGFiZWx9YDtcblx0XHRcdFR3aW5rbGUuYmxvY2suYmxvY2tQcmVzZXRzSW5mb1tuZXdLZXldID0ge1xuXHRcdFx0XHRhdXRvYmxvY2s6IHRydWUsXG5cdFx0XHRcdG5vY3JlYXRlOiB0cnVlLFxuXHRcdFx0XHQuLi5Ud2lua2xlLmJsb2NrLmJsb2NrUHJlc2V0c0luZm9baXRlbS52YWx1ZV0sXG5cdFx0XHRcdHJlYXNvbjogaXRlbS5sYWJlbCxcblx0XHRcdFx0dGVtcGxhdGVOYW1lOiBpdGVtLnZhbHVlLFxuXHRcdFx0fTtcblx0XHRcdGlmIChUd2lua2xlLmJsb2NrLmJsb2NrUHJlc2V0c0luZm9baXRlbS52YWx1ZV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRUd2lua2xlLmJsb2NrLmJsb2NrUHJlc2V0c0luZm9baXRlbS52YWx1ZV0gPSB7XG5cdFx0XHRcdFx0cGFnZVBhcmFtOiB0cnVlLFxuXHRcdFx0XHRcdHJlYXNvblBhcmFtOiB0cnVlLFxuXHRcdFx0XHRcdGN1c3RvbTogdHJ1ZSxcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gc3VwcGx5IHNlbnNpYmxlIGRlZmF1bHRzXG5cdFx0Zm9yIChjb25zdCBbcHJlc2V0LCBzZXR0aW5nc10gb2YgT2JqZWN0LmVudHJpZXMoVHdpbmtsZS5ibG9jay5ibG9ja1ByZXNldHNJbmZvKSkge1xuXHRcdFx0c2V0dGluZ3Muc3VtbWFyeSB8fD0gc2V0dGluZ3MucmVhc29uO1xuXHRcdFx0c2V0dGluZ3Muc2lnID0gc2V0dGluZ3Muc2lnID09PSB1bmRlZmluZWQgPyAneWVzJyA6IHNldHRpbmdzLnNpZztcblx0XHRcdHNldHRpbmdzLmluZGVmaW5pdGUgfHw9IE1vcmViaXRzLnN0cmluZy5pc0luZmluaXR5KHNldHRpbmdzLmV4cGlyeSk7XG5cdFx0XHRpZiAoIVR3aW5rbGUuYmxvY2suaXNSZWdpc3RlcmVkICYmIHNldHRpbmdzLmluZGVmaW5pdGUpIHtcblx0XHRcdFx0c2V0dGluZ3MuZXhwaXJ5ID0gJzEgZGF5Jztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNldHRpbmdzLmV4cGlyeSB8fD0gJzEgZGF5Jztcblx0XHRcdH1cblx0XHRcdFR3aW5rbGUuYmxvY2suYmxvY2tQcmVzZXRzSW5mb1twcmVzZXRdID0gc2V0dGluZ3M7XG5cdFx0fVxuXHR9O1xuXHQvLyBUaGVzZSBhcmUgdGhlIGdyb3VwcyBvZiBwcmVzZXRzIGFuZCBkZWZpbmVzIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFwcGVhci4gRm9yIGVhY2ggbGlzdCBpdGVtOlxuXHQvLyAgIGxhYmVsOiA8c3RyaW5nLCB0aGUgZGVzY3JpcHRpb24gdGhhdCB3aWxsIGJlIHZpc2libGUgaW4gdGhlIGRyb3Bkb3duPlxuXHQvLyAgIHZhbHVlOiA8c3RyaW5nLCB0aGUga2V5IG9mIGEgcHJlc2V0IGluIGJsb2NrUHJlc2V0c0luZm8+XG5cdC8vICAgbWV0YTogPGJvb2xlYW4sIHNob3cgaW4gdGVtcGxhdGVzIG9ubHk+XG5cdFR3aW5rbGUuYmxvY2suYmxvY2tHcm91cHMgPSBbXG5cdFx0e1xuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5pmu6YCa5bCB56aBJywgJ+aZrumAmuWwgemOlicpLFxuXHRcdFx0bGlzdDogW1xuXHRcdFx0XHR7bGFiZWw6IHdpbmRvdy53Z1VMUygn6YCa55So5bCB56aB77yI6Ieq5a6a5LmJ55CG55Sx77yJJywgJ+mAmueUqOWwgemOlu+8iOiHquiogueQhueUse+8iScpLCB2YWx1ZTogJ3V3LWJsb2NrJ30sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfml6DpmZDmnJ/lsIHnpoHvvIjoh6rlrprkuYnnkIbnlLHvvIknLCAn54Sh6ZmQ5pyf5bCB6Y6W77yI6Ieq6KiC55CG55Sx77yJJyksXG5cdFx0XHRcdFx0dmFsdWU6ICd1dy1ibG9ja2luZGVmJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e2xhYmVsOiB3aW5kb3cud2dVTFMoJ+emgeatoue8lui+keiuqOiuuumhtScsICfnpoHmraLnt6jovK/oqI7oq5bpoIEnKSwgdmFsdWU6ICd1dy1ibG9ja25vdGFsaycsIG1ldGE6IHRydWV9LFxuXHRcdFx0XHR7bGFiZWw6IHdpbmRvdy53Z1VMUygn6L+d5Y+N5Zue6YCA5LiN6L+H5LiJ5Y6f5YiZJywgJ+mBleWPjeWbnumAgOS4jemBjuS4ieWOn+WJhycpLCB2YWx1ZTogJ3V3LTNibG9jayd9LFxuXHRcdFx0XHR7bGFiZWw6IHdpbmRvdy53Z1VMUygn5pWj5Y+R5bm/5ZGK5oiW5a6j5LygJywgJ+aVo+eZvOW7o+WRiuaIluWuo+WCsycpLCB2YWx1ZTogJ3V3LWFkYmxvY2snfSxcblx0XHRcdFx0e2xhYmVsOiB3aW5kb3cud2dVTFMoJ+ihjOS4uuaXoOekvOaIluS6uui6q+aUu+WHuycsICfooYzngrrnhKHnpq7miJbkurrouqvmlLvmk4onKSwgdmFsdWU6ICd1dy1hdHRhY2tibG9jayd9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5aSa5qyh5Yqg5YWl5L6154qv6JGX5L2c5p2D55qE5YaF5a65JywgJ+WkmuasoeWKoOWFpeS+teeKr+iRl+S9nOasiueahOWFp+WuuScpLFxuXHRcdFx0XHRcdHZhbHVlOiAndXctY29weXJpZ2h0YmxvY2snLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7bGFiZWw6IHdpbmRvdy53Z1VMUygn5peg5pWF5Yig6Zmk5YaF5a65JywgJ+eEoeaVheWIqumZpOWFp+WuuScpLCB2YWx1ZTogJ3V3LWRibG9jayd9LFxuXHRcdFx0XHR7bGFiZWw6IHdpbmRvdy53Z1VMUygn6aqa5omw55So5oi3JywgJ+mot+aTvuS9v+eUqOiAhScpLCB2YWx1ZTogJ3V3LWhibG9jayd9LFxuXHRcdFx0XHR7bGFiZWw6IHdpbmRvdy53Z1VMUygn56C05Z2PJywgJ+egtOWjnicpLCB2YWx1ZTogJ3V3LXZibG9jaycsIHNlbGVjdGVkOiB0cnVlfSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aMgee7reWKoOWFpemdnuazleWGheWuuScsICfmjIHnuozliqDlhaXpnZ7ms5XlhaflrrknKSxcblx0XHRcdFx0XHR2YWx1ZTogJ3V3LWlsbGVnYWxibG9jaycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtsYWJlbDogd2luZG93LndnVUxTKCfmu6XnlKjlpJrkuKrotKblj7cnLCAn5r+r55So5aSa5YCL6LOs6JmfJyksIHZhbHVlOiAndXctc29ja2Jsb2NrJ30sXG5cdFx0XHRcdC8vIG90aGVyIGJsb2NrIHJlYXNvbnNcblx0XHRcdFx0e2xhYmVsOiB3aW5kb3cud2dVTFMoJ+i/neWPjeeUn+iAheS8oOiusOadoeS+iycsICfpgZXlj43nlJ/ogIXlgrPoqJjmop3kvosnKSwgdmFsdWU6ICdiaW9ibG9jayd9LFxuXHRcdFx0XHR7bGFiZWw6IHdpbmRvdy53Z1VMUygn5bGh5qyh5aKe5Yqg5rKh5pyJ5Y+v6Z2g5p2l5rqQ55qE6LWE5paZJywgJ+WxouasoeWinuWKoOaykuacieWPr+mdoOS+hua6kOeahOizh+aWmScpLCB2YWx1ZTogJ3VjYmxvY2snfSxcblx0XHRcdFx0e2xhYmVsOiB3aW5kb3cud2dVTFMoJ+WcqOadoeebruS4reWinuWKoOaXoOaEj+S5ieaWh+WtlycsICflnKjmop3nm67kuK3lop7liqDnhKHmhI/nvqnmloflrZcnKSwgdmFsdWU6ICducGJsb2NrJ30sXG5cdFx0XHRcdHtsYWJlbDogd2luZG93LndnVUxTKCfmjIHnu63miZPliLbluqbmk6bovrnnkIMnLCAn5oyB57qM5omT5Yi25bqm5pOm6YKK55CDJyksIHZhbHVlOiAncG9pbnQtYmxvY2snfSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn56Gu6K6k5Li65YKA5YSh5oiW55yf5Lq65YKA5YSh77yI5qC55o2u55So5oi36LSh54yu56Gu5a6a77yJJyxcblx0XHRcdFx0XHRcdCfnorroqo3ngrrlgoDlhKHmiJbnnJ/kurrlgoDlhKHvvIjmoLnmk5rkvb/nlKjogIXosqLnjbvnorrlrprvvIknXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR2YWx1ZTogJ3NvY2stY29udHJpYnMnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfnoa7orqTkuLrlgoDlhKHmiJbnnJ/kurrlgoDlhKHvvIjnlKjmiLfmn6XmoLjnoa7orqTvvIknLFxuXHRcdFx0XHRcdFx0J+eiuuiqjeeCuuWCgOWEoeaIluecn+S6uuWCgOWEoe+8iOS9v+eUqOiAheafpeaguOeiuuiqje+8iSdcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHZhbHVlOiAnc29jay1jdScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmnLrlmajkurrlj5HnlJ/mlYXpmpzlubblv4XpobvntKfmgKXlgZzmraInLCAn5qmf5Zmo5Lq655m855Sf5pWF6Zqc5Lim5b+F6aCI57eK5oCl5YGc5q2iJyksXG5cdFx0XHRcdFx0dmFsdWU6ICdCb3QgYmxvY2sgbWVzc2FnZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0Y3VzdG9tOiB0cnVlLFxuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6Ieq5a6a5LmJ5bCB56aB55CG55SxJywgJ+iHquioguWwgemOlueQhueUsScpLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn55So5oi35ZCN5bCB56aBJywgJ+S9v+eUqOiAheWQjeeoseWwgemOlicpLFxuXHRcdFx0bGlzdDogW1xuXHRcdFx0XHR7bGFiZWw6IHdpbmRvdy53Z1VMUygn6L+d5Y+N55So5oi35ZCN5p2h5L6LJywgJ+mBleWPjeS9v+eUqOiAheWQjeeoseaineS+iycpLCB2YWx1ZTogJ3V3LXVibG9jayd9LFxuXHRcdFx0XHR7bGFiZWw6IHdpbmRvdy53Z1VMUygn5LiN5ZCI6KeE55qE55So5oi35ZCNJywgJ+S4jeWQiOimj+eahOS9v+eUqOiAheWQjeeosScpLCB2YWx1ZTogJ3V3LXVibG9jay1pbGxlZ2FsJ30sXG5cdFx0XHRcdHtsYWJlbDogd2luZG93LndnVUxTKCflrqPkvKDmgKfnlKjmiLflkI0nLCAn5a6j5YKz5oCn5L2/55So6ICF5ZCN56ixJyksIHZhbHVlOiAndXctdWJsb2NrLXNwYW0nfSxcblx0XHRcdFx0e2xhYmVsOiB3aW5kb3cud2dVTFMoJ+aUu+WHu+aAp+eUqOaIt+WQjScsICfmlLvmk4rmgKfkvb/nlKjogIXlkI3nqLEnKSwgdmFsdWU6ICd1dy11YmxvY2stYXR0YWNrJ30sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmt7fmt4bmgKfmiJbor6/lr7zmgKfnlKjmiLflkI0nLCAn5re35reG5oCn5oiW6Kqk5bCO5oCn5L2/55So6ICF5ZCN56ixJyksXG5cdFx0XHRcdFx0dmFsdWU6ICd1dy11YmxvY2stc3VnZ2VzdGl2ZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICflhbbku5bmqKHmnb8nLFxuXHRcdFx0bGlzdDogW1xuXHRcdFx0XHR7bGFiZWw6ICdyYW5nZSBibG9jaycsIHZhbHVlOiAncmFuZ2UgYmxvY2snLCBmb3JBbm9uT25seTogdHJ1ZX0sXG5cdFx0XHRcdHtsYWJlbDogJ3NjaG9vbCBibG9jaycsIHZhbHVlOiAnc2Nob29sIGJsb2NrJywgZm9yQW5vbk9ubHk6IHRydWV9LFxuXHRcdFx0XHR7bGFiZWw6ICdibG9ja2VkIHByb3h5JywgdmFsdWU6ICdibG9ja2VkIHByb3h5JywgZm9yQW5vbk9ubHk6IHRydWV9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn55So5oi35p+l5qC45bCB56aB77yI5Li755So5oi377yJJywgJ+S9v+eUqOiAheafpeaguOWwgemOlu+8iOS4u+S9v+eUqOiAhe+8iScpLFxuXHRcdFx0XHRcdHZhbHVlOiAnY2hlY2t1c2VyYmxvY2snLFxuXHRcdFx0XHRcdGZvckFub25Pbmx5OiB0cnVlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn55So5oi35p+l5qC45bCB56aB77yI5a2Q55So5oi377yJJywgJ+S9v+eUqOiAheafpeaguOWwgemOlu+8iOWtkOS9v+eUqOiAhe+8iScpLFxuXHRcdFx0XHRcdHZhbHVlOiAnY2hlY2t1c2VyYmxvY2stYWNjb3VudCcsXG5cdFx0XHRcdFx0Zm9yUmVnaXN0ZXJlZE9ubHk6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdF07XG5cdFR3aW5rbGUuYmxvY2suYmxvY2tHcm91cHNQYXJ0aWFsID0gW1xuXHRcdHtcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+W4uOingemDqOWIhuWwgeemgeeQhueUsScsICfluLjopovpg6jliIblsIHpjpbnkIbnlLEnKSxcblx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+mAmueUqOmDqOWIhuWwgeemge+8iOiHquWumuS5ieeQhueUse+8iScsICfpgJrnlKjpg6jliIblsIHpjpbvvIjoh6roqILnkIbnlLHvvIknKSxcblx0XHRcdFx0XHR2YWx1ZTogJ3V3LXBibG9jaycsXG5cdFx0XHRcdFx0c2VsZWN0ZWQ6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfml6DpmZDmnJ/pg6jliIblsIHnpoHvvIjoh6rlrprkuYnnkIbnlLHvvIknLCAn54Sh6ZmQ5pyf6YOo5YiG5bCB6Y6W77yI6Ieq6KiC55CG55Sx77yJJyksXG5cdFx0XHRcdFx0dmFsdWU6ICd1dy1wYmxvY2tpbmRlZicsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdF07XG5cdFR3aW5rbGUuYmxvY2suY2FsbGJhY2suZmlsdGVyZWRfYmxvY2tfZ3JvdXBzID0gKGdyb3VwLCBzaG93X3RlbXBsYXRlKSA9PiB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWpxdWVyeS9uby1tYXAtdXRpbFxuXHRcdHJldHVybiAkLm1hcChncm91cCwgKGJsb2NrR3JvdXApID0+IHtcblx0XHRcdC8vIEFkZCBjdXN0b20gcmVhc29uXG5cdFx0XHRpZiAoYmxvY2tHcm91cC5jdXN0b20pIHtcblx0XHRcdFx0aWYgKHNob3dfdGVtcGxhdGUpIHtcblx0XHRcdFx0XHRsZXQgdGVtcGxhdGVzID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKFR3aW5rbGUuZ2V0UHJlZignY3VzdG9tQmxvY2tSZWFzb25MaXN0JyksIChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoVHdpbmtsZS5ibG9jay5ibG9ja1ByZXNldHNJbmZvW2l0ZW0udmFsdWVdLmN1c3RvbSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaXRlbS52YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR0ZW1wbGF0ZXMgPSBNb3JlYml0cy5hcnJheS51bmlxKHRlbXBsYXRlcyk7XG5cdFx0XHRcdFx0YmxvY2tHcm91cC5saXN0ID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKHRlbXBsYXRlcywgKHRlbXBsYXRlKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfoh6rlrprkuYnmqKHmnb8nLCAn6Ieq6KiC5qih5p2/JyksXG5cdFx0XHRcdFx0XHRcdHZhbHVlOiB0ZW1wbGF0ZSxcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YmxvY2tHcm91cC5saXN0ID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKFR3aW5rbGUuZ2V0UHJlZignY3VzdG9tQmxvY2tSZWFzb25MaXN0JyksIChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogaXRlbS5sYWJlbCxcblx0XHRcdFx0XHRcdFx0dmFsdWU6IGAke2l0ZW0udmFsdWV9fCR7aXRlbS5sYWJlbH1gLFxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWpxdWVyeS9uby1tYXAtdXRpbFxuXHRcdFx0Y29uc3QgbGlzdCA9ICQubWFwKGJsb2NrR3JvdXAubGlzdCwgKGJsb2NrUHJlc2V0KSA9PiB7XG5cdFx0XHRcdGlmICghc2hvd190ZW1wbGF0ZSAmJiBibG9ja1ByZXNldC5tZXRhKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN3aXRjaCAoYmxvY2tQcmVzZXQudmFsdWUpIHtcblx0XHRcdFx0XHRjYXNlICdyYW5nZSBibG9jayc6XG5cdFx0XHRcdFx0XHRpZiAoIU1vcmViaXRzLmlwLmlzUmFuZ2UocmVsZXZhbnRVc2VyTmFtZSkpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YmxvY2tQcmVzZXQuc2VsZWN0ZWQgPSAhTW9yZWJpdHMuaXAuZ2V0NjQocmVsZXZhbnRVc2VyTmFtZSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgYmxvY2tTZXR0aW5ncyA9IFR3aW5rbGUuYmxvY2suYmxvY2tQcmVzZXRzSW5mb1tibG9ja1ByZXNldC52YWx1ZV07XG5cdFx0XHRcdGxldCByZWdpc3RyYXRpb25SZXN0cmljdDtcblx0XHRcdFx0aWYgKGJsb2NrU2V0dGluZ3MuZm9yUmVnaXN0ZXJlZE9ubHkpIHtcblx0XHRcdFx0XHRyZWdpc3RyYXRpb25SZXN0cmljdCA9IFR3aW5rbGUuYmxvY2suaXNSZWdpc3RlcmVkO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGJsb2NrU2V0dGluZ3MuZm9yQW5vbk9ubHkpIHtcblx0XHRcdFx0XHRyZWdpc3RyYXRpb25SZXN0cmljdCA9ICFUd2lua2xlLmJsb2NrLmlzUmVnaXN0ZXJlZDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZWdpc3RyYXRpb25SZXN0cmljdCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCEoYmxvY2tTZXR0aW5ncy50ZW1wbGF0ZU5hbWUgJiYgc2hvd190ZW1wbGF0ZSkgJiYgcmVnaXN0cmF0aW9uUmVzdHJpY3QpIHtcblx0XHRcdFx0XHRjb25zdCB0ZW1wbGF0ZU5hbWUgPSBibG9ja1NldHRpbmdzLnRlbXBsYXRlTmFtZSB8fCBibG9ja1ByZXNldC52YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0bGFiZWw6IChzaG93X3RlbXBsYXRlID8gYHt7JHt0ZW1wbGF0ZU5hbWV9fX06IGAgOiAnJykgKyBibG9ja1ByZXNldC5sYWJlbCxcblx0XHRcdFx0XHRcdHZhbHVlOiBibG9ja1ByZXNldC52YWx1ZSxcblx0XHRcdFx0XHRcdGRhdGE6IFtcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdG5hbWU6ICd0ZW1wbGF0ZS1uYW1lJyxcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogdGVtcGxhdGVOYW1lLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0XHRcdHNlbGVjdGVkOiAhIWJsb2NrUHJlc2V0LnNlbGVjdGVkLFxuXHRcdFx0XHRcdFx0ZGlzYWJsZWQ6ICEhYmxvY2tQcmVzZXQuZGlzYWJsZWQsXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRpZiAobGlzdC5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRsYWJlbDogYmxvY2tHcm91cC5sYWJlbCxcblx0XHRcdFx0XHRsaXN0LFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xuXHRUd2lua2xlLmJsb2NrLmNhbGxiYWNrLmNoYW5nZV9wcmVzZXQgPSAoZSkgPT4ge1xuXHRcdGNvbnN0IHtmb3JtfSA9IGUudGFyZ2V0O1xuXHRcdGNvbnN0IGtleSA9IGZvcm0ucHJlc2V0LnZhbHVlO1xuXHRcdGlmICgha2V5KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFR3aW5rbGUuYmxvY2suY2FsbGJhY2sudXBkYXRlX2Zvcm0oZSwgVHdpbmtsZS5ibG9jay5ibG9ja1ByZXNldHNJbmZvW2tleV0pO1xuXHRcdGlmIChmb3JtLnRlbXBsYXRlKSB7XG5cdFx0XHRmb3JtLnRlbXBsYXRlLnZhbHVlID0gVHdpbmtsZS5ibG9jay5ibG9ja1ByZXNldHNJbmZvW2tleV0udGVtcGxhdGVOYW1lIHx8IGtleTtcblx0XHRcdFR3aW5rbGUuYmxvY2suY2FsbGJhY2suY2hhbmdlX3RlbXBsYXRlKGUpO1xuXHRcdH1cblx0fTtcblx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay5jaGFuZ2VfZXhwaXJ5ID0gKGUpID0+IHtcblx0XHRjb25zdCB7ZXhwaXJ5fSA9IGUudGFyZ2V0LmZvcm07XG5cdFx0aWYgKGUudGFyZ2V0LnZhbHVlID09PSAnY3VzdG9tJykge1xuXHRcdFx0TW9yZWJpdHMucXVpY2tGb3JtLnNldEVsZW1lbnRWaXNpYmlsaXR5KGV4cGlyeS5wYXJlbnROb2RlLCB0cnVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0TW9yZWJpdHMucXVpY2tGb3JtLnNldEVsZW1lbnRWaXNpYmlsaXR5KGV4cGlyeS5wYXJlbnROb2RlLCBmYWxzZSk7XG5cdFx0XHRleHBpcnkudmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcblx0XHR9XG5cdH07XG5cdFR3aW5rbGUuYmxvY2suc2VlQWxzb3MgPSBbXTtcblx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay50b2dnbGVfc2VlX2Fsc29zID0gZnVuY3Rpb24gKCkge1xuXHRcdGNvbnN0IHJlYXNvbiA9IHRoaXMuZm9ybS5yZWFzb24udmFsdWUucmVwbGFjZShcblx0XHRcdG5ldyBSZWdFeHAoYCg8IS0tICko5Y+C6KeBfOWPg+imiykke1R3aW5rbGUuYmxvY2suc2VlQWxzb3Muam9pbign44CBJyl9KCAtLT4pYCksXG5cdFx0XHQnJ1xuXHRcdCk7XG5cdFx0VHdpbmtsZS5ibG9jay5zZWVBbHNvcyA9IFR3aW5rbGUuYmxvY2suc2VlQWxzb3MuZmlsdGVyKChlbCkgPT4ge1xuXHRcdFx0cmV0dXJuIGVsICE9PSB0aGlzLnZhbHVlO1xuXHRcdH0pO1xuXHRcdGlmICh0aGlzLmNoZWNrZWQpIHtcblx0XHRcdFR3aW5rbGUuYmxvY2suc2VlQWxzb3NbVHdpbmtsZS5ibG9jay5zZWVBbHNvcy5sZW5ndGhdID0gdGhpcy52YWx1ZTtcblx0XHR9XG5cdFx0Y29uc3Qgc2VlQWxzb01lc3NhZ2UgPSBUd2lua2xlLmJsb2NrLnNlZUFsc29zLmpvaW4oJ+OAgScpO1xuXHRcdGlmIChUd2lua2xlLmJsb2NrLnNlZUFsc29zLmxlbmd0aCkge1xuXHRcdFx0dGhpcy5mb3JtLnJlYXNvbi52YWx1ZSA9IGAke3JlYXNvbn08IS0tICR7d2luZG93LndnVUxTKCflj4Lop4EnLCAn5Y+D6KaLJyl9JHtzZWVBbHNvTWVzc2FnZX0gLS0+YDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5mb3JtLnJlYXNvbi52YWx1ZSA9IHJlYXNvbjtcblx0XHR9XG5cdH07XG5cdC8vIE5vIGRzXG5cdFR3aW5rbGUuYmxvY2suY2FsbGJhY2sudXBkYXRlX2Zvcm0gPSAoZSwgZGF0YSkgPT4ge1xuXHRcdGNvbnN0IHtmb3JtfSA9IGUudGFyZ2V0O1xuXHRcdGxldCB7ZXhwaXJ5fSA9IGRhdGE7XG5cdFx0Ly8gZG9uJ3Qgb3ZlcnJpZGUgb3JpZ2luYWwgZXhwaXJ5IGlmIHVzZUluaXRpYWxPcHRpb25zIGlzIHNldFxuXHRcdGlmICghZGF0YS51c2VJbml0aWFsT3B0aW9ucykge1xuXHRcdFx0aWYgKERhdGUucGFyc2UoZXhwaXJ5KSkge1xuXHRcdFx0XHRleHBpcnkgPSBuZXcgRGF0ZShleHBpcnkpLnRvR01UU3RyaW5nKCk7XG5cdFx0XHRcdGZvcm0uZXhwaXJ5X3ByZXNldC52YWx1ZSA9ICdjdXN0b20nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9ybS5leHBpcnlfcHJlc2V0LnZhbHVlID0gZGF0YS5leHBpcnkgfHwgJ2N1c3RvbSc7XG5cdFx0XHR9XG5cdFx0XHRmb3JtLmV4cGlyeS52YWx1ZSA9IGV4cGlyeTtcblx0XHRcdGlmIChmb3JtLmV4cGlyeV9wcmVzZXQudmFsdWUgPT09ICdjdXN0b20nKSB7XG5cdFx0XHRcdE1vcmViaXRzLnF1aWNrRm9ybS5zZXRFbGVtZW50VmlzaWJpbGl0eShmb3JtLmV4cGlyeS5wYXJlbnROb2RlLCB0cnVlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdE1vcmViaXRzLnF1aWNrRm9ybS5zZXRFbGVtZW50VmlzaWJpbGl0eShmb3JtLmV4cGlyeS5wYXJlbnROb2RlLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIGJvb2xlYW4tZmxpcHBlZCBvcHRpb25zLCBtb3JlIGF0IFtbbXc6QVBJOkJsb2NrXV1cblx0XHRkYXRhLmRpc2FibGV0YWxrID0gZGF0YS5kaXNhYmxldGFsayA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBkYXRhLmRpc2FibGV0YWxrO1xuXHRcdGRhdGEuaGFyZGJsb2NrID0gZGF0YS5oYXJkYmxvY2sgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogZGF0YS5oYXJkYmxvY2s7XG5cdFx0Ly8gZGlzYWJsZSBhdXRvYmxvY2sgaWYgYmxvY2tpbmcgYSBib3Rcblx0XHRpZiAoVHdpbmtsZS5ibG9jay51c2VySXNCb3QgfHwgL2JvdFxcYi9pLnRlc3QocmVsZXZhbnRVc2VyTmFtZSkpIHtcblx0XHRcdGRhdGEuYXV0b2Jsb2NrID0gZmFsc2U7XG5cdFx0fVxuXHRcdCQoZm9ybSlcblx0XHRcdC5maW5kKCdbbmFtZT1maWVsZF9ibG9ja19vcHRpb25zXScpXG5cdFx0XHQuZmluZCgnOmNoZWNrYm94Jylcblx0XHRcdC5lYWNoKChfaSwgZWwpID0+IHtcblx0XHRcdFx0Ly8gZG9uJ3Qgb3ZlcnJpZGUgb3JpZ2luYWwgb3B0aW9ucyBpZiB1c2VJbml0aWFsT3B0aW9ucyBpcyBzZXRcblx0XHRcdFx0aWYgKGRhdGEudXNlSW5pdGlhbE9wdGlvbnMgJiYgZGF0YVtlbC5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChlbC5uYW1lID09PSAnY2xvc2V2aXAnKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IGNoZWNrID0gZGF0YVtlbC5uYW1lXSA9PT0gJycgfHwgISFkYXRhW2VsLm5hbWVdO1xuXHRcdFx0XHQkKGVsKS5wcm9wKCdjaGVja2VkJywgY2hlY2spO1xuXHRcdFx0fSk7XG5cdFx0aWYgKGRhdGEucHJlcGVuZFJlYXNvbiAmJiBkYXRhLnJlYXNvbikge1xuXHRcdFx0Zm9ybS5yZWFzb24udmFsdWUgPSBgJHtkYXRhLnJlYXNvbn3vvJske2Zvcm0ucmVhc29uLnZhbHVlfWA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvcm0ucmVhc29uLnZhbHVlID0gZGF0YS5yZWFzb24gfHwgJyc7XG5cdFx0fVxuXHRcdC8vIENsZWFyIGFuZC9vciBzZXQgYW55IHBhcnRpYWwgcGFnZSBvciBuYW1lc3BhY2UgcmVzdHJpY3Rpb25zXG5cdFx0aWYgKGZvcm0ucGFnZXJlc3RyaWN0aW9ucykge1xuXHRcdFx0Y29uc3QgJHBhZ2VTZWxlY3QgPSAkKGZvcm0pLmZpbmQoJ1tuYW1lPXBhZ2VyZXN0cmljdGlvbnNdJyk7XG5cdFx0XHRjb25zdCAkbmFtZXNwYWNlU2VsZWN0ID0gJChmb3JtKS5maW5kKCdbbmFtZT1uYW1lc3BhY2VyZXN0cmljdGlvbnNdJyk7XG5cdFx0XHQvLyBSZXNwZWN0IHVzZUluaXRpYWxPcHRpb25zIGJ5IGNsZWFyaW5nIGRhdGEgd2hlbiBzd2l0Y2hpbmcgcHJlc2V0c1xuXHRcdFx0Ly8gSW4gcHJhY3RpY2UsIHRoaXMgd2lsbCBhbHdheXMgY2xlYXIsIHNpbmNlIG5vIHBhcnRpYWwgcHJlc2V0cyB1c2UgaXRcblx0XHRcdGlmICghZGF0YS51c2VJbml0aWFsT3B0aW9ucykge1xuXHRcdFx0XHQkcGFnZVNlbGVjdC52YWwobnVsbCkudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0XHRcdCRuYW1lc3BhY2VTZWxlY3QudmFsKG51bGwpLnRyaWdnZXIoJ2NoYW5nZScpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gQWRkIGFueSBwcmVzZXQgb3B0aW9uczsgaW4gcHJhY3RpY2UsIGp1c3QgdXNlZCBmb3IgcHJpb3IgYmxvY2sgc2V0dGluZ3Ncblx0XHRcdGlmIChkYXRhLnJlc3RyaWN0aW9ucykge1xuXHRcdFx0XHRpZiAoZGF0YS5yZXN0cmljdGlvbnMucGFnZXMgJiYgISRwYWdlU2VsZWN0LnZhbCgpLmxlbmd0aCkge1xuXHRcdFx0XHRcdGNvbnN0IHBhZ2VzID0gZGF0YS5yZXN0cmljdGlvbnMucGFnZXMubWFwKChwcikgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHByLnRpdGxlO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdC8vIHNpbmNlIHBhZ2UgcmVzdHJpY3Rpb25zIHVzZSBhbiBhamF4IHNvdXJjZSwgd2Vcblx0XHRcdFx0XHQvLyBzaG9ydC1jaXJjdWl0IHRoYXQgYW5kIGp1c3QgYWRkIGEgbmV3IG9wdGlvblxuXHRcdFx0XHRcdGZvciAoY29uc3QgcGFnZSBvZiBwYWdlcykge1xuXHRcdFx0XHRcdFx0aWYgKCEkcGFnZVNlbGVjdC5maW5kKGBvcHRpb25bdmFsdWU9JyR7JC5lc2NhcGVTZWxlY3RvcihwYWdlKX0nXWApLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0XHRjb25zdCBuZXdPcHRpb24gPSBuZXcgT3B0aW9uKHBhZ2UsIHBhZ2UsIHRydWUsIHRydWUpO1xuXHRcdFx0XHRcdFx0XHQkcGFnZVNlbGVjdC5hcHBlbmQobmV3T3B0aW9uKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0JHBhZ2VTZWxlY3QudmFsKFsuLi4kcGFnZVNlbGVjdC52YWwoKSwgLi4uZ2VuZXJhdGVBcnJheShwYWdlcyldKS50cmlnZ2VyKCdjaGFuZ2UnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZGF0YS5yZXN0cmljdGlvbnMubmFtZXNwYWNlcykge1xuXHRcdFx0XHRcdCRuYW1lc3BhY2VTZWxlY3Rcblx0XHRcdFx0XHRcdC52YWwoWy4uLiRuYW1lc3BhY2VTZWxlY3QudmFsKCksIC4uLmdlbmVyYXRlQXJyYXkoZGF0YS5yZXN0cmljdGlvbnMubmFtZXNwYWNlcyldKVxuXHRcdFx0XHRcdFx0LnRyaWdnZXIoJ2NoYW5nZScpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRUd2lua2xlLmJsb2NrLmNhbGxiYWNrLmNoYW5nZV90ZW1wbGF0ZSA9IChlKSA9PiB7XG5cdFx0Y29uc3Qge2Zvcm19ID0gZS50YXJnZXQ7XG5cdFx0Y29uc3Qge3ZhbHVlfSA9IGZvcm0udGVtcGxhdGU7XG5cdFx0Y29uc3Qgc2V0dGluZ3MgPSBUd2lua2xlLmJsb2NrLmJsb2NrUHJlc2V0c0luZm9bdmFsdWVdO1xuXHRcdGNvbnN0IGJsb2NrQm94ID0gJChmb3JtKS5maW5kKCdbbmFtZT1hY3Rpb250eXBlXVt2YWx1ZT1ibG9ja10nKS5pcygnOmNoZWNrZWQnKTtcblx0XHRjb25zdCBwYXJ0aWFsQm94ID0gJChmb3JtKS5maW5kKCdbbmFtZT1hY3Rpb250eXBlXVt2YWx1ZT1wYXJ0aWFsXScpLmlzKCc6Y2hlY2tlZCcpO1xuXHRcdGNvbnN0IHRlbXBsYXRlQm94ID0gJChmb3JtKS5maW5kKCdbbmFtZT1hY3Rpb250eXBlXVt2YWx1ZT10ZW1wbGF0ZV0nKS5pcygnOmNoZWNrZWQnKTtcblx0XHQvLyBCbG9jayBmb3JtIGlzIG5vdCBwcmVzZW50XG5cdFx0aWYgKCFibG9ja0JveCkge1xuXHRcdFx0aWYgKHNldHRpbmdzLmluZGVmaW5pdGUgfHwgc2V0dGluZ3Mubm9uc3RhbmRhcmQpIHtcblx0XHRcdFx0aWYgKFR3aW5rbGUuYmxvY2sucHJldl90ZW1wbGF0ZV9leHBpcnkgPT09IG51bGwpIHtcblx0XHRcdFx0XHRUd2lua2xlLmJsb2NrLnByZXZfdGVtcGxhdGVfZXhwaXJ5ID0gZm9ybS50ZW1wbGF0ZV9leHBpcnkudmFsdWUgfHwgJyc7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9ybS50ZW1wbGF0ZV9leHBpcnkucGFyZW50Tm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdFx0XHRmb3JtLnRlbXBsYXRlX2V4cGlyeS52YWx1ZSA9ICdpbmZpbml0eSc7XG5cdFx0XHR9IGVsc2UgaWYgKGZvcm0udGVtcGxhdGVfZXhwaXJ5LnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG5cdFx0XHRcdGlmIChUd2lua2xlLmJsb2NrLnByZXZfdGVtcGxhdGVfZXhwaXJ5ICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0Zm9ybS50ZW1wbGF0ZV9leHBpcnkudmFsdWUgPSBUd2lua2xlLmJsb2NrLnByZXZfdGVtcGxhdGVfZXhwaXJ5O1xuXHRcdFx0XHRcdFR3aW5rbGUuYmxvY2sucHJldl90ZW1wbGF0ZV9leHBpcnkgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvcm0udGVtcGxhdGVfZXhwaXJ5LnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdFx0XHR9XG5cdFx0XHRpZiAoVHdpbmtsZS5ibG9jay5wcmV2X3RlbXBsYXRlX2V4cGlyeSkge1xuXHRcdFx0XHRmb3JtLmV4cGlyeS52YWx1ZSA9IFR3aW5rbGUuYmxvY2sucHJldl90ZW1wbGF0ZV9leHBpcnk7XG5cdFx0XHR9XG5cdFx0XHRNb3JlYml0cy5xdWlja0Zvcm0uc2V0RWxlbWVudFZpc2liaWxpdHkoZm9ybS5ub3RhbGsucGFyZW50Tm9kZSwgIXNldHRpbmdzLm5vbnN0YW5kYXJkKTtcblx0XHRcdC8vIFBhcnRpYWxcblx0XHRcdE1vcmViaXRzLnF1aWNrRm9ybS5zZXRFbGVtZW50VmlzaWJpbGl0eShmb3JtLm5vZW1haWxfdGVtcGxhdGUucGFyZW50Tm9kZSwgcGFydGlhbEJveCk7XG5cdFx0XHRNb3JlYml0cy5xdWlja0Zvcm0uc2V0RWxlbWVudFZpc2liaWxpdHkoZm9ybS5ub2NyZWF0ZV90ZW1wbGF0ZS5wYXJlbnROb2RlLCBwYXJ0aWFsQm94KTtcblx0XHR9IGVsc2UgaWYgKHRlbXBsYXRlQm94KSB7XG5cdFx0XHQvLyBPbmx5IHByZXNlbnQgaWYgYmxvY2sgJiYgdGVtcGxhdGUgZm9ybXMgYm90aCB2aXNpYmxlXG5cdFx0XHRNb3JlYml0cy5xdWlja0Zvcm0uc2V0RWxlbWVudFZpc2liaWxpdHkoXG5cdFx0XHRcdGZvcm0uYmxhbmtfZHVyYXRpb24ucGFyZW50Tm9kZSxcblx0XHRcdFx0IXNldHRpbmdzLmluZGVmaW5pdGUgJiYgIXNldHRpbmdzLm5vbnN0YW5kYXJkXG5cdFx0XHQpO1xuXHRcdH1cblx0XHQvLyBPbmx5IHBhcnRpY3VsYXJseSByZWxldmFudCBpZiB0ZW1wbGF0ZSBmb3JtIGlzIHByZXNlbnRcblx0XHRNb3JlYml0cy5xdWlja0Zvcm0uc2V0RWxlbWVudFZpc2liaWxpdHkoZm9ybS5hcnRpY2xlLnBhcmVudE5vZGUsIHNldHRpbmdzICYmICEhc2V0dGluZ3MucGFnZVBhcmFtKTtcblx0XHRNb3JlYml0cy5xdWlja0Zvcm0uc2V0RWxlbWVudFZpc2liaWxpdHkoZm9ybS5ibG9ja19yZWFzb24ucGFyZW50Tm9kZSwgc2V0dGluZ3MgJiYgISFzZXR0aW5ncy5yZWFzb25QYXJhbSk7XG5cdFx0Ly8gQXBwbHkgcmVhc29uIGZyb20gYmxvY2tQcmVzZXRzSW5mb1xuXHRcdGlmIChzZXR0aW5ncy5yZWFzb25QYXJhbSkge1xuXHRcdFx0Zm9ybS5ibG9ja19yZWFzb24udmFsdWUgPSBUd2lua2xlLmJsb2NrLmJsb2NrUHJlc2V0c0luZm9bZm9ybS5wcmVzZXQudmFsdWVdLnJlYXNvbiB8fCAnJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9ybS5ibG9ja19yZWFzb24udmFsdWUgPSAnJztcblx0XHR9XG5cdFx0Ly8gUGFydGlhbCBibG9ja1xuXHRcdE1vcmViaXRzLnF1aWNrRm9ybS5zZXRFbGVtZW50VmlzaWJpbGl0eShmb3JtLmFyZWEucGFyZW50Tm9kZSwgcGFydGlhbEJveCAmJiAhYmxvY2tCb3gpO1xuXHRcdGZvcm0ucm9vdC5wcmV2aWV3ZXIuY2xvc2VQcmV2aWV3KCk7XG5cdH07XG5cdFR3aW5rbGUuYmxvY2sucHJldl90ZW1wbGF0ZV9leHBpcnkgPSBudWxsO1xuXHRUd2lua2xlLmJsb2NrLmNhbGxiYWNrLnByZXZpZXcgPSAoZm9ybSkgPT4ge1xuXHRcdGNvbnN0IHBhcmFtcyA9IHtcblx0XHRcdGFydGljbGU6IGZvcm0uYXJ0aWNsZS52YWx1ZSxcblx0XHRcdGJsYW5rX2R1cmF0aW9uOiBmb3JtLmJsYW5rX2R1cmF0aW9uID8gZm9ybS5ibGFua19kdXJhdGlvbi5jaGVja2VkIDogZmFsc2UsXG5cdFx0XHRkaXNhYmxldGFsazogZm9ybS5kaXNhYmxldGFsay5jaGVja2VkIHx8IChmb3JtLm5vdGFsayA/IGZvcm0ubm90YWxrLmNoZWNrZWQgOiBmYWxzZSksXG5cdFx0XHRleHBpcnk6IGZvcm0udGVtcGxhdGVfZXhwaXJ5ID8gZm9ybS50ZW1wbGF0ZV9leHBpcnkudmFsdWUgOiBmb3JtLmV4cGlyeS52YWx1ZSxcblx0XHRcdGhhcmRibG9jazogVHdpbmtsZS5ibG9jay5pc1JlZ2lzdGVyZWQgPyBmb3JtLmF1dG9ibG9jay5jaGVja2VkIDogZm9ybS5oYXJkYmxvY2suY2hlY2tlZCxcblx0XHRcdGluZGVmaW5pdGU6IE1vcmViaXRzLnN0cmluZy5pc0luZmluaXR5KFxuXHRcdFx0XHRmb3JtLnRlbXBsYXRlX2V4cGlyeSA/IGZvcm0udGVtcGxhdGVfZXhwaXJ5LnZhbHVlIDogZm9ybS5leHBpcnkudmFsdWVcblx0XHRcdCksXG5cdFx0XHRyZWFzb246IGZvcm0uYmxvY2tfcmVhc29uLnZhbHVlLFxuXHRcdFx0dGVtcGxhdGU6IGZvcm0udGVtcGxhdGUudmFsdWUsXG5cdFx0XHRwYXJ0aWFsOiAkKGZvcm0pLmZpbmQoJ1tuYW1lPWFjdGlvbnR5cGVdW3ZhbHVlPXBhcnRpYWxdJykuaXMoJzpjaGVja2VkJyksXG5cdFx0XHRwYWdlcmVzdHJpY3Rpb25zOiAkKGZvcm0ucGFnZXJlc3RyaWN0aW9ucykudmFsKCkgfHwgW10sXG5cdFx0XHRuYW1lc3BhY2VyZXN0cmljdGlvbnM6ICQoZm9ybS5uYW1lc3BhY2VyZXN0cmljdGlvbnMpLnZhbCgpIHx8IFtdLFxuXHRcdFx0bm9lbWFpbDogZm9ybS5ub2VtYWlsLmNoZWNrZWQgfHwgKGZvcm0ubm9lbWFpbF90ZW1wbGF0ZSA/IGZvcm0ubm9lbWFpbF90ZW1wbGF0ZS5jaGVja2VkIDogZmFsc2UpLFxuXHRcdFx0bm9jcmVhdGU6IGZvcm0ubm9jcmVhdGUuY2hlY2tlZCB8fCAoZm9ybS5ub2NyZWF0ZV90ZW1wbGF0ZSA/IGZvcm0ubm9jcmVhdGVfdGVtcGxhdGUuY2hlY2tlZCA6IGZhbHNlKSxcblx0XHRcdGFyZWE6IGZvcm0uYXJlYS52YWx1ZSxcblx0XHR9O1xuXHRcdGNvbnN0IHRlbXBsYXRlVGV4dCA9IFR3aW5rbGUuYmxvY2suY2FsbGJhY2suZ2V0QmxvY2tOb3RpY2VXaWtpdGV4dChwYXJhbXMpO1xuXHRcdGZvcm0ucHJldmlld2VyLmJlZ2luUmVuZGVyKHRlbXBsYXRlVGV4dCwgYFVzZXJfdGFsazoke3JlbGV2YW50VXNlck5hbWV9L1dpa2l0ZXh0YCk7IC8vIEZvcmNlIHdpa2l0ZXh0L2NvcnJlY3QgdXNlcm5hbWVcblx0fTtcblx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay5ldmFsdWF0ZSA9IChlKSA9PiB7XG5cdFx0Y29uc3QgcGFyYW1zID0gTW9yZWJpdHMucXVpY2tGb3JtLmdldElucHV0RGF0YShlLnRhcmdldCk7XG5cdFx0Y29uc3QgJGZvcm0gPSAkKGUudGFyZ2V0KTtcblx0XHRjb25zdCB0b0Jsb2NrID0gJGZvcm0uZmluZCgnW25hbWU9YWN0aW9udHlwZV1bdmFsdWU9YmxvY2tdJykuaXMoJzpjaGVja2VkJyk7XG5cdFx0Y29uc3QgdG9XYXJuID0gJGZvcm0uZmluZCgnW25hbWU9YWN0aW9udHlwZV1bdmFsdWU9dGVtcGxhdGVdJykuaXMoJzpjaGVja2VkJyk7XG5cdFx0Y29uc3QgdG9QYXJ0aWFsID0gJGZvcm0uZmluZCgnW25hbWU9YWN0aW9udHlwZV1bdmFsdWU9cGFydGlhbF0nKS5pcygnOmNoZWNrZWQnKTtcblx0XHRjb25zdCB0b1RhZyA9ICRmb3JtLmZpbmQoJ1tuYW1lPWFjdGlvbnR5cGVdW3ZhbHVlPXRhZ10nKS5pcygnOmNoZWNrZWQnKTtcblx0XHRjb25zdCB0b1Byb3RlY3QgPSAkZm9ybS5maW5kKCdbbmFtZT1hY3Rpb250eXBlXVt2YWx1ZT1wcm90ZWN0XScpLmlzKCc6Y2hlY2tlZCcpO1xuXHRcdGNvbnN0IHRvVW5ibG9jayA9ICRmb3JtLmZpbmQoJ1tuYW1lPWFjdGlvbnR5cGVdW3ZhbHVlPXVuYmxvY2tdJykuaXMoJzpjaGVja2VkJyk7XG5cdFx0bGV0IGJsb2Nrb3B0aW9ucyA9IHt9O1xuXHRcdGxldCB0ZW1wbGF0ZW9wdGlvbnMgPSB7fTtcblx0XHRsZXQgdW5ibG9ja29wdGlvbnMgPSB7fTtcblx0XHRUd2lua2xlLmJsb2NrLmNhbGxiYWNrLnNhdmVGaWVsZHNldCgkZm9ybS5maW5kKCdbbmFtZT1maWVsZF9ibG9ja19vcHRpb25zXScpKTtcblx0XHRUd2lua2xlLmJsb2NrLmNhbGxiYWNrLnNhdmVGaWVsZHNldCgkZm9ybS5maW5kKCdbbmFtZT1maWVsZF90ZW1wbGF0ZV9vcHRpb25zXScpKTtcblx0XHRUd2lua2xlLmJsb2NrLmNhbGxiYWNrLnNhdmVGaWVsZHNldCgkZm9ybS5maW5kKCdbbmFtZT1maWVsZF90YWdfb3B0aW9uc10nKSk7XG5cdFx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay5zYXZlRmllbGRzZXQoJGZvcm0uZmluZCgnW25hbWU9ZmllbGRfdW5ibG9ja19vcHRpb25zXScpKTtcblx0XHRibG9ja29wdGlvbnMgPSBUd2lua2xlLmJsb2NrLmZpZWxkX2Jsb2NrX29wdGlvbnM7XG5cdFx0dW5ibG9ja29wdGlvbnMgPSBUd2lua2xlLmJsb2NrLmZpZWxkX3VuYmxvY2tfb3B0aW9ucztcblx0XHRjb25zdCB0b0Nsb3NldmlwID0gISFibG9ja29wdGlvbnMuY2xvc2V2aXA7XG5cdFx0dGVtcGxhdGVvcHRpb25zID0gVHdpbmtsZS5ibG9jay5maWVsZF90ZW1wbGF0ZV9vcHRpb25zO1xuXHRcdHRlbXBsYXRlb3B0aW9ucy5kaXNhYmxldGFsayA9ICEhKHRlbXBsYXRlb3B0aW9ucy5kaXNhYmxldGFsayB8fCBibG9ja29wdGlvbnMuZGlzYWJsZXRhbGspO1xuXHRcdHRlbXBsYXRlb3B0aW9ucy5oYXJkYmxvY2sgPSAhIWJsb2Nrb3B0aW9ucy5oYXJkYmxvY2s7XG5cdFx0Ly8gcmVtb3ZlIGV4dHJhbmVvdXNcblx0XHRkZWxldGUgYmxvY2tvcHRpb25zLmV4cGlyeV9wcmVzZXQ7XG5cdFx0ZGVsZXRlIGJsb2Nrb3B0aW9ucy5jbG9zZXZpcDtcblx0XHQvLyBQYXJ0aWFsIEFQSSByZXF1aXJlcyB0aGlzIHRvIGJlIGdvbmUsIG5vdCBmYWxzZSBvciAwXG5cdFx0aWYgKHRvUGFydGlhbCkge1xuXHRcdFx0YmxvY2tvcHRpb25zLnBhcnRpYWwgPSB0cnVlO1xuXHRcdFx0dGVtcGxhdGVvcHRpb25zLnBhcnRpYWwgPSB0cnVlO1xuXHRcdH1cblx0XHR0ZW1wbGF0ZW9wdGlvbnMucGFnZXJlc3RyaWN0aW9ucyA9ICRmb3JtLmZpbmQoJ1tuYW1lPXBhZ2VyZXN0cmljdGlvbnNdJykudmFsKCkgfHwgW107XG5cdFx0dGVtcGxhdGVvcHRpb25zLm5hbWVzcGFjZXJlc3RyaWN0aW9ucyA9ICRmb3JtLmZpbmQoJ1tuYW1lPW5hbWVzcGFjZXJlc3RyaWN0aW9uc10nKS52YWwoKSB8fCBbXTtcblx0XHQvLyBGb3JtYXQgZm9yIEFQSSBoZXJlIHJhdGhlciB0aGFuIGluIHNhdmVGaWVsZHNldFxuXHRcdGJsb2Nrb3B0aW9ucy5wYWdlcmVzdHJpY3Rpb25zID0gdGVtcGxhdGVvcHRpb25zLnBhZ2VyZXN0cmljdGlvbnMuam9pbignfCcpO1xuXHRcdGJsb2Nrb3B0aW9ucy5uYW1lc3BhY2VyZXN0cmljdGlvbnMgPSB0ZW1wbGF0ZW9wdGlvbnMubmFtZXNwYWNlcmVzdHJpY3Rpb25zLmpvaW4oJ3wnKTtcblx0XHQvLyB1c2UgYmxvY2sgc2V0dGluZ3MgYXMgd2FybiBvcHRpb25zIHdoZXJlIG5vdCBzdXBwbGllZFxuXHRcdHRlbXBsYXRlb3B0aW9ucy5zdW1tYXJ5IHx8PSBibG9ja29wdGlvbnMucmVhc29uO1xuXHRcdHRlbXBsYXRlb3B0aW9ucy5leHBpcnkgPSB0ZW1wbGF0ZW9wdGlvbnMudGVtcGxhdGVfZXhwaXJ5IHx8IGJsb2Nrb3B0aW9ucy5leHBpcnk7XG5cdFx0dGVtcGxhdGVvcHRpb25zLnByZXNldCA9IHRvQmxvY2sgPyBwYXJhbXMucHJlc2V0IDogbnVsbDtcblx0XHQvLyBDaGVjayB0YWdzXG5cdFx0Ly8gR2l2ZW4gYW4gYXJyYXkgb2YgaW5jb21wYXRpYmxlIHRhZ3MsIGNoZWNrIGlmIHdlIGhhdmUgdHdvIG9yIG1vcmUgc2VsZWN0ZWRcblx0XHRjb25zdCBjaGVja0luY29tcGF0aWJsZSA9IChjb25mbGljdHMsIGV4dHJhKSA9PiB7XG5cdFx0XHRjb25zdCBjb3VudCA9IGNvbmZsaWN0cy5yZWR1Y2UoKHN1bSwgdGFnKSA9PiB7XG5cdFx0XHRcdHJldHVybiAoc3VtICs9IHBhcmFtcy50YWcuaW5jbHVkZXModGFnKSk7XG5cdFx0XHR9LCAwKTtcblx0XHRcdGlmIChjb3VudCA+IDEpIHtcblx0XHRcdFx0bGV0IG1lc3NhZ2UgPSBgJHt3aW5kb3cud2dVTFMoJ+ivt+WcqOS7peS4i+agh+etvuS4reaLqeS4gOS9v+eUqCcsICfoq4vlnKjku6XkuIvmqJnnsaTkuK3mk4fkuIDkvb/nlKgnKX3vvJp7eyR7Y29uZmxpY3RzLmpvaW4oXG5cdFx0XHRcdFx0J31944CBe3snXG5cdFx0XHRcdCl9fX3jgIJgO1xuXHRcdFx0XHRtZXNzYWdlICs9IGV4dHJhIHx8ICcnO1xuXHRcdFx0XHR2b2lkIG13Lm5vdGlmeShtZXNzYWdlLCB7XG5cdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVibG9jaycsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdGlmICh0b1RhZykge1xuXHRcdFx0aWYgKHBhcmFtcy50YWcubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdHZvaWQgbXcubm90aWZ5KHdpbmRvdy53Z1VMUygn6K+36Iez5bCR6YCJ5oup5LiA5Liq55So5oi36aG15qCH6K6w77yBJywgJ+iri+iHs+WwkemBuOaTh+S4gOWAi+S9v+eUqOiAhemggemdouaomeiomO+8gScpLCB7XG5cdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVibG9jaycsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGNoZWNrSW5jb21wYXRpYmxlKFxuXHRcdFx0XHRcdFsnQmxvY2tlZCB1c2VyJywgJ1NvY2twdXBwZXQnXSxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQne3tTb2NrcHVwcGV0fX3lt7LmtrXnm5Z7e0Jsb2NrZWQgdXNlcn1955qE5Yqf6IO944CCJyxcblx0XHRcdFx0XHRcdCd7e1NvY2twdXBwZXR9feW3sua2teiTi3t7QmxvY2tlZCB1c2VyfX3nmoTlip/og73jgIInXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKFxuXHRcdFx0XHRjaGVja0luY29tcGF0aWJsZShcblx0XHRcdFx0XHRbJ0Jsb2NrZWQgdXNlcicsICdTb2NrcHVwcGV0ZWVyJ10sXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J3t7U29ja3B1cHBldGVlcn195bey5ra155uWe3tCbG9ja2VkIHVzZXJ9feeahOWKn+iDveOAgicsXG5cdFx0XHRcdFx0XHQne3tTb2NrcHVwcGV0ZWVyfX3lt7LmtrXok4t7e0Jsb2NrZWQgdXNlcn1955qE5Yqf6IO944CCJ1xuXHRcdFx0XHRcdClcblx0XHRcdFx0KVxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmIChcblx0XHRcdFx0Y2hlY2tJbmNvbXBhdGlibGUoXG5cdFx0XHRcdFx0WydTb2NrcHVwcGV0JywgJ1NvY2twdXBwZXRlZXInXSxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+ivt+S7juS4u+i0puWPt+WSjOWIhui6q+i0puWPt+S4remAieaLqeS4gOS4quOAgicsICfoq4vlvp7kuLvos6zomZ/lkozliIbouqvos6zomZ/kuK3pgbjmk4fkuIDlgIvjgIInKVxuXHRcdFx0XHQpXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHBhcmFtcy50YWcuaW5jbHVkZXMoJ1NvY2twdXBwZXQnKSAmJiBwYXJhbXMuc3BwVXNlcm5hbWUudHJpbSgpID09PSAnJykge1xuXHRcdFx0XHR2b2lkIG13Lm5vdGlmeSh3aW5kb3cud2dVTFMoJ+ivt+aPkOS+m+WCgOWEoei0puWPt+eahOS4u+i0puWPt+eUqOaIt+WQje+8gScsICfoq4vmj5DkvpvlgoDlhKHos6zomZ/nmoTkuLvos6zomZ/kvb/nlKjogIXlkI3nqLHvvIEnKSwge1xuXHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHR0YWc6ICd0d2lua2xlYmxvY2snLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAodG9CbG9jaykge1xuXHRcdFx0aWYgKGJsb2Nrb3B0aW9ucy5wYXJ0aWFsKSB7XG5cdFx0XHRcdGlmIChibG9ja29wdGlvbnMuZGlzYWJsZXRhbGsgJiYgIWJsb2Nrb3B0aW9ucy5uYW1lc3BhY2VyZXN0cmljdGlvbnMuaW5jbHVkZXMoJzMnKSkge1xuXHRcdFx0XHRcdHZvaWQgbXcubm90aWZ5KFxuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHQn6YOo5YiG5bCB56aB5peg5rOV6Zi75q2i57yW6L6R6Ieq5bex55qE6K6o6K666aG177yM6Zmk6Z2e5Lmf5bCB56aB5LqGVXNlciB0YWxr5ZG95ZCN56m66Ze077yBJyxcblx0XHRcdFx0XHRcdFx0J+mDqOWIhuWwgemOlueEoeazlemYu+atoue3qOi8r+iHquW3seeahOiojuirlumgge+8jOmZpOmdnuS5n+WwgemOluS6hlVzZXIgdGFsa+WRveWQjeepuumWk++8gSdcblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHRcdFx0dGFnOiAndHdpbmtsZWJsb2NrJyxcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWJsb2Nrb3B0aW9ucy5uYW1lc3BhY2VyZXN0cmljdGlvbnMgJiYgIWJsb2Nrb3B0aW9ucy5wYWdlcmVzdHJpY3Rpb25zKSB7XG5cdFx0XHRcdFx0aWYgKCFibG9ja29wdGlvbnMubm9lbWFpbCAmJiAhYmxvY2tvcHRpb25zLm5vY3JlYXRlKSB7XG5cdFx0XHRcdFx0XHQvLyBCbGFuayBlbnRyaWVzIHRlY2huaWNhbGx5IGFsbG93ZWRcblx0XHRcdFx0XHRcdHZvaWQgbXcubm90aWZ5KFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+ayoeaciemAieaLqemhtemdouaIluWRveWQjeepuumXtO+8jOS5n+ayoeacieWBnOeUqOeUteWtkOmCruS7tuaIluemgeatouWIm+W7uui0puWPt++8m+ivt+mAieaLqeiHs+WwkeS4gOS4qumAiemhueS7peW6lOeUqOmDqOWIhuWwgeemge+8gScsXG5cdFx0XHRcdFx0XHRcdFx0J+aykuaciemBuOaTh+mggemdouaIluWRveWQjeepuumWk++8jOS5n+aykuacieWBnOeUqOmbu+WtkOmDteS7tuaIluemgeatouW7uueri+izrOiZn++8m+iri+mBuOaTh+iHs+WwkeS4gOWAi+mBuOmgheS7peaHieeUqOmDqOWIhuWwgemOlu+8gSdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHRcdFx0XHR0YWc6ICd0d2lua2xlYmxvY2snLFxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoXG5cdFx0XHRcdFx0XHQhY29uZmlybShcblx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCfmgqjlsIbopoHov5vooYzlsIHnpoHvvIzkvYbmsqHmnInpmLvmraLku7vkvZXpobXpnaLmiJblkb3lkI3nqbrpl7TnmoTnvJbovpHvvIznoa7lrpropoHnu6fnu63vvJ8nLFxuXHRcdFx0XHRcdFx0XHRcdCfmgqjlsIfopoHpgLLooYzlsIHpjpbvvIzkvYbmspLmnInpmLvmraLku7vkvZXpoIHpnaLmiJblkb3lkI3nqbrplpPnmoTnt6jovK/vvIznorrlrpropoHnubznuozvvJ8nXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghYmxvY2tvcHRpb25zLmV4cGlyeSkge1xuXHRcdFx0XHR2b2lkIG13Lm5vdGlmeSh3aW5kb3cud2dVTFMoJ+ivt+aPkOS+m+i/h+acn+aXtumXtO+8gScsICfoq4vmj5DkvpvpgY7mnJ/mmYLplpPvvIEnKSwge1xuXHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHR0YWc6ICd0d2lua2xlYmxvY2snLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIGlmIChNb3JlYml0cy5zdHJpbmcuaXNJbmZpbml0eShibG9ja29wdGlvbnMuZXhwaXJ5KSAmJiAhVHdpbmtsZS5ibG9jay5pc1JlZ2lzdGVyZWQpIHtcblx0XHRcdFx0dm9pZCBtdy5ub3RpZnkod2luZG93LndnVUxTKCfnpoHmraLml6DpmZDmnJ/lsIHnpoFJUOWcsOWdgO+8gScsICfnpoHmraLnhKHpmZDmnJ/lsIHpjpZJUOS9jeWdgO+8gScpLCB7XG5cdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVibG9jaycsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWJsb2Nrb3B0aW9ucy5yZWFzb24pIHtcblx0XHRcdFx0dm9pZCBtdy5ub3RpZnkod2luZG93LndnVUxTKCfor7fmj5DkvpvlsIHnpoHnkIbnlLHvvIEnLCAn6KuL5o+Q5L6b5bCB6Y6W55CG55Sx77yBJyksIHtcblx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0dGFnOiAndHdpbmtsZWJsb2NrJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdE1vcmViaXRzLnNpbXBsZVdpbmRvdy5zZXRCdXR0b25zRW5hYmxlZChmYWxzZSk7XG5cdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5pdChlLnRhcmdldCk7XG5cdFx0XHRjb25zdCBzdGF0dXNFbGVtZW50ID0gbmV3IE1vcmViaXRzLnN0YXR1cyh3aW5kb3cud2dVTFMoJ+aJp+ihjOWwgeemgScsICfln7fooYzlsIHpjpYnKSk7XG5cdFx0XHRibG9ja29wdGlvbnMuYWN0aW9uID0gJ2Jsb2NrJztcblx0XHRcdGJsb2Nrb3B0aW9ucy51c2VyID0gcmVsZXZhbnRVc2VyTmFtZTtcblx0XHRcdC8vIGJvb2xlYW4tZmxpcHBlZCBvcHRpb25zXG5cdFx0XHRibG9ja29wdGlvbnMuYW5vbm9ubHkgPSBibG9ja29wdGlvbnMuaGFyZGJsb2NrID8gdW5kZWZpbmVkIDogdHJ1ZTtcblx0XHRcdGJsb2Nrb3B0aW9ucy5hbGxvd3VzZXJ0YWxrID0gYmxvY2tvcHRpb25zLmRpc2FibGV0YWxrID8gdW5kZWZpbmVkIDogdHJ1ZTtcblx0XHRcdC8qKlxuXHRcdFx0ICogQ2hlY2sgaWYgYmxvY2sgc3RhdHVzIGNoYW5nZWQgd2hpbGUgcHJvY2Vzc2luZyB0aGUgZm9ybS5cblx0XHRcdCAqIFRoZXJlJ3MgYSBsb3QgdG8gY29uc2lkZXIgaGVyZS4gbGlzdD1ibG9ja3MgcHJvdmlkZXMgdGhlXG5cdFx0XHQgKiBjdXJyZW50IGJsb2NrIHN0YXR1cywgYnV0IHRoZXJlIGFyZSBhdCBsZWFzdCB0d28gaXNzdWVzIHdpdGhcblx0XHRcdCAqIHJlbHlpbmcgb24gaXQuIEZpcnN0LCB0aGUgaWQgZG9lc24ndCB1cGRhdGUgb24gYSByZWJsb2NrLFxuXHRcdFx0ICogbWVhbmluZyB0aGUgaW5kaXZpZHVhbCBwYXJhbWV0ZXJzIG5lZWQgdG8gYmUgY29tcGFyZWQuIFRoaXNcblx0XHRcdCAqIGNhbiBiZSBkb25lIHJvdWdobHkgd2l0aCBKU09OLnN0cmluZ2lmeSAtIHdlIGNhbiB0aGFua2Z1bGx5XG5cdFx0XHQgKiByZWx5IG9uIG9yZGVyIGZyb20gdGhlIHNlcnZlciwgYWx0aG91Z2ggc29ydGluZyB3b3VsZCBiZVxuXHRcdFx0ICogZmluZSBpZiBub3QgLSBidXQgZmFsc2V5IHZhbHVlcyBhcmUgcHJvYmxlbWF0aWMgYW5kIGlzXG5cdFx0XHQgKiBub24taWRlYWwuIE1vcmUgaW1wb3J0YW50bHksIGxpc3Q9YmxvY2tzIHdvbid0IGluZGljYXRlIGlmIGFcblx0XHRcdCAqIG5vbi1ibG9ja2VkIHVzZXIgaXMgYmxvY2tlZCB0aGVuIHVuYmxvY2tlZC4gVGhpcyBzaG91bGQgYmVcblx0XHRcdCAqIGV4Y2VlZGluZ3kgcmFyZSwgYnV0IHJlZ2FyZGxlc3MsIHdlIHRodXMgbmVlZCB0byBjaGVja1xuXHRcdFx0ICogbGlzdD1sb2dldmVudHMsIHdoaWNoIGhhcyBhIG5pY2VseSB1cGRhdGluZyBsb2dpZFxuXHRcdFx0ICogcGFyYW1ldGVyLiBXZSBjYW4ndCByZWx5IGp1c3Qgb24gdGhhdCwgdGhvdWdoLCBzaW5jZSBpdFxuXHRcdFx0ICogZG9lc24ndCBhY2NvdW50IGZvciBibG9ja3MgdGhhdCBoYXZlIGV4cGlyZWQgb24gdGhlaXIgb3duLlxuXHRcdFx0ICogQXMgc3VjaCwgd2UgdXNlIGJvdGguIFVzaW5nIHNvbWUgdGVybmFyaWVzLCB0aGUgbG9naWRcblx0XHRcdCAqIHZhcmlhYmxlcyBhcmUgZmFsc2UgaWYgdGhlcmUncyBubyBsb2dldmVudHMsIHNvIGlmIHRoZXlcblx0XHRcdCAqIGFyZW4ndCBlcXVhbCB3ZSBkZWZpbnRlbHkgaGF2ZSBhIGNoYW5nZWQgZW50cnkgKHNlbmRcblx0XHRcdCAqIGNvbmZpcm1hdGlvbikuIElmIHRoZXkgYXJlIGVxdWFsLCB0aGVuIGVpdGhlciB0aGUgdXNlciB3YXNcblx0XHRcdCAqIG5ldmVyIGJsb2NrZWQgKHRoZSBibG9jayBzdGF0dXNlcyB3aWxsIGJlIGVxdWFsLCBub1xuXHRcdFx0ICogY29uZmlybWF0aW9uKSBvciB0aGVyZSdzIG5vIG5ldyBibG9jaywgaW4gd2hpY2ggY2FzZSBlaXRoZXJcblx0XHRcdCAqIGEgYmxvY2sgZXhwaXJlZCAoZGlmZmVyZW50IHN0YXR1c2VzLCBjb25maXJtYXRpb24pIG9yIHRoZVxuXHRcdFx0ICogc2FtZSBibG9jayBpcyBzdGlsbCBhY3RpdmUgKHNhbWUgc3RhdHVzLCBubyBjb25maXJtYXRpb24pLlxuXHRcdFx0ICovXG5cdFx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdFx0Zm9ybWF0OiAnanNvbicsXG5cdFx0XHRcdGFjdGlvbjogJ3F1ZXJ5Jyxcblx0XHRcdFx0bGlzdDogJ2Jsb2Nrc3xsb2dldmVudHMnLFxuXHRcdFx0XHRsZXR5cGU6ICdibG9jaycsXG5cdFx0XHRcdGxlbGltaXQ6IDEsXG5cdFx0XHRcdGxldGl0bGU6IGBVc2VyOiR7YmxvY2tvcHRpb25zLnVzZXJ9YCxcblx0XHRcdH07XG5cdFx0XHQvLyBia3VzZXJzIGRvZXNuJ3QgY2F0Y2ggc2luZ2xlIElQcyBibG9ja2VkIGFzIHBhcnQgb2YgYSByYW5nZSBibG9ja1xuXHRcdFx0aWYgKG13LnV0aWwuaXNJUEFkZHJlc3MoYmxvY2tvcHRpb25zLnVzZXIsIHRydWUpKSB7XG5cdFx0XHRcdHF1ZXJ5LmJraXAgPSBibG9ja29wdGlvbnMudXNlcjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHF1ZXJ5LmJrdXNlcnMgPSBibG9ja29wdGlvbnMudXNlcjtcblx0XHRcdFx0cXVlcnkubGlzdCArPSAnfHVzZXJzJztcblx0XHRcdFx0cXVlcnkudXNwcm9wID0gJ2dyb3Vwcyc7XG5cdFx0XHRcdHF1ZXJ5LnVzdXNlcnMgPSBibG9ja29wdGlvbnMudXNlcjtcblx0XHRcdFx0cXVlcnkubWV0YSA9ICd0b2tlbnMnO1xuXHRcdFx0XHRxdWVyeS50eXBlID0gJ3VzZXJyaWdodHMnO1xuXHRcdFx0fVxuXHRcdFx0dm9pZCBhcGkuZ2V0KHF1ZXJ5KS50aGVuKChkYXRhKSA9PiB7XG5cdFx0XHRcdGxldCBbYmxvY2tdID0gZGF0YS5xdWVyeS5ibG9ja3M7XG5cdFx0XHRcdC8vIEFzIHdpdGggdGhlIGluaXRpYWwgZGF0YSBmZXRjaCwgaWYgYW4gSVAgaXMgYmxvY2tlZFxuXHRcdFx0XHQvLyAqYW5kKiByYW5nZWJsb2NrZWQsIHRoaXMgd291bGQgb25seSBncmFiIHdoaWNoZXZlclxuXHRcdFx0XHQvLyBibG9jayBpcyBtb3JlIHJlY2VudCwgd2hpY2ggd291bGQgbGlrZWx5IG1lYW4gYVxuXHRcdFx0XHQvLyBtaXNtYXRjaC4gIEhvd2V2ZXIsIGlmIHRoZSByYW5nZWJsb2NrIGlzIHVwZGF0ZWRcblx0XHRcdFx0Ly8gd2hpbGUgZmlsbGluZyBvdXQgdGhlIGZvcm0sIHRoaXMgd29uJ3QgZGV0ZWN0IHRoYXQsXG5cdFx0XHRcdC8vIGJ1dCB0aGF0J3MgcHJvYmFibHkgZmluZS5cblx0XHRcdFx0aWYgKGRhdGEucXVlcnkuYmxvY2tzLmxlbmd0aCA+IDEgJiYgYmxvY2sudXNlciAhPT0gcmVsZXZhbnRVc2VyTmFtZSkge1xuXHRcdFx0XHRcdFssIGJsb2NrXSA9IGRhdGEucXVlcnkuYmxvY2tzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IFtsb2dldmVudHNdID0gZGF0YS5xdWVyeS5sb2dldmVudHM7XG5cdFx0XHRcdGNvbnN0IHVzZXIgPSBkYXRhLnF1ZXJ5LnVzZXJzID8gZGF0YS5xdWVyeS51c2Vyc1swXSA6IG51bGw7XG5cdFx0XHRcdGNvbnN0IGxvZ2lkID0gZGF0YS5xdWVyeS5sb2dldmVudHMubGVuZ3RoID8gbG9nZXZlbnRzLmxvZ2lkIDogZmFsc2U7XG5cdFx0XHRcdGlmIChsb2dpZCAhPT0gVHdpbmtsZS5ibG9jay5ibG9ja0xvZ0lkIHx8ICEhYmxvY2sgIT09ICEhVHdpbmtsZS5ibG9jay5jdXJyZW50QmxvY2tJbmZvKSB7XG5cdFx0XHRcdFx0bGV0IG1lc3NhZ2UgPSBibG9ja29wdGlvbnMudXNlciArIHdpbmRvdy53Z1VMUygn55qE5bCB56aB54q25oCB5bey6KKr5L+u5pS544CCJywgJ+eahOWwgemOlueLgOaFi+W3suiiq+S/ruaUueOAgicpO1xuXHRcdFx0XHRcdGlmIChibG9jaykge1xuXHRcdFx0XHRcdFx0bWVzc2FnZSArPSB3aW5kb3cud2dVTFMoJ+aWsOeKtuaAge+8micsICfmlrDni4DmhYvvvJonKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bWVzc2FnZSArPSB3aW5kb3cud2dVTFMoJ+acgOaWsOaXpeW/l++8micsICfmnIDmlrDml6XoqozvvJonKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bGV0IGxvZ0V4cGlyeSA9ICcnO1xuXHRcdFx0XHRcdGlmIChsb2dldmVudHMucGFyYW1zLmR1cmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRpZiAobG9nZXZlbnRzLnBhcmFtcy5kdXJhdGlvbiA9PT0gJ2luZmluaXR5Jykge1xuXHRcdFx0XHRcdFx0XHRsb2dFeHBpcnkgPSB3aW5kb3cud2dVTFMoJ+aXoOmZkOacnycsICfnhKHpmZDmnJ8nKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGV4cGlyeURhdGUgPSBuZXcgTW9yZWJpdHMuZGF0ZShsb2dldmVudHMucGFyYW1zLmV4cGlyeSk7XG5cdFx0XHRcdFx0XHRcdGxvZ0V4cGlyeSArPVxuXHRcdFx0XHRcdFx0XHRcdChleHBpcnlEYXRlLmlzQmVmb3JlKG5ldyBEYXRlKCkpID8gd2luZG93LndnVUxTKCfov4fmnJ/kuo4nLCAn6YGO5pyf5pa8JykgOiAn55u05YiwJykgK1xuXHRcdFx0XHRcdFx0XHRcdGV4cGlyeURhdGUuY2FsZW5kYXIoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ly8gbm8gZHVyYXRpb24sIGFjdGlvbj11bmJsb2NrLCBqdXN0IHNob3cgdGltZXN0YW1wXG5cdFx0XHRcdFx0XHRsb2dFeHBpcnkgPSBg5pa8JHtuZXcgTW9yZWJpdHMuZGF0ZShsb2dldmVudHMudGltZXN0YW1wKS5jYWxlbmRhcigpfWA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1lc3NhZ2UgKz0gYOeUsSR7bG9nZXZlbnRzLnVzZXJ9JHt3aW5kb3cud2dVTFMoJ+S7peKAnCcsICfku6XjgIwnKX0ke2xvZ2V2ZW50cy5jb21tZW50fSR7d2luZG93LndnVUxTKCfigJ0nLCAn44CNJyl9JHtcblx0XHRcdFx0XHRcdGJsb2NrQWN0aW9uVGV4dFtsb2dldmVudHMuYWN0aW9uXVxuXHRcdFx0XHRcdH0ke2xvZ0V4cGlyeX0ke3dpbmRvdy53Z1VMUygn77yM5L2g5oOz6KaB5Lul5L2g55qE6K6+572u5pu05pS55bCB56aB5ZCX77yfJywgJ++8jOS9oOaDs+imgeS7peS9oOeahOioreWumuiuiuabtOWwgemOluWXju+8nycpfWA7XG5cdFx0XHRcdFx0aWYgKCFjb25maXJtKG1lc3NhZ2UpKSB7XG5cdFx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5mbyhcblx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfmiafooYzlsIHnpoEnLCAn5Z+36KGM5bCB6Y6WJyksXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn55So5oi35Y+W5raI5pON5L2cJywgJ+S9v+eUqOiAheWPlua2iOaTjeS9nCcpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRibG9ja29wdGlvbnMucmVibG9jayA9IDE7IC8vIFdyaXRpbmcgb3ZlciBhIGJsb2NrIHdpbGwgZmFpbCBvdGhlcndpc2Vcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBncm91cHNDYW5CZVJlbW92ZWQgPSBbXG5cdFx0XHRcdFx0J2F1dG9wYXRyb2xsZWQnLFxuXHRcdFx0XHRcdCdjb25maXJtZWQnLFxuXHRcdFx0XHRcdCdybnJzdmVyaWZ5LWV4ZW1wdCcsXG5cdFx0XHRcdFx0J21hc3NtZXNzYWdlLXNlbmRlcicsXG5cdFx0XHRcdFx0J3BhdHJvbGxlcicsXG5cdFx0XHRcdFx0J3RlbXBsYXRlZWRpdG9yJyxcblx0XHRcdFx0XHQnaW1wb3J0ZXInLFxuXHRcdFx0XHRdO1xuXHRcdFx0XHRsZXQgZ3JvdXBzVG9CZVJlbW92ZWQgPSBbXTtcblx0XHRcdFx0aWYgKHVzZXIgJiYgTW9yZWJpdHMuc3RyaW5nLmlzSW5maW5pdHkoYmxvY2tvcHRpb25zLmV4cGlyeSkpIHtcblx0XHRcdFx0XHRncm91cHNUb0JlUmVtb3ZlZCA9IHVzZXIuZ3JvdXBzLmZpbHRlcigoZ3JvdXApID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiBncm91cHNDYW5CZVJlbW92ZWQuaW5jbHVkZXMoZ3JvdXApO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGV4ZWN1dGUgYmxvY2tcblx0XHRcdFx0YmxvY2tvcHRpb25zLnRhZ3MgPSBUd2lua2xlLmNoYW5nZVRhZ3M7XG5cdFx0XHRcdGJsb2Nrb3B0aW9ucy50b2tlbiA9IG13LnVzZXIudG9rZW5zLmdldCgnY3NyZlRva2VuJyk7XG5cdFx0XHRcdGNvbnN0IG1iQXBpID0gbmV3IE1vcmViaXRzLndpa2kuYXBpKHdpbmRvdy53Z1VMUygn5omn6KGM5bCB56aBJywgJ+Wft+ihjOWwgemOlicpLCBibG9ja29wdGlvbnMsICgpID0+IHtcblx0XHRcdFx0XHRzdGF0dXNFbGVtZW50LmluZm8oJ+WujOaIkCcpO1xuXHRcdFx0XHRcdGlmICh0b1dhcm4pIHtcblx0XHRcdFx0XHRcdFR3aW5rbGUuYmxvY2suY2FsbGJhY2suaXNzdWVfdGVtcGxhdGUodGVtcGxhdGVvcHRpb25zKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHRvQ2xvc2V2aXApIHtcblx0XHRcdFx0XHRcdGNvbnN0IHZpcFBhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0XHRcdFx0XHQnTElCX3RhbGs65oql5ZGK5b2T5YmN56C05Z2PJyxcblx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCflhbPpl63or7fmsYInLCAn6Zec6ZaJ6KuL5rGCJylcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR2aXBQYWdlLnNldEZvbGxvd1JlZGlyZWN0KHRydWUpO1xuXHRcdFx0XHRcdFx0dmlwUGFnZS5zZXRDYWxsYmFja1BhcmFtZXRlcnMoYmxvY2tvcHRpb25zKTtcblx0XHRcdFx0XHRcdHZpcFBhZ2UubG9hZChUd2lua2xlLmJsb2NrLmNhbGxiYWNrLmNsb3NlUmVxdWVzdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChncm91cHNUb0JlUmVtb3ZlZC5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHRjb25zdCByaWdodFN0YXR1c0VsZW1lbnQgPSBuZXcgTW9yZWJpdHMuc3RhdHVzKHdpbmRvdy53Z1VMUygn56e76Zmk5p2D6ZmQJywgJ+enu+mZpOasiumZkCcpKTtcblx0XHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdFx0Y29uZmlybShcblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+ivpeeUqOaIt+acieS7peS4i+adg+mZkO+8micsICfoqbLkvb/nlKjogIXmnInku6XkuIvmrIrpmZDvvJonKSArXG5cdFx0XHRcdFx0XHRcdFx0XHRncm91cHNUb0JlUmVtb3ZlZC5qb2luKCfjgIEnKSArXG5cdFx0XHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ++8jOaCqOaYr+WQpuaDs+imgeWQjOaXtuenu+mZpOi/meS6m+adg+mZkO+8nycsICfvvIzmgqjmmK/lkKbmg7PopoHlkIzmmYLnp7vpmaTpgJnkupvmrIrpmZDvvJ8nKVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgcmV2b2tlT3B0aW9ucyA9IHtcblx0XHRcdFx0XHRcdFx0XHRhY3Rpb246ICd1c2VycmlnaHRzJyxcblx0XHRcdFx0XHRcdFx0XHR1c2VyOiBibG9ja29wdGlvbnMudXNlcixcblx0XHRcdFx0XHRcdFx0XHRyZW1vdmU6IGdyb3Vwc1RvQmVSZW1vdmVkLmpvaW4oJ3wnKSxcblx0XHRcdFx0XHRcdFx0XHRyZWFzb246IHdpbmRvdy53Z1VMUygn55So5oi35bey6KKr5peg6ZmQ5pyf5bCB56aBJywgJ+S9v+eUqOiAheW3suiiq+eEoemZkOacn+WwgemOlicpLFxuXHRcdFx0XHRcdFx0XHRcdHRva2VuOiBkYXRhLnF1ZXJ5LnRva2Vucy51c2VycmlnaHRzdG9rZW4sXG5cdFx0XHRcdFx0XHRcdFx0dGFnczogVHdpbmtsZS5jaGFuZ2VUYWdzLFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0XHRjb25zdCBtckFwaSA9IG5ldyBNb3JlYml0cy53aWtpLmFwaShcblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+enu+mZpOadg+mZkCcsICfnp7vpmaTmrIrpmZAnKSxcblx0XHRcdFx0XHRcdFx0XHRyZXZva2VPcHRpb25zLFxuXHRcdFx0XHRcdFx0XHRcdCgpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdHJpZ2h0U3RhdHVzRWxlbWVudC5pbmZvKGDlt7Lnp7vpmaQke2dyb3Vwc1RvQmVSZW1vdmVkLmpvaW4oJ+OAgScpfWApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0bXJBcGkucG9zdCgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmlnaHRTdGF0dXNFbGVtZW50LmVycm9yKHdpbmRvdy53Z1VMUygn55So5oi35Y+W5raI5pON5L2c44CCJywgJ+S9v+eUqOiAheWPlua2iOaTjeS9nOOAgicpKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRtYkFwaS5wb3N0KCk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKHRvV2Fybikge1xuXHRcdFx0TW9yZWJpdHMuc2ltcGxlV2luZG93LnNldEJ1dHRvbnNFbmFibGVkKGZhbHNlKTtcblx0XHRcdE1vcmViaXRzLnN0YXR1cy5pbml0KGUudGFyZ2V0KTtcblx0XHRcdFR3aW5rbGUuYmxvY2suY2FsbGJhY2suaXNzdWVfdGVtcGxhdGUodGVtcGxhdGVvcHRpb25zKTtcblx0XHR9XG5cdFx0aWYgKHRvVGFnIHx8IHRvUHJvdGVjdCkge1xuXHRcdFx0TW9yZWJpdHMuc2ltcGxlV2luZG93LnNldEJ1dHRvbnNFbmFibGVkKGZhbHNlKTtcblx0XHRcdE1vcmViaXRzLnN0YXR1cy5pbml0KGUudGFyZ2V0KTtcblx0XHRcdGNvbnN0IHVzZXJQYWdlID0gYFVzZXI6JHttdy5jb25maWcuZ2V0KCd3Z1JlbGV2YW50VXNlck5hbWUnKX1gO1xuXHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0dXNlclBhZ2UsXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn5qCH6K6w5oiW5L+d5oqk55So5oi36aG1JywgJ+aomeiomOaIluS/neitt+S9v+eUqOiAhemggemdoicpXG5cdFx0XHQpO1xuXHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYXJhbXMpO1xuXHRcdFx0eXNhcmNoaXZlc19wYWdlLmxvYWQoVHdpbmtsZS5ibG9jay5jYWxsYmFjay50YWd1c2VycGFnZSk7XG5cdFx0fVxuXHRcdGlmICh0b1VuYmxvY2spIHtcblx0XHRcdGlmICghdW5ibG9ja29wdGlvbnMucmVhc29uKSB7XG5cdFx0XHRcdHZvaWQgbXcubm90aWZ5KHdpbmRvdy53Z1VMUygn6K+35o+Q5L6b6Kej6Zmk5bCB56aB55CG55Sx77yBJywgJ+iri+aPkOS+m+ino+mZpOWwgemOlueQhueUse+8gScpLCB7XG5cdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVibG9jaycsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRNb3JlYml0cy5zaW1wbGVXaW5kb3cuc2V0QnV0dG9uc0VuYWJsZWQoZmFsc2UpO1xuXHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoZS50YXJnZXQpO1xuXHRcdFx0Y29uc3QgdW5ibG9ja1N0YXR1c0VsZW1lbnQgPSBuZXcgTW9yZWJpdHMuc3RhdHVzKHdpbmRvdy53Z1VMUygn5omn6KGM6Kej6Zmk5bCB56aBJywgJ+Wft+ihjOino+mZpOWwgemOlicpKTtcblx0XHRcdHVuYmxvY2tvcHRpb25zLmFjdGlvbiA9ICd1bmJsb2NrJztcblx0XHRcdHVuYmxvY2tvcHRpb25zLnVzZXIgPSBtdy5jb25maWcuZ2V0KCd3Z1JlbGV2YW50VXNlck5hbWUnKTtcblx0XHRcdC8vIGV4ZWN1dGUgdW5ibG9ja1xuXHRcdFx0dW5ibG9ja29wdGlvbnMudGFncyA9IFR3aW5rbGUuY2hhbmdlVGFncztcblx0XHRcdHVuYmxvY2tvcHRpb25zLnRva2VuID0gbXcudXNlci50b2tlbnMuZ2V0KCdjc3JmVG9rZW4nKTtcblx0XHRcdGNvbnN0IHVuYmxvY2tNYkFwaSA9IG5ldyBNb3JlYml0cy53aWtpLmFwaShcblx0XHRcdFx0d2luZG93LndnVUxTKCfmiafooYzop6PpmaTlsIHnpoEnLCAn5Z+36KGM6Kej6Zmk5bCB6Y6WJyksXG5cdFx0XHRcdHVuYmxvY2tvcHRpb25zLFxuXHRcdFx0XHQoKSA9PiB7XG5cdFx0XHRcdFx0dW5ibG9ja1N0YXR1c0VsZW1lbnQuaW5mbygn5a6M5oiQJyk7XG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cdFx0XHR1bmJsb2NrTWJBcGkucG9zdCgpO1xuXHRcdH1cblx0XHRpZiAoIXRvQmxvY2sgJiYgIXRvV2FybiAmJiAhdG9UYWcgJiYgIXRvUHJvdGVjdCAmJiAhdG9VbmJsb2NrKSB7XG5cdFx0XHR2b2lkIG13Lm5vdGlmeSh3aW5kb3cud2dVTFMoJ+ivt+e7mVR3aW5rbGXngrnkuovlgZrvvIEnLCAn6KuL57WmVHdpbmtsZem7nuS6i+WBmu+8gScpLCB7XG5cdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0dGFnOiAndHdpbmtsZWJsb2NrJyxcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay50YWd1c2VycGFnZSA9IChwYWdlb2JqKSA9PiB7XG5cdFx0Y29uc3QgcGFyYW1zID0gcGFnZW9iai5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHRjb25zdCBzdGF0ZWxlbSA9IHBhZ2VvYmouZ2V0U3RhdHVzRWxlbWVudCgpO1xuXHRcdGlmIChwYXJhbXMuYWN0aW9udHlwZS5pbmNsdWRlcygndGFnJykpIHtcblx0XHRcdGNvbnN0IHRhZ3MgPSBbXTtcblx0XHRcdGZvciAoY29uc3QgdGFnIG9mIHBhcmFtcy50YWcpIHtcblx0XHRcdFx0bGV0IHRhZ3RleHQgPSBge3ske3RhZ31gO1xuXHRcdFx0XHRzd2l0Y2ggKHRhZykge1xuXHRcdFx0XHRcdGNhc2UgJ0Jsb2NrZWQgdXNlcic6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdTb2NrcHVwcGV0Jzpcblx0XHRcdFx0XHRcdHRhZ3RleHQgKz0gYFxcbnwgMSA9ICR7cGFyYW1zLnNwcFVzZXJuYW1lLnRyaW0oKX1gO1xuXHRcdFx0XHRcdFx0dGFndGV4dCArPSBgXFxufCAyID0gJHtwYXJhbXMuc3BwVHlwZS50cmltKCl9YDtcblx0XHRcdFx0XHRcdGlmIChwYXJhbXMuc3BwRXZpZGVuY2UudHJpbSgpKSB7XG5cdFx0XHRcdFx0XHRcdHRhZ3RleHQgKz0gYFxcbnwgZXZpZGVuY2UgPSAke3BhcmFtcy5zcHBFdmlkZW5jZS50cmltKCl9YDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRhZ3RleHQgKz0gJ1xcbnwgbG9ja2VkID0gbm8nO1xuXHRcdFx0XHRcdFx0dGFndGV4dCArPSAnXFxufCBub3RibG9ja2VkID0gbm8nO1xuXHRcdFx0XHRcdFx0dGFndGV4dCArPSAnXFxuJztcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1NvY2twdXBwZXRlZXInOlxuXHRcdFx0XHRcdFx0dGFndGV4dCArPSAnXFxufCAxID0gYmxvY2tlZCc7XG5cdFx0XHRcdFx0XHR0YWd0ZXh0ICs9IGBcXG58IGNoZWNrZWQgPSAke3BhcmFtcy5zcG1DaGVja2VkID8gJ3llcycgOiAnJ31gO1xuXHRcdFx0XHRcdFx0aWYgKHBhcmFtcy5zcG1FdmlkZW5jZS50cmltKCkpIHtcblx0XHRcdFx0XHRcdFx0dGFndGV4dCArPSBgXFxufCBldmlkZW5jZSA9ICR7cGFyYW1zLnNwbUV2aWRlbmNlLnRyaW0oKX1gO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGFndGV4dCArPSAnXFxuJztcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHR2b2lkIG13Lm5vdGlmeSh3aW5kb3cud2dVTFMoJ+acquefpeeahOeUqOaIt+mhteaooeadv++8gScsICfmnKrnn6XnmoTkvb/nlKjogIXpoIHpnaLmqKHmnb/vvIEnKSwge1xuXHRcdFx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVibG9jaycsXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRhZ3RleHQgKz0gJ319Jztcblx0XHRcdFx0dGFnc1t0YWdzLmxlbmd0aF0gPSB0YWd0ZXh0O1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgdGV4dCA9IHRhZ3Muam9pbignXFxuJyk7XG5cdFx0XHRwYWdlb2JqLnNldFBhZ2VUZXh0KHRleHQpO1xuXHRcdFx0cGFnZW9iai5zZXRFZGl0U3VtbWFyeSh3aW5kb3cud2dVTFMoJ+agh+iusOiiq+awuOS5heWwgeemgeeahOeUqOaIt+mhtScsICfmqJnoqJjooqvmsLjkuYXlsIHpjpbnmoTkvb/nlKjogIXpoIHpnaInKSk7XG5cdFx0XHRwYWdlb2JqLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdHBhZ2VvYmouc2F2ZSgoKSA9PiB7XG5cdFx0XHRcdE1vcmViaXRzLnN0YXR1cy5pbmZvKHdpbmRvdy53Z1VMUygn5qCH6K6w55So5oi36aG1JywgJ+aomeiomOS9v+eUqOiAhemggemdoicpLCAn5a6M5oiQJyk7XG5cdFx0XHRcdHN0YXRlbGVtLnN0YXR1cyh3aW5kb3cud2dVTFMoJ+ato+WcqOS/neaKpOmhtemdoicsICfmraPlnKjkv53orbfpoIHpnaInKSk7XG5cdFx0XHRcdHBhZ2VvYmoubG9hZChUd2lua2xlLmJsb2NrLmNhbGxiYWNrLnByb3RlY3R1c2VycGFnZSk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay5wcm90ZWN0dXNlcnBhZ2UocGFnZW9iaik7XG5cdFx0fVxuXHR9O1xuXHRUd2lua2xlLmJsb2NrLmNhbGxiYWNrLnByb3RlY3R1c2VycGFnZSA9IChwYWdlb2JqKSA9PiB7XG5cdFx0Y29uc3QgcGFyYW1zID0gcGFnZW9iai5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHRjb25zdCBzdGF0ZWxlbSA9IHBhZ2VvYmouZ2V0U3RhdHVzRWxlbWVudCgpO1xuXHRcdGlmIChwYXJhbXMuYWN0aW9udHlwZS5pbmNsdWRlcygncHJvdGVjdCcpKSB7XG5cdFx0XHRpZiAocGFnZW9iai5leGlzdHMoKSkge1xuXHRcdFx0XHRwYWdlb2JqLnNldEVkaXRQcm90ZWN0aW9uKCdzeXNvcCcsICdpbmRlZmluaXRlJyk7XG5cdFx0XHRcdHBhZ2VvYmouc2V0TW92ZVByb3RlY3Rpb24oJ3N5c29wJywgJ2luZGVmaW5pdGUnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHBhZ2VvYmouc2V0Q3JlYXRlUHJvdGVjdGlvbignc3lzb3AnLCAnaW5kZWZpbml0ZScpO1xuXHRcdFx0fVxuXHRcdFx0cGFnZW9iai5zZXRFZGl0U3VtbWFyeSh3aW5kb3cud2dVTFMoJ+iiq+awuOS5heWwgeemgeeahOeUqOaIt+mhtScsICfooqvmsLjkuYXlsIHpjpbnmoTkvb/nlKjogIXpoIHpnaInKSk7XG5cdFx0XHRwYWdlb2JqLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdHBhZ2VvYmoucHJvdGVjdCgoKSA9PiB7XG5cdFx0XHRcdE1vcmViaXRzLnN0YXR1cy5pbmZvKFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5L+d5oqk55So5oi36aG1JywgJ+S/neitt+S9v+eUqOiAhemggemdoicpLFxuXHRcdFx0XHRcdHBhZ2VvYmouZXhpc3RzKCkgPyB3aW5kb3cud2dVTFMoJ+W3suWFqOS/neaKpCcsICflt7Llhajkv53orbcnKSA6IHdpbmRvdy53Z1VMUygn5bey55m957q45L+d5oqkJywgJ+W3sueZvee0meS/neittycpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHN0YXRlbGVtLmluZm8oJ+WFqOmDqOWujOaIkCcpO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0YXRlbGVtLmluZm8oJ+WFqOmDqOWujOaIkCcpO1xuXHRcdH1cblx0fTtcblx0VHdpbmtsZS5ibG9jay5jYWxsYmFjay5pc3N1ZV90ZW1wbGF0ZSA9IChmb3JtRGF0YSkgPT4ge1xuXHRcdC8vIFVzZSB3Z1JlbGV2YW50VXNlck5hbWUgdG8gZW5zdXJlIHRoZSBibG9jayB0ZW1wbGF0ZSBnb2VzIHRvIGEgc2luZ2xlIElQIGFuZCBub3QgdG8gdGhlXG5cdFx0Ly8gXCJ0YWxrIHBhZ2VcIiBvZiBhbiBJUCByYW5nZSAod2hpY2ggZG9lcyBub3QgZXhpc3QpXG5cdFx0Y29uc3QgdXNlclRhbGtQYWdlID0gYFVzZXJfdGFsazoke213LmNvbmZpZy5nZXQoJ3dnUmVsZXZhbnRVc2VyTmFtZScpfWA7XG5cdFx0Y29uc3QgcGFyYW1zID0ge1xuXHRcdFx0Li4uZm9ybURhdGEsXG5cdFx0XHRtZXNzYWdlRGF0YTogVHdpbmtsZS5ibG9jay5ibG9ja1ByZXNldHNJbmZvW2Zvcm1EYXRhLnRlbXBsYXRlXSxcblx0XHRcdHVzZXJ0YWxrX3N1bW1hcnk6IFR3aW5rbGUuYmxvY2suYmxvY2tQcmVzZXRzSW5mb1tmb3JtRGF0YS5wcmVzZXQgfHwgZm9ybURhdGEudGVtcGxhdGVdLnN1bW1hcnksXG5cdFx0XHRyZWFzb246IFR3aW5rbGUuYmxvY2suZmllbGRfdGVtcGxhdGVfb3B0aW9ucy5ibG9ja19yZWFzb24sXG5cdFx0XHRkaXNhYmxldGFsazogVHdpbmtsZS5ibG9jay5maWVsZF90ZW1wbGF0ZV9vcHRpb25zLm5vdGFsayxcblx0XHRcdG5vZW1haWw6IFR3aW5rbGUuYmxvY2suZmllbGRfdGVtcGxhdGVfb3B0aW9ucy5ub2VtYWlsX3RlbXBsYXRlLFxuXHRcdFx0bm9jcmVhdGU6IFR3aW5rbGUuYmxvY2suZmllbGRfdGVtcGxhdGVfb3B0aW9ucy5ub2NyZWF0ZV90ZW1wbGF0ZSxcblx0XHR9O1xuXHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLnJlZGlyZWN0ID0gdXNlclRhbGtQYWdlO1xuXHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLm5vdGljZSA9IHdpbmRvdy53Z1VMUyhcblx0XHRcdCflrozmiJDvvIzlsIblnKjlh6Dnp5LlkI7liqDovb3nlKjmiLforqjorrrpobUnLFxuXHRcdFx0J+WujOaIkO+8jOWwh+WcqOW5vuenkuW+jOi8ieWFpeS9v+eUqOiAheiojuirlumggSdcblx0XHQpO1xuXHRcdGNvbnN0IHlzYXJjaGl2ZXNfcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHR1c2VyVGFsa1BhZ2UsXG5cdFx0XHR3aW5kb3cud2dVTFMoJ+eUqOaIt+iuqOiuuumhteS/ruaUuScsICfkvb/nlKjogIXoqI7oq5bpoIHkv67mlLknKVxuXHRcdCk7XG5cdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYXJhbXMpO1xuXHRcdHlzYXJjaGl2ZXNfcGFnZS5sb2FkKFR3aW5rbGUuYmxvY2suY2FsbGJhY2subWFpbik7XG5cdH07XG5cdFR3aW5rbGUuYmxvY2suY2FsbGJhY2suY2xvc2VSZXF1ZXN0ID0gKHZpcFBhZ2UpID0+IHtcblx0XHRjb25zdCBwYXJhbXMgPSB2aXBQYWdlLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdGxldCB0ZXh0ID0gdmlwUGFnZS5nZXRQYWdlVGV4dCgpO1xuXHRcdGNvbnN0IHN0YXR1c0VsZW1lbnQgPSB2aXBQYWdlLmdldFN0YXR1c0VsZW1lbnQoKTtcblx0XHRjb25zdCB1c2VyTmFtZSA9IG13LmNvbmZpZy5nZXQoJ3dnUmVsZXZhbnRVc2VyTmFtZScpO1xuXHRcdGNvbnN0IGV4cGlyeVRleHQgPSBNb3JlYml0cy5zdHJpbmcuZm9ybWF0VGltZShwYXJhbXMuZXhwaXJ5KTtcblx0XHRjb25zdCBjb21tZW50ID0gYHt7QmxvY2tlZHwke01vcmViaXRzLnN0cmluZy5pc0luZmluaXR5KHBhcmFtcy5leHBpcnkpID8gJ2luZGVmJyA6IGV4cGlyeVRleHR9fX3jgIJgO1xuXHRcdGNvbnN0IHJlcXVlc3RMaXN0ID0gdGV4dC5zcGxpdCgvKD89XFxuPT09Lis9PT1cXHMqXFxuKS8pO1xuXHRcdGxldCBmb3VuZCA9IGZhbHNlO1xuXHRcdGxldCBoaWRlbmFtZSA9IGZhbHNlO1xuXHRcdGNvbnN0IHZpcFJlID0gbmV3IFJlZ0V4cChcblx0XHRcdGB7e1xcXFxzKltWdl1hbmRhbFxcXFxzKlxcXFx8XFxcXHMqKDFcXFxccyo9XFxcXHMqKT8ke01vcmViaXRzLnBhZ2VOYW1lUmVnZXgoXG5cdFx0XHRcdHVzZXJOYW1lXG5cdFx0XHQpfVxcXFxzKihcXFxcfFxcXFxzKmhpZGVuYW1lXFxcXHMqPVtefF0rKT99fWAsXG5cdFx0XHQnbSdcblx0XHQpO1xuXHRcdGZvciAobGV0IHJlcXVlc3Qgb2YgcmVxdWVzdExpc3QpIHtcblx0XHRcdGlmICh2aXBSZS5leGVjKHJlcXVlc3QpKSB7XG5cdFx0XHRcdGhpZGVuYW1lID0gL1xcfFxccypoaWRlbmFtZVxccyo9W158XSsvLnRlc3QocmVxdWVzdCk7XG5cdFx0XHRcdHJlcXVlc3QgPSByZXF1ZXN0LnRyaW1FbmQoKTtcblx0XHRcdFx0bGV0IG5ld1RleHQgPSByZXF1ZXN0LnJlcGxhY2UoXG5cdFx0XHRcdFx0L14oXFwqXFxzKuWkhOeQhu+8milbIFxcdF0qKDwhLS0g6Z2e566h55CG5ZOh5YOF5Y+v5qiZ6KiY5bey5Z+36KGM55qE5bCB56aB77yM6Yed5bCN5o+Q5aCx55qE5oSP6KaL6KuL5pS+5Zyo5LiL5LiA6KGMIC0tPik/WyBcXHRdKiQvbSxcblx0XHRcdFx0XHRgJDEke2NvbW1lbnR9LS1+fmAuY29uY2F0KCd+ficpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGlmIChyZXF1ZXN0ID09PSBuZXdUZXh0KSB7XG5cdFx0XHRcdFx0bmV3VGV4dCA9IGAke3JlcXVlc3R9XFxuKiDlpITnkIbvvJoke2NvbW1lbnR9LS1+fmAuY29uY2F0KCd+ficpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJlcXVlc3QgPSBgJHtuZXdUZXh0fVxcbmA7XG5cdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICghZm91bmQpIHtcblx0XHRcdHN0YXR1c0VsZW1lbnQud2Fybih3aW5kb3cud2dVTFMoJ+ayoeacieaJvuWIsOebuOWFs+eahOivt+axgicsICfmspLmnInmib7liLDnm7jpl5znmoToq4vmsYInKSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRleHQgPSByZXF1ZXN0TGlzdC5qb2luKCcnKTtcblx0XHRsZXQgc3VtbWFyeTtcblx0XHRpZiAoaGlkZW5hbWUpIHtcblx0XHRcdHN1bW1hcnkgPSB3aW5kb3cud2dVTFMoJ+agh+iusOS4uuW3suWkhOeQhicsICfmqJnoqJjngrrlt7LomZXnkIYnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3VtbWFyeSA9IGAvKiAke3VzZXJOYW1lfSAqLyBgO1xuXHRcdFx0aWYgKE1vcmViaXRzLnN0cmluZy5pc0luZmluaXR5KHBhcmFtcy5leHBpcnkpKSB7XG5cdFx0XHRcdHN1bW1hcnkgKz0gd2luZG93LndnVUxTKCfkuI3pmZDmnJ/lsIHnpoEnLCAn5LiN6ZmQ5pyf5bCB6Y6WJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzdW1tYXJ5ICs9IHdpbmRvdy53Z1VMUygn5bCB56aBJywgJ+WwgemOlicpICsgZXhwaXJ5VGV4dDtcblx0XHRcdH1cblx0XHR9XG5cdFx0dmlwUGFnZS5zZXRFZGl0U3VtbWFyeShzdW1tYXJ5KTtcblx0XHR2aXBQYWdlLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHR2aXBQYWdlLnNldFBhZ2VUZXh0KHRleHQpO1xuXHRcdHZpcFBhZ2Uuc2F2ZSgpO1xuXHR9O1xuXHRUd2lua2xlLmJsb2NrLmNhbGxiYWNrLmdldEJsb2NrTm90aWNlV2lraXRleHQgPSAocGFyYW1zKSA9PiB7XG5cdFx0bGV0IHRleHQgPSAne3snO1xuXHRcdGNvbnN0IHNldHRpbmdzID0gVHdpbmtsZS5ibG9jay5ibG9ja1ByZXNldHNJbmZvW3BhcmFtcy50ZW1wbGF0ZV07XG5cdFx0aWYgKHNldHRpbmdzLm5vbnN0YW5kYXJkKSB7XG5cdFx0XHR0ZXh0ICs9IHBhcmFtcy50ZW1wbGF0ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGV4dCArPSAnc3Vic3Q6Jy5jb25jYXQocGFyYW1zLnRlbXBsYXRlKTtcblx0XHRcdGlmIChwYXJhbXMuYXJ0aWNsZSAmJiBzZXR0aW5ncy5wYWdlUGFyYW0pIHtcblx0XHRcdFx0dGV4dCArPSBgfHBhZ2U9JHtwYXJhbXMuYXJ0aWNsZX1gO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCEvdGU/bXB8XlxccyokfG1pbi8uZXhlYyhwYXJhbXMuZXhwaXJ5KSkge1xuXHRcdFx0XHRpZiAocGFyYW1zLmluZGVmaW5pdGUpIHtcblx0XHRcdFx0XHR0ZXh0ICs9ICd8aW5kZWY9eWVzJztcblx0XHRcdFx0fSBlbHNlIGlmICghcGFyYW1zLmJsYW5rX2R1cmF0aW9uKSB7XG5cdFx0XHRcdFx0Ly8gTm8gZXhwaXJ5IGNoZWNrc1xuXHRcdFx0XHRcdC8vIEJsb2NrIHRlbXBsYXRlIHdhbnRzIGEgZHVyYXRpb24sIG5vdCBkYXRlXG5cdFx0XHRcdFx0dGV4dCArPSBgfHRpbWU9JHtNb3JlYml0cy5zdHJpbmcuZm9ybWF0VGltZShwYXJhbXMuZXhwaXJ5KX1gOyAvLyBmb3JtYXRUaW1lXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghVHdpbmtsZS5ibG9jay5pc1JlZ2lzdGVyZWQgJiYgIXBhcmFtcy5oYXJkYmxvY2spIHtcblx0XHRcdFx0dGV4dCArPSAnfGFub249eWVzJztcblx0XHRcdH1cblx0XHRcdGlmIChwYXJhbXMucmVhc29uKSB7XG5cdFx0XHRcdHRleHQgKz0gYHxyZWFzb249JHtwYXJhbXMucmVhc29ufWA7XG5cdFx0XHR9XG5cdFx0XHRpZiAocGFyYW1zLmRpc2FibGV0YWxrKSB7XG5cdFx0XHRcdHRleHQgKz0gJ3xub3RhbGs9eWVzJztcblx0XHRcdH1cblx0XHRcdC8vIEN1cnJlbnRseSwgYWxsIHBhcnRpYWwgYmxvY2sgdGVtcGxhdGVzIGFyZSBcInN0YW5kYXJkXCJcblx0XHRcdC8vIEJ1aWxkaW5nIHRoZSB0ZW1wbGF0ZSwgaG93ZXZlciwgdGFrZXMgYSBmYWlyIGJpdCBvZiBsb2dpY1xuXHRcdFx0aWYgKHBhcmFtcy5wYXJ0aWFsKSB7XG5cdFx0XHRcdGlmIChwYXJhbXMucGFnZXJlc3RyaWN0aW9ucy5sZW5ndGggfHwgcGFyYW1zLm5hbWVzcGFjZXJlc3RyaWN0aW9ucy5sZW5ndGgpIHtcblx0XHRcdFx0XHRjb25zdCBtYWtlU2VudGVuY2UgPSAoYXJyYXkpID0+IHtcblx0XHRcdFx0XHRcdGlmIChhcnJheS5sZW5ndGggPCAzKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBhcnJheS5qb2luKCflkownKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNvbnN0IGxhc3QgPSBhcnJheS5wb3AoKTtcblx0XHRcdFx0XHRcdHJldHVybiBgJHthcnJheS5qb2luKCfjgIEnKX3lkowke2xhc3R9YDtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdHRleHQgKz0gJ3xhcmVhPeafkOS6myc7XG5cdFx0XHRcdFx0aWYgKHBhcmFtcy5wYWdlcmVzdHJpY3Rpb25zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0dGV4dCArPSBg6aCB6Z2i77yIJHttYWtlU2VudGVuY2UoXG5cdFx0XHRcdFx0XHRcdHBhcmFtcy5wYWdlcmVzdHJpY3Rpb25zLm1hcCgocCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBgW1s6JHtwfV1dYDtcblx0XHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdCl9YDtcblx0XHRcdFx0XHRcdHRleHQgKz0gcGFyYW1zLm5hbWVzcGFjZXJlc3RyaWN0aW9ucy5sZW5ndGggPyAn77yJ5ZKM5p+Q5LqbJyA6ICfvvIknO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocGFyYW1zLm5hbWVzcGFjZXJlc3RyaWN0aW9ucy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdC8vIDEgPT4gVGFsaywgMiA9PiBVc2VyLCBldGMuXG5cdFx0XHRcdFx0XHRjb25zdCBuYW1lc3BhY2VOYW1lcyA9IHBhcmFtcy5uYW1lc3BhY2VyZXN0cmljdGlvbnMubWFwKChpZCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gbWVudUZvcm1hdHRlZE5hbWVzcGFjZXNbaWRdO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR0ZXh0ICs9IGAke1xuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ1tbSGVscDrlkb3lkI3nqbrpl7R85ZG95ZCN56m66Ze0XV3vvIgnLCAnW1tIZWxwOuWRveWQjeepuumWk3zlkb3lkI3nqbrplpNdXe+8iCcpICtcblx0XHRcdFx0XHRcdFx0bWFrZVNlbnRlbmNlKG5hbWVzcGFjZU5hbWVzKVxuXHRcdFx0XHRcdFx0fe+8iWA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKHBhcmFtcy5hcmVhKSB7XG5cdFx0XHRcdFx0dGV4dCArPSBgfGFyZWE9JHtwYXJhbXMuYXJlYX1gO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmIChwYXJhbXMubm9lbWFpbCkge1xuXHRcdFx0XHRcdFx0dGV4dCArPSAnfGVtYWlsPXllcyc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwYXJhbXMubm9jcmVhdGUpIHtcblx0XHRcdFx0XHRcdHRleHQgKz0gJ3xhY2NvdW50Y3JlYXRlPXllcyc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChzZXR0aW5ncy5zaWcpIHtcblx0XHRcdHRleHQgKz0gYHxzaWc9JHtzZXR0aW5ncy5zaWd9YDtcblx0XHR9XG5cdFx0cmV0dXJuIGAke3RleHR9fX1gO1xuXHR9O1xuXHRUd2lua2xlLmJsb2NrLmNhbGxiYWNrLm1haW4gPSAocGFnZW9iaikgPT4ge1xuXHRcdGNvbnN0IHBhcmFtcyA9IHBhZ2VvYmouZ2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKCk7XG5cdFx0Y29uc3QgZGF0ZSA9IG5ldyBNb3JlYml0cy5kYXRlKHBhZ2VvYmouZ2V0TG9hZFRpbWUoKSk7XG5cdFx0Y29uc3Qge21lc3NhZ2VEYXRhfSA9IHBhcmFtcztcblx0XHRsZXQgdGV4dDtcblx0XHRwYXJhbXMuaW5kZWZpbml0ZSA9IE1vcmViaXRzLnN0cmluZy5pc0luZmluaXR5KHBhcmFtcy5leHBpcnkpO1xuXHRcdGlmIChUd2lua2xlLmdldFByZWYoJ2JsYW5rVGFsa3BhZ2VPbkluZGVmQmxvY2snKSAmJiBwYXJhbXMudGVtcGxhdGUgIT09ICd1dy1sYmxvY2snICYmIHBhcmFtcy5pbmRlZmluaXRlKSB7XG5cdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5mbyhcblx0XHRcdFx0d2luZG93LndnVUxTKCfkv6Hmga8nLCAn6LOH6KiKJyksXG5cdFx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHQn5qC55o2u5Y+C5pWw6K6+572u5riF56m66K6o6K666aG15bm25Li65pel5pyf5Yib5bu65pawMue6p+agh+mimCcsXG5cdFx0XHRcdFx0J+agueaTmuWBj+WlveioreWumua4heepuuiojuirlumggeS4pueCuuaXpeacn+W7uueri+aWsDLntJrmqJnpoYwnXG5cdFx0XHRcdClcblx0XHRcdCk7XG5cdFx0XHR0ZXh0ID0gYCR7ZGF0ZS5tb250aEhlYWRlcigpfVxcbmA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRleHQgPSBwYWdlb2JqLmdldFBhZ2VUZXh0KCk7XG5cdFx0XHRjb25zdCBkYXRlSGVhZGVyUmVnZXggPSBkYXRlLm1vbnRoSGVhZGVyUmVnZXgoKTtcblx0XHRcdGxldCBkYXRlSGVhZGVyUmVnZXhMYXN0O1xuXHRcdFx0bGV0IGRhdGVIZWFkZXJSZWdleFJlc3VsdDtcblx0XHRcdHdoaWxlICgoZGF0ZUhlYWRlclJlZ2V4TGFzdCA9IGRhdGVIZWFkZXJSZWdleC5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuXHRcdFx0XHRkYXRlSGVhZGVyUmVnZXhSZXN1bHQgPSBkYXRlSGVhZGVyUmVnZXhMYXN0O1xuXHRcdFx0fVxuXHRcdFx0Ly8gSWYgZGF0ZUhlYWRlclJlZ2V4UmVzdWx0IGlzIG51bGwgdGhlbiBsYXN0SGVhZGVySW5kZXggaXMgbmV2ZXIgY2hlY2tlZC4gSWYgaXQgaXMgbm90IG51bGwgYnV0XG5cdFx0XHQvLyBcXG49PSBpcyBub3QgZm91bmQsIHRoZW4gdGhlIGRhdGUgaGVhZGVyIG11c3QgYmUgYXQgdGhlIHZlcnkgc3RhcnQgb2YgdGhlIHBhZ2UuIGxhc3RJbmRleE9mXG5cdFx0XHQvLyByZXR1cm5zIC0xIGluIHRoaXMgY2FzZSwgc28gbGFzdEhlYWRlckluZGV4IGdldHMgc2V0IHRvIDAgYXMgZGVzaXJlZC5cblx0XHRcdGNvbnN0IGxhc3RIZWFkZXJJbmRleCA9IHRleHQubGFzdEluZGV4T2YoJ1xcbj09JykgKyAxO1xuXHRcdFx0aWYgKHRleHQubGVuZ3RoID4gMCkge1xuXHRcdFx0XHR0ZXh0ICs9ICdcXG5cXG4nO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCFkYXRlSGVhZGVyUmVnZXhSZXN1bHQgfHwgZGF0ZUhlYWRlclJlZ2V4UmVzdWx0LmluZGV4ICE9PSBsYXN0SGVhZGVySW5kZXgpIHtcblx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluZm8oXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfkv6Hmga8nLCAn6LOH6KiKJyksXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfmnKrmib7liLDlvZPmnIjnmoTkuoznuqfmoIfpopjvvIzlsIbliJvlu7rmlrDnmoQnLCAn5pyq5om+5Yiw55W25pyI55qE5LqM57Sa5qiZ6aGM77yM5bCH5bu656uL5paw55qEJylcblx0XHRcdFx0KTtcblx0XHRcdFx0dGV4dCArPSBgJHtkYXRlLm1vbnRoSGVhZGVyKCl9XFxuYDtcblx0XHRcdH1cblx0XHR9XG5cdFx0cGFyYW1zLmV4cGlyeSA9IHBhcmFtcy50ZW1wbGF0ZV9leHBpcnkgPT09IHVuZGVmaW5lZCA/IHBhcmFtcy5leHBpcnkgOiBwYXJhbXMudGVtcGxhdGVfZXhwaXJ5O1xuXHRcdHRleHQgKz0gVHdpbmtsZS5ibG9jay5jYWxsYmFjay5nZXRCbG9ja05vdGljZVdpa2l0ZXh0KHBhcmFtcyk7XG5cdFx0Ly8gYnVpbGQgdGhlIGVkaXQgc3VtbWFyeVxuXHRcdGxldCBzdW1tYXJ5ID0gcGFyYW1zLnVzZXJ0YWxrX3N1bW1hcnk7XG5cdFx0aWYgKG1lc3NhZ2VEYXRhLnN1cHByZXNzQXJ0aWNsZUluU3VtbWFyeSAhPT0gdHJ1ZSAmJiBwYXJhbXMuYXJ0aWNsZSkge1xuXHRcdFx0c3VtbWFyeSArPSBgJHt3aW5kb3cud2dVTFMoJ++8jOS6jicsICfvvIzmlrwnKX1bWzoke3BhcmFtcy5hcnRpY2xlfV1dYDtcblx0XHR9XG5cdFx0cGFnZW9iai5zZXRQYWdlVGV4dCh0ZXh0KTtcblx0XHRwYWdlb2JqLnNldEVkaXRTdW1tYXJ5KHN1bW1hcnkpO1xuXHRcdHBhZ2VvYmouc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdHBhZ2VvYmouc2V0V2F0Y2hsaXN0KFR3aW5rbGUuZ2V0UHJlZignd2F0Y2hCbG9ja05vdGljZXMnKSk7XG5cdFx0cGFnZW9iai5zYXZlKCk7XG5cdH07XG5cdFR3aW5rbGUuYWRkSW5pdENhbGxiYWNrKFR3aW5rbGUuYmxvY2ssICdibG9jaycpO1xufSkoalF1ZXJ5KTtcblxuZXhwb3J0IHt9O1xuIiwgIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1ub2NoZWNrXG5cbi8qISBUd2lua2xlLmpzIC0gZnJpZW5kbHl0YWxrYmFjay5qcyAqL1xuKGZ1bmN0aW9uIGZyaWVuZGx5dGFsa2JhY2soJCkge1xuXHRjb25zdCAkYm9keSA9ICQoJ2JvZHknKTtcblx0LyoqXG5cdCAqIGZyaWVuZGx5dGFsa2JhY2suanM6IFRhbGtiYWNrIG1vZHVsZVxuXHQgKiBNb2RlIG9mIGludm9jYXRpb246IFRhYiAoXCJUQlwiKVxuXHQgKiBBY3RpdmUgb246IEFueSBwYWdlIHdpdGggcmVsZXZhbnQgdXNlciBuYW1lICh1c2Vyc3BhY2UsIGNvbnRyaWJzLCBldGMuKSBleGNlcHQgSVAgcmFuZ2VzXG5cdCAqIENvbmZpZyBkaXJlY3RpdmVzIGluOiBGcmllbmRseUNvbmZpZ1xuXHQgKi9cblx0VHdpbmtsZS50YWxrYmFjayA9ICgpID0+IHtcblx0XHRpZiAoIW13LmNvbmZpZy5nZXQoJ3dnUmVsZXZhbnRVc2VyTmFtZScpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFR3aW5rbGUuYWRkUG9ydGxldExpbmsoXG5cdFx0XHRUd2lua2xlLnRhbGtiYWNrLmNhbGxiYWNrLFxuXHRcdFx0J+mAmuWRiicsXG5cdFx0XHQnZnJpZW5kbHktdGFsa2JhY2snLFxuXHRcdFx0d2luZG93LndnVUxTKCflm57lpI3pgJrlkYonLCAn5Zue6KaG6YCa5ZGKJylcblx0XHQpO1xuXHR9O1xuXHRUd2lua2xlLnRhbGtiYWNrLmNhbGxiYWNrID0gKCkgPT4ge1xuXHRcdGlmIChcblx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnUmVsZXZhbnRVc2VyTmFtZScpID09PSBtdy5jb25maWcuZ2V0KCd3Z1VzZXJOYW1lJykgJiZcblx0XHRcdCFjb25maXJtKHdpbmRvdy53Z1VMUygn5oKo5a+C5a+e5Yiw5LqG6KaB6Ieq5bex5Zue5aSN6Ieq5bex55qE56iL5bqm5LmI77yfJywgJ+aCqOWvguWvnuWIsOS6huimgeiHquW3seWbnuimhuiHquW3seeahOeoi+W6pum6vO+8nycpKVxuXHRcdCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBXaW5kb3cgPSBuZXcgTW9yZWJpdHMuc2ltcGxlV2luZG93KDYwMCwgMzUwKTtcblx0XHRXaW5kb3cuc2V0VGl0bGUod2luZG93LndnVUxTKCflm57lpI3pgJrlkYonLCAn5Zue6KaG6YCa5ZGKJykpO1xuXHRcdFdpbmRvdy5zZXRTY3JpcHROYW1lKCdUd2lua2xlJyk7XG5cdFx0V2luZG93LmFkZEZvb3Rlckxpbmsod2luZG93LndnVUxTKCflhbPkuo57e3RhbGtiYWNrfX0nLCAn6Zec5pa8e3t0YWxrYmFja319JyksICdUZW1wbGF0ZTpUYWxrYmFjaycpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygn6YCa5ZGK6K6+572uJywgJ+mAmuWRiuioreWumicpLCAnSDpUVy9QUkVGI3RhbGtiYWNrJyk7XG5cdFx0V2luZG93LmFkZEZvb3Rlckxpbmsod2luZG93LndnVUxTKCdUd2lua2xl5biu5YqpJywgJ1R3aW5rbGXoqqrmmI4nKSwgJ0g6VFcvRE9DI3RhbGtiYWNrJyk7XG5cdFx0Y29uc3QgZm9ybSA9IG5ldyBNb3JlYml0cy5xdWlja0Zvcm0oVHdpbmtsZS50YWxrYmFjay5ldmFsdWF0ZSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ3JhZGlvJyxcblx0XHRcdG5hbWU6ICd0YnRhcmdldCcsXG5cdFx0XHRsaXN0OiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflm57lpI3vvJrmiJHnmoTorqjorrrpobUnLCAn5Zue6KaG77ya5oiR55qE6KiO6KuW6aCBJyksXG5cdFx0XHRcdFx0dmFsdWU6ICdteXRhbGsnLFxuXHRcdFx0XHRcdGNoZWNrZWQ6ICd0cnVlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WbnuWkje+8muWFtuS7lueUqOaIt+eahOiuqOiuuumhtScsICflm57opobvvJrlhbbku5bkvb/nlKjogIXnmoToqI7oq5bpoIEnKSxcblx0XHRcdFx0XHR2YWx1ZTogJ3VzZXJ0YWxrJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WbnuWkje+8muWFtuWug+mhtemdoicsICflm57opobvvJrlhbblroPpoIHpnaInKSxcblx0XHRcdFx0XHR2YWx1ZTogJ290aGVyJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+mCgOivt+iuqOiuuicsICfpgoDoq4voqI7oq5YnKSxcblx0XHRcdFx0XHR2YWx1ZTogJ3NlZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogJ+mAmuWRiuadv+mAmuefpScsXG5cdFx0XHRcdFx0dmFsdWU6ICdub3RpY2UnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn4oCc5pyJ5paw6YKu5Lu24oCdJywgJ+OAjOacieaWsOmDteS7tuOAjScpLFxuXHRcdFx0XHRcdHZhbHVlOiAnbWFpbCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdFx0ZXZlbnQ6IFR3aW5rbGUudGFsa2JhY2suY2hhbmdlVGFyZ2V0LFxuXHRcdH0pO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRsYWJlbDogJ+W3peS9nOWMuicsXG5cdFx0XHRuYW1lOiAnd29ya19hcmVhJyxcblx0XHR9KTtcblx0XHRjb25zdCBwcmV2aWV3bGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblx0XHQkKHByZXZpZXdsaW5rKS5vbignY2xpY2snLCAoKSA9PiB7XG5cdFx0XHRUd2lua2xlLnRhbGtiYWNrLnByZXZpZXcocmVzdWx0KTsgLy8gfHJlc3VsdHwgaXMgZGVmaW5lZCBiZWxvd1xuXHRcdH0pO1xuXG5cdFx0cHJldmlld2xpbmsuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuXHRcdHByZXZpZXdsaW5rLnRleHRDb250ZW50ID0gd2luZG93LndnVUxTKCfpooTop4gnLCAn6aCQ6Ka9Jyk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRpZDogJ3RhbGtiYWNrcHJldmlldycsXG5cdFx0XHRsYWJlbDogW3ByZXZpZXdsaW5rXSxcblx0XHR9KTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdGlkOiAnZnJpZW5kbHl0YWxrYmFjay1wcmV2aWV3Ym94Jyxcblx0XHRcdHN0eWxlOiAnZGlzcGxheTogbm9uZScsXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ3N1Ym1pdCcsXG5cdFx0fSk7XG5cdFx0Y29uc3QgcmVzdWx0ID0gZm9ybS5yZW5kZXIoKTtcblx0XHRXaW5kb3cuc2V0Q29udGVudChyZXN1bHQpO1xuXHRcdFdpbmRvdy5kaXNwbGF5KCk7XG5cdFx0cmVzdWx0LnByZXZpZXdlciA9IG5ldyBNb3JlYml0cy53aWtpLnByZXZpZXcoJChyZXN1bHQpLmZpbmQoJ2RpdiNmcmllbmRseXRhbGtiYWNrLXByZXZpZXdib3gnKS5sYXN0KClbMF0pO1xuXHRcdC8vIFdlIG11c3QgaW5pdCB0aGVcblx0XHRjb25zdCBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcblx0XHRldnQuaW5pdEV2ZW50KCdjaGFuZ2UnLCB0cnVlLCB0cnVlKTtcblx0XHRyZXN1bHQudGJ0YXJnZXRbMF0uZGlzcGF0Y2hFdmVudChldnQpO1xuXHRcdC8vIENoZWNrIHdoZXRoZXIgdGhlIHVzZXIgaGFzIG9wdGVkIG91dCBmcm9tIHRhbGtiYWNrXG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRhY3Rpb246ICdxdWVyeScsXG5cdFx0XHRwcm9wOiAnZXh0bGlua3MnLFxuXHRcdFx0dGl0bGVzOiBgVXNlciB0YWxrOiR7bXcuY29uZmlnLmdldCgnd2dSZWxldmFudFVzZXJOYW1lJyl9YCxcblx0XHRcdGVscXVlcnk6ICd1c2VyanMuaW52YWxpZC9ub1RhbGtiYWNrJyxcblx0XHRcdGVsbGltaXQ6ICcxJyxcblx0XHR9O1xuXHRcdGNvbnN0IHlzYXJjaGl2ZXNfYXBpID0gbmV3IE1vcmViaXRzLndpa2kuYXBpKFxuXHRcdFx0d2luZG93LndnVUxTKCfmipPlj5bpgIDlh7rpgJrlkYrkv6Hmga8nLCAn5oqT5Y+W6YCA5Ye66YCa5ZGK6LOH6KiKJyksXG5cdFx0XHRxdWVyeSxcblx0XHRcdFR3aW5rbGUudGFsa2JhY2suY2FsbGJhY2sub3B0b3V0U3RhdHVzXG5cdFx0KTtcblx0XHR5c2FyY2hpdmVzX2FwaS5wb3N0KCk7XG5cdH07XG5cdFR3aW5rbGUudGFsa2JhY2sub3B0b3V0ID0gJyc7XG5cdFR3aW5rbGUudGFsa2JhY2suY2FsbGJhY2sub3B0b3V0U3RhdHVzID0gKGFwaW9iaikgPT4ge1xuXHRcdGNvbnN0ICRlbCA9ICQoYXBpb2JqLmdldFhNTCgpKS5maW5kKCdlbCcpO1xuXHRcdGlmICgkZWwubGVuZ3RoKSB7XG5cdFx0XHRUd2lua2xlLnRhbGtiYWNrLm9wdG91dCA9XG5cdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnUmVsZXZhbnRVc2VyTmFtZScpICsgd2luZG93LndnVUxTKCfkuI3luIzmnJvmlLbliLDlm57lpI3pgJrlkYonLCAn5LiN5biM5pyb5pS25Yiw5Zue6KaG6YCa5ZGKJyk7XG5cdFx0XHRjb25zdCB1cmwgPSAkZWwudGV4dCgpO1xuXHRcdFx0Y29uc3QgcmVhc29uID0gbXcudXRpbC5nZXRQYXJhbVZhbHVlKCdyZWFzb24nLCB1cmwpO1xuXHRcdFx0VHdpbmtsZS50YWxrYmFjay5vcHRvdXQgKz0gcmVhc29uID8gYO+8miR7TW9yZWJpdHMuc3RyaW5nLmFwcGVuZFB1bmN0dWF0aW9uKHJlYXNvbil9YCA6ICfjgIInO1xuXHRcdH1cblx0XHQkYm9keS5maW5kKCcjdHdpbmtsZS10YWxrYmFjay1vcHRvdXQtbWVzc2FnZScpLnRleHQoVHdpbmtsZS50YWxrYmFjay5vcHRvdXQpO1xuXHR9O1xuXHRsZXQgcHJldl9wYWdlID0gJyc7XG5cdGxldCBwcmV2X3NlY3Rpb24gPSAnJztcblx0bGV0IHByZXZfbWVzc2FnZSA9ICcnO1xuXHRUd2lua2xlLnRhbGtiYWNrLmNoYW5nZVRhcmdldCA9IChlKSA9PiB7XG5cdFx0Y29uc3QgdmFsdWUgPSBlLnRhcmdldC52YWx1ZXM7XG5cdFx0Y29uc3Qgcm9vdCA9IGUudGFyZ2V0LmZvcm07XG5cdFx0Y29uc3QgW29sZF9hcmVhXSA9IE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhyb290LCAnd29ya19hcmVhJyk7XG5cdFx0aWYgKHJvb3Quc2VjdGlvbikge1xuXHRcdFx0cHJldl9zZWN0aW9uID0gcm9vdC5zZWN0aW9uLnZhbHVlO1xuXHRcdH1cblx0XHRpZiAocm9vdC5tZXNzYWdlKSB7XG5cdFx0XHRwcmV2X21lc3NhZ2UgPSByb290Lm1lc3NhZ2UudmFsdWU7XG5cdFx0fVxuXHRcdGlmIChyb290LnBhZ2UpIHtcblx0XHRcdHByZXZfcGFnZSA9IHJvb3QucGFnZS52YWx1ZTtcblx0XHR9XG5cdFx0bGV0IHdvcmtfYXJlYSA9IG5ldyBNb3JlYml0cy5xdWlja0Zvcm0uZWxlbWVudCh7XG5cdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zue5aSN6YCa5ZGK5L+h5oGvJywgJ+WbnuimhumAmuWRiuizh+ioiicpLFxuXHRcdFx0bmFtZTogJ3dvcmtfYXJlYScsXG5cdFx0fSk7XG5cdFx0cm9vdC5wcmV2aWV3ZXIuY2xvc2VQcmV2aWV3KCk7XG5cdFx0c3dpdGNoICh2YWx1ZSkge1xuXHRcdFx0Y2FzZSAndXNlcnRhbGsnOlxuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdFx0XHRsYWJlbDogJycsXG5cdFx0XHRcdFx0c3R5bGU6ICdjb2xvcjogI2YwMCcsXG5cdFx0XHRcdFx0aWQ6ICd0d2lua2xlLXRhbGtiYWNrLW9wdG91dC1tZXNzYWdlJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0bmFtZTogJ3BhZ2UnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+eUqOaIt++8iOW/heWhq++8iScsICfkvb/nlKjogIXvvIjlv4XloavvvIknKSxcblx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoJ+aCqOeVmeiogOmhtemdoueahOeUqOaIt+WQje+8jOW/heWhq+OAgicsICfmgqjnlZnoqIDpoIHpnaLnmoTkvb/nlKjogIXlkI3nqLHvvIzlv4XloavjgIInKSxcblx0XHRcdFx0XHR2YWx1ZTogcHJldl9wYWdlLFxuXHRcdFx0XHRcdHJlcXVpcmVkOiB0cnVlLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0XHRuYW1lOiAnc2VjdGlvbicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn56ug6IqC77yI5Y+v6YCJ77yJJywgJ+eroOevgO+8iOWPr+mBuO+8iScpLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfmgqjnlZnoqIDnmoTnq6DoioLmoIfpopjvvIznlZnnqbrliJnkuI3kvJrkuqfnlJ/nq6DoioLpk77mjqXjgIInLFxuXHRcdFx0XHRcdFx0J+aCqOeVmeiogOeahOeroOevgOaomemhjO+8jOeVmeepuuWJh+S4jeacg+eUoueUn+eroOevgOmAo+e1kOOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHZhbHVlOiBwcmV2X3NlY3Rpb24sXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ25vdGljZSc6IHtcblx0XHRcdFx0Y29uc3Qgbm90aWNlYm9hcmQgPSB3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdFx0XHRuYW1lOiAnbm90aWNlYm9hcmQnLFxuXHRcdFx0XHRcdGxhYmVsOiAn6YCa5ZGK5p2/77yaJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZvciAoY29uc3QgW25ibmFtZSwgZGF0YV0gb2YgT2JqZWN0LmVudHJpZXMoVHdpbmtsZS50YWxrYmFjay5ub3RpY2Vib2FyZHMpKSB7XG5cdFx0XHRcdFx0bm90aWNlYm9hcmQuYXBwZW5kKHtcblx0XHRcdFx0XHRcdHR5cGU6ICdvcHRpb24nLFxuXHRcdFx0XHRcdFx0bGFiZWw6IGRhdGEubGFiZWwsXG5cdFx0XHRcdFx0XHR2YWx1ZTogbmJuYW1lLFxuXHRcdFx0XHRcdFx0c2VsZWN0ZWQ6ICEhZGF0YS5kZWZhdWx0U2VsZWN0ZWQsXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0XHRuYW1lOiAnc2VjdGlvbicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn56ug6IqC77yI5Y+v6YCJ77yJJywgJ+eroOevgO+8iOWPr+mBuO+8iScpLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn56ug6IqC5qCH6aKY77yM55WZ56m65YiZ5LiN5Lya5Lqn55Sf56ug6IqC6ZO+5o6l44CCJywgJ+eroOevgOaomemhjO+8jOeVmeepuuWJh+S4jeacg+eUoueUn+eroOevgOmAo+e1kOOAgicpLFxuXHRcdFx0XHRcdHZhbHVlOiBwcmV2X3NlY3Rpb24sXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGNhc2UgJ290aGVyJzpcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdFx0bGFiZWw6ICcnLFxuXHRcdFx0XHRcdHN0eWxlOiAnY29sb3I6ICNmMDAnLFxuXHRcdFx0XHRcdGlkOiAndHdpbmtsZS10YWxrYmFjay1vcHRvdXQtbWVzc2FnZScsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRcdG5hbWU6ICdwYWdlJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflrozmlbTpobXpnaLlkI0nLCAn5a6M5pW06aCB6Z2i5ZCNJyksXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+aCqOeVmeS4i+a2iOaBr+eahOWujOaVtOmhtemdouWQje+8jOS+i+WmguKAnExJQl90YWxrOummlumhteKAneOAgicsXG5cdFx0XHRcdFx0XHQn5oKo55WZ5LiL6KiK5oGv55qE5a6M5pW06aCB6Z2i5ZCN77yM5L6L5aaC44CMTElCX3RhbGs66aaW6aCB44CN44CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0dmFsdWU6IHByZXZfcGFnZSxcblx0XHRcdFx0XHRyZXF1aXJlZDogdHJ1ZSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0bmFtZTogJ3NlY3Rpb24nLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+eroOiKgu+8iOWPr+mAie+8iScsICfnq6Dnr4DvvIjlj6/pgbjvvIknKSxcblx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5oKo55WZ6KiA55qE56ug6IqC5qCH6aKY77yM55WZ56m65YiZ5LiN5Lya5Lqn55Sf56ug6IqC6ZO+5o6l44CCJyxcblx0XHRcdFx0XHRcdCfmgqjnlZnoqIDnmoTnq6Dnr4DmqJnpoYzvvIznlZnnqbrliYfkuI3mnIPnlKLnlJ/nq6Dnr4DpgKPntZDjgIInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR2YWx1ZTogcHJldl9zZWN0aW9uLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdtYWlsJzpcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0XHRuYW1lOiAnc2VjdGlvbicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn55S15a2Q6YKu5Lu25Li76aKY77yI5Y+v6YCJ77yJJywgJ+mbu+WtkOmDteS7tuS4u+mhjO+8iOWPr+mBuO+8iScpLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn5oKo5Y+R5Ye655qE55S15a2Q6YKu5Lu255qE5Li76aKY44CCJywgJ+aCqOeZvOWHuueahOmbu+WtkOmDteS7tueahOS4u+mhjOOAgicpLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdzZWUnOlxuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRcdG5hbWU6ICdwYWdlJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflrozmlbTpobXpnaLlkI0nLCAn5a6M5pW06aCB6Z2i5ZCNJyksXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+aCqOeVmeS4i+a2iOaBr+eahOWujOaVtOmhtemdouWQje+8jOS+i+WmguKAnExJQl90YWxrOummlumhteKAneOAgicsXG5cdFx0XHRcdFx0XHQn5oKo55WZ5LiL6KiK5oGv55qE5a6M5pW06aCB6Z2i5ZCN77yM5L6L5aaC44CMTElCX3RhbGs66aaW6aCB44CN44CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0dmFsdWU6IHByZXZfcGFnZSxcblx0XHRcdFx0XHRyZXF1aXJlZDogdHJ1ZSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0bmFtZTogJ3NlY3Rpb24nLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+eroOiKgu+8iOWPr+mAie+8iScsICfnq6Dnr4DvvIjlj6/pgbjvvIknKSxcblx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5oKo55WZ6KiA55qE56ug6IqC5qCH6aKY77yM55WZ56m65YiZ5LiN5Lya5Lqn55Sf56ug6IqC6ZO+5o6l44CCJyxcblx0XHRcdFx0XHRcdCfmgqjnlZnoqIDnmoTnq6Dnr4DmqJnpoYzvvIznlZnnqbrliYfkuI3mnIPnlKLnlJ/nq6Dnr4DpgKPntZDjgIInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR2YWx1ZTogcHJldl9zZWN0aW9uLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHQvKiBjYXNlICdteXRhbGsnOiAqL1xuXHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdFx0bGFiZWw6ICcnLFxuXHRcdFx0XHRcdHN0eWxlOiAnY29sb3I6ICNmMDAnLFxuXHRcdFx0XHRcdGlkOiAndHdpbmtsZS10YWxrYmFjay1vcHRvdXQtbWVzc2FnZScsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRcdG5hbWU6ICdzZWN0aW9uJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnq6DoioLvvIjlj6/pgInvvIknLCAn56ug56+A77yI5Y+v6YG477yJJyksXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+aCqOeVmeiogOeahOeroOiKguagh+mimO+8jOeVmeepuuWImeS4jeS8muS6p+eUn+eroOiKgumTvuaOpeOAgicsXG5cdFx0XHRcdFx0XHQn5oKo55WZ6KiA55qE56ug56+A5qiZ6aGM77yM55WZ56m65YmH5LiN5pyD55Si55Sf56ug56+A6YCj57WQ44CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0dmFsdWU6IHByZXZfc2VjdGlvbixcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRpZiAodmFsdWUgIT09ICdub3RpY2UnKSB7XG5cdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ3RleHRhcmVhJyxcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6ZmE5Yqg5L+h5oGv77yI5Y+v6YCJ77yJ77yaJywgJ+mZhOWKoOizh+ioiu+8iOWPr+mBuO+8ie+8micpLFxuXHRcdFx0XHRuYW1lOiAnbWVzc2FnZScsXG5cdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHQn5Lya5Zyo5Zue5aSN6YCa5ZGK5qih5p2/5LiL5Ye6546w55qE5raI5oGv77yM5oKo55qE562+5ZCN5Lya6KKr5Yqg5Zyo5pyA5ZCO44CCJyxcblx0XHRcdFx0XHQn5pyD5Zyo5Zue6KaG6YCa5ZGK5qih5p2/5LiL5Ye654++55qE6KiK5oGv77yM5oKo55qE57C95ZCN5pyD6KKr5Yqg5Zyo5pyA5b6M44CCJ1xuXHRcdFx0XHQpLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHdvcmtfYXJlYSA9IHdvcmtfYXJlYS5yZW5kZXIoKTtcblx0XHRyb290LnJlcGxhY2VDaGlsZCh3b3JrX2FyZWEsIG9sZF9hcmVhKTtcblx0XHRpZiAocm9vdC5tZXNzYWdlKSB7XG5cdFx0XHRyb290Lm1lc3NhZ2UudmFsdWUgPSBwcmV2X21lc3NhZ2U7XG5cdFx0fVxuXHRcdCRib2R5LmZpbmQoJyN0d2lua2xlLXRhbGtiYWNrLW9wdG91dC1tZXNzYWdlJykudGV4dChUd2lua2xlLnRhbGtiYWNrLm9wdG91dCk7XG5cdH07XG5cdFR3aW5rbGUudGFsa2JhY2subm90aWNlYm9hcmRzID0ge1xuXHRcdGFmZnA6IHtcblx0XHRcdGxhYmVsOiBgTElCOkFGL0ZQ77yIJHt3aW5kb3cud2dVTFMoJ+i/h+a7pOWZqOWkhOeQhi/miqXlkYonLCAn6YGO5r++5Zmo6JmV55CGL+WgseWRiicpfe+8iWAsXG5cdFx0XHR0aXRsZTogd2luZG93LndnVUxTKCfov4fmu6TlmajplJnor6/miqXlkYrmnInmlrDlm57lupQnLCAn6YGO5r++5Zmo6Yyv6Kqk5aCx5ZGK5pyJ5paw5Zue5oeJJyksXG5cdFx0XHRjb250ZW50OiBgJHt3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCfmgqjnmoRbW0xJQl90YWxrOui/h+a7pOWZqOWkhOeQhi/miqXlkYp86L+H5ruk5Zmo6ZSZ6K+v5oql5ZGKXV3lt7LmnInlm57lupTvvIzor7fliY3lvoDmn6XnnIvjgIInLFxuXHRcdFx0XHQn5oKo55qEW1tMSUJfdGFsazrov4fmu6TlmajlpITnkIYv5oql5ZGKfOmBjua/vuWZqOmMr+iqpOWgseWRil1d5bey5pyJ5Zue5oeJ77yM6KuL5YmN5b6A5p+l55yL44CCJ1xuXHRcdFx0KX0tLX5+YC5jb25jYXQoJ35+JyksXG5cdFx0XHRlZGl0U3VtbWFyeTogd2luZG93LndnVUxTKFxuXHRcdFx0XHQn5pyJ5YWzW1tMSUJfdGFsazrov4fmu6TlmajlpITnkIYv5oql5ZGKfOi/h+a7pOWZqOmUmeivr+aKpeWRil1d55qE6YCa55+lJyxcblx0XHRcdFx0J+aciemXnFtbTElCX3RhbGs66L+H5ruk5Zmo5aSE55CGL+aKpeWRinzpgY7mv77lmajpjK/oqqTloLHlkYpdXeeahOmAmuefpSdcblx0XHRcdCksXG5cdFx0XHRkZWZhdWx0U2VsZWN0ZWQ6IHRydWUsXG5cdFx0fSxcblx0XHRzYmw6IHtcblx0XHRcdGxhYmVsOiAnU3BhbS1ibGFja2xpc3QnLFxuXHRcdFx0dGl0bGU6IHdpbmRvdy53Z1VMUygn5Z6D5Zy+6ZO+5o6l6buR5ZCN5Y2V6K+35rGC5pyJ5paw5Zue5bqUJywgJ+Weg+WcvumAo+e1kOm7keWQjeWWruiri+axguacieaWsOWbnuaHiScpLFxuXHRcdFx0Y29udGVudDogYCR7d2luZG93LndnVUxTKFxuXHRcdFx0XHQn5oKo55qEW1tMSUJfdGFsazrnrqHnkIblkZjlkYrnpLrmnb985Z6D5Zy+6ZO+5o6l6buR5ZCN5Y2V6K+35rGCXV3lt7LmnInlm57lupTvvIzor7fliY3lvoDmn6XnnIvjgIInLFxuXHRcdFx0XHQn5oKo55qEW1tMSUJfdGFsazrnrqHnkIblkZjlkYrnpLrmnb985Z6D5Zy+6YCj57WQ6buR5ZCN5Zau6KuL5rGCXV3lt7LmnInlm57mh4nvvIzoq4vliY3lvoDmn6XnnIvjgIInXG5cdFx0XHQpfS0tfn5gLmNvbmNhdCgnfn4nKSxcblx0XHRcdGVkaXRTdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCfmnInlhbNbW0xJQl90YWxrOueuoeeQhuWRmOWRiuekuuadv3zlnoPlnL7pk77mjqXpu5HlkI3ljZXor7fmsYJdXeeahOmAmuefpScsXG5cdFx0XHRcdCfmnInpl5xbW0xJQl90YWxrOueuoeeQhuWRmOWRiuekuuadv3zlnoPlnL7pgKPntZDpu5HlkI3llq7oq4vmsYJdXeeahOmAmuefpSdcblx0XHRcdCksXG5cdFx0fSxcblx0XHRzaGw6IHtcblx0XHRcdGxhYmVsOiAnU3BhbS13aGl0ZWxpc3QnLFxuXHRcdFx0dGl0bGU6IHdpbmRvdy53Z1VMUygn5Z6D5Zy+6ZO+5o6l55m95ZCN5Y2V6K+35rGC5pyJ5paw5Zue5bqUJywgJ+Weg+WcvumAo+e1kOeZveWQjeWWruiri+axguacieaWsOWbnuaHiScpLFxuXHRcdFx0Y29udGVudDogYCR7d2luZG93LndnVUxTKFxuXHRcdFx0XHQn5oKo55qEW1tMSUJfdGFsazrnrqHnkIblkZjlkYrnpLrmnb985Z6D5Zy+6ZO+5o6l55m95ZCN5Y2V6K+35rGCXV3lt7LmnInlm57lupTvvIzor7fliY3lvoDmn6XnnIvjgIInLFxuXHRcdFx0XHQn5oKo55qEW1tMSUJfdGFsazrnrqHnkIblkZjlkYrnpLrmnb985Z6D5Zy+6YCj57WQ55m95ZCN5Zau6KuL5rGCXV3lt7LmnInlm57mh4nvvIzoq4vliY3lvoDmn6XnnIvjgIInXG5cdFx0XHQpfS0tfn5gLmNvbmNhdCgnfn4nKSxcblx0XHRcdGVkaXRTdW1tYXJ5OiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCfmnInlhbNbW0xJQl90YWxrOueuoeeQhuWRmOWRiuekuuadv3zlnoPlnL7pk77mjqXnmb3lkI3ljZXor7fmsYJdXeeahOmAmuefpScsXG5cdFx0XHRcdCfmnInpl5xbW0xJQl90YWxrOueuoeeQhuWRmOWRiuekuuadv3zlnoPlnL7pgKPntZDnmb3lkI3llq7oq4vmsYJdXeeahOmAmuefpSdcblx0XHRcdCksXG5cdFx0fSxcblx0fTtcblx0VHdpbmtsZS50YWxrYmFjay5ldmFsdWF0ZSA9IChlKSA9PiB7XG5cdFx0Y29uc3QgZm9ybSA9IGUudGFyZ2V0O1xuXHRcdGNvbnN0IFt0YnRhcmdldF0gPSBmb3JtLmdldENoZWNrZWQoJ3RidGFyZ2V0Jyk7XG5cdFx0bGV0IHBhZ2U7XG5cdFx0bGV0IG1lc3NhZ2U7XG5cdFx0Y29uc3Qgc2VjdGlvbiA9IGZvcm0uc2VjdGlvbi52YWx1ZTtcblx0XHRsZXQgZWRpdFN1bW1hcnk7XG5cdFx0aWYgKHRidGFyZ2V0ID09PSAnbm90aWNlJykge1xuXHRcdFx0cGFnZSA9IGZvcm0ubm90aWNlYm9hcmQudmFsdWU7XG5cdFx0XHQoe2VkaXRTdW1tYXJ5fSA9IFR3aW5rbGUudGFsa2JhY2subm90aWNlYm9hcmRzW3BhZ2VdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gdXNlcnRhbGssIG90aGVyLCBzZWVcblx0XHRcdHBhZ2UgPSBmb3JtLnBhZ2UgPyBmb3JtLnBhZ2UudmFsdWUgOiBtdy5jb25maWcuZ2V0KCd3Z1VzZXJOYW1lJyk7XG5cdFx0XHRpZiAoZm9ybS5tZXNzYWdlKSB7XG5cdFx0XHRcdG1lc3NhZ2UgPSBmb3JtLm1lc3NhZ2UudmFsdWUudHJpbSgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRidGFyZ2V0ID09PSAnbWFpbCcpIHtcblx0XHRcdFx0ZWRpdFN1bW1hcnkgPSB3aW5kb3cud2dVTFMoJ+mAmuefpe+8muacieaWsOmCruS7ticsICfpgJrnn6XvvJrmnInmlrDpg7Xku7YnKTtcblx0XHRcdH0gZWxzZSBpZiAodGJ0YXJnZXQgPT09ICdzZWUnKSB7XG5cdFx0XHRcdGVkaXRTdW1tYXJ5ID0gYCR7d2luZG93LndnVUxTKCfor7fnnIvnnIsnLCAn6KuL55yL55yLJyl9W1s6JHtwYWdlfSR7c2VjdGlvbiA/IGAjJHtzZWN0aW9ufWAgOiAnJ31dXSR7d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdCfkuIrnmoTorqjorronLFxuXHRcdFx0XHRcdCfkuIrnmoToqI7oq5YnXG5cdFx0XHRcdCl9YDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIHRidGFyZ2V0IG9uZSBvZiBteXRhbGssIHVzZXJ0YWxrLCBvdGhlclxuXHRcdFx0XHRlZGl0U3VtbWFyeSA9IGAke3dpbmRvdy53Z1VMUygn5Zue5aSN6YCa5ZGKJywgJ+WbnuimhumAmuWRiicpfe+8iFtbOmA7XG5cdFx0XHRcdGlmICh0YnRhcmdldCAhPT0gJ290aGVyJyAmJiAhbmV3IFJlZ0V4cChgXlxcXFxzKiR7TW9yZWJpdHMubmFtZXNwYWNlUmVnZXgoMyl9OmAsICdpJykudGVzdChwYWdlKSkge1xuXHRcdFx0XHRcdGVkaXRTdW1tYXJ5ICs9ICdVc2VyIHRhbGs6Jztcblx0XHRcdFx0fVxuXHRcdFx0XHRlZGl0U3VtbWFyeSArPSBgJHtwYWdlICsgKHNlY3Rpb24gPyBgIyR7c2VjdGlvbn1gIDogJycpfV1dKWA7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdE1vcmViaXRzLnNpbXBsZVdpbmRvdy5zZXRCdXR0b25zRW5hYmxlZChmYWxzZSk7XG5cdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoZm9ybSk7XG5cdFx0Y29uc3QgZnVsbFVzZXJUYWxrUGFnZU5hbWUgPSBgJHtcblx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnRm9ybWF0dGVkTmFtZXNwYWNlcycpW213LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlSWRzJykudXNlcl90YWxrXVxuXHRcdH06JHttdy5jb25maWcuZ2V0KCd3Z1JlbGV2YW50VXNlck5hbWUnKX1gO1xuXHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLnJlZGlyZWN0ID0gZnVsbFVzZXJUYWxrUGFnZU5hbWU7XG5cdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQubm90aWNlID0gd2luZG93LndnVUxTKFxuXHRcdFx0J+WbnuWkjemAmuWRiuWujOaIkO+8jOWwhuWcqOWHoOenkuWGheWIt+aWsOmhtemdoicsXG5cdFx0XHQn5Zue6KaG6YCa5ZGK5a6M5oiQ77yM5bCH5Zyo5bm+56eS5YWn6YeN5paw5pW055CG6aCB6Z2iJ1xuXHRcdCk7XG5cdFx0Y29uc3QgdGV4dCA9IGBcXG5cXG4ke1R3aW5rbGUudGFsa2JhY2suZ2V0Tm90aWNlV2lraXRleHQodGJ0YXJnZXQsIHBhZ2UsIHNlY3Rpb24sIG1lc3NhZ2UpWzBdfWA7XG5cdFx0Y29uc3QgdGFsa3BhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKGZ1bGxVc2VyVGFsa1BhZ2VOYW1lLCB3aW5kb3cud2dVTFMoJ+WKoOWFpeWbnuWkjemAmuWRiicsICfliqDlhaXlm57opobpgJrlkYonKSk7XG5cdFx0dGFsa3BhZ2Uuc2V0RWRpdFN1bW1hcnkoZWRpdFN1bW1hcnkpO1xuXHRcdHRhbGtwYWdlLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHR0YWxrcGFnZS5zZXRBcHBlbmRUZXh0KHRleHQpO1xuXHRcdHRhbGtwYWdlLnNldENyZWF0ZU9wdGlvbigncmVjcmVhdGUnKTtcblx0XHR0YWxrcGFnZS5zZXRNaW5vckVkaXQoVHdpbmtsZS5nZXRQcmVmKCdtYXJrVGFsa2JhY2tBc01pbm9yJykpO1xuXHRcdHRhbGtwYWdlLnNldEZvbGxvd1JlZGlyZWN0KHRydWUpO1xuXHRcdHRhbGtwYWdlLmFwcGVuZCgpO1xuXHR9O1xuXHRUd2lua2xlLnRhbGtiYWNrLnByZXZpZXcgPSAoZm9ybSkgPT4ge1xuXHRcdGNvbnN0IFt0YnRhcmdldF0gPSBmb3JtLmdldENoZWNrZWQoJ3RidGFyZ2V0Jyk7XG5cdFx0Y29uc3Qgc2VjdGlvbiA9IGZvcm0uc2VjdGlvbi52YWx1ZTtcblx0XHRsZXQgcGFnZTtcblx0XHRsZXQgbWVzc2FnZTtcblx0XHRpZiAodGJ0YXJnZXQgPT09ICdub3RpY2UnKSB7XG5cdFx0XHRwYWdlID0gZm9ybS5ub3RpY2Vib2FyZC52YWx1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gdXNlcnRhbGssIG90aGVyLCBzZWVcblx0XHRcdHBhZ2UgPSBmb3JtLnBhZ2UgPyBmb3JtLnBhZ2UudmFsdWUgOiBtdy5jb25maWcuZ2V0KCd3Z1VzZXJOYW1lJyk7XG5cdFx0XHRpZiAoZm9ybS5tZXNzYWdlKSB7XG5cdFx0XHRcdG1lc3NhZ2UgPSBmb3JtLm1lc3NhZ2UudmFsdWUudHJpbSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjb25zdCBbbm90aWNldGV4dF0gPSBUd2lua2xlLnRhbGtiYWNrLmdldE5vdGljZVdpa2l0ZXh0KHRidGFyZ2V0LCBwYWdlLCBzZWN0aW9uLCBtZXNzYWdlKTtcblx0XHRmb3JtLnByZXZpZXdlci5iZWdpblJlbmRlcihub3RpY2V0ZXh0LCBgVXNlcl90YWxrOiR7bXcuY29uZmlnLmdldCgnd2dSZWxldmFudFVzZXJOYW1lJyl9YCk7IC8vIEZvcmNlIHdpa2l0ZXh0L2NvcnJlY3QgdXNlcm5hbWVcblx0fTtcblxuXHRUd2lua2xlLnRhbGtiYWNrLmdldE5vdGljZVdpa2l0ZXh0ID0gKHRidGFyZ2V0LCBwYWdlLCBzZWN0aW9uLCBtZXNzYWdlKSA9PiB7XG5cdFx0bGV0IHRleHQ7XG5cdFx0bGV0IHRpdGxlO1xuXHRcdGxldCBjb250ZW50O1xuXHRcdGlmICh0YnRhcmdldCA9PT0gJ25vdGljZScpIHtcblx0XHRcdCh7dGl0bGV9ID0gVHdpbmtsZS50YWxrYmFjay5ub3RpY2Vib2FyZHNbcGFnZV0pO1xuXHRcdFx0Y29udGVudCA9IE1vcmViaXRzLnN0cmluZy5zYWZlUmVwbGFjZShUd2lua2xlLnRhbGtiYWNrLm5vdGljZWJvYXJkc1twYWdlXS5jb250ZW50LCAnJFNFQ1RJT04nLCBzZWN0aW9uKTtcblx0XHRcdHRleHQgPSBgPT0gJHt0aXRsZX0gPT1cXG4ke2NvbnRlbnR9YDtcblx0XHR9IGVsc2UgaWYgKHRidGFyZ2V0ID09PSAnc2VlJykge1xuXHRcdFx0dGl0bGUgPSBwYWdlICsgd2luZG93LndnVUxTKCfnmoTnm7jlhbPorqjorronLCAn55qE55u46Zec6KiO6KuWJyk7XG5cdFx0XHRjb250ZW50ID0gJ3t7Jy5jb25jYXQoXG5cdFx0XHRcdCdzdWJzdDonLFxuXHRcdFx0XHRgUGxlYXNlIHNlZXxsb2NhdGlvbj0ke3BhZ2V9JHtzZWN0aW9uID8gYCMke3NlY3Rpb259YCA6ICcnfXxtb3JlPSR7bWVzc2FnZS50cmltKCl9fX1gXG5cdFx0XHQpO1xuXHRcdFx0dGV4dCA9ICd7eycuY29uY2F0KFxuXHRcdFx0XHQnc3Vic3Q6Jyxcblx0XHRcdFx0YFBsZWFzZSBzZWV8bG9jYXRpb249JHtwYWdlfSR7c2VjdGlvbiA/IGAjJHtzZWN0aW9ufWAgOiAnJ318bW9yZT0ke21lc3NhZ2UudHJpbSgpfX19YFxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGV4dCA9ICc9PSc7XG5cdFx0XHRpZiAodGJ0YXJnZXQgPT09ICdtYWlsJykge1xuXHRcdFx0XHR0aXRsZSA9IFR3aW5rbGUuZ2V0UHJlZignbWFpbEhlYWRpbmcnKTtcblx0XHRcdFx0Y29udGVudCA9IGB7e1lvdSd2ZSBnb3QgbWFpbHxzdWJqZWN0PSR7c2VjdGlvbn18dHM9fn5gLmNvbmNhdCgnficsICd+fn19Jyk7XG5cdFx0XHRcdHRleHQgKz0gYCR7VHdpbmtsZS5nZXRQcmVmKCdtYWlsSGVhZGluZycpfT09XFxue3tZb3UndmUgZ290IG1haWx8c3ViamVjdD0ke3NlY3Rpb259YDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIHRidGFyZ2V0IG9uZSBvZiBteXRhbGssIHVzZXJ0YWxrLCBvdGhlclxuXHRcdFx0XHQvLyBjbGVhbiB0YWxrYmFjayBoZWFkaW5nOiBzdHJpcCBzZWN0aW9uIGhlYWRlciBtYXJrZXJzIHRoYXQgd2VyZSBlcnJvbmVvdXNseSBzdWdnZXN0ZWQgaW4gdGhlIGRvY3VtZW50YXRpb25cblx0XHRcdFx0dGl0bGUgPSBUd2lua2xlLmdldFByZWYoJ3RhbGtiYWNrSGVhZGluZycpLnJlcGxhY2UoL15cXHMqPStcXHMqKC4qPylcXHMqPSskXFxzKi8sICckMScpO1xuXHRcdFx0XHRjb250ZW50ID0gYHt7dGFsa2JhY2t8JHtwYWdlfSR7c2VjdGlvbiA/IGB8JHtzZWN0aW9ufWAgOiAnJ31gO1xuXHRcdFx0XHR0ZXh0ICs9IGAke1R3aW5rbGUuZ2V0UHJlZigndGFsa2JhY2tIZWFkaW5nJykucmVwbGFjZShcblx0XHRcdFx0XHQvXlxccyo9K1xccyooLio/KVxccyo9KyRcXHMqLyxcblx0XHRcdFx0XHQnJDEnXG5cdFx0XHRcdCl9PT1cXG57e3RhbGtiYWNrfCR7cGFnZX0ke3NlY3Rpb24gPyBgfCR7c2VjdGlvbn1gIDogJyd9YDtcblx0XHRcdH1cblx0XHRcdGNvbnRlbnQgKz0gJ3x0cz1+ficuY29uY2F0KCd+JywgJ35+fX0nKTtcblx0XHRcdHRleHQgKz0gJ3x0cz1+ficuY29uY2F0KCd+JywgJ35+fX0nKTtcblx0XHRcdGlmIChtZXNzYWdlKSB7XG5cdFx0XHRcdGNvbnRlbnQgKz0gYFxcbiR7bWVzc2FnZX1gO1xuXHRcdFx0XHR0ZXh0ICs9IGBcXG4ke21lc3NhZ2V9ICB+fmAuY29uY2F0KCd+ficpO1xuXHRcdFx0fSBlbHNlIGlmIChUd2lua2xlLmdldFByZWYoJ2luc2VydFRhbGtiYWNrU2lnbmF0dXJlJykpIHtcblx0XHRcdFx0dGV4dCArPSAnXFxufn4nLmNvbmNhdCgnfn4nKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIFt0ZXh0LCB0aXRsZSwgY29udGVudF07XG5cdH07XG5cdFR3aW5rbGUuYWRkSW5pdENhbGxiYWNrKFR3aW5rbGUudGFsa2JhY2ssICd0YWxrYmFjaycpO1xufSkoalF1ZXJ5KTtcblxuZXhwb3J0IHt9O1xuIiwgIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQge2dlbmVyYXRlQXJyYXl9IGZyb20gJ2V4dC5nYWRnZXQuVXRpbCc7XG5cbi8qISBUd2lua2xlLmpzIC0gdHdpbmtsZXNwZWVkeS5qcyAqL1xuKGZ1bmN0aW9uIHR3aW5rbGVzcGVlZHkoJCkge1xuXHRjb25zdCAkYm9keSA9ICQoJ2JvZHknKTtcblx0LyoqXG5cdCAqIHR3aW5rbGVzcGVlZHkuanM6IENTRCBtb2R1bGVcblx0ICogTW9kZSBvZiBpbnZvY2F0aW9uOiBUYWIgKFwiQ1NEXCIpXG5cdCAqIEFjdGl2ZSBvbjogTm9uLXNwZWNpYWwsIGV4aXN0aW5nIHBhZ2VzXG5cdCAqXG5cdCAqIE5PVEUgRk9SIERFVkVMT1BFUlM6XG5cdCAqICBJZiBhZGRpbmcgYSBuZXcgY3JpdGVyaW9uLCBhZGQgaXQgdG8gdGhlIGFwcHJvcHJpYXRlIHBsYWNlcyBhdCB0aGUgdG9wIG9mXG5cdCAqICB0d2lua2xlY29uZmlnLmpzLlxuXHQgKiAgQWxzbywgY2hlY2sgb3V0IHRoZSBkZWZhdWx0IHZhbHVlcyBvZiB0aGUgQ1NEIHByZWZlcmVuY2VzIGluIHR3aW5rbGUuanMsXG5cdCAqICBhbmQgYWRkIHlvdXIgbmV3IGNyaXRlcmlvbiB0byB0aG9zZSBpZiB5b3UgdGhpbmsgaXQgd291bGQgYmUgZ29vZC5cblx0ICovXG5cdFR3aW5rbGUuc3BlZWR5ID0gKCkgPT4ge1xuXHRcdC8vIERpc2FibGUgb246XG5cdFx0Ly8gKiBzcGVjaWFsIHBhZ2VzXG5cdFx0Ly8gKiBub24tZXhpc3RlbnQgcGFnZXNcblx0XHRpZiAobXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSA8IDAgfHwgIW13LmNvbmZpZy5nZXQoJ3dnQXJ0aWNsZUlkJykpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0VHdpbmtsZS5hZGRQb3J0bGV0TGluayhcblx0XHRcdFR3aW5rbGUuc3BlZWR5LmNhbGxiYWNrLFxuXHRcdFx0d2luZG93LndnVUxTKCfpgJ/liKAnLCAn6YCf5YiqJyksXG5cdFx0XHQndHctY3NkJyxcblx0XHRcdE1vcmViaXRzLnVzZXJJc1N5c29wID8gd2luZG93LndnVUxTKCflv6vpgJ/liKDpmaQnLCAn5b+r6YCf5Yiq6ZmkJykgOiB3aW5kb3cud2dVTFMoJ+ivt+axguW/q+mAn+WIoOmZpCcsICfoq4vmsYLlv6vpgJ/liKrpmaQnKVxuXHRcdCk7XG5cdH07XG5cdC8vIFRoaXMgZnVuY3Rpb24gaXMgcnVuIHdoZW4gdGhlIENTRCB0YWIvaGVhZGVyIGxpbmsgaXMgY2xpY2tlZFxuXHRUd2lua2xlLnNwZWVkeS5jYWxsYmFjayA9ICgpID0+IHtcblx0XHRUd2lua2xlLnNwZWVkeS5pbml0RGlhbG9nKFxuXHRcdFx0TW9yZWJpdHMudXNlcklzU3lzb3AgPyBUd2lua2xlLnNwZWVkeS5jYWxsYmFjay5ldmFsdWF0ZVN5c29wIDogVHdpbmtsZS5zcGVlZHkuY2FsbGJhY2suZXZhbHVhdGVVc2VyLFxuXHRcdFx0dHJ1ZVxuXHRcdCk7XG5cdH07XG5cdC8vIFVzZWQgYnkgdW5saW5rIGZlYXR1cmVcblx0VHdpbmtsZS5zcGVlZHkuZGlhbG9nID0gbnVsbDtcblx0Ly8gVXNlZCB0aHJvdWdob3V0XG5cdFR3aW5rbGUuc3BlZWR5Lmhhc0NTRCA9ICEhZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2RlbGV0ZS1yZWFzb24nKTtcblx0Ly8gVGhlIHNwZWVkeSBjcml0ZXJpYSBsaXN0IGNhbiBiZSBpbiBvbmUgb2Ygc2V2ZXJhbCBtb2Rlc1xuXHRUd2lua2xlLnNwZWVkeS5tb2RlID0ge1xuXHRcdHN5c29wU2luZ2xlU3VibWl0OiAxLFxuXHRcdC8vIHJhZGlvIGJ1dHRvbnMsIG5vIHN1Ymdyb3Vwcywgc3VibWl0IHdoZW4gXCJTdWJtaXRcIiBidXR0b24gaXMgY2xpY2tlZFxuXHRcdHN5c29wUmFkaW9DbGljazogMixcblx0XHQvLyByYWRpbyBidXR0b25zLCBubyBzdWJncm91cHMsIHN1Ym1pdCB3aGVuIGEgcmFkaW8gYnV0dG9uIGlzIGNsaWNrZWRcblx0XHRzeXNvcE11bHRpcGxlU3VibWl0OiAzLFxuXHRcdC8vIGNoZWNrIGJveGVzLCBzdWJncm91cHMsIFwiU3VibWl0XCIgYnV0dG9uIGFscmVhZHkgcHJlc2VudFxuXHRcdHN5c29wTXVsdGlwbGVSYWRpb0NsaWNrOiA0LFxuXHRcdC8vIGNoZWNrIGJveGVzLCBzdWJncm91cHMsIG5lZWQgdG8gYWRkIGEgXCJTdWJtaXRcIiBidXR0b25cblx0XHR1c2VyTXVsdGlwbGVTdWJtaXQ6IDUsXG5cdFx0Ly8gY2hlY2sgYm94ZXMsIHN1Ymdyb3VwcywgXCJTdWJtaXRcIiBidXR0b24gYWxyZWFkeSBwcmVzc2VudFxuXHRcdHVzZXJNdWx0aXBsZVJhZGlvQ2xpY2s6IDYsXG5cdFx0Ly8gY2hlY2sgYm94ZXMsIHN1Ymdyb3VwcywgbmVlZCB0byBhZGQgYSBcIlN1Ym1pdFwiIGJ1dHRvblxuXHRcdHVzZXJTaW5nbGVTdWJtaXQ6IDcsXG5cdFx0Ly8gcmFkaW8gYnV0dG9ucywgc3ViZ3JvdXBzLCBzdWJtaXQgd2hlbiBcIlN1Ym1pdFwiIGJ1dHRvbiBpcyBjbGlja2VkXG5cdFx0dXNlclNpbmdsZVJhZGlvQ2xpY2s6IDgsXG5cdFx0Ly8gcmFkaW8gYnV0dG9ucywgc3ViZ3JvdXBzLCBzdWJtaXQgd2hlbiBhIHJhZGlvIGJ1dHRvbiBpcyBjbGlja2VkXG5cdFx0Ly8gYXJlIHdlIGluIFwiZGVsZXRlIHBhZ2VcIiBtb2RlP1xuXHRcdC8vIChzeXNvcHMgY2FuIGFjY2VzcyBib3RoIFwiZGVsZXRlIHBhZ2VcIiBbc3lzb3BdIGFuZCBcInRhZyBwYWdlIG9ubHlcIiBbdXNlcl0gbW9kZXMpXG5cdFx0aXNTeXNvcDogKG1vZGUpID0+IHtcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdG1vZGUgPT09IFR3aW5rbGUuc3BlZWR5Lm1vZGUuc3lzb3BTaW5nbGVTdWJtaXQgfHxcblx0XHRcdFx0bW9kZSA9PT0gVHdpbmtsZS5zcGVlZHkubW9kZS5zeXNvcE11bHRpcGxlU3VibWl0IHx8XG5cdFx0XHRcdG1vZGUgPT09IFR3aW5rbGUuc3BlZWR5Lm1vZGUuc3lzb3BSYWRpb0NsaWNrIHx8XG5cdFx0XHRcdG1vZGUgPT09IFR3aW5rbGUuc3BlZWR5Lm1vZGUuc3lzb3BNdWx0aXBsZVJhZGlvQ2xpY2tcblx0XHRcdCk7XG5cdFx0fSxcblx0XHQvLyBkbyB3ZSBoYXZlIGEgXCJTdWJtaXRcIiBidXR0b24gb25jZSB0aGUgZm9ybSBpcyBjcmVhdGVkP1xuXHRcdGhhc1N1Ym1pdEJ1dHRvbjogKG1vZGUpID0+IHtcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdG1vZGUgPT09IFR3aW5rbGUuc3BlZWR5Lm1vZGUuc3lzb3BTaW5nbGVTdWJtaXQgfHxcblx0XHRcdFx0bW9kZSA9PT0gVHdpbmtsZS5zcGVlZHkubW9kZS5zeXNvcE11bHRpcGxlU3VibWl0IHx8XG5cdFx0XHRcdG1vZGUgPT09IFR3aW5rbGUuc3BlZWR5Lm1vZGUuc3lzb3BNdWx0aXBsZVJhZGlvQ2xpY2sgfHxcblx0XHRcdFx0bW9kZSA9PT0gVHdpbmtsZS5zcGVlZHkubW9kZS51c2VyTXVsdGlwbGVTdWJtaXQgfHxcblx0XHRcdFx0bW9kZSA9PT0gVHdpbmtsZS5zcGVlZHkubW9kZS51c2VyTXVsdGlwbGVSYWRpb0NsaWNrIHx8XG5cdFx0XHRcdG1vZGUgPT09IFR3aW5rbGUuc3BlZWR5Lm1vZGUudXNlclNpbmdsZVN1Ym1pdFxuXHRcdFx0KTtcblx0XHR9LFxuXHRcdC8vIGlzIGRiLW11bHRpcGxlIHRoZSBvdXRjb21lIGhlcmU/XG5cdFx0aXNNdWx0aXBsZTogKG1vZGUpID0+IHtcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdG1vZGUgPT09IFR3aW5rbGUuc3BlZWR5Lm1vZGUudXNlck11bHRpcGxlU3VibWl0IHx8XG5cdFx0XHRcdG1vZGUgPT09IFR3aW5rbGUuc3BlZWR5Lm1vZGUuc3lzb3BNdWx0aXBsZVN1Ym1pdCB8fFxuXHRcdFx0XHRtb2RlID09PSBUd2lua2xlLnNwZWVkeS5tb2RlLnVzZXJNdWx0aXBsZVJhZGlvQ2xpY2sgfHxcblx0XHRcdFx0bW9kZSA9PT0gVHdpbmtsZS5zcGVlZHkubW9kZS5zeXNvcE11bHRpcGxlUmFkaW9DbGlja1xuXHRcdFx0KTtcblx0XHR9LFxuXHR9O1xuXHQvLyBQcmVwYXJlcyB0aGUgc3BlZWR5IGRlbGV0aW9uIGRpYWxvZyBhbmQgZGlzcGxheXMgaXRcblx0VHdpbmtsZS5zcGVlZHkuaW5pdERpYWxvZyA9IChjYWxsYmFja2Z1bmMpID0+IHtcblx0XHRUd2lua2xlLnNwZWVkeS5kaWFsb2cgPSBuZXcgTW9yZWJpdHMuc2ltcGxlV2luZG93KFxuXHRcdFx0VHdpbmtsZS5nZXRQcmVmKCdzcGVlZHlXaW5kb3dXaWR0aCcpLFxuXHRcdFx0VHdpbmtsZS5nZXRQcmVmKCdzcGVlZHlXaW5kb3dIZWlnaHQnKVxuXHRcdCk7XG5cdFx0Y29uc3Qge2RpYWxvZ30gPSBUd2lua2xlLnNwZWVkeTtcblx0XHRkaWFsb2cuc2V0VGl0bGUod2luZG93LndnVUxTKCfpgInmi6nlv6vpgJ/liKDpmaTnkIbnlLEnLCAn6YG45pOH5b+r6YCf5Yiq6Zmk55CG55SxJykpO1xuXHRcdGRpYWxvZy5zZXRTY3JpcHROYW1lKCdUd2lua2xlJyk7XG5cdFx0ZGlhbG9nLmFkZEZvb3Rlckxpbmsod2luZG93LndnVUxTKCflv6vpgJ/liKDpmaTmnaHkvosnLCAn5b+r6YCf5Yiq6Zmk5qKd5L6LJyksICdMSUI6Q1NEJyk7XG5cdFx0ZGlhbG9nLmFkZEZvb3Rlckxpbmsod2luZG93LndnVUxTKCfpgJ/liKDorr7nva4nLCAn6YCf5Yiq6Kit5a6aJyksICdIOlRXL1BSRUYjc3BlZWR5Jyk7XG5cdFx0ZGlhbG9nLmFkZEZvb3Rlckxpbmsod2luZG93LndnVUxTKCdUd2lua2xl5biu5YqpJywgJ1R3aW5rbGXoqqrmmI4nKSwgJ0g6VFcvRE9DI3NwZWVkeScpO1xuXHRcdGNvbnN0IGZvcm0gPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtKFxuXHRcdFx0Y2FsbGJhY2tmdW5jLFxuXHRcdFx0VHdpbmtsZS5nZXRQcmVmKCdzcGVlZHlTZWxlY3Rpb25TdHlsZScpID09PSAncmFkaW9DbGljaycgPyAnY2hhbmdlJyA6IG51bGxcblx0XHQpO1xuXHRcdGlmIChNb3JlYml0cy51c2VySXNTeXNvcCkge1xuXHRcdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Y+q5qCH6K6w77yM5LiN5Yig6ZmkJywgJ+WPquaomeiomO+8jOS4jeWIqumZpCcpLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICd0YWdfb25seScsXG5cdFx0XHRcdFx0XHRuYW1lOiAndGFnX29ubHknLFxuXHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKCfoi6Xmgqjlj6rmg7PmoIforrDmraTpobXpnaLogIzkuI3mmK/lsIblhbbliKDpmaQnLCAn6Iul5oKo5Y+q5oOz5qiZ6KiY5q2k6aCB6Z2i6ICM5LiN5piv5bCH5YW25Yiq6ZmkJyksXG5cdFx0XHRcdFx0XHRjaGVja2VkOiAhKFR3aW5rbGUuc3BlZWR5Lmhhc0NTRCB8fCBUd2lua2xlLmdldFByZWYoJ2RlbGV0ZVN5c29wRGVmYXVsdFRvRGVsZXRlJykpLFxuXHRcdFx0XHRcdFx0ZXZlbnQ6IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRjb25zdCBjRm9ybSA9IGV2ZW50LnRhcmdldC5mb3JtO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBjQ2hlY2tlZCA9IGV2ZW50LnRhcmdldC5jaGVja2VkO1xuXHRcdFx0XHRcdFx0XHQvLyBlbmFibGUvZGlzYWJsZSB0YWxrIHBhZ2UgY2hlY2tib3hcblx0XHRcdFx0XHRcdFx0aWYgKGNGb3JtLnRhbGtwYWdlKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y0Zvcm0udGFsa3BhZ2UuZGlzYWJsZWQgPSBjQ2hlY2tlZDtcblx0XHRcdFx0XHRcdFx0XHRjRm9ybS50YWxrcGFnZS5jaGVja2VkID0gIWNDaGVja2VkICYmIFR3aW5rbGUuZ2V0UHJlZignZGVsZXRlVGFsa1BhZ2VPbkRlbGV0ZScpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdC8vIGVuYWJsZS9kaXNhYmxlIHJlZGlyZWN0cyBjaGVja2JveFxuXHRcdFx0XHRcdFx0XHRjRm9ybS5yZWRpcmVjdHMuZGlzYWJsZWQgPSBjQ2hlY2tlZDtcblx0XHRcdFx0XHRcdFx0Y0Zvcm0ucmVkaXJlY3RzLmNoZWNrZWQgPSAhY0NoZWNrZWQ7XG5cdFx0XHRcdFx0XHRcdC8vIGVuYWJsZS9kaXNhYmxlIGRlbGV0ZSBtdWx0aXBsZVxuXHRcdFx0XHRcdFx0XHRjRm9ybS5kZWxtdWx0aXBsZS5kaXNhYmxlZCA9IGNDaGVja2VkO1xuXHRcdFx0XHRcdFx0XHRjRm9ybS5kZWxtdWx0aXBsZS5jaGVja2VkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdC8vIGVuYWJsZS9kaXNhYmxlIG9wZW4gdGFsayBwYWdlIGNoZWNrYm94XG5cdFx0XHRcdFx0XHRcdGNGb3JtLm9wZW51c2VydGFsay5kaXNhYmxlZCA9IGNDaGVja2VkO1xuXHRcdFx0XHRcdFx0XHRjRm9ybS5vcGVudXNlcnRhbGsuY2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHQvLyBlbmFibGUvZGlzYWJsZSBub3RpZnkgY2hlY2tib3hcblx0XHRcdFx0XHRcdFx0Y0Zvcm0ubm90aWZ5LmRpc2FibGVkID0gIWNDaGVja2VkO1xuXHRcdFx0XHRcdFx0XHRjRm9ybS5ub3RpZnkuY2hlY2tlZCA9IGNDaGVja2VkO1xuXHRcdFx0XHRcdFx0XHQvLyBlbmFibGUvZGlzYWJsZSBtdWx0aXBsZVxuXHRcdFx0XHRcdFx0XHRjRm9ybS5tdWx0aXBsZS5kaXNhYmxlZCA9ICFjQ2hlY2tlZDtcblx0XHRcdFx0XHRcdFx0Y0Zvcm0ubXVsdGlwbGUuY2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHQvLyBlbmFibGUgcmVxdWVzdGluZyBjcmVhdGlvbiBwcm90ZWN0aW9uXG5cdFx0XHRcdFx0XHRcdGNGb3JtLnNhbHRpbmcuY2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRUd2lua2xlLnNwZWVkeS5jYWxsYmFjay5tb2RlQ2hhbmdlZChjRm9ybSk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdLFxuXHRcdFx0fSk7XG5cdFx0XHRjb25zdCBkZWxldGVPcHRpb25zID0gZm9ybS5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdFx0bmFtZTogJ2RlbGV0ZV9vcHRpb25zJyxcblx0XHRcdH0pO1xuXHRcdFx0ZGVsZXRlT3B0aW9ucy5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnaGVhZGVyJyxcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Yig6Zmk55u45YWz6YCJ6aG5JywgJ+WIqumZpOebuOmXnOmBuOmghScpLFxuXHRcdFx0fSk7XG5cdFx0XHRpZiAobXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSAlIDIgPT09IDAgJiYgbXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSAhPT0gMikge1xuXHRcdFx0XHQvLyBoaWRlIG9wdGlvbiBmb3IgdXNlciBwYWdlcywgdG8gYXZvaWQgYWNjaWRlbnRhbGx5IGRlbGV0aW5nIHVzZXIgdGFsayBwYWdlXG5cdFx0XHRcdGRlbGV0ZU9wdGlvbnMuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Yig6Zmk6K6o6K666aG1JywgJ+WIqumZpOiojuirlumggScpLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogJ3RhbGtwYWdlJyxcblx0XHRcdFx0XHRcdFx0bmFtZTogJ3RhbGtwYWdlJyxcblx0XHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKCfliKDpmaTml7bpmYTluKbliKDpmaTmraTpobXpnaLnmoTorqjorrrpobXjgIInLCAn5Yiq6Zmk5pmC6ZmE5bi25Yiq6Zmk5q2k6aCB6Z2i55qE6KiO6KuW6aCB44CCJyksXG5cdFx0XHRcdFx0XHRcdGNoZWNrZWQ6IFR3aW5rbGUuZ2V0UHJlZignZGVsZXRlVGFsa1BhZ2VPbkRlbGV0ZScpLFxuXHRcdFx0XHRcdFx0XHRldmVudDogKGV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdF0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0ZGVsZXRlT3B0aW9ucy5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Yig6Zmk6YeN5a6a5ZCRJywgJ+WIqumZpOmHjeaWsOWwjuWQkScpLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICdyZWRpcmVjdHMnLFxuXHRcdFx0XHRcdFx0bmFtZTogJ3JlZGlyZWN0cycsXG5cdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoJ+WIoOmZpOWIsOatpOmhteeahOmHjeWumuWQkeOAgicsICfliKrpmaTliLDmraTpoIHnmoTph43mlrDlsI7lkJHjgIInKSxcblx0XHRcdFx0XHRcdGNoZWNrZWQ6IFR3aW5rbGUuZ2V0UHJlZignZGVsZXRlUmVkaXJlY3RzT25EZWxldGUnKSxcblx0XHRcdFx0XHRcdGV2ZW50OiAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdF0sXG5cdFx0XHR9KTtcblx0XHRcdGRlbGV0ZU9wdGlvbnMuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0bGlzdDogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+W6lOeUqOWkmuS4queQhueUseWIoOmZpCcsICfmh4nnlKjlpJrlgIvnkIbnlLHliKrpmaQnKSxcblx0XHRcdFx0XHRcdHZhbHVlOiAnZGVsbXVsdGlwbGUnLFxuXHRcdFx0XHRcdFx0bmFtZTogJ2RlbG11bHRpcGxlJyxcblx0XHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn5oKo5Y+v6YCJ5oup5bqU55So5LqO6K+l6aG155qE5aSa5Liq55CG55Sx44CCJywgJ+aCqOWPr+mBuOaTh+aHieeUqOaWvOipsumggeeahOWkmuWAi+eQhueUseOAgicpLFxuXHRcdFx0XHRcdFx0ZXZlbnQ6IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRUd2lua2xlLnNwZWVkeS5jYWxsYmFjay5tb2RlQ2hhbmdlZChldmVudC50YXJnZXQuZm9ybSk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdLFxuXHRcdFx0fSk7XG5cdFx0XHRkZWxldGVPcHRpb25zLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflvIDlkK/nlKjmiLforqjorrrpobUnLCAn6ZaL5ZWf5L2/55So6ICF6KiO6KuW6aCBJyksXG5cdFx0XHRcdFx0XHR2YWx1ZTogJ29wZW51c2VydGFsaycsXG5cdFx0XHRcdFx0XHRuYW1lOiAnb3BlbnVzZXJ0YWxrJyxcblx0XHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0J+atpOmhueeahOm7mOiupOWAvOS4uuaCqOeahOW8gOWQr+iuqOiuuumhteiuvue9ruOAguWcqOaCqOmAieaLqeW6lOeUqOWkmuadoeeQhueUseWIoOmZpOaXtuatpOmhueWwhuS/neaMgeS4jeWPmOOAgicsXG5cdFx0XHRcdFx0XHRcdCfmraTpoIXnmoTpoJDoqK3lgLzngrrmgqjnmoTplovllZ/oqI7oq5bpoIHoqK3lrprjgILlnKjmgqjpgbjmk4fmh4nnlKjlpJrmop3nkIbnlLHliKrpmaTmmYLmraTpoIXlsIfkv53mjIHkuI3ororjgIInXG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0Y2hlY2tlZDogZmFsc2UsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRjb25zdCB0YWdPcHRpb25zID0gZm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRuYW1lOiAndGFnX29wdGlvbnMnLFxuXHRcdH0pO1xuXHRcdGlmIChNb3JlYml0cy51c2VySXNTeXNvcCkge1xuXHRcdFx0dGFnT3B0aW9ucy5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnaGVhZGVyJyxcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5qCH6K6w55u45YWz6YCJ6aG5JywgJ+aomeiomOebuOmXnOmBuOmghScpLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHRhZ09wdGlvbnMuYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRsaXN0OiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflpoLlj6/og73vvIzpgJrnn6XliJvlu7rogIUnLCAn5aaC5Y+v6IO977yM6YCa55+l5bu656uL6ICFJyksXG5cdFx0XHRcdFx0dmFsdWU6ICdub3RpZnknLFxuXHRcdFx0XHRcdG5hbWU6ICdub3RpZnknLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfkuIDkuKrpgJrnn6XmqKHmnb/lsIbkvJrooqvliqDlhaXliJvlu7rogIXnmoTorqjorrrpobXvvIzoi6XmgqjlkK/nlKjkuobor6XnkIbmja7nmoTpgJrnn6XjgIInLFxuXHRcdFx0XHRcdFx0J+S4gOWAi+mAmuefpeaooeadv+Wwh+acg+iiq+WKoOWFpeW7uueri+iAheeahOiojuirlumgge+8jOiLpeaCqOWVn+eUqOS6huipsueQhuaTmueahOmAmuefpeOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGNoZWNrZWQ6XG5cdFx0XHRcdFx0XHQhTW9yZWJpdHMudXNlcklzU3lzb3AgfHxcblx0XHRcdFx0XHRcdCEoVHdpbmtsZS5zcGVlZHkuaGFzQ1NEIHx8IFR3aW5rbGUuZ2V0UHJlZignZGVsZXRlU3lzb3BEZWZhdWx0VG9EZWxldGUnKSksXG5cdFx0XHRcdFx0ZXZlbnQ6IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+a4heepuumhtemdoicsICfmuIXnqbrpoIHpnaInKSxcblx0XHRcdFx0XHR2YWx1ZTogJ2JsYW5rJyxcblx0XHRcdFx0XHRuYW1lOiAnYmxhbmsnLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCflnKjmoIforrDmqKHmnb/liY3vvIzlhYjmuIXnqbrpobXpnaLvvIzpgILnlKjkuo7kuKXph43noLTlnY/miJbotJ/pnaLnlJ/ogIXkvKDorrDnrYnjgIInLFxuXHRcdFx0XHRcdFx0J+WcqOaomeiomOaooeadv+WJje+8jOWFiOa4heepuumggemdou+8jOmBqeeUqOaWvOWatOmHjeegtOWjnuaIluiyoOmdoueUn+iAheWCs+iomOetieOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5ZCM5pe25qCH6K6w5Lul6K+35rGC55m957q45L+d5oqkJywgJ+WQjOaZguaomeiomOS7peiri+axgueZvee0meS/neittycpLFxuXHRcdFx0XHRcdHZhbHVlOiAnc2FsdGluZycsXG5cdFx0XHRcdFx0bmFtZTogJ3NhbHRpbmcnLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfpgInlj5blkI7vvIzlv6vpgJ/liKDpmaTmqKHmnb/lkI7lsIbpmYTluKYge3tzYWx0fX0g5qCH562+77yM5Lul6K+35rGC5omn6KGM5Yig6Zmk55qE566h55CG5ZGY6L+b6KGM55m957q45L+d5oqk77yM5LuF5Zyo6aG16Z2i5Yib5bu6M+asoeS7peS4iuaJjemAieaLqeatpOmhueOAgicsXG5cdFx0XHRcdFx0XHQn6YG45Y+W5b6M77yM5b+r6YCf5Yiq6Zmk5qih5p2/5b6M5bCH6ZmE5bi2IHt7c2FsdH19IOaomeexpO+8jOS7peiri+axguWft+ihjOWIqumZpOeahOeuoeeQhuWToemAsuihjOeZvee0meS/neitt++8jOWDheWcqOmggemdouW7uuerizPmrKHku6XkuIrmiY3pgbjmk4fmraTpoIXjgIInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+W6lOeUqOWkmuS4queQhueUsScsICfmh4nnlKjlpJrlgIvnkIbnlLEnKSxcblx0XHRcdFx0XHR2YWx1ZTogJ211bHRpcGxlJyxcblx0XHRcdFx0XHRuYW1lOiAnbXVsdGlwbGUnLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn5oKo5Y+v6YCJ5oup5bqU55So5LqO6K+l6aG155qE5aSa5Liq55CG55Sx44CCJywgJ+aCqOWPr+mBuOaTh+aHieeUqOaWvOipsumggeeahOWkmuWAi+eQhueUseOAgicpLFxuXHRcdFx0XHRcdGV2ZW50OiAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdFR3aW5rbGUuc3BlZWR5LmNhbGxiYWNrLm1vZGVDaGFuZ2VkKGV2ZW50LnRhcmdldC5mb3JtKTtcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0pO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0aWQ6ICdwcmlvci1kZWxldGlvbi1jb3VudCcsXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRuYW1lOiAnd29ya19hcmVhJyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCfliJ3lp4vljJZDU0TmqKHlnZflpLHotKXvvIzor7fph43or5XvvIzmiJblsIbov5nmiqXlkYrnu5lUd2lua2xl5byA5Y+R6ICF44CCJyxcblx0XHRcdFx0J+WIneWni+WMlkNTROaooee1hOWkseaVl++8jOiri+mHjeippu+8jOaIluWwh+mAmeWgseWRiue1plR3aW5rbGXplovnmbzogIXjgIInXG5cdFx0XHQpLFxuXHRcdH0pO1xuXHRcdGlmIChUd2lua2xlLmdldFByZWYoJ3NwZWVkeVNlbGVjdGlvblN0eWxlJykgIT09ICdyYWRpb0NsaWNrJykge1xuXHRcdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnc3VibWl0Jyxcblx0XHRcdFx0Y2xhc3NOYW1lOiAndHctc3BlZWR5LXN1Ym1pdCcsXG5cdFx0XHR9KTsgLy8gUmVuYW1lZCBpbiBtb2RlQ2hhbmdlZFxuXHRcdH1cblxuXHRcdGNvbnN0IHJlc3VsdCA9IGZvcm0ucmVuZGVyKCk7XG5cdFx0ZGlhbG9nLnNldENvbnRlbnQocmVzdWx0KTtcblx0XHRkaWFsb2cuZGlzcGxheSgpO1xuXHRcdFR3aW5rbGUuc3BlZWR5LmNhbGxiYWNrLm1vZGVDaGFuZ2VkKHJlc3VsdCk7XG5cdFx0Ly8gQ2hlY2sgZm9yIHByaW9yIGRlbGV0aW9ucy4gIEp1c3Qgb25jZSwgdXBvbiBpbml0XG5cdFx0VHdpbmtsZS5zcGVlZHkuY2FsbGJhY2sucHJpb3JEZWxldGlvbkNvdW50KCk7XG5cdH07XG5cdFR3aW5rbGUuc3BlZWR5LmNhbGxiYWNrLmdldE1vZGUgPSAoZm9ybSkgPT4ge1xuXHRcdGxldCBtb2RlID0gVHdpbmtsZS5zcGVlZHkubW9kZS51c2VyU2luZ2xlU3VibWl0O1xuXHRcdGlmIChmb3JtLnRhZ19vbmx5ICYmICFmb3JtLnRhZ19vbmx5LmNoZWNrZWQpIHtcblx0XHRcdGlmIChmb3JtLmRlbG11bHRpcGxlLmNoZWNrZWQpIHtcblx0XHRcdFx0bW9kZSA9IFR3aW5rbGUuc3BlZWR5Lm1vZGUuc3lzb3BNdWx0aXBsZVN1Ym1pdDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1vZGUgPSBUd2lua2xlLnNwZWVkeS5tb2RlLnN5c29wU2luZ2xlU3VibWl0O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoZm9ybS5tdWx0aXBsZS5jaGVja2VkKSB7XG5cdFx0XHRtb2RlID0gVHdpbmtsZS5zcGVlZHkubW9kZS51c2VyTXVsdGlwbGVTdWJtaXQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1vZGUgPSBUd2lua2xlLnNwZWVkeS5tb2RlLnVzZXJTaW5nbGVTdWJtaXQ7XG5cdFx0fVxuXHRcdGlmIChUd2lua2xlLmdldFByZWYoJ3NwZWVkeVNlbGVjdGlvblN0eWxlJykgPT09ICdyYWRpb0NsaWNrJykge1xuXHRcdFx0bW9kZSsrO1xuXHRcdH1cblx0XHRyZXR1cm4gbW9kZTtcblx0fTtcblx0VHdpbmtsZS5zcGVlZHkuY2FsbGJhY2subW9kZUNoYW5nZWQgPSAoZm9ybSkgPT4ge1xuXHRcdGNvbnN0IG5hbWVzcGFjZSA9IG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJyk7XG5cdFx0Ly8gZmlyc3QgZmlndXJlIG91dCB3aGF0IG1vZGUgd2UncmUgaW5cblx0XHRjb25zdCBtb2RlID0gVHdpbmtsZS5zcGVlZHkuY2FsbGJhY2suZ2V0TW9kZShmb3JtKTtcblx0XHRjb25zdCBpc1N5c29wTW9kZSA9IFR3aW5rbGUuc3BlZWR5Lm1vZGUuaXNTeXNvcChtb2RlKTtcblx0XHRpZiAoaXNTeXNvcE1vZGUpIHtcblx0XHRcdCRib2R5LmZpbmQoJ1tuYW1lPWRlbGV0ZV9vcHRpb25zXScpLnNob3coKTtcblx0XHRcdCRib2R5LmZpbmQoJ1tuYW1lPXRhZ19vcHRpb25zXScpLmhpZGUoKTtcblx0XHRcdCRib2R5LmZpbmQoJ2J1dHRvbi50dy1zcGVlZHktc3VibWl0JykudGV4dCh3aW5kb3cud2dVTFMoJ+WIoOmZpOmhtemdoicsICfliKrpmaTpoIHpnaInKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCRib2R5LmZpbmQoJ1tuYW1lPWRlbGV0ZV9vcHRpb25zXScpLmhpZGUoKTtcblx0XHRcdCRib2R5LmZpbmQoJ1tuYW1lPXRhZ19vcHRpb25zXScpLnNob3coKTtcblx0XHRcdCRib2R5LmZpbmQoJ2J1dHRvbi50dy1zcGVlZHktc3VibWl0JykudGV4dCh3aW5kb3cud2dVTFMoJ+agh+iusOmhtemdoicsICfmqJnoqJjpoIHpnaInKSk7XG5cdFx0fVxuXHRcdGNvbnN0IHdvcmtfYXJlYSA9IG5ldyBNb3JlYml0cy5xdWlja0Zvcm0uZWxlbWVudCh7XG5cdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdG5hbWU6ICd3b3JrX2FyZWEnLFxuXHRcdH0pO1xuXHRcdGlmIChcblx0XHRcdG1vZGUgPT09IFR3aW5rbGUuc3BlZWR5Lm1vZGUudXNlck11bHRpcGxlUmFkaW9DbGljayB8fFxuXHRcdFx0bW9kZSA9PT0gVHdpbmtsZS5zcGVlZHkubW9kZS5zeXNvcE11bHRpcGxlUmFkaW9DbGlja1xuXHRcdCkge1xuXHRcdFx0Y29uc3QgZXZhbHVhdGVUeXBlID0gVHdpbmtsZS5zcGVlZHkubW9kZS5pc1N5c29wKG1vZGUpID8gJ2V2YWx1YXRlU3lzb3AnIDogJ2V2YWx1YXRlVXNlcic7XG5cdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+W9k+mAieaLqeWujOaIkOWQju+8jOWNleWHu++8micsICfnlbbpgbjmk4flrozmiJDlvozvvIzpu57mk4rvvJonKSxcblx0XHRcdH0pO1xuXHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdidXR0b24nLFxuXHRcdFx0XHRuYW1lOiAnc3VibWl0LW11bHRpcGxlJyxcblx0XHRcdFx0bGFiZWw6IGlzU3lzb3BNb2RlID8gd2luZG93LndnVUxTKCfliKDpmaTpobXpnaInLCAn5Yiq6Zmk6aCB6Z2iJykgOiB3aW5kb3cud2dVTFMoJ+agh+iusOmhtemdoicsICfmqJnoqJjpoIHpnaInKSxcblx0XHRcdFx0ZXZlbnQ6IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFR3aW5rbGUuc3BlZWR5LmNhbGxiYWNrW2V2YWx1YXRlVHlwZV0oZXZlbnQpO1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGNvbnN0IHJhZGlvT3JDaGVja2JveCA9IFR3aW5rbGUuc3BlZWR5Lm1vZGUuaXNNdWx0aXBsZShtb2RlKSA/ICdjaGVja2JveCcgOiAncmFkaW8nO1xuXHRcdGlmIChpc1N5c29wTW9kZSkge1xuXHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdoZWFkZXInLFxuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfoh6rlrprkuYnnkIbnlLEnLCAn6Ieq6KiC55CG55SxJyksXG5cdFx0XHR9KTtcblx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiByYWRpb09yQ2hlY2tib3gsXG5cdFx0XHRcdG5hbWU6ICdjc2QnLFxuXHRcdFx0XHRsaXN0OiBUd2lua2xlLnNwZWVkeS5nZW5lcmF0ZUNzZExpc3QoVHdpbmtsZS5zcGVlZHkuY3VzdG9tUmF0aW9uYWxlLCBtb2RlKSxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRzd2l0Y2ggKG5hbWVzcGFjZSkge1xuXHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHQvLyBhcnRpY2xlIGFuZCBwc2V1ZG8gbmFtZXNwYWNlXG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdoZWFkZXInLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+adoeebricsICfmop3nm64nKSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6IHJhZGlvT3JDaGVja2JveCxcblx0XHRcdFx0XHRuYW1lOiAnY3NkJyxcblx0XHRcdFx0XHRsaXN0OiBUd2lua2xlLnNwZWVkeS5nZW5lcmF0ZUNzZExpc3QoVHdpbmtsZS5zcGVlZHkuYXJ0aWNsZUxpc3QsIG1vZGUpLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDI6XG5cdFx0XHRcdC8vIHVzZXJcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2hlYWRlcicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn55So5oi36aG1JywgJ+S9v+eUqOiAhemggemdoicpLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogcmFkaW9PckNoZWNrYm94LFxuXHRcdFx0XHRcdG5hbWU6ICdjc2QnLFxuXHRcdFx0XHRcdGxpc3Q6IFR3aW5rbGUuc3BlZWR5LmdlbmVyYXRlQ3NkTGlzdChUd2lua2xlLnNwZWVkeS51c2VyTGlzdCwgbW9kZSksXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMzpcblx0XHRcdFx0Ly8gdXNlciB0YWxrXG5cdFx0XHRcdGlmIChtdy51dGlsLmlzSVBBZGRyZXNzKG13LmNvbmZpZy5nZXQoJ3dnUmVsZXZhbnRVc2VyTmFtZScpKSkge1xuXHRcdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdFx0dHlwZTogJ2hlYWRlcicsXG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnlKjmiLforqjorrrpobUnLCAn5L2/55So6ICF6KiO6KuW6aCBJyksXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0XHR0eXBlOiByYWRpb09yQ2hlY2tib3gsXG5cdFx0XHRcdFx0XHRuYW1lOiAnY3NkJyxcblx0XHRcdFx0XHRcdGxpc3Q6IFR3aW5rbGUuc3BlZWR5LmdlbmVyYXRlQ3NkTGlzdChUd2lua2xlLnNwZWVkeS51c2VydGFsa0xpc3QsIG1vZGUpLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSA2OlxuXHRcdFx0XHQvLyBmaWxlXG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdoZWFkZXInLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aWh+S7ticsICfmqpTmoYgnKSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6IHJhZGlvT3JDaGVja2JveCxcblx0XHRcdFx0XHRuYW1lOiAnY3NkJyxcblx0XHRcdFx0XHRsaXN0OiBUd2lua2xlLnNwZWVkeS5nZW5lcmF0ZUNzZExpc3QoVHdpbmtsZS5zcGVlZHkuZmlsZUxpc3QsIG1vZGUpLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYgKCFUd2lua2xlLnNwZWVkeS5tb2RlLmlzU3lzb3AobW9kZSkpIHtcblx0XHRcdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0J+agh+iusENTRCBGMeOAgUYz44CBRjXvvIzor7fkvb/nlKhUd2lua2xl55qE4oCc5Zu+5p2D4oCd5Yqf6IO944CCJyxcblx0XHRcdFx0XHRcdFx0J+aomeiomENTRCBGMeOAgUYz44CBRjXvvIzoq4vkvb/nlKhUd2lua2xl55qE44CM5ZyW5qyK44CN5Yqf6IO944CCJ1xuXHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMTQ6XG5cdFx0XHRcdC8vIGNhdGVnb3J5XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdoZWFkZXInLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WIhuexuycsICfliIbpoZ4nKSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6IHJhZGlvT3JDaGVja2JveCxcblx0XHRcdFx0XHRuYW1lOiAnY3NkJyxcblx0XHRcdFx0XHRsaXN0OiBUd2lua2xlLnNwZWVkeS5nZW5lcmF0ZUNzZExpc3QoVHdpbmtsZS5zcGVlZHkuY2F0ZWdvcnlMaXN0LCBtb2RlKSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAzMDI6XG5cdFx0XHRcdC8vIGRyYWZ0XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdoZWFkZXInLFxuXHRcdFx0XHRcdGxhYmVsOiAn6I2J56i/Jyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6IHJhZGlvT3JDaGVja2JveCxcblx0XHRcdFx0XHRuYW1lOiAnY3NkJyxcblx0XHRcdFx0XHRsaXN0OiBUd2lua2xlLnNwZWVkeS5nZW5lcmF0ZUNzZExpc3QoVHdpbmtsZS5zcGVlZHkuZHJhZnRMaXN0LCBtb2RlKSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBuYW1lc3BhY2UgJSAyID09PSAxICYmIG5hbWVzcGFjZSAhPT0gMzpcblx0XHRcdFx0Ly8gc2hvdyBkYi10YWxrIG9uIHRhbGsgcGFnZXMsIGJ1dCBub3QgdXNlciB0YWxrIHBhZ2VzXG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdoZWFkZXInLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+iuqOiuuumhtScsICfoqI7oq5bpoIEnKSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6IHJhZGlvT3JDaGVja2JveCxcblx0XHRcdFx0XHRuYW1lOiAnY3NkJyxcblx0XHRcdFx0XHRsaXN0OiBUd2lua2xlLnNwZWVkeS5nZW5lcmF0ZUNzZExpc3QoVHdpbmtsZS5zcGVlZHkudGFsa0xpc3QsIG1vZGUpLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0Ly8gY3VzdG9tIHJhdGlvbmFsZSBsaXZlcyB1bmRlciBnZW5lcmFsIGNyaXRlcmlhIHdoZW4gdGFnZ2luZ1xuXHRcdGxldCBnZW5lcmFsQ3JpdGVyaWEgPSBUd2lua2xlLnNwZWVkeS5nZW5lcmFsTGlzdDtcblx0XHRpZiAoIVR3aW5rbGUuc3BlZWR5Lm1vZGUuaXNTeXNvcChtb2RlKSkge1xuXHRcdFx0Z2VuZXJhbENyaXRlcmlhID0gWy4uLlR3aW5rbGUuc3BlZWR5LmN1c3RvbVJhdGlvbmFsZSwgLi4uZ2VuZXJhdGVBcnJheShnZW5lcmFsQ3JpdGVyaWEpXTtcblx0XHR9XG5cdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnaGVhZGVyJyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+W4uOinhCcsICfluLjopo8nKSxcblx0XHR9KTtcblx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdHR5cGU6IHJhZGlvT3JDaGVja2JveCxcblx0XHRcdG5hbWU6ICdjc2QnLFxuXHRcdFx0bGlzdDogVHdpbmtsZS5zcGVlZHkuZ2VuZXJhdGVDc2RMaXN0KGdlbmVyYWxDcml0ZXJpYSwgbW9kZSksXG5cdFx0fSk7XG5cdFx0aWYgKCFUd2lua2xlLnNwZWVkeS5tb2RlLmlzU3lzb3AobW9kZSkpIHtcblx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHQn5o+Q5oql5L615p2D6aG16Z2i77yM6K+35L2/55SoVHdpbmtsZeeahOKAnOS+teadg+KAneWKn+iDveOAgicsXG5cdFx0XHRcdFx0J+aPkOWgseS+teasiumggemdou+8jOiri+S9v+eUqFR3aW5rbGXnmoTjgIzkvrXmrIrjgI3lip/og73jgIInXG5cdFx0XHRcdCksXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKG13LmNvbmZpZy5nZXQoJ3dnSXNSZWRpcmVjdCcpIHx8IE1vcmViaXRzLnVzZXJJc1N5c29wKSB7XG5cdFx0XHR3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ2hlYWRlcicsXG5cdFx0XHRcdGxhYmVsOiAn6YeN5a6a5ZCRJyxcblx0XHRcdH0pO1xuXHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6IHJhZGlvT3JDaGVja2JveCxcblx0XHRcdFx0bmFtZTogJ2NzZCcsXG5cdFx0XHRcdGxpc3Q6IFR3aW5rbGUuc3BlZWR5LmdlbmVyYXRlQ3NkTGlzdChUd2lua2xlLnNwZWVkeS5yZWRpcmVjdExpc3QsIG1vZGUpLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGNvbnN0IFtvbGRfYXJlYV0gPSBNb3JlYml0cy5xdWlja0Zvcm0uZ2V0RWxlbWVudHMoZm9ybSwgJ3dvcmtfYXJlYScpO1xuXHRcdGZvcm0ucmVwbGFjZUNoaWxkKHdvcmtfYXJlYS5yZW5kZXIoKSwgb2xkX2FyZWEpO1xuXHRcdC8vIGlmIHN5c29wLCBjaGVjayBpZiBDU0QgaXMgYWxyZWFkeSBvbiB0aGUgcGFnZSBhbmQgZmlsbCBpbiBjdXN0b20gcmF0aW9uYWxlXG5cdFx0aWYgKGlzU3lzb3BNb2RlICYmIFR3aW5rbGUuc3BlZWR5Lmhhc0NTRCkge1xuXHRcdFx0Y29uc3QgW2N1c3RvbU9wdGlvbl0gPSAkYm9keS5maW5kKCdpbnB1dFtuYW1lPWNzZF1bdmFsdWU9cmVhc29uXScpO1xuXHRcdFx0aWYgKGN1c3RvbU9wdGlvbikge1xuXHRcdFx0XHRpZiAoVHdpbmtsZS5nZXRQcmVmKCdzcGVlZHlTZWxlY3Rpb25TdHlsZScpICE9PSAncmFkaW9DbGljaycpIHtcblx0XHRcdFx0XHQvLyBmb3JjZSBsaXN0ZW5lcnMgdG8gcmUtaW5pdFxuXHRcdFx0XHRcdGN1c3RvbU9wdGlvbi5jbGljaygpO1xuXHRcdFx0XHRcdGN1c3RvbU9wdGlvbi5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGN1c3RvbU9wdGlvbi5zdWJncm91cCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y3VzdG9tT3B0aW9uLnN1Ymdyb3VwLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykudmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQoXG5cdFx0XHRcdFx0JGJvZHkuZmluZCgnI2RlbGV0ZS1yZWFzb24nKS50ZXh0KClcblx0XHRcdFx0KS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gZW5sYXJnZSBHNyByYWRpby9jaGVja2JveCBhbmQgaXRzIGxhYmVsXG5cdFx0aWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3ZhbHVlPVwiZzdcIl0nKSAmJiBUd2lua2xlLmdldFByZWYoJ2VubGFyZ2VHN0lucHV0JykpIHtcblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3ZhbHVlPVwiZzdcIl0nKS5zdHlsZSA9XG5cdFx0XHRcdCdoZWlnaHQ6IDJlbTsgd2lkdGg6IDJlbTsgaGVpZ2h0OiAtbW96LWluaXRpYWw7IHdpZHRoOiAtbW96LWluaXRpYWw7IC1tb3otdHJhbnNmb3JtOiBzY2FsZSgyKTsgLW8tdHJhbnNmb3JtOiBzY2FsZSgyKTsnO1xuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbdmFsdWU9XCJnN1wiXScpLmxhYmVsc1swXS5zdHlsZSA9ICdmb250LXNpemU6IDEuNWVtOyBsaW5lLWhlaWdodDogMS41ZW07Jztcblx0XHR9XG5cdFx0aWYgKCFpc1N5c29wTW9kZSAmJiBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VDb250ZW50TW9kZWwnKSAhPT0gJ3dpa2l0ZXh0Jykge1xuXHRcdFx0JGJvZHkuZmluZCgnW25hbWU9dGFnX29wdGlvbnNdJykuaGlkZSgpO1xuXHRcdFx0JGJvZHkuZmluZCgnW25hbWU9d29ya19hcmVhXScpLmVtcHR5KCk7XG5cdFx0XHRjb25zdCBtZXNzYWdlID0gW1xuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ1R3aW5rbGXkuI3mlK/mjIHlnKjpobXpnaLlhoXlrrnmqKHlnovkuLonLCAnVHdpbmtsZeS4jeaUr+aPtOWcqOmggemdouWFp+WuueaooeWei+eCuicpLFxuXHRcdFx0XHRtdy5jb25maWcuZ2V0KCd3Z1BhZ2VDb250ZW50TW9kZWwnKSxcblx0XHRcdFx0d2luZG93LndnVUxTKCfnmoTpobXpnaLkuIrmjILkuIrlv6vpgJ/liKDpmaTmqKHmnb/vvIzor7flj4Lop4EnLCAn55qE6aCB6Z2i5LiK5o6b5LiK5b+r6YCf5Yiq6Zmk5qih5p2/77yM6KuL5Y+D6KaLJyksXG5cdFx0XHRcdCQoJzxhPicpXG5cdFx0XHRcdFx0LmF0dHIoe1xuXHRcdFx0XHRcdFx0dGFyZ2V0OiAnX2JsYW5rJyxcblx0XHRcdFx0XHRcdHJlbDogJ25vb3BlbmVyIG5vcmVmZXJyZXInLFxuXHRcdFx0XHRcdFx0aHJlZjogbXcudXRpbC5nZXRVcmwoJ0xJQjpTUEVDSUFMU0QnKSxcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdC50ZXh0KHdpbmRvdy53Z1VMUygn5omL5Yqo5pS+572u5qih5p2/5pe255qE5rOo5oSP5LqL6aG5JywgJ+aJi+WLleaUvue9ruaooeadv+aZgueahOazqOaEj+S6i+mghScpKVswXSxcblx0XHRcdFx0J+OAgicsXG5cdFx0XHRdO1xuXHRcdFx0JGJvZHkuZmluZCgnW25hbWU9d29ya19hcmVhXScpLmFwcGVuZChtZXNzYWdlKTtcblx0XHRcdE1vcmViaXRzLnNpbXBsZVdpbmRvdy5zZXRCdXR0b25zRW5hYmxlZChmYWxzZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdE1vcmViaXRzLnNpbXBsZVdpbmRvdy5zZXRCdXR0b25zRW5hYmxlZCh0cnVlKTtcblx0XHR9XG5cdH07XG5cdFR3aW5rbGUuc3BlZWR5LmNhbGxiYWNrLnByaW9yRGVsZXRpb25Db3VudCA9ICgpID0+IHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdGFjdGlvbjogJ3F1ZXJ5Jyxcblx0XHRcdGZvcm1hdDogJ2pzb24nLFxuXHRcdFx0bGlzdDogJ2xvZ2V2ZW50cycsXG5cdFx0XHRsZXR5cGU6ICdkZWxldGUnLFxuXHRcdFx0bGVhY3Rpb246ICdkZWxldGUvZGVsZXRlJyxcblx0XHRcdC8vIEp1c3QgcHVyZSBwYWdlIGRlbGV0aW9uLCBubyByZWRpcmVjdCBvdmVyd3JpdGVzIG9yIHJldmRlbFxuXHRcdFx0bGV0aXRsZTogbXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLFxuXHRcdFx0bGVwcm9wOiAnJyxcblx0XHRcdC8vIFdlJ3JlIGp1c3QgY291bnRpbmcgd2UgZG9uJ3QgYWN0dWFsbHkgY2FyZSBhYm91dCB0aGUgZW50cmllc1xuXHRcdFx0bGVsaW1pdDogNSxcblx0XHRcdC8vIEEgbGl0dGxlIGJpdCBnb2VzIGEgbG9uZyB3YXlcblx0XHR9O1xuXG5cdFx0bmV3IE1vcmViaXRzLndpa2kuYXBpKHdpbmRvdy53Z1VMUygn5qOA5p+l5LmL5YmN55qE5Yig6ZmkJywgJ+aqouafpeS5i+WJjeeahOWIqumZpCcpLCBxdWVyeSwgKGFwaW9iaikgPT4ge1xuXHRcdFx0Y29uc3QgcmVzcG9uc2UgPSBhcGlvYmouZ2V0UmVzcG9uc2UoKTtcblx0XHRcdGNvbnN0IGRlbENvdW50ID0gcmVzcG9uc2UucXVlcnkubG9nZXZlbnRzLmxlbmd0aDtcblx0XHRcdGlmIChkZWxDb3VudCkge1xuXHRcdFx0XHRsZXQgbWVzc2FnZSA9IHdpbmRvdy53Z1VMUygn6KKr5Yig6ZmkJywgJ+iiq+WIqumZpCcpO1xuXHRcdFx0XHRpZiAocmVzcG9uc2UuY29udGludWUpIHtcblx0XHRcdFx0XHRtZXNzYWdlICs9IHdpbmRvdy53Z1VMUygn6LaF6L+HJywgJ+i2hemBjicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1lc3NhZ2UgKz0gYCR7ZGVsQ291bnR95qyhYDtcblx0XHRcdFx0Ly8gMysgc2VlbXMgcHJvYmxlbWF0aWNcblx0XHRcdFx0aWYgKGRlbENvdW50ID49IDMpIHtcblx0XHRcdFx0XHQkYm9keS5maW5kKCcjcHJpb3ItZGVsZXRpb24tY291bnQnKS5jc3MoJ2NvbG9yJywgJyNmZjAwMDAnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBQcm92aWRlIGEgbGluayB0byBwYWdlIGxvZ3MgKENTRCB0ZW1wbGF0ZXMgaGF2ZSBvbmUgZm9yIHN5c29wcylcblx0XHRcdFx0Y29uc3QgbGluayA9IE1vcmViaXRzLmh0bWxOb2RlKCdhJywgd2luZG93LndnVUxTKCfvvIjml6Xlv5fvvIknLCAn77yI5pel6KqM77yJJykpO1xuXHRcdFx0XHRsaW5rLnNldEF0dHJpYnV0ZShcblx0XHRcdFx0XHQnaHJlZicsXG5cdFx0XHRcdFx0bXcudXRpbC5nZXRVcmwoJ1NwZWNpYWw6TG9nJywge1xuXHRcdFx0XHRcdFx0cGFnZTogbXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLFxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGxpbmsuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCAnX2JsYW5rJyk7XG5cdFx0XHRcdGxpbmsuc2V0QXR0cmlidXRlKCdyZWwnLCAnbm9vcGVuZXIgbm9yZWZlcnJlcicpO1xuXHRcdFx0XHQkYm9keS5maW5kKCcjcHJpb3ItZGVsZXRpb24tY291bnQnKS50ZXh0KG1lc3NhZ2UpOyAvLyBTcGFjZSBiZWZvcmUgbG9nIGxpbmtcblx0XHRcdFx0JGJvZHkuZmluZCgnI3ByaW9yLWRlbGV0aW9uLWNvdW50JykuYXBwZW5kKGxpbmspO1xuXHRcdFx0fVxuXHRcdH0pLnBvc3QoKTtcblx0fTtcblx0VHdpbmtsZS5zcGVlZHkuZ2VuZXJhdGVDc2RMaXN0ID0gKGxpc3QsIG1vZGUpID0+IHtcblx0XHQvLyBtb2RlIHN3aXRjaGVzXG5cdFx0Y29uc3QgaXNTeXNvcE1vZGUgPSBUd2lua2xlLnNwZWVkeS5tb2RlLmlzU3lzb3AobW9kZSk7XG5cdFx0Y29uc3QgbXVsdGlwbGUgPSBUd2lua2xlLnNwZWVkeS5tb2RlLmlzTXVsdGlwbGUobW9kZSk7XG5cdFx0Y29uc3QgaGFzU3VibWl0QnV0dG9uID0gVHdpbmtsZS5zcGVlZHkubW9kZS5oYXNTdWJtaXRCdXR0b24obW9kZSk7XG5cdFx0Y29uc3Qgb3BlblN1Ymdyb3VwSGFuZGxlciA9IChlKSA9PiB7XG5cdFx0XHQkKGUudGFyZ2V0LmZvcm0pLmZpbmQoJ2lucHV0JykucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcblx0XHRcdCQoZS50YXJnZXQuZm9ybSkuY2hpbGRyZW4oKS5jc3MoJ2NvbG9yJywgJ2dyYXknKTtcblx0XHRcdCQoZS50YXJnZXQpLnBhcmVudCgpLmNzcygnY29sb3InLCAnYmxhY2snKS5maW5kKCdpbnB1dCcpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuXHRcdFx0JChlLnRhcmdldCkucGFyZW50KCkuZmluZCgnaW5wdXQ6dGV4dCcpWzBdLmZvY3VzKCk7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH07XG5cdFx0Y29uc3Qgc3VibWl0U3ViZ3JvdXBIYW5kbGVyID0gKGUpID0+IHtcblx0XHRcdGNvbnN0IGV2YWx1YXRlVHlwZSA9IFR3aW5rbGUuc3BlZWR5Lm1vZGUuaXNTeXNvcChtb2RlKSA/ICdldmFsdWF0ZVN5c29wJyA6ICdldmFsdWF0ZVVzZXInO1xuXHRcdFx0VHdpbmtsZS5zcGVlZHkuY2FsbGJhY2tbZXZhbHVhdGVUeXBlXShlKTtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fTtcblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGxpc3QsIChjcml0RWxlbWVudCkgPT4ge1xuXHRcdFx0Y29uc3QgY3JpdGVyaW9uID0ge1xuXHRcdFx0XHQuLi5jcml0RWxlbWVudCxcblx0XHRcdH07XG5cdFx0XHRpZiAobXVsdGlwbGUpIHtcblx0XHRcdFx0aWYgKGNyaXRlcmlvbi5oaWRlV2hlbk11bHRpcGxlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNyaXRlcmlvbi5oaWRlU3ViZ3JvdXBXaGVuTXVsdGlwbGUpIHtcblx0XHRcdFx0XHRjcml0ZXJpb24uc3ViZ3JvdXAgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoY3JpdGVyaW9uLmhpZGVXaGVuU2luZ2xlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNyaXRlcmlvbi5oaWRlU3ViZ3JvdXBXaGVuU2luZ2xlKSB7XG5cdFx0XHRcdFx0Y3JpdGVyaW9uLnN1Ymdyb3VwID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGlzU3lzb3BNb2RlKSB7XG5cdFx0XHRcdGlmIChjcml0ZXJpb24uaGlkZVdoZW5TeXNvcCkge1xuXHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChjcml0ZXJpb24uaGlkZVN1Ymdyb3VwV2hlblN5c29wKSB7XG5cdFx0XHRcdFx0Y3JpdGVyaW9uLnN1Ymdyb3VwID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKGNyaXRlcmlvbi5oaWRlV2hlblVzZXIpIHtcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY3JpdGVyaW9uLmhpZGVTdWJncm91cFdoZW5Vc2VyKSB7XG5cdFx0XHRcdFx0Y3JpdGVyaW9uLnN1Ymdyb3VwID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKG13LmNvbmZpZy5nZXQoJ3dnSXNSZWRpcmVjdCcpICYmIGNyaXRlcmlvbi5oaWRlV2hlblJlZGlyZWN0KSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdFx0aWYgKFxuXHRcdFx0XHRjcml0ZXJpb24uc2hvd0luTmFtZXNwYWNlcyAmJlxuXHRcdFx0XHQhY3JpdGVyaW9uLnNob3dJbk5hbWVzcGFjZXMuaW5jbHVkZXMobXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSlcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH0gZWxzZSBpZiAoXG5cdFx0XHRcdGNyaXRlcmlvbi5oaWRlSW5OYW1lc3BhY2VzICYmXG5cdFx0XHRcdGNyaXRlcmlvbi5oaWRlSW5OYW1lc3BhY2VzLmluY2x1ZGVzKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykpXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY3JpdGVyaW9uLnN1Ymdyb3VwICYmICFoYXNTdWJtaXRCdXR0b24pIHtcblx0XHRcdFx0Y3JpdGVyaW9uLnN1Ymdyb3VwID0gZ2VuZXJhdGVBcnJheShjcml0ZXJpb24uc3ViZ3JvdXAsIHtcblx0XHRcdFx0XHR0eXBlOiAnYnV0dG9uJyxcblx0XHRcdFx0XHRuYW1lOiAnc3VibWl0Jyxcblx0XHRcdFx0XHRsYWJlbDogaXNTeXNvcE1vZGUgPyB3aW5kb3cud2dVTFMoJ+WIoOmZpOmhtemdoicsICfliKrpmaTpoIHpnaInKSA6IHdpbmRvdy53Z1VMUygn5qCH6K6w6aG16Z2iJywgJ+aomeiomOmggemdoicpLFxuXHRcdFx0XHRcdGV2ZW50OiBzdWJtaXRTdWJncm91cEhhbmRsZXIsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHQvLyBGSVhNRTogZG9lcyB0aGlzIGRvIGFueXRoaW5nP1xuXHRcdFx0XHRjcml0ZXJpb24uZXZlbnQgPSBvcGVuU3ViZ3JvdXBIYW5kbGVyO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGlzU3lzb3BNb2RlKSB7XG5cdFx0XHRcdGNvbnN0IG9yaWdpbmFsRXZlbnQgPSBjcml0ZXJpb24uZXZlbnQ7XG5cdFx0XHRcdGNyaXRlcmlvbi5ldmVudCA9IChlKSA9PiB7XG5cdFx0XHRcdFx0aWYgKG11bHRpcGxlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudChlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29uc3Qgbm9ybWFsaXplZENyaXRlcmlvbiA9IFR3aW5rbGUuc3BlZWR5Lm5vcm1hbGl6ZUhhc2hbZS50YXJnZXQudmFsdWVdO1xuXHRcdFx0XHRcdCRib2R5XG5cdFx0XHRcdFx0XHQuZmluZCgnW25hbWU9b3BlbnVzZXJ0YWxrXScpXG5cdFx0XHRcdFx0XHQucHJvcChcblx0XHRcdFx0XHRcdFx0J2NoZWNrZWQnLFxuXHRcdFx0XHRcdFx0XHRUd2lua2xlLmdldFByZWYoJ29wZW5Vc2VyVGFsa1BhZ2VPblNwZWVkeURlbGV0ZScpLmluY2x1ZGVzKG5vcm1hbGl6ZWRDcml0ZXJpb24pXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGlmIChvcmlnaW5hbEV2ZW50KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudChlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY3JpdGVyaW9uO1xuXHRcdH0pO1xuXHR9O1xuXHRUd2lua2xlLnNwZWVkeS5jdXN0b21SYXRpb25hbGUgPSBbXG5cdFx0e1xuXHRcdFx0bGFiZWw6IGDoh6rlrprkuYnnkIbnlLEke01vcmViaXRzLnVzZXJJc1N5c29wID8gJ++8iOiHquWumuS5ieWIoOmZpOeQhueUse+8iScgOiAnJ31gLFxuXHRcdFx0dmFsdWU6ICdyZWFzb24nLFxuXHRcdFx0dG9vbHRpcDogJ+ivpemhteiHs+WwkeW6lOivpeespuWQiOS4gOadoeW/q+mAn+WIoOmZpOeahOagh+WHhu+8jOW5tuS4lOaCqOW/hemhu+WcqOeQhueUseS4reaPkOWIsOOAgicsXG5cdFx0XHRzdWJncm91cDoge1xuXHRcdFx0XHRuYW1lOiAncmVhc29uXzEnLFxuXHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRsYWJlbDogJ+eQhueUse+8micsXG5cdFx0XHRcdHNpemU6IDYwLFxuXHRcdFx0fSxcblx0XHR9LFxuXHRdO1xuXHRUd2lua2xlLnNwZWVkeS5maWxlTGlzdCA9IFtcblx0XHR7XG5cdFx0XHRsYWJlbDogJ0Yx77ya5piO5pi+5LiN56ym5ZCI5pys56uZ6JGX5L2c5p2D5p2h5L6L55qE5paH5Lu2Jyxcblx0XHRcdHZhbHVlOiAnZjEnLFxuXHRcdFx0dG9vbHRpcDpcblx0XHRcdFx0J+WMheaLrOS7peS4i+aDheWGte+8mjEu5LiK5Lyg5ZCOM+WkqeWGheS7jeeEtuadpea6kOS4jeaYjuOAgeiRl+S9nOadg+S4jeaYjueahOaWh+S7tuOAgjIu5LiK5Lyg6ICF5a6j56ew5oul5pyJ77yM6ICM5Zyo5YW25LuW5p2l5rqQ5om+5Yiw55qE5paH5Lu244CCMy7mlofku7blrqPnp7DnlLHmn5DkvZzogIXkvp3mja7mn5Doh6rnlLHokZfkvZzmnYPljY/orq7lj5HluIPvvIzkvYbmib7kuI3liLDor6Xoh6rnlLHljY/orq7nmoTlo7DmmI7jgII0LuWFtuS7luaYjuaYvuS+teadg+eahOaWh+S7tu+8jOWPr+mZhOWKoOS+teadg+eQhueUseOAgicsXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogJ0Yy77ya6YeN5aSN5LiU5LiN5YaN6KKr5L2/55So55qE5paH5Lu2Jyxcblx0XHRcdHZhbHVlOiAnZjInLFxuXHRcdFx0dG9vbHRpcDpcblx0XHRcdFx0J+WMheaLrOS7peS4i+aDheWGte+8muS4jueOsOacieaWh+S7tuWujOWFqOebuOWQjO+8iOaIluS4jueOsOacieaWh+S7tuWGheWuueS4gOiHtOS9huWwuuWvuOi+g+Wwj++8ie+8jOS4lOayoeacieWuouingumcgOimge+8iOWmguafkOS6m+WcuuWQiOmcgOS9v+eUqOWwj+WwuuWvuOWbvueJh++8ieeahOaWh+S7tuOAguaIluaYr+iiq+abtOWKoOa4heaZsOeahOaWh+S7tuOAgVNWR+agvOW8j+aWh+S7tuaJgOWPluS7o+eahOaWh+S7tuOAguivt+aPkOaKpeiAheehruWumuaWh+S7tuayoeacieS7u+S9lemhtemdouS9v+eUqOWQjuWGjeaPkOaKpeWIoOmZpO+8jOW5tumZhOazqOWvueW6lOi0qOmHj+abtOWlveeahOaWh+S7tuWQjeOAgicsXG5cdFx0XHRzdWJncm91cDoge1xuXHRcdFx0XHRuYW1lOiAnZjJfZmlsZW5hbWUnLFxuXHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRsYWJlbDogJ+aWsOaWh+S7tuWQje+8micsXG5cdFx0XHRcdHRvb2x0aXA6ICflj6/kuI3lkKvigJxGaWxlOuKAneWJjee8gOOAgicsXG5cdFx0XHR9LFxuXHRcdH0sXG5cdF07XG5cdFR3aW5rbGUuc3BlZWR5LmFydGljbGVMaXN0ID0gW1xuXHRcdHtcblx0XHRcdGxhYmVsOiAnQTHvvJrlhoXlrrnnqbrms5vmiJblrozlhajmsqHmnInlhoXlrrnjgIInLFxuXHRcdFx0dmFsdWU6ICdhMScsXG5cdFx0XHR0b29sdGlwOlxuXHRcdFx0XHQn5p2h55uu55qE5YaF5a6556y857uf77yM5oiW55Sa6Iez5qC55pys5rKh5pyJ5o+Q5Y+K5p2h55uu5Li75L2T77yM5L2/5p2h55uu5LiN6IO955So5Lul5Yy65YiG5YW25LuW5LqL54mp77yb5oiW5p2h55uu5Y+q5YyF5ous5aSW6YOo6ZO+5o6l44CB5Y+C6KeB44CB5Y+C6ICD5p2l5rqQ44CB5YiG57G744CB5qih5p2/77yM6ICM5rKh5pyJ5paH5a2X5o+P6L+w44CC5raI5q2n5LmJ6aG144CB6YeN5a6a5ZCR6aG15LiN6YCC55So5q2k5p2h44CC6K+35rOo5oSP5pyJ5Lqb55So5oi35Y+v6IO95Lya5aSa5qyh5L+d5a2Y77yM6Iul5q2k57G76aG16Z2i55qE5pyA5ZCO5LiA5qyh57yW6L6R5pe26Ze06LaF6L+HMjTlsI/ml7bvvIzliJnlj6/mj5Dor7flv6vpgJ/liKDpmaTjgIInLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICdBMu+8muS4juWFtuS7luadoeebruaIluWFtuWOhuWPsueJiOacrOmHjeWkje+8jOS4lOS4jemAguWQiOS9nOS4uuWFtumHjeWumuWQkeOAgicsXG5cdFx0XHR2YWx1ZTogJ2EyJyxcblx0XHRcdHRvb2x0aXA6XG5cdFx0XHRcdCfmnaHnm67liJvlu7rml7bnmoTlhoXlrrnvvIzkuI7lhbbku5bnjrDmnInmnaHnm67vvIjmiJblhbbljoblj7LniYjmnKzvvInlhoXlrrnlrozlhajnm7jlkIzmiJbpnZ7luLjnm7jkvLzvvIzkuJTlkI3np7DkuI3pgILlkIjkvZzkuLrlkI7ogIXnmoTph43lrprlkJHjgILkuI3ljIXmi6zmi4bliIbjgIHlkIjlubbjgIHph43nu4TlkI7kuqfnlJ/nmoTmnaHnm67jgILlpoLmnInnlpHomZHvvIzlj6/ovazkuqTliKDpmaTorqjorrrjgILoi6XlkI7liJvlu7rnmoTmnaHnm67lkI3np7Dlj6/kvZzkuLrph43lrprlkJHvvIzlj6/nm7TmjqXmlLnkuLrph43lrprlkJHvvJvoi6XlhYjliJvlu7rnmoTmnaHnm67lrpzkvZzkuLrlkI7liJvlu7rmnaHnm67nmoTph43lrprlkJHvvIzor7fmj5Dor7fnp7vliqjor7fmsYLjgIInLFxuXHRcdFx0c3ViZ3JvdXA6IHtcblx0XHRcdFx0bmFtZTogJ2EyX3BhZ2VuYW1lJyxcblx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0bGFiZWw6ICfnjrDmnInmnaHnm67lkI3vvJonLFxuXHRcdFx0XHR0b29sdGlwOiAn5LiN6Ieq5Yqo5Yqg5LiK6ZO+5o6l77yM6Iul6ZyA6KaB6K+36Ieq6KGM5Yqg5LiKW1tdXeOAgicsXG5cdFx0XHRcdHNpemU6IDYwLFxuXHRcdFx0fSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiAnQTPvvJrpnZ7njrDku6PmsYnor63miJbnv7vor5Hmi5nliqPnmoTmnaHnm64nLFxuXHRcdFx0dmFsdWU6ICdhMycsXG5cdFx0XHR0b29sdGlwOlxuXHRcdFx0XHQn5p2h55uu5YaF5a6557ud5aSn6YOo5YiG6Z2e546w5Luj5rGJ6K+t77yM5YyF5ous5pyq57+76K+R55qE5aSW6K+t44CB5pa56KiA5Y+K5paH6KiA5paH77yb5oiW57+76K+R6LSo6YeP5L2O5LiL77yM5Lul6Iez5LqO6Zq+5Lul55CG6Kej5oiW5Ye6546w6L6D5aSa6ZSZ6K+v44CCJyxcblx0XHR9LFxuXHRdO1xuXHRUd2lua2xlLnNwZWVkeS5jYXRlZ29yeUxpc3QgPSBbXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICdPMu+8muepuuWIhuexu+OAgicsXG5cdFx0XHR2YWx1ZTogJ28yJyxcblx0XHRcdHRvb2x0aXA6ICfmsqHmnInmlLblvZXku7vkvZXpobXpnaLjgIHmlofku7bjgIHlrZDliIbnsbvnmoTliIbnsbvjgIJDYXRlZ29yeTror7fli7/liKDpmaTnmoTliIbnsbvkuK3nmoTliIbnsbvkuI3pgILnlKjjgIInLFxuXHRcdH0sXG5cdF07XG5cdFR3aW5rbGUuc3BlZWR5LmRyYWZ0TGlzdCA9IFtcblx0XHR7XG5cdFx0XHRsYWJlbDogJ08z77ya5bqf5byD6I2J56i/44CCJyxcblx0XHRcdHZhbHVlOiAnbzMnLFxuXHRcdFx0dG9vbHRpcDogJ+iNieeov+WQjeWtl+epuumXtOWGheWFreS4quaciOWGheaXoOe8lui+keeahOmhtemdouOAgicsXG5cdFx0fSxcblx0XTtcblx0VHdpbmtsZS5zcGVlZHkudXNlckxpc3QgPSBbXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICdPMe+8mueUqOaIt+ivt+axguWIoOmZpOiHquW3seeahOeUqOaIt+mhteOAgicsXG5cdFx0XHR2YWx1ZTogJ28xJyxcblx0XHRcdHRvb2x0aXA6ICfnrqHnkIblkZjpnIDmn6XnnIvnvJbovpHljoblj7LvvIznoa7orqTor6XpobXpnaLkuI3mmK/ku47lhbbku5blkI3lrZfnqbrpl7Tnp7vliqjogIzmnaXjgIInLFxuXHRcdH0sXG5cdF07XG5cdFR3aW5rbGUuc3BlZWR5LmdlbmVyYWxMaXN0ID0gW1xuXHRcdHtcblx0XHRcdGxhYmVsOiAnRzHvvJrmmI7mmL7ov53lj43ms5Xlvovms5Xop4TmiJbov53og4zlhazluo/oia/kv5fnmoTpobXpnaInLFxuXHRcdFx0dmFsdWU6ICdnMScsXG5cdFx0XHR0b29sdGlwOlxuXHRcdFx0XHQn5piO5pi+6L+d5Y+N5pyN5Yqh5Zmo5omA5Zyo5Zyw55qE5rOV5b6L5rOV6KeE5Y+K5pyJ5YWz6KeE5a6a77yM5oiW56qB56C056S+5Lya5YWs5bqP6Imv5L+X5bqV57q/77yM5oyJ54Wn5Lit5Y2O5Lq65rCR5YWx5ZKM5Zu95LqS6IGU572R566h55CG6KeE5a6a5bqU5LqI5Yig6Zmk55qE6aG16Z2i44CCJyxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiAnRzLvvJrmsqHmnInlrp7pmYXlhoXlrrnnmoTpobXpnaInLFxuXHRcdFx0dmFsdWU6ICdnMicsXG5cdFx0XHR0b29sdGlwOlxuXHRcdFx0XHQn5LuF5YyF5ous5peg5oSP5LmJ5a2X56ym5Liy6ICM5rKh5pyJ5a6e6ZmF5YaF5a6555qE6aG16Z2i44CC55Sx55So5oi35pys5Lq65Yib5bu655qE55So5oi36aG144CB55So5oi36K6o6K666aG177yM5Y+K5LiT5Li65rWL6K+V5o+Q5L6b55qE5rKZ55uS77yM5LiN6YCC55So5q2k5YeG5YiZ44CCJyxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiAnRzPvvJrnuq/nsrnnoLTlnY8nLFxuXHRcdFx0dmFsdWU6ICdnMycsXG5cdFx0XHR0b29sdGlwOlxuXHRcdFx0XHQn5YyF5ous5L2G5LiN6ZmQ5LqO5piO5pi+55qE5oG25L2c5Ymn44CB6ZSZ6K+v5L+h5oGv44CB5Lq66Lqr5pS75Ye7562J77yM5Lul5Y+K5riF55CG56e75Yqo56C05Z2P5pe255WZ5LiL55qE6YeN5a6a5ZCR44CC6Iul5pS25Yiw5oiW5Y+R546w5Lil6YeN55qE5Lq66Lqr5pS75Ye75LiO6K+L5q+B77yM566h55CG5ZGY5Y+K5YW25LuW55So5oi35bqU6YCa55+l55uR552j5ZGY6L+b6KGM55uR552j6ZqQ6JeP44CCJyxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiAnRzTvvJrph43mlrDliJvlu7rlt7LooqvliKDpmaTnmoTpobXpnaInLFxuXHRcdFx0dmFsdWU6ICdnNCcsXG5cdFx0XHR0b29sdGlwOlxuXHRcdFx0XHQn6Iul546w5pyJ6aG16Z2i5LiO5pu+5Zyo5Yig6Zmk6K6o6K6677yI5ZCr6aG16Z2i5a2Y5bqf6K6o6K6644CB5paH5Lu25a2Y5bqf6K6o6K665ZKM5L615p2D5a6h5qC477yM5LiN5ZCr5b+r6YCf5Yig6Zmk77yJ5Lit6KKr5Yig6Zmk5YaF5a6555u45ZCM5oiW6Z2e5bi455u45Ly877yM5LiU546w5pyJ5YaF5a655LuN54S26YCC55So5Yig6Zmk6K6o6K665Lit55qE57uT6K6677yM5peg6K665qCH6aKY5piv5ZCm55u45ZCM77yM6YO96YCC55So5pys5qCH5YeG44CC6Iul546w5pyJ6aG16Z2i5qCH6aKY5LiO5bey5Yig54mI5pys5LiN5LiA6Ie077yM5YiZ5o+Q6K+36YCf5Yig6ICF5bqU5LiA5bm25rOo5piO5bey5Yig54mI5pys55qE6aG16Z2i5ZCN77yb6Iul6K+l6aG16Z2i5LmL5YmN6KKr5b+r6YCf5Yig6Zmk77yM6K+35Lul55u45ZCM55CG55Sx6YeN5paw5o+Q6K+36YCf5Yig44CC6Iul546w5pyJ5YaF5a655LiN6YCC55So5Yig6Zmk6K6o6K665Lit55qE57uT6K6677yM5bqU6YeN5paw5o+Q5Ye65Yig6Zmk6K6o6K6644CCJyxcblx0XHRcdHN1Ymdyb3VwOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnZzRfcGFnZW5hbWUnLFxuXHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0bGFiZWw6ICflt7LliKDniYjmraTpobXpnaLlkI3vvJonLFxuXHRcdFx0XHRcdHNpemU6IDYwLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHRcdGhpZGVTdWJncm91cFdoZW5NdWx0aXBsZTogdHJ1ZSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiAnRzXvvJrlm6DmioDmnK/ljp/lm6DliKDpmaTpobXpnaInLFxuXHRcdFx0dmFsdWU6ICdnNScsXG5cdFx0XHR0b29sdGlwOlxuXHRcdFx0XHQn5YyF5ous5Lul5LiL5oOF5b2i77ya5Zug56e75Yqo6K+35rGC6ICM5Yig6Zmk6aG16Z2i77yb5Lul6KaG55uW5Yig6Zmk6YeN5a6a5ZCR77yb5Yig6Zmk5peg55So55qETWVkaWFXaWtp6aG16Z2i77yM5Y+K5YW25LuW5oqA5pyv5Zui6Zif5oiW55WM6Z2i566h55CG5ZGY6K6k5Li65pyJ5b+F6KaB5omn6KGM55qE5b+r6YCf5Yig6Zmk5oOF5b2i44CCJyxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiAnRzbvvJrljp/kvZzogIXmj5Dor7fliKDpmaTmiJbmuIXnqbrpobXpnaLvvIzkuJTpobXpnaLljp/kvZzogIXku4XmnInkuIDkuronLFxuXHRcdFx0dmFsdWU6ICdnNicsXG5cdFx0XHR0b29sdGlwOlxuXHRcdFx0XHQn6aG16Z2i5Y6f5L2c6ICF5oyB5ZCI55CG55CG55Sx5o+Q5Ye655qE5b+r6YCf5Yig6Zmk77yb5oiW6aG16Z2i5Y6f5L2c6ICF77yI5a6e6ZmF6LSh54yu6ICF77yJ5riF56m66aG16Z2i77yM5YW25LuW55So5oi35o+Q5Lqk55qE5b+r6YCf5Yig6Zmk44CC6aG16Z2i5Y6f5L2c6ICF77yI5a6e6ZmF6LSh54yu6ICF77yJ5LuF5LiA5Lq65pe25ruh6Laz5pys5YeG5YiZ44CC6Iul6aG16Z2i5a6e6ZmF6LSh54yu6ICF5aSa5LqO5LiA5Lq677yM6K+35oyB5ZCI55CG55CG55Sx5o+Q5Lqk5Yig6Zmk6K6o6K6644CC5ZCO5LiA5oOF5b2i5LiN5YyF5ous55So5oi36aG144CB55So5oi36K6o6K666aG177yM5LiU5bqU5Zyo6aG16Z2i5pyA5ZCO5LiA5qyh57yW6L6RNuWwj+aXtuWQjuaPkOWHuuOAguiiq+WvvOWFpeeahOmhtemdou+8jOWvvOWFpeiAheinhuS4uuWOn+S9nOiAheOAgicsXG5cdFx0XHRzdWJncm91cDoge1xuXHRcdFx0XHRuYW1lOiAnZzZfcmF0aW9uYWxlJyxcblx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0bGFiZWw6ICfliKDpmaTljp/lm6DvvJonLFxuXHRcdFx0XHRzaXplOiA2MCxcblx0XHRcdH0sXG5cdFx0XHRoaWRlU3ViZ3JvdXBXaGVuU3lzb3A6IHRydWUsXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogJ0c377ya5piO5pi+55qE5bm/5ZGK5a6j5LygJyxcblx0XHRcdHZhbHVlOiAnZzcnLFxuXHRcdFx0dG9vbHRpcDpcblx0XHRcdFx0J+W6lOeUqOS6juaYjuaYvueahOW5v+WRiuWuo+S8oO+8jOaIluWPquacieebuOWFs+S6uueJqeOAgee7hOe7h+etieS6i+eJqeiBlOezu+aWueazle+8iOWMheaLrOS9huS4jemZkOS6jueUteivneOAgeWcsOWdgOOAgeeUteWtkOmCrueuseOAgeWNs+aXtumAmuiur+i9r+S7tuiBlOezu+aWueW8j++8iOWmglFR5Y+344CB5b6u5L+h5Y+377yJ44CB56S+5Lqk5aqS5L2T6ZO+5o6l77yJ44CC6Iul5a6j5Lyg6K+t5rCU5LiN5piO5pi+77yM5bu66K6u6L2s5Lqk5Yig6Zmk6K6o6K6644CCJyxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiAnRzjvvJrmnKrliJfmmI7lj6/pnaDmnaXmupDkuJTor63osIPotJ/pnaLnmoTnlJ/ogIXkvKDorrAnLFxuXHRcdFx0dmFsdWU6ICdnOCcsXG5cdFx0XHR0b29sdGlwOiAn5pys5oOF5Ya15LiL5pyJ55qE6aG16Z2i5Lil6YeN5L6154qv5LuW5Lq65ZCN6KqJ5p2D77yM5pyJ5pe25Y+v6IO95L6154qv6ZqQ56eB5p2D77yM5Y+v6IO96ZyA6KaB5o+Q6K+355uR552j44CCJyxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiAnRznvvJrlraTnq4vpobXpnaInLFxuXHRcdFx0dmFsdWU6ICdnOScsXG5cdFx0XHR0b29sdGlwOlxuXHRcdFx0XHQn5YyF5ous5Lul5LiL5Yeg56eN57G75Z6L77yaMS7msqHmnInlr7nlupTmlofku7bnmoTmlofku7bpobXpnaLvvJsyLuayoeacieWvueW6lOavjemhtemdoueahOWtkOmhtemdou+8iOeUqOaIt+mhteWtkOmhtemdoumZpOWklu+8ie+8mzMu5oyH5ZCR5LiN5a2Y5Zyo6aG16Z2i55qE6YeN5a6a5ZCR77ybNC7msqHmnInlr7nlupTlhoXlrrnpobXpnaLnmoTorqjorrrpobXvvIjorqjorrrpobXlrZjmoaPjgIHnlKjmiLforqjorrrpobXvvIzku6Xlj4rlnKjkuLvpobXpnaLmjILmnIl7e0NTRCBQbGFjZWhvbGRlcn195qih5p2/55qE6K6o6K666aG16Zmk5aSW77yJ77ybNS7kuI3lrZjlnKjms6jlhoznlKjmiLfnmoTnlKjmiLfpobXlj4rnlKjmiLfpobXlrZDpobXpnaLvvIjpmo/nlKjmiLfmm7TlkI3kuqfnlJ/nmoTnlKjmiLfpobXph43lrprlkJHpmaTlpJbvvInjgILor7flnKjliKDpmaTml7bms6jmhI/mnInml6DlsIblhoXlrrnnp7voh7Pku5blpITnmoTlv4XopoHjgIInLFxuXHRcdH0sXG5cdF07XG5cdFR3aW5rbGUuc3BlZWR5LnJlZGlyZWN0TGlzdCA9IFtcblx0XHR7XG5cdFx0XHRsYWJlbDogJ1Ix77ya5LiN6IO95Y+R5oyl5a6e6ZmF5L2c55So55qE6YeN5a6a5ZCR44CCJyxcblx0XHRcdHZhbHVlOiAncjEnLFxuXHRcdFx0dG9vbHRpcDpcblx0XHRcdFx0J+WMheaLrOS7peS4i+aDheWGte+8mjEu5oyH5ZCR5pys6Lqr5oiW5b6q546v55qE6YeN5a6a5ZCR77yM5aaCQeKGkkLihpJD4oaS4oCm4oCm4oaSQeaIlkHihpJB77yI57mB566A6YeN5a6a5ZCR5LiN6YCC55So5q2k6aG577yJ77ybMi7moLzlvI/plJnor6/nmoTph43lrprlkJHvvIzljIXmi6zmoIfpopjku4XkuLrnuYHkvZPjgIHnuYHnroDmt7fnlKjjgIHmtojmrafkuYnkvb/nlKjnmoTmi6zlvKfmiJbnqbrmoLzplJnor6/jgIHpl7TpmpTlj7fkvb/nlKjplJnor6/vvIjlm6DnsbvmjqjnroDljJblrZfmnKrmlLblvZXoh7PjgIrpgJrnlKjop4TojIPmsYnlrZfooajjgIvlr7zoh7TnmoTnuYHnroDmt7fmnYLmg4XlvaLvvIzmiJbns7vnu5/ml6Dms5Xoh6rliqjov5vooYznuYHnroDlpITnkIbnmoTmg4XlvaLvvIzliJnkuI3pgILnlKjvvInjgILoi6Xph43lrprlkJHpobXpnaLmoIfpopjvvIzkuI7lkIjkuY7lkb3lkI3luLjop4TnmoTnm67moIfpobXpnaLmoIfpopjkuYvpl7TvvIzku4XlrZjlnKjnuYHnroDlrZfkvZPnmoTljLrliKvvvIzogIzkuI3lrZjlnKjor43or63nlKjms5XljLrliKvvvIzliJnkuI3kv53nlZnor6Xph43lrprlkJHjgILlm6Dns7vnu5/ml6Dms5Xoh6rliqjnuYHnroDovazmjaLogIzlv4Xpobvkv53nlZnnmoTph43lrprlkJHpobXpnaLpmaTlpJbjgILlr7nkuo7lhbbku5bmnKrliJflh7rnmoTmg4XlhrXvvIzoi6XnlKjmiLforqTkuLror6Xph43lrprlkJHml6Dms5Xlj5HmjKXlrp7pmYXkvZznlKjvvIzkuJTkvp3mja7luLjor4bmsqHmnInku7vkvZXkuonorq7vvIzlj6/lh63lkIjnkIbnkIbnlLHmj5Dor7fpgJ/liKDvvIznlLHnrqHnkIblkZjliKTmlq3jgILmjIflkJHkuI3lrZjlnKjpobXpnaLnmoTph43lrprlkJHvvIzpgILnlKhHNeWHhuWImeOAgicsXG5cdFx0XHRzdWJncm91cDoge1xuXHRcdFx0XHRuYW1lOiAncjFfdHlwZScsXG5cdFx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0XHRsYWJlbDogJ+mAgueUqOexu+Wei++8micsXG5cdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ+ivt+mAieaLqScsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJycsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ+aMh+WQkeacrOi6q+aIluW+queOr+eahOmHjeWumuWQkScsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJ+aMh+WQkeacrOi6q+aIluW+queOr+eahOmHjeWumuWQkeOAgicsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ+agh+mimOe5geeugOa3t+eUqCcsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJ+agh+mimOe5geeugOa3t+eUqOOAgicsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ+a2iOatp+S5ieS9v+eUqOeahOaLrOWPt+aIluepuuagvOmUmeivrycsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJ+a2iOatp+S5ieS9v+eUqOeahOaLrOWPt+aIluepuuagvOmUmeivr+OAgicsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ+mXtOmalOWPt+S9v+eUqOmUmeivrycsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJ+mXtOmalOWPt+S9v+eUqOmUmeivr+OAgicsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ+WFtuS7lueQhueUse+8iOivt+WLvumAieS4iuaWueKAnOW6lOeUqOWkmuS4queQhueUseKAne+8jOW5tuWhq+WGmeiHquWumuS5ieeQhueUse+8iScsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJycsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSxcblx0XHRcdH0sXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogJ1Iy77ya5ZCN56ew5LiO5a+85ZCR55uu5qCH5Luj6KGo5LqL54mp5LiN5LiA6Ie05oiW5LiN5a6M5YWo5LiA6Ie055qE6YeN5a6a5ZCR44CCJyxcblx0XHRcdHZhbHVlOiAncjInLFxuXHRcdFx0dG9vbHRpcDpcblx0XHRcdFx0J+WMheaLrOS9huS4jemZkOS6juS7peS4i+aDheWGte+8mjEu55Sx5Lu75L2V6Z2e5p2h55uu6aG16Z2i77yI6Zmk55So5oi36aG177yJ5a+85ZCR5p2h55uu6aG155qE6YeN5a6a5ZCR77yM5Lul5Y+K55Sx5p2h55uu6aG15a+85ZCR5Lu75L2V6Z2e5p2h55uu6aG16Z2i55qE6YeN5a6a5ZCR44CCMi7mmI7mmL7nrJTor6/nmoTph43lrprlkJHvvIzlpoLlh7rnjrDkuI3luLjop4HnmoTplJnliKvlrZfnrYnjgILvvIjliKvnp7Dph43lrprlkJHkuI3pgILnlKjmraTpobnjgILoi6XlkKvplJnliKvlrZfmiJbmnInnrJTor6/nmoTph43lrprlkJHkvb/nlKjpopHnjofpq5jvvIzmraTnsbvph43lrprlkJHmnInliqnkuo7luK7liqnnlKjmiLflr7vmib7liLDmraPnoa7nmoTpobXpnaLvvIzkuI3pgILnlKjmraTmoIflh4bjgILmnInkuonorq7nmoTmraTnsbvph43lrprlkJHlrpzmj5DkuqTliKDpmaTorqjorrrjgILvvIkzLuaYjuaYvuS4juWvvOWQkeebruagh+aJgOa2teeblueahOS4u+mimOaXoOWFs++8jOaIluavlOWvvOWQkeebruagh+aJgOa2teeblueahOS4u+mimOabtOW5v+azm+eahOmHjeWumuWQkeOAgu+8iOiLpeS4jeaYjuaYvu+8jOWPr+aUueS4uuaPkOS6pOWIoOmZpOiuqOiuuuOAgu+8iScsXG5cdFx0XHRzdWJncm91cDoge1xuXHRcdFx0XHRuYW1lOiAncjJfdHlwZScsXG5cdFx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0XHRsYWJlbDogJ+mAgueUqOexu+Wei++8micsXG5cdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ+ivt+mAieaLqScsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJycsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ+eUsemdnuadoeebrumhtemdou+8iOmZpOeUqOaIt+mhte+8ieWvvOWQkeadoeebrumhteeahOmHjeWumuWQkScsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJ+eUsemdnuadoeebrumhtemdou+8iOmZpOeUqOaIt+mhte+8ieWvvOWQkeadoeebrumhteeahOmHjeWumuWQkeOAgicsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ+eUseadoeebrumhteWvvOWQkemdnuadoeebrumhtemdoueahOmHjeWumuWQkScsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJ+eUseadoeebrumhteWvvOWQkeS7u+S9lemdnuadoeebrumhtemdoueahOmHjeWumuWQkeOAgicsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ+aYjuaYvueslOivr+eahOmHjeWumuWQkScsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJ+aYjuaYvueslOivr+eahOmHjeWumuWQkeOAgicsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ+S4juWvvOWQkeebruagh+aXoOWFs+aIluavlOWFtuiMg+WbtOabtOW5v+azm+eahOmHjeWumuWQkScsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJ+S4juWvvOWQkeebruagh+aXoOWFs+aIluavlOWFtuiMg+WbtOabtOW5v+azm+eahOmHjeWumuWQkeOAgicsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ+WFtuS7lueQhueUse+8iOivt+WLvumAieS4iuaWueKAnOW6lOeUqOWkmuS4queQhueUseKAne+8jOW5tuWhq+WGmeiHquWumuS5ieeQhueUse+8iScsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJycsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSxcblx0XHRcdH0sXG5cdFx0fSxcblx0XTtcblx0VHdpbmtsZS5zcGVlZHkubm9ybWFsaXplSGFzaCA9IHtcblx0XHRyZWFzb246ICdkYicsXG5cdFx0bXVsdGlwbGU6ICdtdWx0aXBsZScsXG5cdFx0J211bHRpcGxlLWZpbmlzaCc6ICdtdWx0aXBsZS1maW5pc2gnLFxuXHRcdGcxOiAnZzEnLFxuXHRcdGcyOiAnZzInLFxuXHRcdGczOiAnZzMnLFxuXHRcdGc0OiAnZzQnLFxuXHRcdGc1OiAnZzUnLFxuXHRcdGc2OiAnZzYnLFxuXHRcdGc3OiAnZzcnLFxuXHRcdGc4OiAnZzgnLFxuXHRcdGc5OiAnZzknLFxuXHRcdGExOiAnYTEnLFxuXHRcdGEyOiAnYTInLFxuXHRcdGEzOiAnYTMnLFxuXHRcdHIxOiAncjEnLFxuXHRcdHIyOiAncjInLFxuXHRcdGYxOiAnZjEnLFxuXHRcdGYyOiAnZjInLFxuXHRcdGYzOiAnZjMnLFxuXHRcdGY0OiAnZjQnLFxuXHRcdGY1OiAnZjUnLFxuXHRcdG8xOiAnbzEnLFxuXHRcdG8yOiAnbzInLFxuXHRcdG8zOiAnbzMnLFxuXHR9O1xuXHRUd2lua2xlLnNwZWVkeS5jYWxsYmFja3MgPSB7XG5cdFx0Z2V0VGVtcGxhdGVDb2RlQW5kUGFyYW1zOiAocGFyYW1zKSA9PiB7XG5cdFx0XHRsZXQgY29kZTtcblx0XHRcdGxldCBwYXJhbWV0ZXJzO1xuXHRcdFx0bGV0IGk7XG5cdFx0XHRpZiAocGFyYW1zLm5vcm1hbGl6ZWRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0Y29kZSA9ICd7e2RlbGV0ZSc7XG5cdFx0XHRcdHBhcmFtcy51dHBhcmFtcyA9IHt9O1xuXHRcdFx0XHRmb3IgKGNvbnN0IFtpbmRleCwgbm9ybV0gb2YgcGFyYW1zLm5vcm1hbGl6ZWRzLmVudHJpZXMoKSkge1xuXHRcdFx0XHRcdGlmIChub3JtICE9PSAnZGInKSB7XG5cdFx0XHRcdFx0XHRjb2RlICs9IGB8JHtub3JtLnRvVXBwZXJDYXNlKCl9YDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cGFyYW1ldGVycyA9IHBhcmFtcy50ZW1wbGF0ZVBhcmFtc1tpbmRleF0gfHwgW107XG5cdFx0XHRcdFx0Zm9yIChjb25zdCBpXyBpbiBwYXJhbWV0ZXJzKSB7XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIHBhcmFtZXRlcnNbaV9dID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdFx0XHRjb2RlICs9IGB8JHtwYXJhbWV0ZXJzW2lfXX1gO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwYXJhbXMudXRwYXJhbXMgPSB7XG5cdFx0XHRcdFx0XHQuLi5wYXJhbXMudXRwYXJhbXMsXG5cdFx0XHRcdFx0XHQuLi5Ud2lua2xlLnNwZWVkeS5nZXRVc2VyVGFsa1BhcmFtZXRlcnMobm9ybSwgcGFyYW1ldGVycyksXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb2RlICs9ICd9fSc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwYXJhbWV0ZXJzID0gcGFyYW1zLnRlbXBsYXRlUGFyYW1zWzBdIHx8IFtdO1xuXHRcdFx0XHRjb2RlID0gJ3t7ZGVsZXRlJztcblx0XHRcdFx0aWYgKHBhcmFtcy52YWx1ZXNbMF0gIT09ICdyZWFzb24nKSB7XG5cdFx0XHRcdFx0Y29kZSArPSBgfCR7cGFyYW1zLnZhbHVlc1swXX1gO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvciAoaSBpbiBwYXJhbWV0ZXJzKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBwYXJhbWV0ZXJzW2ldID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdFx0Y29kZSArPSBgfCR7cGFyYW1ldGVyc1tpXX1gO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRjb2RlICs9ICd9fSc7XG5cdFx0XHRcdHBhcmFtcy51dHBhcmFtcyA9IFR3aW5rbGUuc3BlZWR5LmdldFVzZXJUYWxrUGFyYW1ldGVycyhwYXJhbXMubm9ybWFsaXplZHNbMF0sIHBhcmFtZXRlcnMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIFtjb2RlLCBwYXJhbXMudXRwYXJhbXNdO1xuXHRcdH0sXG5cdFx0cGFyc2VXaWtpdGV4dDogKHRpdGxlLCB3aWtpdGV4dCwgY2FsbGJhY2spID0+IHtcblx0XHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0XHRhY3Rpb246ICdwYXJzZScsXG5cdFx0XHRcdHByb3A6ICd0ZXh0Jyxcblx0XHRcdFx0cHN0OiAndHJ1ZScsXG5cdFx0XHRcdHRleHQ6IHdpa2l0ZXh0LFxuXHRcdFx0XHRjb250ZW50bW9kZWw6ICd3aWtpdGV4dCcsXG5cdFx0XHRcdHRpdGxlLFxuXHRcdFx0fTtcblx0XHRcdGNvbnN0IHN0YXR1c0luZGljYXRvciA9IG5ldyBNb3JlYml0cy5zdGF0dXMod2luZG93LndnVUxTKCfmnoTpgKDliKDpmaTnkIbnlLEnLCAn5qeL6YCg5Yiq6Zmk55CG55SxJykpO1xuXHRcdFx0Y29uc3QgYXBpID0gbmV3IE1vcmViaXRzLndpa2kuYXBpKFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+ino+aekOWIoOmZpOaooeadvycsICfop6PmnpDliKrpmaTmqKHmnb8nKSxcblx0XHRcdFx0cXVlcnksXG5cdFx0XHRcdChhcGlPYmopID0+IHtcblx0XHRcdFx0XHRjb25zdCByZWFzb24gPSBkZWNvZGVVUklDb21wb25lbnQoXG5cdFx0XHRcdFx0XHQkKGFwaU9iai5nZXRYTUwoKS5xdWVyeVNlbGVjdG9yKCd0ZXh0JykuY2hpbGROb2Rlc1swXS5ub2RlVmFsdWUpXG5cdFx0XHRcdFx0XHRcdC5maW5kKCcjZGVsZXRlLXJlYXNvbicpXG5cdFx0XHRcdFx0XHRcdC50ZXh0KClcblx0XHRcdFx0XHRcdFx0LnJlcGxhY2UoL1xcKy9nLCAnICcpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRpZiAocmVhc29uKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXNJbmRpY2F0b3IuaW5mbygn5a6M5oiQJyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHN0YXR1c0luZGljYXRvci53YXJuKHdpbmRvdy53Z1VMUygn5pyq6IO95LuO5Yig6Zmk5qih5p2/55Sf5oiQ5Yig6Zmk55CG55SxJywgJ+acquiDveW+nuWIqumZpOaooeadv+eUn+aIkOWIqumZpOeQhueUsScpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2FsbGJhY2socmVhc29uKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0c3RhdHVzSW5kaWNhdG9yXG5cdFx0XHQpO1xuXHRcdFx0YXBpLnBvc3QoKTtcblx0XHR9LFxuXHRcdHN5c29wOiB7XG5cdFx0XHRtYWluOiAocGFyYW1zKSA9PiB7XG5cdFx0XHRcdGxldCByZWFzb247XG5cdFx0XHRcdGlmICghcGFyYW1zLm5vcm1hbGl6ZWRzLmxlbmd0aCAmJiBwYXJhbXMubm9ybWFsaXplZHNbMF0gPT09ICdkYicpIHtcblx0XHRcdFx0XHRyZWFzb24gPSBwcm9tcHQod2luZG93LndnVUxTKCfovpPlhaXliKDpmaTnkIbnlLHvvJonLCAn6Ly45YWl5Yiq6Zmk55CG55Sx77yaJyksICcnKTtcblx0XHRcdFx0XHRUd2lua2xlLnNwZWVkeS5jYWxsYmFja3Muc3lzb3AuZGVsZXRlUGFnZShyZWFzb24sIHBhcmFtcyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3QgW2NvZGVdID0gVHdpbmtsZS5zcGVlZHkuY2FsbGJhY2tzLmdldFRlbXBsYXRlQ29kZUFuZFBhcmFtcyhwYXJhbXMpO1xuXHRcdFx0XHRcdFR3aW5rbGUuc3BlZWR5LmNhbGxiYWNrcy5wYXJzZVdpa2l0ZXh0KG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSwgY29kZSwgKGRlbGV0ZVJlYXNvbikgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKHBhcmFtcy5wcm9tcHRGb3JTdW1tYXJ5KSB7XG5cdFx0XHRcdFx0XHRcdGRlbGV0ZVJlYXNvbiA9IHByb21wdChcblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0XHQn6L6T5YWl5Yig6Zmk55CG55Sx77yM5oiW5Y2V5Ye756Gu5a6a5Lul5o6l5Y+X6Ieq5Yqo55Sf5oiQ55qE77yaJyxcblx0XHRcdFx0XHRcdFx0XHRcdCfovLjlhaXliKrpmaTnkIbnlLHvvIzmiJbpu57mk4rnorrlrprku6XmjqXlj5foh6rli5XnlJ/miJDnmoTvvJonXG5cdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRkZWxldGVSZWFzb25cblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFR3aW5rbGUuc3BlZWR5LmNhbGxiYWNrcy5zeXNvcC5kZWxldGVQYWdlKGRlbGV0ZVJlYXNvbiwgcGFyYW1zKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGV0ZVBhZ2U6IChyZWFzb24sIHBhcmFtcykgPT4ge1xuXHRcdFx0XHRjb25zdCB0aGlzcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHRcdFx0bXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5Yig6Zmk6aG16Z2iJywgJ+WIqumZpOmggemdoicpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGlmIChyZWFzb24gPT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gTW9yZWJpdHMuc3RhdHVzLmVycm9yKFxuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfor6Lpl67nkIbnlLEnLCAn6Kmi5ZWP55CG55SxJyksXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+eUqOaIt+WPlua2iOaTjeS9nOOAgicsICfkvb/nlKjogIXlj5bmtojmk43kvZzjgIInKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIXJlYXNvbiB8fCAhcmVhc29uLnRyaW0oKSkge1xuXHRcdFx0XHRcdHJldHVybiBNb3JlYml0cy5zdGF0dXMuZXJyb3IoXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+ivoumXrueQhueUsScsICfoqaLllY/nkIbnlLEnKSxcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5L2g5LiN57uZ5oiR55CG55Sx4oCm5oiR5bCx4oCm5LiN566h5LqG4oCmJywgJ+S9oOS4jee1puaIkeeQhueUseKApuaIkeWwseKApuS4jeeuoeS6huKApicpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBkZWxldGVNYWluID0gKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXNwYWdlLnNldEVkaXRTdW1tYXJ5KHJlYXNvbik7XG5cdFx0XHRcdFx0dGhpc3BhZ2Uuc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0XHRcdHRoaXNwYWdlLnNldFdhdGNobGlzdChwYXJhbXMud2F0Y2gpO1xuXHRcdFx0XHRcdHRoaXNwYWdlLmRlbGV0ZVBhZ2UoKCkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpc3BhZ2UuZ2V0U3RhdHVzRWxlbWVudCgpLmluZm8oJ+WujOaIkCcpO1xuXHRcdFx0XHRcdFx0VHdpbmtsZS5zcGVlZHkuY2FsbGJhY2tzLnN5c29wLmRlbGV0ZVRhbGsocGFyYW1zKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fTtcblx0XHRcdFx0Ly8gbG9vayB1cCBpbml0aWFsIGNvbnRyaWJ1dG9yLiBJZiBwcm9tcHRpbmcgdXNlciBmb3IgZGVsZXRpb24gcmVhc29uLCBqdXN0IGRpc3BsYXkgYSBsaW5rLlxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugb3BlbiB0aGUgdGFsayBwYWdlIGRpcmVjdGx5XG5cdFx0XHRcdGlmIChwYXJhbXMub3BlblVzZXJUYWxrKSB7XG5cdFx0XHRcdFx0dGhpc3BhZ2Uuc2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKHBhcmFtcyk7XG5cdFx0XHRcdFx0dGhpc3BhZ2UubG9va3VwQ3JlYXRpb24oKCkgPT4ge1xuXHRcdFx0XHRcdFx0VHdpbmtsZS5zcGVlZHkuY2FsbGJhY2tzLnN5c29wLm9wZW5Vc2VyVGFsa1BhZ2UodGhpc3BhZ2UpO1xuXHRcdFx0XHRcdFx0ZGVsZXRlTWFpbigpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlbGV0ZU1haW4oKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGV0ZVRhbGs6IChwYXJhbXMpID0+IHtcblx0XHRcdFx0Ly8gZGVsZXRlIHRhbGsgcGFnZVxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cGFyYW1zLmRlbGV0ZVRhbGtQYWdlICYmXG5cdFx0XHRcdFx0cGFyYW1zLm5vcm1hbGl6ZWQgIT09ICdvMScgJiZcblx0XHRcdFx0XHQhZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NhLXRhbGsnKS5jbGFzc0xpc3QuY29udGFpbnMoJ25ldycpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGNvbnN0IHRhbGtwYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRcdGAke1xuXHRcdFx0XHRcdFx0XHRtdy5jb25maWcuZ2V0KCd3Z0Zvcm1hdHRlZE5hbWVzcGFjZXMnKVttdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpICsgMV1cblx0XHRcdFx0XHRcdH06JHttdy5jb25maWcuZ2V0KCd3Z1RpdGxlJyl9YCxcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5Yig6Zmk6K6o6K666aG1JywgJ+WIqumZpOiojuirlumggScpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR0YWxrcGFnZS5zZXRFZGl0U3VtbWFyeShcblx0XHRcdFx0XHRcdGBbW0xJQjpDU0QjRzl8RzldXTog5a2k56uL6aG16Z2i77ya5bey5Yig6Zmk6aG16Z2i4oCcJHtNb3JlYml0cy5wYWdlTmFtZU5vcm194oCd55qE6K6o6K666aG1YFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0dGFsa3BhZ2Uuc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0XHRcdHRhbGtwYWdlLmRlbGV0ZVBhZ2UoKTtcblx0XHRcdFx0XHQvLyB0aGlzIGlzIHVnbHksIGJ1dCBiZWNhdXNlIG9mIHRoZSBhcmNoaXRlY3R1cmUgb2Ygd2lraS5hcGksIGl0IGlzIG5lZWRlZFxuXHRcdFx0XHRcdC8vIChvdGhlcndpc2Ugc3VjY2Vzcy9mYWlsdXJlIG1lc3NhZ2VzIGZvciB0aGUgcHJldmlvdXMgYWN0aW9uIHdvdWxkIGJlIHN1cHByZXNzZWQpXG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0XHRUd2lua2xlLnNwZWVkeS5jYWxsYmFja3Muc3lzb3AuZGVsZXRlUmVkaXJlY3RzKHBhcmFtcyk7XG5cdFx0XHRcdFx0fSwgMTgwMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0VHdpbmtsZS5zcGVlZHkuY2FsbGJhY2tzLnN5c29wLmRlbGV0ZVJlZGlyZWN0cyhwYXJhbXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZXRlUmVkaXJlY3RzOiAocGFyYW1zKSA9PiB7XG5cdFx0XHRcdC8vIGRlbGV0ZSByZWRpcmVjdHNcblx0XHRcdFx0aWYgKHBhcmFtcy5kZWxldGVSZWRpcmVjdHMpIHtcblx0XHRcdFx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdFx0XHRcdGFjdGlvbjogJ3F1ZXJ5Jyxcblx0XHRcdFx0XHRcdHRpdGxlczogbXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLFxuXHRcdFx0XHRcdFx0cHJvcDogJ3JlZGlyZWN0cycsXG5cdFx0XHRcdFx0XHRyZGxpbWl0OiA1MDAwLCAvLyA1MDAgaXMgbWF4IGZvciBub3JtYWwgdXNlcnMsIDUwMDAgZm9yIGJvdHMgYW5kIHN5c29wc1xuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRjb25zdCB5c2FyY2hpdmVzX2FwaSA9IG5ldyBNb3JlYml0cy53aWtpLmFwaShcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn6I635Y+W6YeN5a6a5ZCR5YiX6KGo4oCmJywgJ+WPluW+l+mHjeaWsOWwjuWQkeWIl+ihqOKApicpLFxuXHRcdFx0XHRcdFx0cXVlcnksXG5cdFx0XHRcdFx0XHRUd2lua2xlLnNwZWVkeS5jYWxsYmFja3Muc3lzb3AuZGVsZXRlUmVkaXJlY3RzTWFpbixcblx0XHRcdFx0XHRcdG5ldyBNb3JlYml0cy5zdGF0dXMod2luZG93LndnVUxTKCfliKDpmaTph43lrprlkJEnLCAn5Yiq6Zmk6YeN5paw5bCO5ZCRJykpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR5c2FyY2hpdmVzX2FwaS5wYXJhbXMgPSBwYXJhbXM7XG5cdFx0XHRcdFx0eXNhcmNoaXZlc19hcGkucG9zdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIHByb21wdCBmb3IgcHJvdGVjdCBvbiBHN1xuXHRcdFx0XHRsZXQgJGxpbms7XG5cdFx0XHRcdGxldCAkYmlndGV4dDtcblx0XHRcdFx0aWYgKHBhcmFtcy5ub3JtYWxpemVkID09PSAnZzcnKSB7XG5cdFx0XHRcdFx0JGxpbmsgPSAkKCc8YT4nKVxuXHRcdFx0XHRcdFx0LmF0dHIoJ2hyZWYnLCAnIycpXG5cdFx0XHRcdFx0XHQudGV4dCh3aW5kb3cud2dVTFMoJ+WNleWHu+i/memHjOaWveihjOS/neaKpCcsICfpu57mk4rpgJnoo6Hmlr3ooYzkv53orbcnKSlcblx0XHRcdFx0XHRcdC5jc3Moe1xuXHRcdFx0XHRcdFx0XHQnZm9udC1zaXplJzogJzEyNSUnLFxuXHRcdFx0XHRcdFx0XHQnZm9udC13ZWlnaHQnOiAnYm9sZCcsXG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0Lm9uKCdjbGljaycsICgpID0+IHtcblx0XHRcdFx0XHRcdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQucmVkaXJlY3QgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRUd2lua2xlLnNwZWVkeS5kaWFsb2cuY2xvc2UoKTtcblx0XHRcdFx0XHRcdFx0bXcuY29uZmlnLnNldCgnd2dBcnRpY2xlSWQnLCAwKTtcblx0XHRcdFx0XHRcdFx0VHdpbmtsZS5wcm90ZWN0LmNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHQkYmlndGV4dCA9ICQoJzxzcGFuPicpXG5cdFx0XHRcdFx0XHQuY3NzKHtcblx0XHRcdFx0XHRcdFx0J2ZvbnQtc2l6ZSc6ICcxMjUlJyxcblx0XHRcdFx0XHRcdFx0J2ZvbnQtd2VpZ2h0JzogJ2JvbGQnLFxuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdC50ZXh0KHdpbmRvdy53Z1VMUygn55m957q45L+d5oqk6K+l6aG1JywgJ+eZvee0meS/neitt+ipsumggScpKTtcblx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5mbygkYmlndGV4dFswXSwgJGxpbmtbMF0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIHByb21vdGUgVW5saW5rIHRvb2xcblx0XHRcdFx0aWYgKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPT09IDYpIHtcblx0XHRcdFx0XHQkbGluayA9ICQoJzxhPicpXG5cdFx0XHRcdFx0XHQuYXR0cignaHJlZicsICcjJylcblx0XHRcdFx0XHRcdC50ZXh0KHdpbmRvdy53Z1VMUygn5Y2V5Ye76L+Z6YeM5YmN5b6A5Y+W5raI6ZO+5YWl5bel5YW3JywgJ+m7nuaTiumAmeijoeWJjeW+gOWPlua2iOmAo+WFpeW3peWFtycpKVxuXHRcdFx0XHRcdFx0LmNzcyh7XG5cdFx0XHRcdFx0XHRcdCdmb250LXdlaWdodCc6ICdib2xkJyxcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHQub24oJ2NsaWNrJywgKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5yZWRpcmVjdCA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdFR3aW5rbGUuc3BlZWR5LmRpYWxvZy5jbG9zZSgpO1xuXHRcdFx0XHRcdFx0XHRUd2lua2xlLnVubGluay5jYWxsYmFjayhcblx0XHRcdFx0XHRcdFx0XHRgJHt3aW5kb3cud2dVTFMoJ+WPlua2iOWvueW3suWIoOmZpOaWh+S7tiAnLCAn5Y+W5raI5bCN5bey5Yiq6Zmk5qqU5qGIICcpICsgTW9yZWJpdHMucGFnZU5hbWVOb3JtfSDnmoTkvb/nlKhgXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHQkYmlndGV4dCA9ICQoJzxzcGFuPicpXG5cdFx0XHRcdFx0XHQuY3NzKHtcblx0XHRcdFx0XHRcdFx0J2ZvbnQtd2VpZ2h0JzogJ2JvbGQnLFxuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdC50ZXh0KHdpbmRvdy53Z1VMUygn5Y+W5raI5a+55bey5Yig6Zmk5paH5Lu255qE5L2/55SoJywgJ+WPlua2iOWwjeW3suWIqumZpOaqlOahiOeahOS9v+eUqCcpKTtcblx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5mbygkYmlndGV4dFswXSwgJGxpbmtbMF0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCRsaW5rID0gJCgnPGE+Jylcblx0XHRcdFx0XHRcdC5hdHRyKCdocmVmJywgJyMnKVxuXHRcdFx0XHRcdFx0LnRleHQod2luZG93LndnVUxTKCfljZXlh7vov5nph4zliY3lvoDlj5bmtojpk77lhaXlt6XlhbcnLCAn6bue5pOK6YCZ6KOh5YmN5b6A5Y+W5raI6YCj5YWl5bel5YW3JykpXG5cdFx0XHRcdFx0XHQuY3NzKHtcblx0XHRcdFx0XHRcdFx0J2ZvbnQtd2VpZ2h0JzogJ2JvbGQnLFxuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdC5vbignY2xpY2snLCAoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLnJlZGlyZWN0ID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0VHdpbmtsZS5zcGVlZHkuZGlhbG9nLmNsb3NlKCk7XG5cdFx0XHRcdFx0XHRcdFR3aW5rbGUudW5saW5rLmNhbGxiYWNrKFxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5Y+W5raI5a+55bey5Yig6Zmk6aG16Z2iICcsICflj5bmtojlsI3lt7LliKrpmaTpoIHpnaIgJykgK1xuXHRcdFx0XHRcdFx0XHRcdFx0TW9yZWJpdHMucGFnZU5hbWVOb3JtICtcblx0XHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygnIOeahOmTvuaOpScsICcg55qE6YCj57WQJylcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdCRiaWd0ZXh0ID0gJCgnPHNwYW4+JykudGV4dCh3aW5kb3cud2dVTFMoJ+WPlua2iOWvueW3suWIoOmZpOmhtemdoueahOmTvuaOpScsICflj5bmtojlsI3lt7LliKrpmaTpoIHpnaLnmoTpgKPntZAnKSkuY3NzKHtcblx0XHRcdFx0XHRcdCdmb250LXdlaWdodCc6ICdib2xkJyxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5mbygkYmlndGV4dFswXSwgJGxpbmtbMF0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCRsaW5rID0gJCgnPGE+Jylcblx0XHRcdFx0XHQuYXR0cignaHJlZicsIG13LnV0aWwuZ2V0VXJsKCdTcGVjaWFsOlJhbmRvbUluQ2F0ZWdvcnkv5b+r6YCf5Yig6Zmk5YCZ6YCJJykpXG5cdFx0XHRcdFx0LnRleHQod2luZG93LndnVUxTKCfljZXlh7vliY3lvoDkuIvkuIDkuKrlv6vpgJ/liKDpmaTlgJnpgIknLCAn6bue5pOK5YmN5b6A5LiL5LiA5YCL5b+r6YCf5Yiq6Zmk5YCZ6YG4JykpO1xuXHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5mbygn5bel5YW3JywgJGxpbmtbMF0pO1xuXHRcdFx0fSxcblx0XHRcdG9wZW5Vc2VyVGFsa1BhZ2U6IChwYWdlb2JqKSA9PiB7XG5cdFx0XHRcdHBhZ2VvYmouZ2V0U3RhdHVzRWxlbWVudCgpLnVubGluaygpOyAvLyBkb24ndCBuZWVkIGl0IGFueW1vcmVcblx0XHRcdFx0Y29uc3QgdXNlciA9IHBhZ2VvYmouZ2V0Q3JlYXRvcigpO1xuXHRcdFx0XHRjb25zdCBwYXJhbXMgPSBwYWdlb2JqLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdFx0XHRhY3Rpb246ICdlZGl0Jyxcblx0XHRcdFx0XHRwcmV2aWV3OiAneWVzJyxcblx0XHRcdFx0XHR2YW5hcnRpY2xlOiBNb3JlYml0cy5wYWdlTmFtZU5vcm0sXG5cdFx0XHRcdH07XG5cdFx0XHRcdGNvbnN0IHRpdGxlID0gYFVzZXIgdGFsazoke3VzZXJ9YDtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHBhcmFtcy5ub3JtYWxpemVkID09PSAnZGInIHx8XG5cdFx0XHRcdFx0VHdpbmtsZS5nZXRQcmVmKCdwcm9tcHRGb3JTcGVlZHlEZWxldGlvblN1bW1hcnknKS5pbmNsdWRlcyhwYXJhbXMubm9ybWFsaXplZClcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Ly8gcHJvdmlkZSBhIGxpbmsgdG8gdGhlIHVzZXIgdGFsayBwYWdlXG5cdFx0XHRcdFx0Y29uc3QgJGxpbmsgPSAkKCc8YT4nKVxuXHRcdFx0XHRcdFx0LmF0dHIoe1xuXHRcdFx0XHRcdFx0XHRocmVmOiBtdy51dGlsLmdldFVybCh0aXRsZSwgcXVlcnkpLFxuXHRcdFx0XHRcdFx0XHR0YXJnZXQ6ICdfYmxhbmsnLFxuXHRcdFx0XHRcdFx0XHRyZWw6ICdub29wZW5lciBub3JlZmVycmVyJyxcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHQuY3NzKHtcblx0XHRcdFx0XHRcdFx0J2ZvbnQtc2l6ZSc6ICcxMjUlJyxcblx0XHRcdFx0XHRcdFx0J2ZvbnQtd2VpZ2h0JzogJ2JvbGQnLFxuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdC50ZXh0KHdpbmRvdy53Z1VMUygn54K55q2k5omT5byAVXNlciB0YWxrOicsICfpu57mraTmiZPplotVc2VyIHRhbGs6JykgKyB1c2VyKTtcblx0XHRcdFx0XHRjb25zdCAkYmlndGV4dCA9ICQoJzxzcGFuPicpXG5cdFx0XHRcdFx0XHQuY3NzKHtcblx0XHRcdFx0XHRcdFx0J2ZvbnQtc2l6ZSc6ICcxMjUlJyxcblx0XHRcdFx0XHRcdFx0J2ZvbnQtd2VpZ2h0JzogJ2JvbGQnLFxuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdC50ZXh0KHdpbmRvdy53Z1VMUygn6YCa55+l6aG16Z2i5Yib5bu66ICFJywgJ+mAmuefpemggemdouW7uueri+iAhScpKTtcblx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5mbygkYmlndGV4dFswXSwgJGxpbmtbMF0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIG9wZW4gdGhlIGluaXRpYWwgY29udHJpYnV0b3IncyB0YWxrIHBhZ2Vcblx0XHRcdFx0XHRjb25zdCBzdGF0dXNJbmRpY2F0b3IgPSBuZXcgTW9yZWJpdHMuc3RhdHVzKFxuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfmiZPlvIDnlKjmiLcnLCAn5omT6ZaL5L2/55So6ICFJykgK1xuXHRcdFx0XHRcdFx0XHR1c2VyICtcblx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfnmoTorqjorrrpobXnvJbovpHnqpflj6MnLCAn55qE6KiO6KuW6aCB57eo6Lyv6KaW56qXJyksXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+aJk+W8gOS4reKApicsICfmiZPplovkuK3igKYnKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0c3dpdGNoIChUd2lua2xlLmdldFByZWYoJ3VzZXJUYWxrUGFnZU1vZGUnKSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAndGFiJzpcblx0XHRcdFx0XHRcdFx0d2luZG93Lm9wZW4obXcudXRpbC5nZXRVcmwodGl0bGUsIHF1ZXJ5KSwgJ19ibGFuaycsICdub29wZW5lcixub3JlZmVycmVyJyk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnYmxhbmsnOlxuXHRcdFx0XHRcdFx0XHR3aW5kb3cub3Blbihcblx0XHRcdFx0XHRcdFx0XHRtdy51dGlsLmdldFVybCh0aXRsZSwgcXVlcnkpLFxuXHRcdFx0XHRcdFx0XHRcdCdfYmxhbmsnLFxuXHRcdFx0XHRcdFx0XHRcdCdub29wZW5lcixub3JlZmVycmVyLGxvY2F0aW9uPW5vLHRvb2xiYXI9bm8sc3RhdHVzPW5vLGRpcmVjdG9yaWVzPW5vLHNjcm9sbGJhcnM9eWVzLHdpZHRoPTEyMDAsaGVpZ2h0PTgwMCdcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHQvKiBjYXNlICd3aW5kb3cnOiAqL1xuXHRcdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0d2luZG93Lm9wZW4oXG5cdFx0XHRcdFx0XHRcdFx0bXcudXRpbC5nZXRVcmwodGl0bGUsIHF1ZXJ5KSxcblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cubmFtZSA9PT0gJ3R3aW5rbGV3YXJud2luZG93JyA/ICdfYmxhbmsnIDogJ3R3aW5rbGV3YXJud2luZG93Jyxcblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cubmFtZSA9PT0gJ3R3aW5rbGV3YXJud2luZG93J1xuXHRcdFx0XHRcdFx0XHRcdFx0PyAnbm9vcGVuZXIsbm9yZWZlcnJlciwnXG5cdFx0XHRcdFx0XHRcdFx0XHQ6ICcnICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQnbG9jYXRpb249bm8sdG9vbGJhcj1ubyxzdGF0dXM9bm8sZGlyZWN0b3JpZXM9bm8sc2Nyb2xsYmFycz15ZXMsd2lkdGg9MTIwMCxoZWlnaHQ9ODAwJ1xuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3RhdHVzSW5kaWNhdG9yLmluZm8oJ+WujOaIkCcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZXRlUmVkaXJlY3RzTWFpbjogKGFwaW9iaikgPT4ge1xuXHRcdFx0XHRjb25zdCB4bWxEb2MgPSBhcGlvYmouZ2V0WE1MKCk7XG5cdFx0XHRcdGNvbnN0ICRzbmFwc2hvdCA9ICQoeG1sRG9jKS5maW5kKCdyZWRpcmVjdHMgcmQnKTtcblx0XHRcdFx0Y29uc3QgdG90YWwgPSAkc25hcHNob3QubGVuZ3RoO1xuXHRcdFx0XHRjb25zdCBzdGF0dXNJbmRpY2F0b3IgPSBhcGlvYmouc3RhdGVsZW07XG5cdFx0XHRcdGlmICghdG90YWwpIHtcblx0XHRcdFx0XHRzdGF0dXNJbmRpY2F0b3IuaW5mbyh3aW5kb3cud2dVTFMoJ+acquWPkeeOsOmHjeWumuWQkScsICfmnKrnmbznj77ph43mlrDlsI7lkJEnKSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0YXR1c0luZGljYXRvci5zdGF0dXMoJzAlJyk7XG5cdFx0XHRcdGxldCBjdXJyZW50ID0gMDtcblx0XHRcdFx0Y29uc3Qgb25zdWNjZXNzID0gKGFwaW9iaklubmVyKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3Qgbm93ID0gYCR7TnVtYmVyLnBhcnNlSW50KCgxMDAgKiArK2N1cnJlbnQpIC8gdG90YWwsIDEwKX0lYDtcblx0XHRcdFx0XHRzdGF0dXNJbmRpY2F0b3IudXBkYXRlKG5vdyk7XG5cdFx0XHRcdFx0YXBpb2JqSW5uZXIuc3RhdGVsZW0udW5saW5rKCk7XG5cdFx0XHRcdFx0aWYgKGN1cnJlbnQgPj0gdG90YWwpIHtcblx0XHRcdFx0XHRcdHN0YXR1c0luZGljYXRvci5pbmZvKGAke25vd33vvIjlrozmiJDvvIlgKTtcblx0XHRcdFx0XHRcdE1vcmViaXRzLndpa2kucmVtb3ZlQ2hlY2twb2ludCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdFx0TW9yZWJpdHMud2lraS5hZGRDaGVja3BvaW50KCk7XG5cdFx0XHRcdCRzbmFwc2hvdC5lYWNoKChfa2V5LCB2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHRpdGxlID0gJCh2YWx1ZSkuYXR0cigndGl0bGUnKTtcblx0XHRcdFx0XHRjb25zdCBwYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRcdHRpdGxlLFxuXHRcdFx0XHRcdFx0YCR7d2luZG93LndnVUxTKCfliKDpmaTph43lrprlkJEgXCInLCAn5Yiq6Zmk6YeN5paw5bCO5ZCRIFwiJykgKyB0aXRsZX1cImBcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHBhZ2Uuc2V0RWRpdFN1bW1hcnkoYFtbTElCOkNTRCNHOXxHOV1dOiDlraTnq4vpobXpnaLvvJrph43lrprlkJHliLDlt7LliKDpmaTpobXpnaLigJwke01vcmViaXRzLnBhZ2VOYW1lTm9ybX3igJ1gKTtcblx0XHRcdFx0XHRwYWdlLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdFx0XHRwYWdlLmRlbGV0ZVBhZ2Uob25zdWNjZXNzKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdH0sXG5cdFx0dXNlcjoge1xuXHRcdFx0bWFpbjogKHBhZ2VvYmopID0+IHtcblx0XHRcdFx0Y29uc3Qgc3RhdGVsZW0gPSBwYWdlb2JqLmdldFN0YXR1c0VsZW1lbnQoKTtcblx0XHRcdFx0aWYgKCFwYWdlb2JqLmV4aXN0cygpKSB7XG5cdFx0XHRcdFx0c3RhdGVsZW0uZXJyb3Iod2luZG93LndnVUxTKCfpobXpnaLkuI3lrZjlnKjvvIzlj6/og73lt7LooqvliKDpmaQnLCAn6aCB6Z2i5LiN5a2Y5Zyo77yM5Y+v6IO95bey6KKr5Yiq6ZmkJykpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsZXQgdGV4dCA9IHBhZ2VvYmouZ2V0UGFnZVRleHQoKTtcblx0XHRcdFx0Y29uc3QgcGFyYW1zID0gcGFnZW9iai5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHRcdFx0c3RhdGVsZW0uc3RhdHVzKHdpbmRvdy53Z1VMUygn5qOA5p+l6aG16Z2i5bey5pyJ5qCH6K6w4oCmJywgJ+aqouafpemggemdouW3suacieaomeiomOKApicpKTtcblx0XHRcdFx0Ly8gY2hlY2sgZm9yIGV4aXN0aW5nIGRlbGV0aW9uIHRhZ3Ncblx0XHRcdFx0Y29uc3QgdGV4dE5vU2QgPSB0ZXh0LnJlcGxhY2UoXG5cdFx0XHRcdFx0L1xce1xce1xccyooZGIoLVxcdyopP3xkfGRlbGV0ZXxkZWxldGViZWNhdXNlfHNwZWVkeXxjc2R86YCf5YiqfOmAn+WIoHzlv6vliKB85b+r5YiqKVxccyooXFx8KD86XFx7XFx7W157fV0qXFx9XFx9fFtee31dKSopP1xcfVxcfVxccyovZ2ksXG5cdFx0XHRcdFx0Jydcblx0XHRcdFx0KTtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHRleHQgIT09IHRleHROb1NkICYmXG5cdFx0XHRcdFx0IWNvbmZpcm0oXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdCflnKjpobXpnaLkuIrmib7liLDlv6vpgJ/liKDpmaTmqKHmnb/vvIzopoHnp7vpmaTlubbliqDlhaXmlrDnmoTlkJfvvJ8nLFxuXHRcdFx0XHRcdFx0XHQn5Zyo6aCB6Z2i5LiK5om+5Yiw5b+r6YCf5Yiq6Zmk5qih5p2/77yM6KaB56e76Zmk5Lim5Yqg5YWl5paw55qE5ZeO77yfJ1xuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0c3RhdGVsZW0uZXJyb3Iod2luZG93LndnVUxTKCflv6vpgJ/liKDpmaTmqKHmnb/lt7Looqvnva7kuo7pobXpnaLkuK3jgIInLCAn5b+r6YCf5Yiq6Zmk5qih5p2/5bey6KKr572u5pa86aCB6Z2i5Lit44CCJykpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0ZXh0ID0gdGV4dE5vU2Q7XG5cdFx0XHRcdGNvbnN0IGNvcHl2aW8gPSAvKD86XFx7XFx7XFxzKihjb3B5dmlvfOS+teadg3zkvrXmrIopW157fV0qP1xcfVxcfSkvaS5leGVjKHRleHQpO1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0Y29weXZpbyAmJlxuXHRcdFx0XHRcdCFjb25maXJtKFxuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHQn6JGX5L2c5p2D6aqM6K+B5qih5p2/5bey6KKr572u5LqO6aG16Z2i5Lit77yM5oKo5piv5ZCm5LuN5oOz5Yqg5YWl5LiA5Liq5b+r6YCf5Yig6Zmk5qih5p2/77yfJyxcblx0XHRcdFx0XHRcdFx0J+iRl+S9nOasiumpl+itieaooeadv+W3suiiq+e9ruaWvOmggemdouS4re+8jOaCqOaYr+WQpuS7jeaDs+WKoOWFpeS4gOWAi+W/q+mAn+WIqumZpOaooeadv++8nydcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHN0YXRlbGVtLmVycm9yKHdpbmRvdy53Z1VMUygn6aG16Z2i5Lit5bey5pyJ6JGX5L2c5p2D6aqM6K+B5qih5p2/44CCJywgJ+mggemdouS4reW3suacieiRl+S9nOasiumpl+itieaooeadv+OAgicpKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgeGZkID0gLyg/Olxce1xceyhbcnNhaWZ0Y212XWZkfG1kMXxwcm9wb3NlZCBkZWxldGlvbilbXnt9XSo/XFx9XFx9KS9pLmV4ZWModGV4dCk7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHR4ZmQgJiZcblx0XHRcdFx0XHQhY29uZmlybShcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5Yig6Zmk55u45YWz5qih5p2/e3snLCAn5Yiq6Zmk55u46Zec5qih5p2/e3snKSArXG5cdFx0XHRcdFx0XHRcdHhmZFsxXSArXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQnfX3lt7Looqvnva7kuo7pobXpnaLkuK3vvIzmgqjmmK/lkKbku43mg7PliqDlhaXkuIDkuKrlv6vpgJ/liKDpmaTmqKHmnb/vvJ8nLFxuXHRcdFx0XHRcdFx0XHRcdCd9feW3suiiq+e9ruaWvOmggemdouS4re+8jOaCqOaYr+WQpuS7jeaDs+WKoOWFpeS4gOWAi+W/q+mAn+WIqumZpOaooeadv++8nydcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0c3RhdGVsZW0uZXJyb3Iod2luZG93LndnVUxTKCfpobXpnaLlt7Looqvmj5DkuqToh7PlrZjlup/orqjorrrjgIInLCAn6aCB6Z2i5bey6KKr5o+Q5Lqk6Iez5a2Y5bui6KiO6KuW44CCJykpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBnaXZlbiB0aGUgcGFyYW1zLCBidWlsZHMgdGhlIHRlbXBsYXRlIGFuZCBhbHNvIGFkZHMgdGhlIHVzZXIgdGFsayBwYWdlIHBhcmFtZXRlcnMgdG8gdGhlIHBhcmFtcyB0aGF0IHdlcmUgcGFzc2VkIGluXG5cdFx0XHRcdC8vIHJldHVybnMgPT4gWzxzdHJpbmc+IHdpa2l0ZXh0LCA8b2JqZWN0PiB1dHBhcmFtc11cblx0XHRcdFx0Y29uc3QgYnVpbGREYXRhID0gVHdpbmtsZS5zcGVlZHkuY2FsbGJhY2tzLmdldFRlbXBsYXRlQ29kZUFuZFBhcmFtcyhwYXJhbXMpO1xuXHRcdFx0XHRsZXQgW2NvZGVdID0gYnVpbGREYXRhO1xuXHRcdFx0XHRbLCBwYXJhbXMudXRwYXJhbXNdID0gYnVpbGREYXRhO1xuXHRcdFx0XHRjb25zdCB0aGlzcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UobXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpKTtcblx0XHRcdFx0Ly8gcGF0cm9sIHRoZSBwYWdlLCBpZiByZWFjaGVkIGZyb20gU3BlY2lhbDpOZXdQYWdlc1xuXHRcdFx0XHRpZiAoVHdpbmtsZS5nZXRQcmVmKCdtYXJrU3BlZWR5UGFnZXNBc1BhdHJvbGxlZCcpKSB7XG5cdFx0XHRcdFx0dGhpc3BhZ2UucGF0cm9sKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gV3JhcCBTRCB0ZW1wbGF0ZSBpbiBub2luY2x1ZGUgdGFncyBpZiB3ZSBhcmUgaW4gdGVtcGxhdGUgc3BhY2UuXG5cdFx0XHRcdC8vIFdvbid0IHdvcmsgd2l0aCB1c2VyYm94ZXMgaW4gdXNlcnNwYWNlLCBvciBhbnkgb3RoZXIgdHJhbnNjbHVkZWQgcGFnZSBvdXRzaWRlIHRlbXBsYXRlIHNwYWNlXG5cdFx0XHRcdGlmIChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpID09PSAxMCkge1xuXHRcdFx0XHRcdC8vIFRlbXBsYXRlOlxuXHRcdFx0XHRcdGNvZGUgPSBgPG5vaW5jbHVkZT4ke2NvZGV9PC9ub2luY2x1ZGU+YDtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBSZW1vdmUgdGFncyB0aGF0IGJlY29tZSBzdXBlcmZsdW91cyB3aXRoIHRoaXMgYWN0aW9uXG5cdFx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoXG5cdFx0XHRcdFx0L1xce1xce1xccyooW05uXWV3IHVucmV2aWV3ZWQgYXJ0aWNsZXxbVXVdbnJldmlld2VkfFtVdV1zZXJzcGFjZSBkcmFmdClcXHMqKFxcfCg/Olxce1xce1tee31dKlxcfVxcfXxbXnt9XSkqKT9cXH1cXH1cXHMqL2csXG5cdFx0XHRcdFx0Jydcblx0XHRcdFx0KTtcblx0XHRcdFx0aWYgKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPT09IDYpIHtcblx0XHRcdFx0XHQvLyByZW1vdmUgXCJtb3ZlIHRvIENvbW1vbnNcIiB0YWcgLSBkZWxldGlvbi10YWdnZWQgZmlsZXMgY2Fubm90IGJlIG1vdmVkIHRvIENvbW1vbnNcblx0XHRcdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKFxuXHRcdFx0XHRcdFx0L1xce1xceyhtdGN8KGNvcHkgfG1vdmUgKT90byA/KHNoYXJlfGNvbW1vbnMpfG1vdmUgdG8gKHlzYXJjaGl2ZXMgc2hhcmV8d2lraW1lZGlhIGNvbW1vbnMpfGNvcHkgdG8gKHlzYXJjaGl2ZXMgc2hhcmV8eXNhcmNoaXZlcyBjb21tb25zKSlbXn1dKlxcfVxcfS9naSxcblx0XHRcdFx0XHRcdCcnXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocGFyYW1zLnJlcXVlc3RzYWx0KSB7XG5cdFx0XHRcdFx0Y29kZSA9IGB7e3NhbHR9fVxcbiR7Y29kZX1gO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIEdlbmVyYXRlIGVkaXQgc3VtbWFyeSBmb3IgZWRpdFxuXHRcdFx0XHRsZXQgZWRpdHN1bW1hcnk7XG5cdFx0XHRcdGlmIChwYXJhbXMubm9ybWFsaXplZHMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdGVkaXRzdW1tYXJ5ID0gd2luZG93LndnVUxTKCfor7fmsYLlv6vpgJ/liKDpmaTvvIgnLCAn6KuL5rGC5b+r6YCf5Yiq6Zmk77yIJyk7XG5cdFx0XHRcdFx0Zm9yIChjb25zdCBub3JtIG9mIHBhcmFtcy5ub3JtYWxpemVkcykge1xuXHRcdFx0XHRcdFx0aWYgKG5vcm0gIT09ICdkYicpIHtcblx0XHRcdFx0XHRcdFx0ZWRpdHN1bW1hcnkgKz0gYFtbTElCOkNTRCMke25vcm0udG9VcHBlckNhc2UoKX18Q1NEICR7bm9ybS50b1VwcGVyQ2FzZSgpfV1d44CBYDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWRpdHN1bW1hcnkgPSBlZGl0c3VtbWFyeS5zbGljZSgwLCBNYXRoLm1heCgwLCBlZGl0c3VtbWFyeS5sZW5ndGggLSAxKSk7IC8vIHJlbW92ZSB0cmFpbGluZyBjb21tYVxuXHRcdFx0XHRcdGVkaXRzdW1tYXJ5ICs9ICfvvIknO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHBhcmFtcy5ub3JtYWxpemVkc1swXSA9PT0gJ2RiJykge1xuXHRcdFx0XHRcdGVkaXRzdW1tYXJ5ID1cblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn6K+35rGCW1tMSUI6Q1NEfOW/q+mAn+WIoOmZpF1d77yaJywgJ+iri+axgltbTElCOkNTRHzlv6vpgJ/liKrpmaRdXe+8micpICtcblx0XHRcdFx0XHRcdHBhcmFtcy50ZW1wbGF0ZVBhcmFtc1swXVsnMSddO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVkaXRzdW1tYXJ5ID0gYCR7d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+ivt+axguW/q+mAn+WIoOmZpCcsXG5cdFx0XHRcdFx0XHQn6KuL5rGC5b+r6YCf5Yiq6ZmkJ1xuXHRcdFx0XHRcdCl977yIW1tMSUI6Q1NEIyR7cGFyYW1zLm5vcm1hbGl6ZWRzWzBdLnRvVXBwZXJDYXNlKCl9fENTRCAke3BhcmFtcy5ub3JtYWxpemVkc1swXS50b1VwcGVyQ2FzZSgpfV1d77yJYDtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBCbGFuayBhdHRhY2sgcGFnZXNcblx0XHRcdFx0aWYgKHBhcmFtcy5ibGFuaykge1xuXHRcdFx0XHRcdHRleHQgPSBjb2RlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIEluc2VydCB0YWcgYWZ0ZXIgc2hvcnQgZGVzY3JpcHRpb24gb3IgYW55IGhhdG5vdGVzXG5cdFx0XHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2l0ZXh0LnBhZ2UodGV4dCk7XG5cdFx0XHRcdFx0dGV4dCA9IHlzYXJjaGl2ZXNfcGFnZS5pbnNlcnRBZnRlclRlbXBsYXRlcyhgJHtjb2RlfVxcbmAsIFR3aW5rbGUuaGF0bm90ZVJlZ2V4KS5nZXRUZXh0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cGFnZW9iai5zZXRQYWdlVGV4dCh0ZXh0KTtcblx0XHRcdFx0cGFnZW9iai5zZXRFZGl0U3VtbWFyeShlZGl0c3VtbWFyeSk7XG5cdFx0XHRcdHBhZ2VvYmouc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0XHRwYWdlb2JqLnNldFdhdGNobGlzdChwYXJhbXMud2F0Y2gpO1xuXHRcdFx0XHRwYWdlb2JqLnNhdmUoVHdpbmtsZS5zcGVlZHkuY2FsbGJhY2tzLnVzZXIudGFnQ29tcGxldGUpO1xuXHRcdFx0fSxcblx0XHRcdHRhZ0NvbXBsZXRlOiAocGFnZW9iaikgPT4ge1xuXHRcdFx0XHRjb25zdCBwYXJhbXMgPSBwYWdlb2JqLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0XHQvLyBOb3RpZmljYXRpb24gdG8gZmlyc3QgY29udHJpYnV0b3Jcblx0XHRcdFx0aWYgKHBhcmFtcy51c2VydGFsaykge1xuXHRcdFx0XHRcdGNvbnN0IGNhbGxiYWNrID0gKHBhZ2VPYmopID0+IHtcblx0XHRcdFx0XHRcdGxldCBpbml0aWFsQ29udHJpYiA9IHBhZ2VPYmouZ2V0Q3JlYXRvcigpO1xuXHRcdFx0XHRcdFx0Ly8gZGlzYWxsb3cgd2FybmluZyB5b3Vyc2VsZlxuXHRcdFx0XHRcdFx0aWYgKGluaXRpYWxDb250cmliID09PSBtdy5jb25maWcuZ2V0KCd3Z1VzZXJOYW1lJykpIHtcblx0XHRcdFx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLndhcm4oXG5cdFx0XHRcdFx0XHRcdFx0YOaCqO+8iCR7aW5pdGlhbENvbnRyaWJ9JHt3aW5kb3cud2dVTFMoJ++8ieWIm+W7uuS6huivpemhte+8jOi3s+i/h+mAmuefpScsICfvvInlu7rnq4vkuoboqbLpoIHvvIzot7PpgY7pgJrnn6UnKX1gXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdGluaXRpYWxDb250cmliID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0Ly8gZG9uJ3Qgbm90aWZ5IHVzZXJzIHdoZW4gdGhlaXIgdXNlciB0YWxrIHBhZ2UgaXMgbm9taW5hdGVkXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0XHRcdFx0XHRpbml0aWFsQ29udHJpYiA9PT0gbXcuY29uZmlnLmdldCgnd2dUaXRsZScpICYmXG5cdFx0XHRcdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPT09IDNcblx0XHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMud2Fybihcblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0XHQn6YCa55+l6aG16Z2i5Yib5bu66ICF77ya55So5oi35Yib5bu65LqG6Ieq5bex55qE6K6o6K666aG1Jyxcblx0XHRcdFx0XHRcdFx0XHRcdCfpgJrnn6XpoIHpnaLlu7rnq4vogIXvvJrkvb/nlKjogIXlu7rnq4vkuoboh6rlt7HnmoToqI7oq5bpoIEnXG5cdFx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRpbml0aWFsQ29udHJpYiA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdC8vIHF1aWNrIGhhY2sgdG8gcHJldmVudCBleGNlc3NpdmUgdW53YW50ZWQgbm90aWZpY2F0aW9ucy4gU2hvdWxkIGFjdHVhbGx5IGJlIGNvbmZpZ3VyYWJsZSBvbiByZWNpcGllbnQgcGFnZS4uLlxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChpbml0aWFsQ29udHJpYiA9PT0gJ0EyMDkzMDY0LWJvdCcgJiYgcGFyYW1zLm5vcm1hbGl6ZWRzWzBdID09PSAnZzE1Jykge1xuXHRcdFx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMud2Fybihcblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0XHQn6YCa55+l6aG16Z2i5Yib5bu66ICF77ya55Sx5py65Zmo5Lq65Yib5bu677yM6Lez6L+H6YCa55+lJyxcblx0XHRcdFx0XHRcdFx0XHRcdCfpgJrnn6XpoIHpnaLlu7rnq4vogIXvvJrnlLHmqZ/lmajkurrlu7rnq4vvvIzot7PpgY7pgJrnn6UnXG5cdFx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRpbml0aWFsQ29udHJpYiA9IG51bGw7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb25zdCB0YWxrUGFnZU5hbWUgPSBgVXNlciB0YWxrOiR7aW5pdGlhbENvbnRyaWJ9YDtcblx0XHRcdFx0XHRcdFx0Y29uc3QgdXNlcnRhbGtwYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRcdFx0XHR0YWxrUGFnZU5hbWUsXG5cdFx0XHRcdFx0XHRcdFx0YCR7d2luZG93LndnVUxTKCfpgJrnn6XpobXpnaLliJvlu7rogIXvvIgnLCAn6YCa55+l6aCB6Z2i5bu656uL6ICF77yIJykgKyBpbml0aWFsQ29udHJpYn3vvIlgXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdGxldCBub3RpZnl0ZXh0O1xuXHRcdFx0XHRcdFx0XHRub3RpZnl0ZXh0ID0gJ1xcbnt7Jy5jb25jYXQoJ3N1YnN0OicsIGBkYi1ub3RpY2V8dGFyZ2V0PSR7TW9yZWJpdHMucGFnZU5hbWVOb3JtfWApO1xuXHRcdFx0XHRcdFx0XHRub3RpZnl0ZXh0ICs9IFwifG5vd2VsY29tZT15ZXMnfX0tLX5+XCIuY29uY2F0KCd+ficpO1xuXHRcdFx0XHRcdFx0XHRsZXQgZWRpdHN1bW1hcnkgPSAn6YCa55+l77yaJztcblx0XHRcdFx0XHRcdFx0aWYgKHBhcmFtcy5ub3JtYWxpemVkcy5pbmNsdWRlcygnZzMnKSkge1xuXHRcdFx0XHRcdFx0XHRcdGVkaXRzdW1tYXJ5ICs9ICfkuIDmlLvlh7vmgKfpobXpnaInO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdC8vIG5vIGFydGljbGUgbmFtZSBpbiBzdW1tYXJ5IGZvciBHMTAgZGVsZXRpb25zXG5cdFx0XHRcdFx0XHRcdFx0ZWRpdHN1bW1hcnkgKz0gYOmhtemdoltbJHtNb3JlYml0cy5wYWdlTmFtZU5vcm19XV1gO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGVkaXRzdW1tYXJ5ICs9ICflv6vpgJ/liKDpmaTmj5DlkI0nO1xuXHRcdFx0XHRcdFx0XHR1c2VydGFsa3BhZ2Uuc2V0QXBwZW5kVGV4dChub3RpZnl0ZXh0KTtcblx0XHRcdFx0XHRcdFx0dXNlcnRhbGtwYWdlLnNldEVkaXRTdW1tYXJ5KGVkaXRzdW1tYXJ5KTtcblx0XHRcdFx0XHRcdFx0dXNlcnRhbGtwYWdlLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdFx0XHRcdFx0dXNlcnRhbGtwYWdlLnNldENyZWF0ZU9wdGlvbigncmVjcmVhdGUnKTtcblx0XHRcdFx0XHRcdFx0dXNlcnRhbGtwYWdlLnNldEZvbGxvd1JlZGlyZWN0KHRydWUsIGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0dXNlcnRhbGtwYWdlLmFwcGVuZCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gYWRkIHRoaXMgbm9taW5hdGlvbiB0byB0aGUgdXNlcidzIHVzZXJzcGFjZSBsb2csIGlmIHRoZSB1c2VyIGhhcyBlbmFibGVkIGl0XG5cdFx0XHRcdFx0XHRpZiAocGFyYW1zLmxvZ25vbWluYXRpb24pIHtcblx0XHRcdFx0XHRcdFx0VHdpbmtsZS5zcGVlZHkuY2FsbGJhY2tzLnVzZXIuYWRkVG9Mb2cocGFyYW1zLCBpbml0aWFsQ29udHJpYik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRjb25zdCB0aGlzcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoTW9yZWJpdHMucGFnZU5hbWVOb3JtKTtcblx0XHRcdFx0XHR0aGlzcGFnZS5sb29rdXBDcmVhdGlvbihjYWxsYmFjayk7XG5cdFx0XHRcdFx0Ly8gb3IsIGlmIG5vdCBub3RpZnlpbmcsIGFkZCB0aGlzIG5vbWluYXRpb24gdG8gdGhlIHVzZXIncyB1c2Vyc3BhY2UgbG9nIHdpdGhvdXQgdGhlIGluaXRpYWwgY29udHJpYnV0b3IncyBuYW1lXG5cdFx0XHRcdH0gZWxzZSBpZiAocGFyYW1zLmxvZ25vbWluYXRpb24pIHtcblx0XHRcdFx0XHRUd2lua2xlLnNwZWVkeS5jYWxsYmFja3MudXNlci5hZGRUb0xvZyhwYXJhbXMsIG51bGwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Ly8gbm90ZTogdGhpcyBjb2RlIGlzIGFsc28gaW52b2tlZCBmcm9tIHR3aW5rbGVpbWFnZVxuXHRcdFx0Ly8gdGhlIHBhcmFtcyB1c2VkIGFyZTpcblx0XHRcdC8vICAgZm9yIENTRDogcGFyYW1zLnZhbHVlcywgcGFyYW1zLm5vcm1hbGl6ZWRzICAobm90ZTogbm9ybWFsaXplZHMgaXMgYW4gYXJyYXkpXG5cdFx0XHQvLyAgIGZvciBESTogcGFyYW1zLmZyb21ESSA9IHRydWUsIHBhcmFtcy50ZW1wbGF0ZW5hbWUsIHBhcmFtcy5ub3JtYWxpemVkICAobm90ZTogbm9ybWFsaXplZCBpcyBhIHN0cmluZylcblx0XHRcdGFkZFRvTG9nOiAocGFyYW1zLCBpbml0aWFsQ29udHJpYikgPT4ge1xuXHRcdFx0XHRjb25zdCB1c2wgPSBuZXcgTW9yZWJpdHMudXNlcnNwYWNlTG9nZ2VyKFR3aW5rbGUuZ2V0UHJlZignc3BlZWR5TG9nUGFnZU5hbWUnKSk7XG5cdFx0XHRcdHVzbC5pbml0aWFsVGV4dCA9IGDov5nmmK/or6XnlKjmiLfkvb/nlKhbW0g6VFd8VHdpbmtsZV1d55qE6YCf5Yig5qih5Z2X5YGa5Ye655qEW1tMSUI6Q1NEfOW/q+mAn+WIoOmZpF1d5o+Q5ZCN5YiX6KGo44CCXFxuXFxu6Iul5oKo5LiN5YaN5oOz5L+d55WZ5q2k5pel5b+X77yM6K+35ZyoW1ske1R3aW5rbGUuZ2V0UHJlZihcblx0XHRcdFx0XHQnY29uZmlnUGFnZSdcblx0XHRcdFx0KX185Y+C5pWw6K6+572uXV3kuK3lhbPmjonvvIzlubbkvb/nlKhbW0xJQjpDU0QjTzF8Q1NEIE8xXV3mj5DkuqTlv6vpgJ/liKDpmaTjgIIke1xuXHRcdFx0XHRcdE1vcmViaXRzLnVzZXJJc1N5c29wID8gJ1xcblxcbuatpOaXpeW/l+W5tuS4jeiusOW9leeUqFR3aW5rbGXnm7TmjqXmiafooYznmoTliKDpmaTjgIInIDogJydcblx0XHRcdFx0fWA7XG5cdFx0XHRcdGxldCBhcHBlbmRUZXh0ID0gYCMgW1s6JHtNb3JlYml0cy5wYWdlTmFtZU5vcm19XV3vvJpgO1xuXHRcdFx0XHRpZiAocGFyYW1zLmZyb21ESSkge1xuXHRcdFx0XHRcdGFwcGVuZFRleHQgKz0gYOWbvueJiFtbTElCOkNTRCMke3BhcmFtcy5ub3JtYWxpemVkLnRvVXBwZXJDYXNlKCl9fENTRCAke3BhcmFtcy5ub3JtYWxpemVkLnRvVXBwZXJDYXNlKCl9XV3vvIh7e3RsfCR7XG5cdFx0XHRcdFx0XHRwYXJhbXMudGVtcGxhdGVuYW1lXG5cdFx0XHRcdFx0fX1977yJYDtcblx0XHRcdFx0fSBlbHNlIGlmIChwYXJhbXMubm9ybWFsaXplZHMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdGFwcGVuZFRleHQgKz0gJ+WkmuS4queQhueUse+8iCc7XG5cdFx0XHRcdFx0Zm9yIChjb25zdCBub3JtIG9mIHBhcmFtcy5ub3JtYWxpemVkcykge1xuXHRcdFx0XHRcdFx0YXBwZW5kVGV4dCArPSBgW1tMSUI6Q1NEIyR7bm9ybS50b1VwcGVyQ2FzZSgpfXwke25vcm0udG9VcHBlckNhc2UoKX1dXeOAgWA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGFwcGVuZFRleHQgPSBhcHBlbmRUZXh0LnNsaWNlKDAsIE1hdGgubWF4KDAsIGFwcGVuZFRleHQubGVuZ3RoIC0gMSkpOyAvLyByZW1vdmUgdHJhaWxpbmcgY29tbWFcblx0XHRcdFx0XHRhcHBlbmRUZXh0ICs9ICfvvIknO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHBhcmFtcy5ub3JtYWxpemVkc1swXSA9PT0gJ2RiJykge1xuXHRcdFx0XHRcdGFwcGVuZFRleHQgKz0gJ+iHquWumuS5ieeQhueUsSc7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YXBwZW5kVGV4dCArPSBgW1tMSUI6Q1NEIyR7cGFyYW1zLm5vcm1hbGl6ZWRzWzBdLnRvVXBwZXJDYXNlKCl9fENTRCAke3BhcmFtcy5ub3JtYWxpemVkc1swXS50b1VwcGVyQ2FzZSgpfV1dYDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocGFyYW1zLnJlcXVlc3RzYWx0KSB7XG5cdFx0XHRcdFx0YXBwZW5kVGV4dCArPSB3aW5kb3cud2dVTFMoJ++8m+ivt+axgueZvee6uOS/neaKpCcsICfvvJvoq4vmsYLnmb3ntJnkv53orbcnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaW5pdGlhbENvbnRyaWIpIHtcblx0XHRcdFx0XHRhcHBlbmRUZXh0ICs9IGDvvJvpgJrnn6V7e3VzZXJ8JHtpbml0aWFsQ29udHJpYn19fWA7XG5cdFx0XHRcdH1cblx0XHRcdFx0YXBwZW5kVGV4dCArPSAnIH5+Jy5jb25jYXQoJ34nLCAnfn5cXG4nKTtcblx0XHRcdFx0dXNsLmNoYW5nZVRhZ3MgPSBUd2lua2xlLmNoYW5nZVRhZ3M7XG5cdFx0XHRcdHVzbC5sb2coXG5cdFx0XHRcdFx0YXBwZW5kVGV4dCxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+iusOW9leWvuVtbJywgJ+iomOmMhOWwjVtbJykgK1xuXHRcdFx0XHRcdFx0TW9yZWJpdHMucGFnZU5hbWVOb3JtICtcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygnXV3nmoTlv6vpgJ/liKDpmaTmj5DlkI0nLCAnXV3nmoTlv6vpgJ/liKrpmaTmj5DlkI0nKVxuXHRcdFx0XHQpO1xuXHRcdFx0fSxcblx0XHR9LFxuXHR9O1xuXHQvLyB2YWxpZGF0ZSBzdWJncm91cHMgaW4gdGhlIGZvcm0gcGFzc2VkIGludG8gdGhlIHNwZWVkeSBkZWxldGlvbiB0YWdcblx0VHdpbmtsZS5zcGVlZHkuZ2V0UGFyYW1ldGVycyA9IChmb3JtLCB2YWx1ZXMpID0+IHtcblx0XHRsZXQgcGFyYW1ldGVycyA9IFtdO1xuXHRcdGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG5cdFx0XHRjb25zdCBjdXJyZW50UGFyYW1zID0gW107XG5cdFx0XHRsZXQgcmVkaW1hZ2U7XG5cdFx0XHRzd2l0Y2ggKHZhbHVlKSB7XG5cdFx0XHRcdGNhc2UgJ3JlYXNvbic6XG5cdFx0XHRcdFx0aWYgKGZvcm1bJ2NzZC5yZWFzb25fMSddKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBkYnJhdGlvbmFsZSA9IGZvcm1bJ2NzZC5yZWFzb25fMSddLnZhbHVlO1xuXHRcdFx0XHRcdFx0aWYgKCFkYnJhdGlvbmFsZSB8fCAhZGJyYXRpb25hbGUudHJpbSgpKSB7XG5cdFx0XHRcdFx0XHRcdHZvaWQgbXcubm90aWZ5KHdpbmRvdy53Z1VMUygn6Ieq5a6a5LmJ55CG55Sx77ya6K+35oyH5a6a55CG55Sx44CCJywgJ+iHquiogueQhueUse+8muiri+aMh+WumueQhueUseOAgicpLCB7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVzcGVlZHknLFxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0cGFyYW1ldGVycyA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y3VycmVudFBhcmFtc1snMSddID0gZGJyYXRpb25hbGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdhMic6XG5cdFx0XHRcdFx0aWYgKGZvcm1bJ2NzZC5hMl9wYWdlbmFtZSddKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBvdGhlcnBhZ2UgPSBmb3JtWydjc2QuYTJfcGFnZW5hbWUnXS52YWx1ZTtcblx0XHRcdFx0XHRcdGlmICghb3RoZXJwYWdlIHx8ICFvdGhlcnBhZ2UudHJpbSgpKSB7XG5cdFx0XHRcdFx0XHRcdHZvaWQgbXcubm90aWZ5KFxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygnQ1NEIEEy77ya6K+35o+Q5L6b546w5pyJ5p2h55uu55qE5ZCN56ew44CCJywgJ0NTRCBBMu+8muiri+aPkOS+m+ePvuacieaineebrueahOWQjeeoseOAgicpLFxuXHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVzcGVlZHknLFxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0cGFyYW1ldGVycyA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y3VycmVudFBhcmFtcy5wYWdlbmFtZSA9IG90aGVycGFnZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2c0Jzpcblx0XHRcdFx0XHRpZiAoZm9ybVsnY3NkLmc0X3BhZ2VuYW1lJ10pIHtcblx0XHRcdFx0XHRcdGNvbnN0IHBhZ2VuYW1lID0gZm9ybVsnY3NkLmc0X3BhZ2VuYW1lJ10udmFsdWU7XG5cdFx0XHRcdFx0XHRpZiAoIXBhZ2VuYW1lIHx8ICFwYWdlbmFtZS50cmltKCkpIHtcblx0XHRcdFx0XHRcdFx0dm9pZCBtdy5ub3RpZnkod2luZG93LndnVUxTKCdDU0QgRzTvvJror7fmj5DkvpvpobXpnaLlkI3np7DjgIInLCAnQ1NEIEc077ya6KuL5o+Q5L6b6aCB6Z2i5ZCN56ix44CCJyksIHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0XHRcdFx0dGFnOiAndHdpbmtsZXNwZWVkeScsXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRwYXJhbWV0ZXJzID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFyYW1zLnBhZ2VuYW1lID0gcGFnZW5hbWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdmMic6XG5cdFx0XHRcdFx0aWYgKGZvcm1bJ2NzZC5mMl9maWxlbmFtZSddKSB7XG5cdFx0XHRcdFx0XHRyZWRpbWFnZSA9IGZvcm1bJ2NzZC5mMl9maWxlbmFtZSddLnZhbHVlO1xuXHRcdFx0XHRcdFx0aWYgKCFyZWRpbWFnZSB8fCAhcmVkaW1hZ2UudHJpbSgpKSB7XG5cdFx0XHRcdFx0XHRcdHZvaWQgbXcubm90aWZ5KFxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygnQ1NEIEYy77ya6K+35o+Q5L6b5Y+m5LiA5paH5Lu255qE5ZCN56ew44CCJywgJ0NTRCBGMu+8muiri+aPkOS+m+WPpuS4gOaqlOahiOeahOWQjeeoseOAgicpLFxuXHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVzcGVlZHknLFxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0cGFyYW1ldGVycyA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y3VycmVudFBhcmFtcy5maWxlbmFtZSA9IHJlZGltYWdlLnJlcGxhY2UoXG5cdFx0XHRcdFx0XHRcdG5ldyBSZWdFeHAoYF5cXFxccyoke01vcmViaXRzLm5hbWVzcGFjZVJlZ2V4KDYpfTpgLCAnaScpLFxuXHRcdFx0XHRcdFx0XHQnJ1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3IxJzpcblx0XHRcdFx0XHRpZiAoZm9ybVsnY3NkLnIxX3R5cGUnXSkge1xuXHRcdFx0XHRcdFx0Y29uc3QgcmVkaXJ0eXBlID0gZm9ybVsnY3NkLnIxX3R5cGUnXS52YWx1ZTtcblx0XHRcdFx0XHRcdGlmICghcmVkaXJ0eXBlKSB7XG5cdFx0XHRcdFx0XHRcdHZvaWQgbXcubm90aWZ5KHdpbmRvdy53Z1VMUygnQ1NEIFIx77ya6K+36YCJ5oup6YCC55So57G75Z6L44CCJywgJ0NTRCBSMe+8muiri+mBuOaTh+mBqeeUqOmhnuWIpeOAgicpLCB7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVzcGVlZHknLFxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0cGFyYW1ldGVycyA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y3VycmVudFBhcmFtc1snMSddID0gcmVkaXJ0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAncjInOlxuXHRcdFx0XHRcdGlmIChmb3JtWydjc2QucjJfdHlwZSddKSB7XG5cdFx0XHRcdFx0XHRjb25zdCByZWRpcnR5cGUgPSBmb3JtWydjc2QucjJfdHlwZSddLnZhbHVlO1xuXHRcdFx0XHRcdFx0aWYgKCFyZWRpcnR5cGUpIHtcblx0XHRcdFx0XHRcdFx0dm9pZCBtdy5ub3RpZnkod2luZG93LndnVUxTKCdDU0QgUjLvvJror7fpgInmi6npgILnlKjnsbvlnovjgIInLCAnQ1NEIFIy77ya6KuL6YG45pOH6YGp55So6aGe5Yil44CCJyksIHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0XHRcdFx0dGFnOiAndHdpbmtsZXNwZWVkeScsXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRwYXJhbWV0ZXJzID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFyYW1zWycxJ10gPSByZWRpcnR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0cGFyYW1ldGVyc1twYXJhbWV0ZXJzLmxlbmd0aF0gPSBjdXJyZW50UGFyYW1zO1xuXHRcdH1cblx0XHRyZXR1cm4gcGFyYW1ldGVycztcblx0fTtcblx0Ly8gRnVuY3Rpb24gZm9yIHByb2Nlc3NpbmcgdGFsayBwYWdlIG5vdGlmaWNhdGlvbiB0ZW1wbGF0ZSBwYXJhbWV0ZXJzXG5cdFR3aW5rbGUuc3BlZWR5LmdldFVzZXJUYWxrUGFyYW1ldGVycyA9IChub3JtYWxpemVkKSA9PiB7XG5cdFx0Y29uc3QgdXRwYXJhbXMgPSBbXTtcblx0XHRzd2l0Y2ggKG5vcm1hbGl6ZWQpIHtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRyZXR1cm4gdXRwYXJhbXM7XG5cdH07XG5cdFR3aW5rbGUuc3BlZWR5LnJlc29sdmVDc2RWYWx1ZXMgPSAoZSkgPT4ge1xuXHRcdGNvbnN0IHZhbHVlcyA9IChlLnRhcmdldC5mb3JtID8/IGUudGFyZ2V0KS5nZXRDaGVja2VkKCdjc2QnKTtcblx0XHRpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0dm9pZCBtdy5ub3RpZnkod2luZG93LndnVUxTKCfor7fpgInmi6nkuIDkuKrnkIbmja7vvIEnLCAn6KuL6YG45pOH5LiA5YCL55CG5pOa77yBJyksIHtcblx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHR0YWc6ICd0d2lua2xlc3BlZWR5Jyxcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdHJldHVybiB2YWx1ZXM7XG5cdH07XG5cdFR3aW5rbGUuc3BlZWR5LmNhbGxiYWNrLmV2YWx1YXRlU3lzb3AgPSAoZSkgPT4ge1xuXHRcdGNvbnN0IGZvcm0gPSBlLnRhcmdldC5mb3JtID8/IGUudGFyZ2V0O1xuXHRcdGlmIChlLnRhcmdldC50eXBlID09PSAnY2hlY2tib3gnIHx8IGUudGFyZ2V0LnR5cGUgPT09ICd0ZXh0JyB8fCBlLnRhcmdldC50eXBlID09PSAnc2VsZWN0Jykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCB7dGFnX29ubHl9ID0gZm9ybTtcblx0XHRpZiAodGFnX29ubHkgJiYgdGFnX29ubHkuY2hlY2tlZCkge1xuXHRcdFx0VHdpbmtsZS5zcGVlZHkuY2FsbGJhY2suZXZhbHVhdGVVc2VyKGUpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCB2YWx1ZXMgPSBUd2lua2xlLnNwZWVkeS5yZXNvbHZlQ3NkVmFsdWVzKGUpO1xuXHRcdGlmICghdmFsdWVzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnN0IG5vcm1hbGl6ZWRzID0gdmFsdWVzLm1hcCgodmFsdWUpID0+IHtcblx0XHRcdHJldHVybiBUd2lua2xlLnNwZWVkeS5ub3JtYWxpemVIYXNoW3ZhbHVlXTtcblx0XHR9KTtcblx0XHQvLyBhbmFseXNlIGVhY2ggY3JpdGVyaW9uIHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHdhdGNoIHRoZSBwYWdlLCBwcm9tcHQgZm9yIHN1bW1hcnksIG9yIG9wZW4gdXNlciB0YWxrIHBhZ2Vcblx0XHRsZXQgd2F0Y2hQYWdlO1xuXHRcdGxldCBwcm9tcHRGb3JTdW1tYXJ5O1xuXHRcdGZvciAoY29uc3Qgbm9ybSBvZiBub3JtYWxpemVkcykge1xuXHRcdFx0aWYgKFR3aW5rbGUuZ2V0UHJlZignd2F0Y2hTcGVlZHlQYWdlcycpLmluY2x1ZGVzKG5vcm0pKSB7XG5cdFx0XHRcdHdhdGNoUGFnZSA9IFR3aW5rbGUuZ2V0UHJlZignd2F0Y2hTcGVlZHlFeHBpcnknKTtcblx0XHRcdH1cblx0XHRcdGlmIChUd2lua2xlLmdldFByZWYoJ3Byb21wdEZvclNwZWVkeURlbGV0aW9uU3VtbWFyeScpLmluY2x1ZGVzKG5vcm0pKSB7XG5cdFx0XHRcdHByb21wdEZvclN1bW1hcnkgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjb25zdCBwYXJhbXMgPSB7XG5cdFx0XHR2YWx1ZXMsXG5cdFx0XHRub3JtYWxpemVkcyxcblx0XHRcdHdhdGNoOiB3YXRjaFBhZ2UsXG5cdFx0XHRkZWxldGVUYWxrUGFnZTogZm9ybS50YWxrcGFnZSAmJiBmb3JtLnRhbGtwYWdlLmNoZWNrZWQsXG5cdFx0XHRkZWxldGVSZWRpcmVjdHM6IGZvcm0ucmVkaXJlY3RzLmNoZWNrZWQsXG5cdFx0XHRvcGVuVXNlclRhbGs6IGZvcm0ub3BlbnVzZXJ0YWxrLmNoZWNrZWQsXG5cdFx0XHRwcm9tcHRGb3JTdW1tYXJ5LFxuXHRcdFx0dGVtcGxhdGVQYXJhbXM6IFR3aW5rbGUuc3BlZWR5LmdldFBhcmFtZXRlcnMoZm9ybSwgdmFsdWVzKSxcblx0XHR9O1xuXHRcdGlmICghcGFyYW1zLnRlbXBsYXRlUGFyYW1zKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdE1vcmViaXRzLnNpbXBsZVdpbmRvdy5zZXRCdXR0b25zRW5hYmxlZChmYWxzZSk7XG5cdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoZm9ybSk7XG5cdFx0VHdpbmtsZS5zcGVlZHkuY2FsbGJhY2tzLnN5c29wLm1haW4ocGFyYW1zKTtcblx0fTtcblx0VHdpbmtsZS5zcGVlZHkuY2FsbGJhY2suZXZhbHVhdGVVc2VyID0gKGUpID0+IHtcblx0XHRjb25zdCBmb3JtID0gZS50YXJnZXQuZm9ybSA/PyBlLnRhcmdldDtcblx0XHRpZiAoZS50YXJnZXQudHlwZSA9PT0gJ2NoZWNrYm94JyB8fCBlLnRhcmdldC50eXBlID09PSAndGV4dCcgfHwgZS50YXJnZXQudHlwZSA9PT0gJ3NlbGVjdCcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgdmFsdWVzID0gVHdpbmtsZS5zcGVlZHkucmVzb2x2ZUNzZFZhbHVlcyhlKTtcblx0XHRpZiAoIXZhbHVlcykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHQvLyBjb25zdCBtdWx0aXBsZSA9IGZvcm0ubXVsdGlwbGUuY2hlY2tlZDtcblx0XHRjb25zdCBub3JtYWxpemVkcyA9IFtdO1xuXHRcdGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG5cdFx0XHRjb25zdCBub3JtID0gVHdpbmtsZS5zcGVlZHkubm9ybWFsaXplSGFzaFt2YWx1ZV07XG5cdFx0XHRub3JtYWxpemVkc1tub3JtYWxpemVkcy5sZW5ndGhdID0gbm9ybTtcblx0XHR9XG5cdFx0Ly8gYW5hbHlzZSBlYWNoIGNyaXRlcmlvbiB0byBkZXRlcm1pbmUgd2hldGhlciB0byB3YXRjaCB0aGUgcGFnZS9ub3RpZnkgdGhlIGNyZWF0b3Jcblx0XHRsZXQgd2F0Y2hQYWdlID0gZmFsc2U7XG5cdFx0Zm9yIChjb25zdCBub3JtIG9mIG5vcm1hbGl6ZWRzKSB7XG5cdFx0XHRpZiAoVHdpbmtsZS5nZXRQcmVmKCd3YXRjaFNwZWVkeVBhZ2VzJykuaW5jbHVkZXMobm9ybSkpIHtcblx0XHRcdFx0d2F0Y2hQYWdlID0gVHdpbmtsZS5nZXRQcmVmKCd3YXRjaFNwZWVkeUV4cGlyeScpO1xuXHRcdFx0XHRjb250aW51ZTsgLy8gYnJlYWtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRsZXQgbm90aWZ5dXNlciA9IGZhbHNlO1xuXHRcdGlmIChmb3JtLm5vdGlmeS5jaGVja2VkKSB7XG5cdFx0XHRmb3IgKGNvbnN0IG5vcm0gb2Ygbm9ybWFsaXplZHMpIHtcblx0XHRcdFx0aWYgKFR3aW5rbGUuZ2V0UHJlZignbm90aWZ5VXNlck9uU3BlZWR5RGVsZXRpb25Ob21pbmF0aW9uJykuaW5jbHVkZXMobm9ybSkpIHtcblx0XHRcdFx0XHRub3RpZnl1c2VyID0gdHJ1ZTtcblx0XHRcdFx0XHRjb250aW51ZTsgLy8gYnJlYWtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGxldCBjc2Rsb2cgPSBmYWxzZTtcblx0XHRpZiAoVHdpbmtsZS5nZXRQcmVmKCdsb2dTcGVlZHlOb21pbmF0aW9ucycpKSB7XG5cdFx0XHRmb3IgKGNvbnN0IG5vcm0gb2Ygbm9ybWFsaXplZHMpIHtcblx0XHRcdFx0aWYgKCFUd2lua2xlLmdldFByZWYoJ25vTG9nT25TcGVlZHlOb21pbmF0aW9uJykuaW5jbHVkZXMobm9ybSkpIHtcblx0XHRcdFx0XHRjc2Rsb2cgPSB0cnVlO1xuXHRcdFx0XHRcdGNvbnRpbnVlOyAvLyBicmVha1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y29uc3QgcGFyYW1zID0ge1xuXHRcdFx0dmFsdWVzLFxuXHRcdFx0bm9ybWFsaXplZHMsXG5cdFx0XHR3YXRjaDogd2F0Y2hQYWdlLFxuXHRcdFx0dXNlcnRhbGs6IG5vdGlmeXVzZXIsXG5cdFx0XHRsb2dub21pbmF0aW9uOiBjc2Rsb2csXG5cdFx0XHRibGFuazogZm9ybS5ibGFuay5jaGVja2VkLFxuXHRcdFx0cmVxdWVzdHNhbHQ6IGZvcm0uc2FsdGluZy5jaGVja2VkLFxuXHRcdFx0dGVtcGxhdGVQYXJhbXM6IFR3aW5rbGUuc3BlZWR5LmdldFBhcmFtZXRlcnMoZm9ybSwgdmFsdWVzKSxcblx0XHR9O1xuXHRcdGlmICghcGFyYW1zLnRlbXBsYXRlUGFyYW1zKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdE1vcmViaXRzLnNpbXBsZVdpbmRvdy5zZXRCdXR0b25zRW5hYmxlZChmYWxzZSk7XG5cdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoZm9ybSk7XG5cdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQucmVkaXJlY3QgPSBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyk7XG5cdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQubm90aWNlID0gd2luZG93LndnVUxTKCfmoIforrDlrozmiJAnLCAn5qiZ6KiY5a6M5oiQJyk7XG5cdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSxcblx0XHRcdHdpbmRvdy53Z1VMUygn5qCH6K6w6aG16Z2iJywgJ+aomeiomOmggemdoicpXG5cdFx0KTtcblx0XHR5c2FyY2hpdmVzX3BhZ2Uuc2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKHBhcmFtcyk7XG5cdFx0eXNhcmNoaXZlc19wYWdlLmxvYWQoVHdpbmtsZS5zcGVlZHkuY2FsbGJhY2tzLnVzZXIubWFpbik7XG5cdH07XG5cdFR3aW5rbGUuYWRkSW5pdENhbGxiYWNrKFR3aW5rbGUuc3BlZWR5LCAnc3BlZWR5Jyk7XG59KShqUXVlcnkpO1xuXG5leHBvcnQge307XG4iLCAiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuLy8gQHRzLW5vY2hlY2tcbi8qISBUd2lua2xlLmpzIC0gdHdpbmtsZWNvcHl2aW8uanMgKi9cbihmdW5jdGlvbiB0d2lua2xlY29weXZpbygpIHtcblx0LyoqXG5cdCAqIHR3aW5rbGVjb3B5dmlvLmpzOiBDb3B5dmlvIG1vZHVsZVxuXHQgKiBNb2RlIG9mIGludm9jYXRpb246XHRUYWIgKFwiQ29weXZpb1wiKVxuXHQgKiBBY3RpdmUgb246IEV4aXN0aW5nLCBub24tc3BlY2lhbCBwYWdlcywgZXhjZXB0IGZvciBmaWxlIHBhZ2VzXG5cdCAqIHdpdGggbm8gbG9jYWwgZmlsZSB3aGljaCBhcmUgbm90IHJlZGlyZWN0c1xuXHQgKiBDb25maWcgZGlyZWN0aXZlcyBpbjogIFR3aW5rbGVDb25maWdcblx0ICovXG5cdFR3aW5rbGUuY29weXZpbyA9ICgpID0+IHtcblx0XHQvLyBEaXNhYmxlIG9uOlxuXHRcdC8vICogc3BlY2lhbCBwYWdlc1xuXHRcdC8vICogbm9uLWV4aXN0ZW50IHBhZ2VzXG5cdFx0Ly8gKiBub24tbG9jYWwgZmlsZXMsIHdoZXRoZXIgdGhlcmUgaXMgYSBsb2NhbCBwYWdlIG9yIG5vdCAodW5uZWVkZWQgbG9jYWwgcGFnZXMgb2Ygbm9uLWxvY2FsIGZpbGVzIGFyZSBlbGlnaWJsZSBmb3IgQ1NEIEYyKVxuXHRcdC8vICogZmlsZSBwYWdlcyB3aXRob3V0IGFjdHVhbCBmaWxlcyAodGhlc2UgYXJlIGVsaWdpYmxlIGZvciBDU0QgRzgpXG5cdFx0aWYgKFxuXHRcdFx0bXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSA8IDAgfHxcblx0XHRcdCFtdy5jb25maWcuZ2V0KCd3Z0FydGljbGVJZCcpIHx8XG5cdFx0XHQobXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSA9PT0gNiAmJlxuXHRcdFx0XHQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI213LXNoYXJlZHVwbG9hZCcpIHx8XG5cdFx0XHRcdFx0KCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXctaW1hZ2VwYWdlLXNlY3Rpb24tZmlsZWhpc3RvcnknKSAmJiAhTW9yZWJpdHMuaXNQYWdlUmVkaXJlY3QoKSkpKVxuXHRcdCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRUd2lua2xlLmFkZFBvcnRsZXRMaW5rKFxuXHRcdFx0VHdpbmtsZS5jb3B5dmlvLmNhbGxiYWNrLFxuXHRcdFx0d2luZG93LndnVUxTKCfkvrXmnYMnLCAn5L615qyKJyksXG5cdFx0XHQndHctY29weXZpbycsXG5cdFx0XHR3aW5kb3cud2dVTFMoJ+aPkOaKpeS+teadg+mhtemdoicsICfmj5DloLHkvrXmrIrpoIHpnaInKSxcblx0XHRcdCcnXG5cdFx0KTtcblx0fTtcblx0VHdpbmtsZS5jb3B5dmlvLmNhbGxiYWNrID0gKCkgPT4ge1xuXHRcdGNvbnN0IFdpbmRvdyA9IG5ldyBNb3JlYml0cy5zaW1wbGVXaW5kb3coNjAwLCAzNTApO1xuXHRcdFdpbmRvdy5zZXRUaXRsZSh3aW5kb3cud2dVTFMoJ+aPkOaKpeS+teadg+mhtemdoicsICfmj5DloLHkvrXmrIrpoIHpnaInKSk7XG5cdFx0V2luZG93LnNldFNjcmlwdE5hbWUoJ1R3aW5rbGUnKTtcblx0XHRXaW5kb3cuYWRkRm9vdGVyTGluayh3aW5kb3cud2dVTFMoJ+S+teadg+iuvue9ricsICfkvrXmrIroqK3lrponKSwgJ0g6VFcvUFJFRiNjb3B5dmlvJyk7XG5cdFx0V2luZG93LmFkZEZvb3Rlckxpbmsod2luZG93LndnVUxTKCdUd2lua2xl5biu5YqpJywgJ1R3aW5rbGXoqqrmmI4nKSwgJ0g6VFcvRE9DI2NvcHl2aW8nKTtcblx0XHRjb25zdCBmb3JtID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybShUd2lua2xlLmNvcHl2aW8uY2FsbGJhY2suZXZhbHVhdGUpO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICd0ZXh0YXJlYScsXG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfkvrXmnYPmnaXmupDvvJonLCAn5L615qyK5L6G5rqQ77yaJyksXG5cdFx0XHRuYW1lOiAnc291cmNlJyxcblx0XHR9KTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0bGlzdDogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCdDU0QgRzQ6IOabvue7j+agueaNruS+teadg+WuoeaguOWIoOmZpOWQjuWPiOmHjeaWsOWIm+W7uueahOWGheWuuScsXG5cdFx0XHRcdFx0XHQnQ1NEIEc0OiDmm77ntpPmoLnmk5rkvrXmrIrlr6nmoLjliKrpmaTlvozlj4jph43mlrDlu7rnq4vnmoTlhaflrrknXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR2YWx1ZTogJ2c0Jyxcblx0XHRcdFx0XHRuYW1lOiAnZzQnLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn5ZCM5pe25LulRzTlh4bliJnmj5DmiqXlv6vpgJ/liKDpmaQnLCAn5ZCM5pmC5LulRzTmupbliYfmj5DloLHlv6vpgJ/liKrpmaQnKSxcblx0XHRcdFx0XHRzdWJncm91cDogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRuYW1lOiAnZzRfcGFnZW5hbWUnLFxuXHRcdFx0XHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliY3mrKHliKDpmaTnmoTpobXpnaLlkI3np7AnLCAn5YmN5qyh5Yiq6Zmk55qE6aCB6Z2i5ZCN56ixJyksXG5cdFx0XHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn6YCJ5aGr77yM6Iul5YmN5qyh5Yig6Zmk55qE6aG16Z2i5ZCN56ew5LiN5ZCM77yM6K+35o+Q5L6bJyxcblx0XHRcdFx0XHRcdFx0XHQn6YG45aGr77yM6Iul5YmN5qyh5Yiq6Zmk55qE6aCB6Z2i5ZCN56ix5LiN5ZCM77yM6KuL5o+Q5L6bJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6YCa55+l6aG16Z2i5Yib5bu66ICFJywgJ+mAmuefpemggemdouW7uueri+iAhScpLFxuXHRcdFx0XHRcdHZhbHVlOiAnbm90aWZ5Jyxcblx0XHRcdFx0XHRuYW1lOiAnbm90aWZ5Jyxcblx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5Zyo6aG16Z2i5Yib5bu66ICF6K6o6K666aG15LiK5pS+572u5LiA6YCa55+l5qih5p2/44CCJyxcblx0XHRcdFx0XHRcdCflnKjpoIHpnaLlu7rnq4vogIXoqI7oq5bpoIHkuIrmlL7nva7kuIDpgJrnn6XmqKHmnb/jgIInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRjaGVja2VkOiB0cnVlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9KTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnc3VibWl0Jyxcblx0XHR9KTtcblx0XHRjb25zdCByZXN1bHQgPSBmb3JtLnJlbmRlcigpO1xuXHRcdFdpbmRvdy5zZXRDb250ZW50KHJlc3VsdCk7XG5cdFx0V2luZG93LmRpc3BsYXkoKTtcblx0fTtcblx0VHdpbmtsZS5jb3B5dmlvLmNhbGxiYWNrcyA9IHtcblx0XHR0cnlUYWdnaW5nOiAocGFnZW9iaikgPT4ge1xuXHRcdFx0Ly8g5YWI5bCd6K+V5qCH6K6w6aG16Z2i77yM6Iul5Y+R546w5bey57uP5qCH6K6w5YiZ5YGc5q2i5o+Q5oqlXG5cdFx0XHRjb25zdCB0ZXh0ID0gcGFnZW9iai5nZXRQYWdlVGV4dCgpO1xuXHRcdFx0aWYgKHRleHQuaW5jbHVkZXMoJ3t7Q29weXZpb3wnKSkge1xuXHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuZXJyb3IoXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfplJnor68nLCAn6Yyv6KqkJyksXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+mhtemdouW3sue7j+agh+iusOS+teadg++8jOivt+S6uuW3peehruiupOaYr+WQpuW3sue7j+aPkOaKpeOAgicsXG5cdFx0XHRcdFx0XHQn6aCB6Z2i5bey57aT5qiZ6KiY5L615qyK77yM6KuL5Lq65bel56K66KqN5piv5ZCm5bey57aT5o+Q5aCx44CCJ1xuXHRcdFx0XHRcdClcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFR3aW5rbGUuY29weXZpby5jYWxsYmFja3MudGFnZ2luZ0FydGljbGUocGFnZW9iaik7XG5cdFx0XHRcdC8vIENvbnRyaWJ1dG9yIHNwZWNpZmljIGVkaXRzXG5cdFx0XHRcdGNvbnN0IHlzYXJjaGl2ZXNfcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UobXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpKTtcblx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYWdlb2JqLmdldENhbGxiYWNrUGFyYW1ldGVycygpKTtcblx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLmxvb2t1cENyZWF0aW9uKFR3aW5rbGUuY29weXZpby5jYWxsYmFja3MubWFpbik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRtYWluOiAocGFnZW9iaikgPT4ge1xuXHRcdFx0Ly8gdGhpcyBpcyBjb21pbmcgaW4gZnJvbSBsb29rdXBDcmVhdGlvbi4uLiFcblx0XHRcdGNvbnN0IHBhcmFtcyA9IHBhZ2VvYmouZ2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKCk7XG5cdFx0XHRjb25zdCBpbml0aWFsQ29udHJpYiA9IHBhZ2VvYmouZ2V0Q3JlYXRvcigpO1xuXHRcdFx0Ly8gQWRkaW5nIGRpc2N1c3Npb25cblx0XHRcdGNvbnN0IHlzYXJjaGl2ZXNfcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHRcdHBhcmFtcy5sb2dwYWdlLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WKoOWFpeS+teadg+iusOW9lemhuScsICfliqDlhaXkvrXmrIroqJjpjITpoIUnKVxuXHRcdFx0KTtcblx0XHRcdHlzYXJjaGl2ZXNfcGFnZS5zZXRGb2xsb3dSZWRpcmVjdCh0cnVlKTtcblx0XHRcdHlzYXJjaGl2ZXNfcGFnZS5zZXRDYWxsYmFja1BhcmFtZXRlcnMocGFyYW1zKTtcblx0XHRcdHlzYXJjaGl2ZXNfcGFnZS5sb2FkKFR3aW5rbGUuY29weXZpby5jYWxsYmFja3MuY29weXZpb0xpc3QpO1xuXHRcdFx0Ly8gTm90aWZpY2F0aW9uIHRvIGZpcnN0IGNvbnRyaWJ1dG9yXG5cdFx0XHRpZiAocGFyYW1zLm5vdGlmeSkge1xuXHRcdFx0XHRjb25zdCB1c2VydGFsa3BhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0XHRcdGBVc2VyIHRhbGs6JHtpbml0aWFsQ29udHJpYn1gLFxuXHRcdFx0XHRcdGAke3dpbmRvdy53Z1VMUygn6YCa55+l6aG16Z2i5Yib5bu66ICF77yIJywgJ+mAmuefpemggemdouW7uueri+iAhe+8iCcpICsgaW5pdGlhbENvbnRyaWJ977yJYFxuXHRcdFx0XHQpO1xuXHRcdFx0XHRjb25zdCBub3RpZnl0ZXh0ID0gJ1xcbnt7Jy5jb25jYXQoJ3N1YnN0OicsIGBDb3B5dmlvTm90aWNlfCR7bXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpfX19YCk7XG5cdFx0XHRcdHVzZXJ0YWxrcGFnZS5zZXRBcHBlbmRUZXh0KG5vdGlmeXRleHQpO1xuXHRcdFx0XHR1c2VydGFsa3BhZ2Uuc2V0RWRpdFN1bW1hcnkoXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfpgJrnn6XvvJrpobXpnaJbWycsICfpgJrnn6XvvJrpoIHpnaJbWycpICtcblx0XHRcdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSArXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ11d55aR5Ly85L6154qv6JGX5L2c5p2DJywgJ11d55aR5Ly85L6154qv54mI5qyKJylcblx0XHRcdFx0KTtcblx0XHRcdFx0dXNlcnRhbGtwYWdlLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdFx0dXNlcnRhbGtwYWdlLnNldENyZWF0ZU9wdGlvbigncmVjcmVhdGUnKTtcblx0XHRcdFx0dXNlcnRhbGtwYWdlLnNldFdhdGNobGlzdChUd2lua2xlLmdldFByZWYoJ2NvcHl2aW9XYXRjaFVzZXInKSk7XG5cdFx0XHRcdHVzZXJ0YWxrcGFnZS5zZXRGb2xsb3dSZWRpcmVjdCh0cnVlLCBmYWxzZSk7XG5cdFx0XHRcdHVzZXJ0YWxrcGFnZS5hcHBlbmQoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHRhZ2dpbmdBcnRpY2xlOiAocGFnZW9iaikgPT4ge1xuXHRcdFx0Y29uc3QgcGFyYW1zID0gcGFnZW9iai5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHRcdGNvbnN0IHJldmlzaW9uSWQgPVxuXHRcdFx0XHRtdy5jb25maWcuZ2V0KCd3Z1JldmlzaW9uSWQnKSB8fCBtdy5jb25maWcuZ2V0KCd3Z0RpZmZOZXdJZCcpIHx8IG13LmNvbmZpZy5nZXQoJ3dnQ3VyUmV2aXNpb25JZCcpO1xuXHRcdFx0bGV0IHRhZyA9ICd7eycuY29uY2F0KFxuXHRcdFx0XHQnc3Vic3Q6Jyxcblx0XHRcdFx0YENvcHl2aW8vYXV0b3x1cmw9JHtwYXJhbXMuc291cmNlXG5cdFx0XHRcdFx0LnJlcGxhY2UoL2h0dHAvZywgJyYjMTA0O3R0cCcpXG5cdFx0XHRcdFx0LnJlcGxhY2UoL1xcbisvZywgJ1xcbicpXG5cdFx0XHRcdFx0LnJlcGxhY2UoL15cXHMqKFteKl0pL2dtLCAnKiAkMScpXG5cdFx0XHRcdFx0LnJlcGxhY2UoL15cXCogJC9tLCAnJyl9fE9sZFJldmlzaW9uPSR7cmV2aXNpb25JZH19fWBcblx0XHRcdCk7XG5cdFx0XHRjb25zdCB0ZXh0ID0gcGFnZW9iai5nZXRQYWdlVGV4dCgpO1xuXHRcdFx0Y29uc3Qgb2xkY3NkID0gdGV4dC5tYXRjaCgvXFx7XFx7XFxzKihkYigtXFx3Kik/fGR8ZGVsZXRlKVxccyooXFx8KD86XFx7XFx7W157fV0qXFx9XFx9fFtee31dKSopP1xcfVxcfS9pKTtcblx0XHRcdGlmIChcblx0XHRcdFx0b2xkY3NkICYmXG5cdFx0XHRcdGNvbmZpcm0oXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+WcqOmhtemdouS4iuaJvuWIsOW/q+mAn+WIoOmZpOaooeadv++8jOimgeS/neeVmeWQl++8n1xcblxcbuW9k+mhtemdouWQjOaXtuS+teeKr+iRl+S9nOadg+WPiOespuWQiOW/q+mAn+WIoOmZpOagh+WHhuaXtu+8jOW6lOivpeS8mOWFiOi1sOW/q+mAn+WIoOmZpOeoi+W6j+OAglxcbuWNleWHu+KAnOehruiupOKAneS7peS/neeVmeW/q+mAn+WIoOmZpOaooeadv++8jOiLpeaCqOiupOS4uuW/q+mAn+WIoOmZpOeQhueUseS4jeWQiO+8jOWNleWHu+KAnOWPlua2iOKAneS7peenu+mZpOW/q+mAn+WIoOmZpOaooeadv+OAgicsXG5cdFx0XHRcdFx0XHQn5Zyo6aCB6Z2i5LiK5om+5Yiw5b+r6YCf5Yiq6Zmk5qih5p2/77yM6KaB5L+d55WZ5ZeO77yfXFxuXFxu55W26aCB6Z2i5ZCM5pmC5L6154qv54mI5qyK5Y+I56ym5ZCI5b+r6YCf5Yiq6Zmk5qiZ5rqW5pmC77yM5oeJ6Kmy5YSq5YWI6LWw5b+r6YCf5Yiq6Zmk56iL5bqP44CCXFxu6bue5pOK44CM56K66KqN44CN5Lul5L+d55WZ5b+r6YCf5Yiq6Zmk5qih5p2/77yM6Iul5oKo6KqN54K65b+r6YCf5Yiq6Zmk55CG55Sx5LiN5ZCI77yM6bue5pOK44CM5Y+W5raI44CN5Lul56e76Zmk5b+r6YCf5Yiq6Zmk5qih5p2/44CCJ1xuXHRcdFx0XHRcdClcblx0XHRcdFx0KVxuXHRcdFx0KSB7XG5cdFx0XHRcdHRhZyA9IGAke29sZGNzZFswXX1cXG4ke3RhZ31gO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHBhcmFtcy5nNCkge1xuXHRcdFx0XHRsZXQgc3BlZWR5VGFnID0gJ3t7ZGVsZXRlJztcblx0XHRcdFx0c3BlZWR5VGFnICs9ICd8ZzQnO1xuXHRcdFx0XHRpZiAocGFyYW1zLmc0X3BhZ2VuYW1lKSB7XG5cdFx0XHRcdFx0c3BlZWR5VGFnICs9IGB8JHtwYXJhbXMuZzRfcGFnZW5hbWV9fGMxPVtbU3BlY2lhbDpVbmRlbGV0ZS8ke3BhcmFtcy5nNF9wYWdlbmFtZX1dXWA7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3BlZWR5VGFnICs9IGB8YzE9W1tTcGVjaWFsOlVuZGVsZXRlLyR7bXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpfV1dYDtcblx0XHRcdFx0fVxuXHRcdFx0XHRzcGVlZHlUYWcgKz0gJ319Jztcblx0XHRcdFx0dGFnID0gYCR7c3BlZWR5VGFnfVxcbiR7dGFnfWA7XG5cdFx0XHR9XG5cdFx0XHRwYWdlb2JqLnNldFBhZ2VUZXh0KHRhZyk7XG5cdFx0XHRwYWdlb2JqLnNldEVkaXRTdW1tYXJ5KHdpbmRvdy53Z1VMUygn5q2k6aG16Z2i55aR5Ly85L6154qv6JGX5L2c5p2DJywgJ+atpOmggemdoueWkeS8vOS+teeKr+eJiOasiicpKTtcblx0XHRcdHBhZ2VvYmouc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0cGFnZW9iai5zZXRXYXRjaGxpc3QoVHdpbmtsZS5nZXRQcmVmKCdjb3B5dmlvV2F0Y2hQYWdlJykpO1xuXHRcdFx0Ly8gcGFnZW9iai5zZXRDcmVhdGVPcHRpb24oJ3JlY3JlYXRlJyk7XG5cdFx0XHRwYWdlb2JqLnNhdmUoKTtcblx0XHRcdGlmIChUd2lua2xlLmdldFByZWYoJ21hcmtDb3B5dmlvUGFnZXNBc1BhdHJvbGxlZCcpKSB7XG5cdFx0XHRcdHBhZ2VvYmoucGF0cm9sKCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRjb3B5dmlvTGlzdDogKHBhZ2VvYmopID0+IHtcblx0XHRcdGNvbnN0IHRleHQgPSBwYWdlb2JqLmdldFBhZ2VUZXh0KCk7XG5cdFx0XHRsZXQgb3V0cHV0ID0gJyc7XG5cdFx0XHRjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcblx0XHRcdGNvbnN0IGRhdGVIZWFkZXJSZWdleCA9IG5ldyBSZWdFeHAoXG5cdFx0XHRcdGBePT0rXFxcXHMqJHtkYXRlLmdldFVUQ01vbnRoKCkgKyAxfeaciCR7ZGF0ZS5nZXRVVENEYXRlKCl95pelXFxcXHMqPT0rYCxcblx0XHRcdFx0J21nJ1xuXHRcdFx0KTtcblx0XHRcdGlmICghZGF0ZUhlYWRlclJlZ2V4LmV4ZWModGV4dCkpIHtcblx0XHRcdFx0b3V0cHV0ID0gYFxcblxcbj09JHtkYXRlLmdldFVUQ01vbnRoKCkgKyAxfeaciCR7ZGF0ZS5nZXRVVENEYXRlKCl95pelPT1gO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9ICdcXG57eycuY29uY2F0KCdzdWJzdDonLCBgQ29weXZpb1ZGRFJlY29yZHwke213LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKX19fWApO1xuXHRcdFx0cGFnZW9iai5zZXRBcHBlbmRUZXh0KG91dHB1dCk7XG5cdFx0XHRwYWdlb2JqLnNldEVkaXRTdW1tYXJ5KGDliqDlhaVbWyR7bXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpfV1dYCk7XG5cdFx0XHRwYWdlb2JqLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdHBhZ2VvYmouc2V0Q3JlYXRlT3B0aW9uKCdyZWNyZWF0ZScpO1xuXHRcdFx0cGFnZW9iai5hcHBlbmQoKTtcblx0XHR9LFxuXHR9O1xuXHRUd2lua2xlLmNvcHl2aW8uY2FsbGJhY2suZXZhbHVhdGUgPSAoZSkgPT4ge1xuXHRcdGNvbnN0IHBhcmFtcyA9IE1vcmViaXRzLnF1aWNrRm9ybS5nZXRJbnB1dERhdGEoZS50YXJnZXQpO1xuXHRcdGlmICghcGFyYW1zLnNvdXJjZS50cmltKCkpIHtcblx0XHRcdHZvaWQgbXcubm90aWZ5KHdpbmRvdy53Z1VMUygn6K+35oyH5a6a5L615p2D5p2l5rqQJywgJ+iri+aMh+WumuS+teasiuS+hua6kCcpLCB7XG5cdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0dGFnOiAndHdpbmtsZWNvcHl2aW8nLFxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdE1vcmViaXRzLnNpbXBsZVdpbmRvdy5zZXRCdXR0b25zRW5hYmxlZChmYWxzZSk7XG5cdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoZS50YXJnZXQpO1xuXHRcdHBhcmFtcy5sb2dwYWdlID0gJ0xJQl90YWxrOuS+teadg+aPkOaKpSc7XG5cdFx0TW9yZWJpdHMud2lraS5hZGRDaGVja3BvaW50KCk7XG5cdFx0Ly8gVXBkYXRpbmcgZGF0YSBmb3IgdGhlIGFjdGlvbiBjb21wbGV0ZWQgZXZlbnRcblx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5yZWRpcmVjdCA9IG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKTtcblx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5ub3RpY2UgPSB3aW5kb3cud2dVTFMoXG5cdFx0XHQn5o+Q5oql5a6M5oiQ77yM5bCG5Zyo5Yeg56eS5YaF5Yi35paw6aG16Z2iJyxcblx0XHRcdCfmj5DloLHlrozmiJDvvIzlsIflnKjlub7np5Llhafph43mlrDmlbTnkIbpoIHpnaInXG5cdFx0KTtcblx0XHQvLyBUYWdnaW5nIGZpbGVcblx0XHRjb25zdCB5c2FyY2hpdmVzX3BhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0bXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLFxuXHRcdFx0d2luZG93LndnVUxTKCfliqDlhaXkvrXmnYPmqKHmnb/liLDpobXpnaInLCAn5Yqg5YWl5L615qyK5qih5p2/5Yiw6aCB6Z2iJylcblx0XHQpO1xuXHRcdHlzYXJjaGl2ZXNfcGFnZS5zZXRDYWxsYmFja1BhcmFtZXRlcnMocGFyYW1zKTtcblx0XHR5c2FyY2hpdmVzX3BhZ2UubG9hZChUd2lua2xlLmNvcHl2aW8uY2FsbGJhY2tzLnRyeVRhZ2dpbmcpO1xuXHRcdE1vcmViaXRzLndpa2kucmVtb3ZlQ2hlY2twb2ludCgpO1xuXHR9O1xuXHRUd2lua2xlLmFkZEluaXRDYWxsYmFjayhUd2lua2xlLmNvcHl2aW8sICdjb3B5dmlvJyk7XG59KSgpO1xuXG5leHBvcnQge307XG4iLCAiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuLy8gQHRzLW5vY2hlY2tcbi8qISBUd2lua2xlLmpzIC0gdHdpbmtsZXhmZC5qcyAqL1xuKGZ1bmN0aW9uIHR3aW5rbGV4ZmQoKSB7XG5cdC8qKlxuXHQgKiB0d2lua2xleGZkLmpzOiBYRkQgbW9kdWxlXG5cdCAqIE1vZGUgb2YgaW52b2NhdGlvbjogVGFiIChcIlhGRFwiKVxuXHQgKiBBY3RpdmUgb246IEV4aXN0aW5nLCBub24tc3BlY2lhbCBwYWdlcyxcblx0ICogZXhjZXB0IGZvciBmaWxlIHBhZ2VzIHdpdGggbm8gbG9jYWwgZmlsZVxuXHQgKiB3aGljaCBhcmUgbm90IHJlZGlyZWN0c1xuXHQgKi9cblx0VHdpbmtsZS54ZmQgPSAoKSA9PiB7XG5cdFx0Ly8gRGlzYWJsZSBvbjpcblx0XHQvLyAqIHNwZWNpYWwgcGFnZXNcblx0XHQvLyAqIG5vbi1leGlzdGVudCBwYWdlc1xuXHRcdC8vICogbm9uLWxvY2FsIGZpbGVzLCB3aGV0aGVyIHRoZXJlIGlzIGEgbG9jYWwgcGFnZSBvciBub3QgKHVubmVlZGVkIGxvY2FsIHBhZ2VzIG9mIGZpbGVzIG9uIFNoYXJlIGFyZSBlbGlnaWJsZSBmb3IgQ1NEIEYyKVxuXHRcdC8vICogZmlsZSBwYWdlcyB3aXRob3V0IGFjdHVhbCBmaWxlc1xuXHRcdGlmIChcblx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPCAwIHx8XG5cdFx0XHQhbXcuY29uZmlnLmdldCgnd2dBcnRpY2xlSWQnKSB8fFxuXHRcdFx0KG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPT09IDYgJiZcblx0XHRcdFx0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtdy1zaGFyZWR1cGxvYWQnKSB8fFxuXHRcdFx0XHRcdCghZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI213LWltYWdlcGFnZS1zZWN0aW9uLWZpbGVoaXN0b3J5JykgJiYgIU1vcmViaXRzLmlzUGFnZVJlZGlyZWN0KCkpKSlcblx0XHQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0VHdpbmtsZS5hZGRQb3J0bGV0TGluayhcblx0XHRcdFR3aW5rbGUueGZkLmNhbGxiYWNrLFxuXHRcdFx0d2luZG93LndnVUxTKCfmj5DliKAnLCAn5o+Q5YiqJyksXG5cdFx0XHQndHcteGZkJyxcblx0XHRcdHdpbmRvdy53Z1VMUygn5o+Q5Lqk5Yig6Zmk6K6o6K66JywgJ+aPkOS6pOWIqumZpOiojuirlicpXG5cdFx0KTtcblx0fTtcblx0VHdpbmtsZS54ZmQuY3VycmVudFJhdGlvbmFsZSA9IG51bGw7XG5cdC8vIGVycm9yIGNhbGxiYWNrIG9uIE1vcmViaXRzLnN0YXR1cy5vYmplY3Rcblx0VHdpbmtsZS54ZmQucHJpbnRSYXRpb25hbGUgPSAoKSA9PiB7XG5cdFx0aWYgKFR3aW5rbGUueGZkLmN1cnJlbnRSYXRpb25hbGUpIHtcblx0XHRcdE1vcmViaXRzLnN0YXR1cy5wcmludFVzZXJUZXh0KFxuXHRcdFx0XHRUd2lua2xlLnhmZC5jdXJyZW50UmF0aW9uYWxlLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0J+aCqOeahOeQhueUseW3suWcqOS4i+aWueaPkOS+m++8jOiLpeaCqOaDs+mHjeaWsOaPkOS6pO+8jOivt+WwhuWFtuWkjeWItuWIsOS4gOaWsOeql+WPo+S4re+8micsXG5cdFx0XHRcdFx0J+aCqOeahOeQhueUseW3suWcqOS4i+aWueaPkOS+m++8jOiLpeaCqOaDs+mHjeaWsOaPkOS6pO+8jOiri+Wwh+WFtuikh+ijveWIsOS4gOaWsOimlueql+S4re+8midcblx0XHRcdFx0KVxuXHRcdFx0KTtcblx0XHRcdC8vIG9ubHkgbmVlZCB0byBwcmludCB0aGUgcmF0aW9uYWxlIG9uY2Vcblx0XHRcdFR3aW5rbGUueGZkLmN1cnJlbnRSYXRpb25hbGUgPSBudWxsO1xuXHRcdH1cblx0fTtcblx0VHdpbmtsZS54ZmQuY2FsbGJhY2sgPSAoKSA9PiB7XG5cdFx0Y29uc3QgV2luZG93ID0gbmV3IE1vcmViaXRzLnNpbXBsZVdpbmRvdyg2MDAsIDM1MCk7XG5cdFx0V2luZG93LnNldFRpdGxlKHdpbmRvdy53Z1VMUygn5o+Q5Lqk5a2Y5bqf6K6o6K66JywgJ+aPkOS6pOWtmOW7ouiojuirlicpKTtcblx0XHRXaW5kb3cuc2V0U2NyaXB0TmFtZSgnVHdpbmtsZScpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygn5o+Q5Yig6K6+572uJywgJ+aPkOWIquioreWumicpLCAnSDpUVy9QUkVGI3hmZCcpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygnVHdpbmtsZeW4ruWKqScsICdUd2lua2xl6Kqq5piOJyksICdIOlRXL0RPQyN4ZmQnKTtcblx0XHRjb25zdCBmb3JtID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybShUd2lua2xlLnhmZC5jYWxsYmFjay5ldmFsdWF0ZSk7XG5cdFx0Y29uc3QgY2F0ZWdvcmllcyA9IGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0bmFtZTogJ2NhdGVnb3J5Jyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aPkOS6pOexu+Wei++8micsICfmj5DkuqTpoZ7liKXvvJonKSxcblx0XHRcdGV2ZW50OiBUd2lua2xlLnhmZC5jYWxsYmFjay5jaGFuZ2VfY2F0ZWdvcnksXG5cdFx0fSk7XG5cdFx0Y2F0ZWdvcmllcy5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ29wdGlvbicsXG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfpobXpnaLlrZjlup/orqjorronLCAn6aCB6Z2i5a2Y5bui6KiO6KuWJyksXG5cdFx0XHRzZWxlY3RlZDogbXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSA9PT0gMCxcblx0XHRcdHZhbHVlOiAnYWZkJyxcblx0XHR9KTtcblx0XHRjYXRlZ29yaWVzLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aWh+S7tuWtmOW6n+iuqOiuuicsICfmqpTmoYjlrZjlu6LoqI7oq5YnKSxcblx0XHRcdHNlbGVjdGVkOiBtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpID09PSA2LFxuXHRcdFx0dmFsdWU6ICdmZmQnLFxuXHRcdH0pO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRsaXN0OiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflpoLlj6/og73vvIzpgJrnn6XpobXpnaLliJvlu7rogIUnLCAn5aaC5Y+v6IO977yM6YCa55+l6aCB6Z2i5bu656uL6ICFJyksXG5cdFx0XHRcdFx0dmFsdWU6ICdub3RpZnknLFxuXHRcdFx0XHRcdG5hbWU6ICdub3RpZnknLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCflnKjpobXpnaLliJvlu7rogIXorqjorrrpobXkuIrmlL7nva7kuIDpgJrnn6XmqKHmnb/jgIInLFxuXHRcdFx0XHRcdFx0J+WcqOmggemdouW7uueri+iAheiojuirlumggeS4iuaUvue9ruS4gOmAmuefpeaooeadv+OAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGNoZWNrZWQ6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0pO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRsYWJlbDogJ+W3peS9nOWMuicsXG5cdFx0XHRuYW1lOiAnd29ya19hcmVhJyxcblx0XHR9KTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnc3VibWl0Jyxcblx0XHR9KTtcblx0XHRjb25zdCByZXN1bHQgPSBmb3JtLnJlbmRlcigpO1xuXHRcdFdpbmRvdy5zZXRDb250ZW50KHJlc3VsdCk7XG5cdFx0V2luZG93LmRpc3BsYXkoKTtcblx0XHQvLyBXZSBtdXN0IGluaXQgdGhlIGNvbnRyb2xzXG5cdFx0Y29uc3QgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG5cdFx0ZXZ0LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG5cdFx0cmVzdWx0LmNhdGVnb3J5LmRpc3BhdGNoRXZlbnQoZXZ0KTtcblx0fTtcblx0VHdpbmtsZS54ZmQuY2FsbGJhY2suY2hhbmdlX2NhdGVnb3J5ID0gKGUpID0+IHtcblx0XHRjb25zdCB7dmFsdWV9ID0gZS50YXJnZXQ7XG5cdFx0Y29uc3Qge2Zvcm19ID0gZS50YXJnZXQ7XG5cdFx0Y29uc3QgW29sZF9hcmVhXSA9IE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhlLnRhcmdldC5mb3JtLCAnd29ya19hcmVhJyk7XG5cdFx0bGV0IHdvcmtfYXJlYSA9IG51bGw7XG5cdFx0Y29uc3Qgb2xkcmVhc29udGV4dGJveCA9IGZvcm0ucXVlcnlTZWxlY3RvcigndGV4dGFyZWEnKTtcblx0XHRsZXQgb2xkcmVhc29uID0gb2xkcmVhc29udGV4dGJveCA/IG9sZHJlYXNvbnRleHRib3gudmFsdWUgOiAnJztcblx0XHRjb25zdCBhcHBlbmRSZWFzb25Cb3ggPSAoeGZkX2NhdCkgPT4ge1xuXHRcdFx0c3dpdGNoICh4ZmRfY2F0KSB7XG5cdFx0XHRcdGNhc2UgJ2Z3ZGNzZCc6XG5cdFx0XHRcdFx0b2xkcmVhc29uID0gZGVjb2RlVVJJQ29tcG9uZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNkZWxldGUtcmVhc29uJykudGV4dENvbnRlbnQpLnJlcGxhY2UoXG5cdFx0XHRcdFx0XHQvXFwrL2csXG5cdFx0XHRcdFx0XHQnICdcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdmYW1lJzpcblx0XHRcdFx0XHRvbGRyZWFzb24gPSBUd2lua2xlLmdldFByZWYoJ2FmZEZhbWVEZWZhdWx0UmVhc29uJyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3N1YnN0dWInOlxuXHRcdFx0XHRcdG9sZHJlYXNvbiA9IFR3aW5rbGUuZ2V0UHJlZignYWZkU3Vic3R1YkRlZmF1bHRSZWFzb24nKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAndGV4dGFyZWEnLFxuXHRcdFx0XHRuYW1lOiAneGZkcmVhc29uJyxcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5o+Q5Yig55CG55Sx77yaJywgJ+aPkOWIqueQhueUse+8micpLFxuXHRcdFx0XHR2YWx1ZTogb2xkcmVhc29uLFxuXHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0J+aCqOWPr+S7peS9v+eUqHdpa2l0ZXh077yMVHdpbmtsZeWwhuiHquWKqOS4uuaCqOWKoOWFpeetvuWQjeOAguiLpeaCqOS9v+eUqOaJuemHj+aPkOWIoOWKn+iDve+8jOWtmOW6n+iuqOiuuumhteWPquS8muS9v+eUqOesrOS4gOasoeaPkOS6pOeahOeQhueUse+8jOS9huS5i+WQjuaCqOS7jemcgOaPkOS+m+S7peeUqOS6juWIoOmZpOmAmuWRiuaooeadv+eahOWPguaVsOOAgicsXG5cdFx0XHRcdFx0J+aCqOWPr+S7peS9v+eUqHdpa2l0ZXh077yMVHdpbmtsZeWwh+iHquWLleeCuuaCqOWKoOWFpeewveWQjeOAguiLpeaCqOS9v+eUqOaJueasoeaPkOWIquWKn+iDve+8jOWtmOW7ouiojuirlumggeWPquacg+S9v+eUqOesrOS4gOasoeaPkOS6pOeahOeQhueUse+8jOS9huS5i+W+jOaCqOS7jemcgOaPkOS+m+S7peeUqOaWvOWIqumZpOmAmuWRiuaooeadv+eahOWPg+aVuOOAgidcblx0XHRcdFx0KSxcblx0XHRcdFx0cGxhY2Vob2xkZXI6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHQn5q2k5YC85Lqm5pi+56S65LqO6aG16Z2i55qE5Yig6Zmk6YCa5ZGK5qih5p2/5YaF77yM5pWF5Yqh5b+F5o+Q5L6b5q2k5YC877yM6YG/5YWN5L2/55So4oCc5ZCM5LiK4oCd562J55So6K+t44CCJyxcblx0XHRcdFx0XHQn5q2k5YC85Lqm6aGv56S65pa86aCB6Z2i55qE5Yiq6Zmk6YCa5ZGK5qih5p2/5YWn77yM5pWF5YuZ5b+F5o+Q5L6b5q2k5YC877yM6YG/5YWN5L2/55So44CM5ZCM5LiK44CN562J55So6Kqe44CCJ1xuXHRcdFx0XHQpLFxuXHRcdFx0fSk7XG5cdFx0XHQvLyBUT0RPIHBvc3NpYmxlIGZ1dHVyZSBcInByZXZpZXdcIiBsaW5rIGhlcmVcblx0XHR9O1xuXG5cdFx0c3dpdGNoICh2YWx1ZSkge1xuXHRcdFx0Y2FzZSAnYWZkJzoge1xuXHRcdFx0XHR3b3JrX2FyZWEgPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6aG16Z2i5a2Y5bqf6K6o6K66JywgJ+mggemdouWtmOW7ouiojuirlicpLFxuXHRcdFx0XHRcdG5hbWU6ICd3b3JrX2FyZWEnLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiAn5L2/55SoJmx0O25vaW5jbHVkZSZndDvljIXoo7nmqKHmnb8nLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogJ25vaW5jbHVkZScsXG5cdFx0XHRcdFx0XHRcdG5hbWU6ICdub2luY2x1ZGUnLFxuXHRcdFx0XHRcdFx0XHRjaGVja2VkOlxuXHRcdFx0XHRcdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPT09IDEwICYmXG5cdFx0XHRcdFx0XHRcdFx0bXcuY29uZmlnLmdldCgnd2dQYWdlQ29udGVudE1vZGVsJykgIT09ICdTY3JpYnVudG8nLFxuXHRcdFx0XHRcdFx0XHQvLyBUZW1wbGF0ZSBuYW1lc3BhY2Vcblx0XHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKCfkvb/lhbbkuI3kvJrlnKjooqvljIXlkKvml7blh7rnjrDjgIInLCAn5L2/5YW25LiN5pyD5Zyo6KKr5YyF5ZCr5pmC5Ye654++44CCJyksXG5cdFx0XHRcdFx0XHRcdGRpc2FibGVkOiBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VDb250ZW50TW9kZWwnKSA9PT0gJ1NjcmlidW50bycsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdF0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRjb25zdCBhZmRfY2F0ZWdvcnkgPSB3b3JrX2FyZWEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdFx0XHRuYW1lOiAneGZkY2F0Jyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfpgInmi6nmj5DliKDnsbvlnovvvJonLCAn6YG45pOH5o+Q5Yiq6aGe5Yil77yaJyksXG5cdFx0XHRcdFx0ZXZlbnQ6IFR3aW5rbGUueGZkLmNhbGxiYWNrLmNoYW5nZV9hZmRfY2F0ZWdvcnksXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRsZXQgYWZkX2NhdCA9ICdkZWxldGUnO1xuXHRcdFx0XHRpZiAoVHdpbmtsZS5nZXRQcmVmKCdhZmREZWZhdWx0Q2F0ZWdvcnknKSA9PT0gJ3NhbWUnKSB7XG5cdFx0XHRcdFx0aWYgKGxvY2FsU3RvcmFnZS5Ud2lua2xlX2FmZENhdGVnb3J5ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdGxvY2FsU3RvcmFnZS5Ud2lua2xlX2FmZENhdGVnb3J5ID0gJ2RlbGV0ZSc7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGFmZF9jYXQgPSBsb2NhbFN0b3JhZ2UuVHdpbmtsZV9hZmRDYXRlZ29yeTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0YWZkX2NhdGVnb3J5LmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ29wdGlvbicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Yig6ZmkJywgJ+WIqumZpCcpLFxuXHRcdFx0XHRcdHZhbHVlOiAnZGVsZXRlJyxcblx0XHRcdFx0XHRzZWxlY3RlZDogYWZkX2NhdCA9PT0gJ2RlbGV0ZScsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRhZmRfY2F0ZWdvcnkuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflkIjlubYnLCAn5ZCI5L21JyksXG5cdFx0XHRcdFx0dmFsdWU6ICdtZXJnZScsXG5cdFx0XHRcdFx0c2VsZWN0ZWQ6IGFmZF9jYXQgPT09ICdtZXJnZScsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRpZiAoVHdpbmtsZS5nZXRQcmVmKCdGd2RDc2RUb1hmZCcpKSB7XG5cdFx0XHRcdFx0YWZkX2NhdGVnb3J5LmFwcGVuZCh7XG5cdFx0XHRcdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+i9rOS6pOiHquW/q+mAn+WIoOmZpOWAmemAiScsICfovYnkuqToh6rlv6vpgJ/liKrpmaTlgJnpgbgnKSxcblx0XHRcdFx0XHRcdHZhbHVlOiAnZndkY3NkJyxcblx0XHRcdFx0XHRcdHNlbGVjdGVkOiBhZmRfY2F0ID09PSAnZndkY3NkJyxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRhZmRfY2F0ZWdvcnkuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmibnph4/lhbPms6jluqbmj5DliKAnLCAn5om55qyh6Zec5rOo5bqm5o+Q5YiqJyksXG5cdFx0XHRcdFx0dmFsdWU6ICdmYW1lJyxcblx0XHRcdFx0XHRzZWxlY3RlZDogYWZkX2NhdCA9PT0gJ2ZhbWUnLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YWZkX2NhdGVnb3J5LmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ29wdGlvbicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5om56YeP5bCP5bCP5L2c5ZOB5o+Q5YigJywgJ+aJueasoeWwj+Wwj+S9nOWTgeaPkOWIqicpLFxuXHRcdFx0XHRcdHZhbHVlOiAnc3Vic3R1YicsXG5cdFx0XHRcdFx0c2VsZWN0ZWQ6IGFmZF9jYXQgPT09ICdzdWJzdHViJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGFmZF9jYXRlZ29yeS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdvcHRpb24nLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aJuemHj+WFtuS7luaPkOWIoCcsICfmibnmrKHlhbbku5bmj5DliKonKSxcblx0XHRcdFx0XHR2YWx1ZTogJ2JhdGNoJyxcblx0XHRcdFx0XHRzZWxlY3RlZDogYWZkX2NhdCA9PT0gJ2JhdGNoJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHdvcmtfYXJlYS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0bmFtZTogJ21lcmdlaW50bycsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5ZCI5bm25Yiw77yaJywgJ+WQiOS9teWIsO+8micpLFxuXHRcdFx0XHRcdGhpZGRlbjogdHJ1ZSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGFwcGVuZFJlYXNvbkJveChhZmRfY2F0KTtcblx0XHRcdFx0d29ya19hcmVhLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ3RleHRhcmVhJyxcblx0XHRcdFx0XHRuYW1lOiAnZndkY3NkcmVhc29uJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfovazkuqTnkIbnlLHvvJonLCAn6L2J5Lqk55CG55Sx77yaJyksXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+aCqOWPr+S7peS9v+eUqHdpa2l0ZXh077yMVHdpbmtsZeWwhuiHquWKqOS4uuaCqOWKoOWFpeetvuWQjeOAgicsXG5cdFx0XHRcdFx0XHQn5oKo5Y+v5Lul5L2/55Sod2lraXRleHTvvIxUd2lua2xl5bCH6Ieq5YuV54K65oKo5Yqg5YWl57C95ZCN44CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0aGlkZGVuOiB0cnVlLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0d29ya19hcmVhID0gd29ya19hcmVhLnJlbmRlcigpO1xuXHRcdFx0XHRvbGRfYXJlYS5yZXBsYWNlV2l0aCh3b3JrX2FyZWEpO1xuXHRcdFx0XHRjb25zdCBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcblx0XHRcdFx0ZXZ0LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRcdGZvcm0ueGZkY2F0LmRpc3BhdGNoRXZlbnQoZXZ0KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRjYXNlICdmZmQnOlxuXHRcdFx0XHR3b3JrX2FyZWEgPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5paH5Lu25a2Y5bqf6K6o6K66JywgJ+aqlOahiOWtmOW7ouiojuirlicpLFxuXHRcdFx0XHRcdG5hbWU6ICd3b3JrX2FyZWEnLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YXBwZW5kUmVhc29uQm94KCdmZmQnKTtcblx0XHRcdFx0d29ya19hcmVhID0gd29ya19hcmVhLnJlbmRlcigpO1xuXHRcdFx0XHRvbGRfYXJlYS5yZXBsYWNlV2l0aCh3b3JrX2FyZWEpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHdvcmtfYXJlYSA9IG5ldyBNb3JlYml0cy5xdWlja0Zvcm0uZWxlbWVudCh7XG5cdFx0XHRcdFx0dHlwZTogJ2ZpZWxkJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmnKrlrprkuYknLCAn5pyq5a6a576pJyksXG5cdFx0XHRcdFx0bmFtZTogJ3dvcmtfYXJlYScsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR3b3JrX2FyZWEgPSB3b3JrX2FyZWEucmVuZGVyKCk7XG5cdFx0XHRcdG9sZF9hcmVhLnJlcGxhY2VXaXRoKHdvcmtfYXJlYSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHQvLyBSZXR1cm4gdG8gY2hlY2tlZCBzdGF0ZSB3aGVuIHN3aXRjaGluZ1xuXHRcdGZvcm0ubm90aWZ5LmNoZWNrZWQgPSB0cnVlO1xuXHRcdGZvcm0ubm90aWZ5LmRpc2FibGVkID0gZmFsc2U7XG5cdH07XG5cdFR3aW5rbGUueGZkLmNhbGxiYWNrLmNoYW5nZV9hZmRfY2F0ZWdvcnkgPSAoZSkgPT4ge1xuXHRcdHN3aXRjaCAoZS50YXJnZXQudmFsdWUpIHtcblx0XHRcdGNhc2UgJ21lcmdlJzpcblx0XHRcdFx0ZS50YXJnZXQuZm9ybS5tZXJnZWludG8ucGFyZW50RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2hpZGRlbicpO1xuXHRcdFx0XHRlLnRhcmdldC5mb3JtLmZ3ZGNzZHJlYXNvbi5wYXJlbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJycpO1xuXHRcdFx0XHRlLnRhcmdldC5mb3JtLm1lcmdlaW50by5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmlubmVySFRNTCA9IHdpbmRvdy53Z1VMUygn5ZCI5bm25Yiw77yaJywgJ+WQiOS9teWIsO+8micpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ2Z3ZGNzZCc6XG5cdFx0XHRcdGUudGFyZ2V0LmZvcm0ubWVyZ2VpbnRvLnBhcmVudEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdoaWRkZW4nKTtcblx0XHRcdFx0ZS50YXJnZXQuZm9ybS5md2Rjc2RyZWFzb24ucGFyZW50RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2hpZGRlbicpO1xuXHRcdFx0XHRlLnRhcmdldC5mb3JtLm1lcmdlaW50by5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmlubmVySFRNTCA9ICfmj5DkuqTkurrvvJonO1xuXHRcdFx0XHRlLnRhcmdldC5mb3JtLnhmZHJlYXNvbi52YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChcblx0XHRcdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGVsZXRlLXJlYXNvbicpLnRleHRDb250ZW50XG5cdFx0XHRcdCkucmVwbGFjZSgvXFwrL2csICcgJyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnZmFtZSc6XG5cdFx0XHRcdGUudGFyZ2V0LmZvcm0ubWVyZ2VpbnRvLnBhcmVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdoaWRkZW4nLCAnJyk7XG5cdFx0XHRcdGUudGFyZ2V0LmZvcm0uZndkY3NkcmVhc29uLnBhcmVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdoaWRkZW4nLCAnJyk7XG5cdFx0XHRcdGUudGFyZ2V0LmZvcm0ueGZkcmVhc29uLnZhbHVlID0gVHdpbmtsZS5nZXRQcmVmKCdhZmRGYW1lRGVmYXVsdFJlYXNvbicpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ3N1YnN0dWInOlxuXHRcdFx0XHRlLnRhcmdldC5mb3JtLm1lcmdlaW50by5wYXJlbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJycpO1xuXHRcdFx0XHRlLnRhcmdldC5mb3JtLmZ3ZGNzZHJlYXNvbi5wYXJlbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJycpO1xuXHRcdFx0XHRlLnRhcmdldC5mb3JtLnhmZHJlYXNvbi52YWx1ZSA9IFR3aW5rbGUuZ2V0UHJlZignYWZkU3Vic3R1YkRlZmF1bHRSZWFzb24nKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRlLnRhcmdldC5mb3JtLm1lcmdlaW50by5wYXJlbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJycpO1xuXHRcdFx0XHRlLnRhcmdldC5mb3JtLmZ3ZGNzZHJlYXNvbi5wYXJlbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJycpO1xuXHRcdH1cblx0XHRpZiAoVHdpbmtsZS5nZXRQcmVmKCdhZmREZWZhdWx0Q2F0ZWdvcnknKSA9PT0gJ3NhbWUnKSB7XG5cdFx0XHRsb2NhbFN0b3JhZ2UuVHdpbmtsZV9hZmRDYXRlZ29yeSA9IGUudGFyZ2V0LnZhbHVlO1xuXHRcdH1cblx0fTtcblx0VHdpbmtsZS54ZmQuY2FsbGJhY2tzID0ge1xuXHRcdGFmZDoge1xuXHRcdFx0bWFpbjogKHRhZ2dpbmdfcGFnZSkgPT4ge1xuXHRcdFx0XHRjb25zdCBwYXJhbXMgPSB0YWdnaW5nX3BhZ2UuZ2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKCk7XG5cdFx0XHRcdFR3aW5rbGUueGZkLmNhbGxiYWNrcy5hZmQudGFnZ2luZ0FydGljbGUodGFnZ2luZ19wYWdlKTtcblx0XHRcdFx0Ly8gQWRkaW5nIGRpc2N1c3Npb25cblx0XHRcdFx0Y29uc3QgZGlzY3Vzc2lvbl9wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRwYXJhbXMubG9ncGFnZSxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WKoOWFpeiuqOiuuuWIsOW9k+aXpeWIl+ihqCcsICfliqDlhaXoqI7oq5bliLDnlbbml6XliJfooagnKVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRkaXNjdXNzaW9uX3BhZ2Uuc2V0Rm9sbG93UmVkaXJlY3QodHJ1ZSk7XG5cdFx0XHRcdGRpc2N1c3Npb25fcGFnZS5zZXRDYWxsYmFja1BhcmFtZXRlcnMocGFyYW1zKTtcblx0XHRcdFx0ZGlzY3Vzc2lvbl9wYWdlLmxvYWQoVHdpbmtsZS54ZmQuY2FsbGJhY2tzLmFmZC50b2RheXNMaXN0KTtcblx0XHRcdFx0Ly8gTm90aWZpY2F0aW9uIHRvIGZpcnN0IGNvbnRyaWJ1dG9yXG5cdFx0XHRcdGlmIChwYXJhbXMubm90aWZ5KSB7XG5cdFx0XHRcdFx0Ly8gRGlzYWxsb3cgd2FybmluZyB5b3Vyc2VsZlxuXHRcdFx0XHRcdGlmIChwYXJhbXMuY3JlYXRvciA9PT0gbXcuY29uZmlnLmdldCgnd2dVc2VyTmFtZScpKSB7XG5cdFx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMud2Fybihcblx0XHRcdFx0XHRcdFx0YCR7d2luZG93LndnVUxTKCfpgJrnn6XpobXpnaLliJvlu7rogIXvvIgnLCAn6YCa55+l6aCB6Z2i5bu656uL6ICF77yIJykgKyBwYXJhbXMuY3JlYXRvcn3vvIlgLFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+aCqOWIm+W7uuS6huivpemhte+8jOi3s+i/h+mAmuefpScsICfmgqjlu7rnq4vkuoboqbLpoIHvvIzot7PpgY7pgJrnn6UnKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHBhcmFtcy5jcmVhdG9yID0gbnVsbDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc3QgdGFsa1BhZ2VOYW1lID0gYFVzZXIgdGFsazoke3BhcmFtcy5jcmVhdG9yfWA7XG5cdFx0XHRcdFx0XHRjb25zdCB1c2VydGFsa3BhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0XHRcdFx0XHR0YWxrUGFnZU5hbWUsXG5cdFx0XHRcdFx0XHRcdGAke3dpbmRvdy53Z1VMUygn6YCa55+l6aG16Z2i5Yib5bu66ICF77yIJywgJ+mAmuefpemggemdouW7uueri+iAhe+8iCcpICsgcGFyYW1zLmNyZWF0b3J977yJYFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdGNvbnN0IG5vdGlmeXRleHQgPSAnXFxue3snXG5cdFx0XHRcdFx0XHRcdC5jb25jYXQoJ3N1YnN0OicpXG5cdFx0XHRcdFx0XHRcdC5jb25jYXQoYEFGRE5vdGV8JHtNb3JlYml0cy5wYWdlTmFtZU5vcm19fX0tLX5+YCwgJ35+Jyk7XG5cdFx0XHRcdFx0XHR1c2VydGFsa3BhZ2Uuc2V0QXBwZW5kVGV4dChub3RpZnl0ZXh0KTtcblx0XHRcdFx0XHRcdHVzZXJ0YWxrcGFnZS5zZXRFZGl0U3VtbWFyeShg6YCa55+l77ya6aG16Z2iW1ske01vcmViaXRzLnBhZ2VOYW1lTm9ybX1dXeWtmOW6n+iuqOiuuuaPkOWQjWApO1xuXHRcdFx0XHRcdFx0dXNlcnRhbGtwYWdlLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdFx0XHRcdHVzZXJ0YWxrcGFnZS5zZXRDcmVhdGVPcHRpb24oJ3JlY3JlYXRlJyk7XG5cdFx0XHRcdFx0XHR1c2VydGFsa3BhZ2Uuc2V0V2F0Y2hsaXN0KFR3aW5rbGUuZ2V0UHJlZigneGZkV2F0Y2hVc2VyJykpO1xuXHRcdFx0XHRcdFx0dXNlcnRhbGtwYWdlLnNldEZvbGxvd1JlZGlyZWN0KHRydWUsIGZhbHNlKTtcblx0XHRcdFx0XHRcdHVzZXJ0YWxrcGFnZS5hcHBlbmQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gYWRkIHRoaXMgbm9taW5hdGlvbiB0byB0aGUgdXNlcidzIHVzZXJzcGFjZSBsb2csIGlmIHRoZSB1c2VyIGhhcyBlbmFibGVkIGl0XG5cdFx0XHRcdFx0aWYgKHBhcmFtcy5sb2dub21pbmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRUd2lua2xlLnhmZC5jYWxsYmFja3MuYWRkVG9Mb2cocGFyYW1zLCBwYXJhbXMuY3JlYXRvcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIG9yLCBpZiBub3Qgbm90aWZ5aW5nLCBhZGQgdGhpcyBub21pbmF0aW9uIHRvIHRoZSB1c2VyJ3MgdXNlcnNwYWNlIGxvZyB3aXRob3V0IHRoZSBpbml0aWFsIGNvbnRyaWJ1dG9yJ3MgbmFtZVxuXHRcdFx0XHR9IGVsc2UgaWYgKHBhcmFtcy5sb2dub21pbmF0aW9uKSB7XG5cdFx0XHRcdFx0VHdpbmtsZS54ZmQuY2FsbGJhY2tzLmFkZFRvTG9nKHBhcmFtcywgbnVsbCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHR0YWdnaW5nQXJ0aWNsZTogKHBhZ2VvYmopID0+IHtcblx0XHRcdFx0bGV0IHRleHQgPSBwYWdlb2JqLmdldFBhZ2VUZXh0KCk7XG5cdFx0XHRcdGNvbnN0IHBhcmFtcyA9IHBhZ2VvYmouZ2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKCk7XG5cdFx0XHRcdGxldCB0YWcgPSBge3t2ZmR8JHtNb3JlYml0cy5zdHJpbmcuZm9ybWF0UmVhc29uVGV4dChwYXJhbXMueGZkcmVhc29uKX1gO1xuXHRcdFx0XHRpZiAoTW9yZWJpdHMuaXNQYWdlUmVkaXJlY3QoKSkge1xuXHRcdFx0XHRcdHRhZyArPSAnfHInO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRhZyArPSAnfGRhdGU9e3snLmNvbmNhdCgnc3Vic3Q6JywgJyN0aW1lOlkvbS9kfX19fScpO1xuXHRcdFx0XHRpZiAocGFyYW1zLm5vaW5jbHVkZSkge1xuXHRcdFx0XHRcdHRhZyA9IGA8bm9pbmNsdWRlPiR7dGFnfTwvbm9pbmNsdWRlPmA7XG5cdFx0XHRcdFx0Ly8g5Y+q5pyJ6KGo5qC86ZyA6KaB5Y2V54us5Yqg5Zue6L2m77yM5YW25LuW5oOF5Ya15Yqg5Zue6L2m5Lya56C05Z2P5qih5p2/44CCXG5cdFx0XHRcdFx0aWYgKHRleHQuaW5kZXhPZigne3wnKSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0dGFnICs9ICdcXG4nO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0YWcgKz0gJ1xcbic7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gVGhlbiwgdGVzdCBpZiB0aGVyZSBhcmUgc3BlZWR5IGRlbGV0aW9uLXJlbGF0ZWQgdGVtcGxhdGVzIG9uIHRoZSBhcnRpY2xlLlxuXHRcdFx0XHRjb25zdCB0ZXh0Tm9TZCA9IHRleHQucmVwbGFjZShcblx0XHRcdFx0XHQvXFx7XFx7XFxzKihkYigtXFx3Kik/fGR8ZGVsZXRlfCg/Omhhbmd8aG9sZClbLSBdP29uKVxccyooXFx8KD86XFx7XFx7W157fV0qXFx9XFx9fFtee31dKSopP1xcfVxcfVxccyovZ2ksXG5cdFx0XHRcdFx0Jydcblx0XHRcdFx0KTtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHRleHQgIT09IHRleHROb1NkICYmXG5cdFx0XHRcdFx0Y29uZmlybShcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5Zyo6aG16Z2i5LiK5om+5Yiw5b+r6YCf5Yig6Zmk5qih5p2/77yM6KaB56e76Zmk5ZCX77yfJywgJ+WcqOmggemdouS4iuaJvuWIsOW/q+mAn+WIqumZpOaooeadv++8jOimgeenu+mZpOWXju+8nycpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHR0ZXh0ID0gdGV4dE5vU2Q7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgdGV4dE5vTm90TWFuZGFyaW4gPSB0ZXh0LnJlcGxhY2UoXG5cdFx0XHRcdFx0L1xce1xce1xccyooTm90TWFuZGFyaW58Tm90Y2hpbmVzZXzpnZ7kuK3mlod86Z2e54++5Luj5ryi6KqefOmdnueOsOS7o+axieivrXzpnZ7nj77ku6PmqJnmupbmvKLoqp586Z2e546w5Luj5qCH5YeG5rGJ6K+tKVxccyooXFx8KD86XFx7XFx7W157fV0qXFx9XFx9fFtee31dKSopP1xcfVxcfVxccyovZ2ksXG5cdFx0XHRcdFx0Jydcblx0XHRcdFx0KTtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHRleHQgIT09IHRleHROb05vdE1hbmRhcmluICYmXG5cdFx0XHRcdFx0Y29uZmlybShcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0J+WcqOmhtemdouS4iuaJvuWIsOmdnueOsOS7o+agh+WHhuaxieivreaooeadv++8jOimgeenu+mZpOWQl++8nycsXG5cdFx0XHRcdFx0XHRcdCflnKjpoIHpnaLkuIrmib7liLDpnZ7nj77ku6PmqJnmupbmvKLoqp7mqKHmnb/vvIzopoHnp7vpmaTll47vvJ8nXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHR0ZXh0ID0gdGV4dE5vTm90TWFuZGFyaW47XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgdGV4dE5vQWZjID0gdGV4dC5yZXBsYWNlKC97e1xccypBRkMgc3VibWlzc2lvblxccypcXHxcXHMqXFx8W159XSo/fX1cXHMqL2dpLCAnJyk7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHR0ZXh0ICE9PSB0ZXh0Tm9BZmMgJiZcblx0XHRcdFx0XHRjb25maXJtKHdpbmRvdy53Z1VMUygn5Zyo6aG16Z2i5LiK5om+5YiwQUZD5o+Q5Lqk5qih5p2/77yM6KaB56e76Zmk5ZCX77yfJywgJ+WcqOmggemdouS4iuaJvuWIsEFGQ+aPkOS6pOaooeadv++8jOimgeenu+mZpOWXju+8nycpKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHR0ZXh0ID0gdGV4dE5vQWZjO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIE1hcmsgdGhlIHBhZ2UgYXMgcGF0cm9sbGVkLCBpZiB3YW50ZWRcblx0XHRcdFx0aWYgKFR3aW5rbGUuZ2V0UHJlZignbWFya1hmZFBhZ2VzQXNQYXRyb2xsZWQnKSkge1xuXHRcdFx0XHRcdHBhZ2VvYmoucGF0cm9sKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gSW5zZXJ0IHRhZyBhZnRlciBzaG9ydCBkZXNjcmlwdGlvbiBvciBhbnkgaGF0bm90ZXNcblx0XHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2l0ZXh0LnBhZ2UodGV4dCk7XG5cdFx0XHRcdHRleHQgPSB5c2FyY2hpdmVzX3BhZ2UuaW5zZXJ0QWZ0ZXJUZW1wbGF0ZXModGFnLCBUd2lua2xlLmhhdG5vdGVSZWdleCkuZ2V0VGV4dCgpO1xuXHRcdFx0XHRwYWdlb2JqLnNldFBhZ2VUZXh0KHRleHQpO1xuXHRcdFx0XHRwYWdlb2JqLnNldEVkaXRTdW1tYXJ5KFxuXHRcdFx0XHRcdGAke3dpbmRvdy53Z1VMUygn6aG16Z2i5a2Y5bqf6K6o6K6677yaW1snLCAn6aCB6Z2i5a2Y5bui6KiO6KuW77yaW1snKSArIHBhcmFtcy5sb2dwYWdlfSMke01vcmViaXRzLnBhZ2VOYW1lTm9ybX1dXWBcblx0XHRcdFx0KTtcblx0XHRcdFx0cGFnZW9iai5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRcdHBhZ2VvYmouc2V0V2F0Y2hsaXN0KFR3aW5rbGUuZ2V0UHJlZigneGZkV2F0Y2hQYWdlJykpO1xuXHRcdFx0XHRwYWdlb2JqLnNhdmUoKTtcblx0XHRcdH0sXG5cdFx0XHR0b2RheXNMaXN0OiAocGFnZW9iaikgPT4ge1xuXHRcdFx0XHRsZXQgdGV4dCA9IHBhZ2VvYmouZ2V0UGFnZVRleHQoKTtcblx0XHRcdFx0Y29uc3QgcGFyYW1zID0gcGFnZW9iai5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHRcdFx0bGV0IHR5cGUgPSAnJztcblx0XHRcdFx0bGV0IHRvID0gJyc7XG5cdFx0XHRcdHN3aXRjaCAocGFyYW1zLnhmZGNhdCkge1xuXHRcdFx0XHRcdGNhc2UgJ2Z3ZGNzZCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWVyZ2UnOlxuXHRcdFx0XHRcdFx0dG8gPSBwYXJhbXMubWVyZ2VpbnRvO1xuXHRcdFx0XHRcdC8qIEZhbGwgdGhyb3VnaCAqL1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHR0eXBlID0gcGFyYW1zLnhmZGNhdDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxldCBhcHBlbmQgPSB0cnVlO1xuXHRcdFx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdFx0XHRjYXNlICdmYW1lJzpcblx0XHRcdFx0XHRjYXNlICdzdWJzdHViJzpcblx0XHRcdFx0XHRjYXNlICdiYXRjaCc6IHtcblx0XHRcdFx0XHRcdGNvbnN0IGNvbW1lbnRUZXh0ID0gYDwhLS0gVHdpbmtsZTogVXNlcjoke213LmNvbmZpZy5nZXQoXG5cdFx0XHRcdFx0XHRcdCd3Z1VzZXJOYW1lJ1xuXHRcdFx0XHRcdFx0KX0g55qEICR7dHlwZX0g5o+Q5Yig5o+S5YWl54K577yM6K+35Yu/5pu05pS55oiW56e76Zmk5q2k6KGM77yM6Zmk6Z2e5LiN5YaN5LqO5q2k6aG16Z2i5o+Q5YigIC0tPmA7XG5cdFx0XHRcdFx0XHRsZXQgbmV3VGV4dCA9IGA9PT1bWzoke01vcmViaXRzLnBhZ2VOYW1lTm9ybX1dXT09PWA7XG5cdFx0XHRcdFx0XHRpZiAodHlwZSA9PT0gJ2ZhbWUnKSB7XG5cdFx0XHRcdFx0XHRcdG5ld1RleHQgKz0gYFxcbnt7RmluZHNvdXJjZXN8JHtNb3JlYml0cy5wYWdlTmFtZU5vcm19fX1gO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHRleHQuaW5jbHVkZXMoY29tbWVudFRleHQpKSB7XG5cdFx0XHRcdFx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoY29tbWVudFRleHQsIGAke25ld1RleHR9XFxuXFxuJHtjb21tZW50VGV4dH1gKTtcblx0XHRcdFx0XHRcdFx0cGFnZW9iai5zZXRQYWdlVGV4dCh0ZXh0KTtcblx0XHRcdFx0XHRcdFx0YXBwZW5kID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb25zdCBzYWZlc3Vic3QgPSAnc2FmZXN1YnN0Jztcblx0XHRcdFx0XHRcdFx0Y29uc3QgYXBwZW5kVGV4dCA9IGBcXG57eyR7c2FmZXN1YnN0fSR7YDpTYWZlQWZkSGVhZH19XFxuJHtcblx0XHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0XHRmYW1lOiAnPT0gMzDlpKnlkI7ku43mjILmnIl7e3RsfG5vdGFiaWxpdHl9feaooeadv+eahOadoeebriA9PVxcbjxzcGFuIHN0eWxlPVwiZm9udC1zaXplOiBzbWFsbGVyO1wiPu+8iOW3suaMgltbVGVtcGxhdGU6bm90YWJpbGl0eXzkuI3nrKbmlLblvZXmoIflh4bmqKHmnb9dXTMw5aSp77yJPC9zcGFuPicsXG5cdFx0XHRcdFx0XHRcdFx0XHRzdWJzdHViOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQnPT0gMzDlpKnlkI7ku43mjILmnIl7e3RsfHN1YnN0dWJ9feaooeadv+eahOadoeebriA9PVxcbjxzcGFuIHN0eWxlPVwiZm9udC1zaXplOiBzbWFsbGVyO1wiPu+8iOW3suaMgltbVGVtcGxhdGU6c3Vic3R1YnzlsI/lsI/mnaHnm67mqKHmnb9dXTMw5aSp77yJPC9zcGFuPicsXG5cdFx0XHRcdFx0XHRcdFx0XHRiYXRjaDogJz09IOaJuemHj+aPkOWIoCA9PScsXG5cdFx0XHRcdFx0XHRcdFx0fVt0eXBlXVxuXHRcdFx0XHRcdFx0XHR9XFxuJHtuZXdUZXh0fVxcblxcbiR7Y29tbWVudFRleHR9XFxuLS0tLVxcbjrlu7rorq7vvJrliKDpmaTliY3ov7DpobXpnaLvvJvnkIbnlLHvvJoke01vcmViaXRzLnN0cmluZy5mb3JtYXRSZWFzb25UZXh0KFxuXHRcdFx0XHRcdFx0XHRcdHBhcmFtcy54ZmRyZWFzb25cblx0XHRcdFx0XHRcdFx0KX1cXG7mj5DmiqXku6XkuIoke1xuXHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdGZhbWU6ICc8dT7kuI3nrKblkIjmlLblvZXmoIflh4Y8L3U+5p2h55uuJyxcblx0XHRcdFx0XHRcdFx0XHRcdHN1YnN0dWI6ICc8dT7plb/luqbov4fnn608L3U+5p2h55uuJyxcblx0XHRcdFx0XHRcdFx0XHRcdGJhdGNoOiAn6aG16Z2iJyxcblx0XHRcdFx0XHRcdFx0XHR9W3R5cGVdXG5cdFx0XHRcdFx0XHRcdH3nmoTmsYLpl7vnvJbogIXlj4rml7bpl7TvvJo8YnIgaWQ9XCJuby1uZXctdGl0bGVcIj5+fmAuY29uY2F0KCd+ficpfWA7XG5cdFx0XHRcdFx0XHRcdHBhZ2VvYmouc2V0QXBwZW5kVGV4dChhcHBlbmRUZXh0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0cGFnZW9iai5zZXRBcHBlbmRUZXh0KFxuXHRcdFx0XHRcdFx0XHQnXFxue3snLmNvbmNhdChcblx0XHRcdFx0XHRcdFx0XHQnc3Vic3Q6Jyxcblx0XHRcdFx0XHRcdFx0XHRgRFJJdGVtfFR5cGU9JHt0eXBlfXxEUmFydGljbGVzPSR7XG5cdFx0XHRcdFx0XHRcdFx0XHRNb3JlYml0cy5wYWdlTmFtZU5vcm1cblx0XHRcdFx0XHRcdFx0XHR9fFJlYXNvbj0ke01vcmViaXRzLnN0cmluZy5mb3JtYXRSZWFzb25UZXh0KHBhcmFtcy54ZmRyZWFzb24pfSR7XG5cdFx0XHRcdFx0XHRcdFx0XHRwYXJhbXMuZndkY3NkcmVhc29uLnRyaW0oKSA9PT0gJycgPyAnJyA6IGA8YnI+XFxu6L2s5Lqk55CG55Sx77yaJHtwYXJhbXMuZndkY3NkcmVhc29ufWBcblx0XHRcdFx0XHRcdFx0XHR9fFRvPSR7dG99fX1+fmAuY29uY2F0KCd+ficpXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRwYWdlb2JqLnNldEVkaXRTdW1tYXJ5KGDliqDlhaVbWyR7TW9yZWJpdHMucGFnZU5hbWVOb3JtfV1dYCk7XG5cdFx0XHRcdHBhZ2VvYmouc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0XHRwYWdlb2JqLnNldFdhdGNobGlzdChUd2lua2xlLmdldFByZWYoJ3hmZFdhdGNoRGlzY3Vzc2lvbicpKTtcblx0XHRcdFx0cGFnZW9iai5zZXRDcmVhdGVPcHRpb24oJ3JlY3JlYXRlJyk7XG5cdFx0XHRcdGlmIChhcHBlbmQpIHtcblx0XHRcdFx0XHRwYWdlb2JqLmFwcGVuZCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHBhZ2VvYmouc2F2ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFR3aW5rbGUueGZkLmN1cnJlbnRSYXRpb25hbGUgPSBudWxsO1xuXHRcdFx0fSxcblx0XHRcdGxvb2t1cENyZWF0aW9uOiAodGFyZ2V0X3BhZ2UpID0+IHtcblx0XHRcdFx0dGFyZ2V0X3BhZ2UuZ2V0U3RhdHVzRWxlbWVudCgpLmluZm8oJ+WujOaIkCcpO1xuXHRcdFx0XHRjb25zdCBwYXJhbXMgPSB0YXJnZXRfcGFnZS5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHRcdFx0cGFyYW1zLmNyZWF0b3IgPSB0YXJnZXRfcGFnZS5nZXRDcmVhdG9yKCk7XG5cdFx0XHRcdC8vIFRhZ2dpbmcgcGFnZVxuXHRcdFx0XHRjb25zdCB0YWdnaW5nX3BhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WKoOWFpeWtmOW6n+iuqOiuuuaooeadv+WIsOmhtemdoicsICfliqDlhaXlrZjlu6LoqI7oq5bmqKHmnb/liLDpoIHpnaInKVxuXHRcdFx0XHQpO1xuXHRcdFx0XHR0YWdnaW5nX3BhZ2Uuc2V0Rm9sbG93UmVkaXJlY3QoZmFsc2UpO1xuXHRcdFx0XHR0YWdnaW5nX3BhZ2Uuc2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKHBhcmFtcyk7XG5cdFx0XHRcdHRhZ2dpbmdfcGFnZS5sb2FkKFR3aW5rbGUueGZkLmNhbGxiYWNrcy5hZmQudHJ5VGFnZ2luZyk7XG5cdFx0XHR9LFxuXHRcdFx0dHJ5VGFnZ2luZzogKHRhZ2dpbmdfcGFnZSkgPT4ge1xuXHRcdFx0XHRjb25zdCBzdGF0ZWxlbSA9IHRhZ2dpbmdfcGFnZS5nZXRTdGF0dXNFbGVtZW50KCk7XG5cdFx0XHRcdC8vIGRlZmF1bHRzIHRvIC9kb2MgZm9yIGx1YSBtb2R1bGVzLCB3aGljaCBtYXkgbm90IGV4aXN0XG5cdFx0XHRcdGlmICghdGFnZ2luZ19wYWdlLmV4aXN0cygpKSB7XG5cdFx0XHRcdFx0c3RhdGVsZW0uZXJyb3Iod2luZG93LndnVUxTKCfpobXpnaLkuI3lrZjlnKjvvIzlj6/og73lt7LooqvliKDpmaQnLCAn6aCB6Z2i5LiN5a2Y5Zyo77yM5Y+v6IO95bey6KKr5Yiq6ZmkJykpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCB0ZXh0ID0gdGFnZ2luZ19wYWdlLmdldFBhZ2VUZXh0KCk7XG5cdFx0XHRcdGNvbnN0IHhmZCA9IC8oPzpcXHtcXHsoW3JzYWlmdGNtdl1mZHxtZDF8cHJvcG9zZWQgZGVsZXRpb24pW157fV0qP1xcfVxcfSkvaS5leGVjKHRleHQpO1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0eGZkICYmXG5cdFx0XHRcdFx0IWNvbmZpcm0oXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WIoOmZpOebuOWFs+aooeadv3t7JywgJ+WIqumZpOebuOmXnOaooeadv3t7JykgK1xuXHRcdFx0XHRcdFx0XHR4ZmRbMV0gK1xuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J3195bey6KKr572u5LqO6aG16Z2i5Lit77yM5oKo5piv5ZCm5LuN5oOz57un57ut5o+Q5oql77yfJyxcblx0XHRcdFx0XHRcdFx0XHQnfX3lt7Looqvnva7mlrzpoIHpnaLkuK3vvIzmgqjmmK/lkKbku43mg7Pnubznuozmj5DloLHvvJ8nXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHN0YXRlbGVtLmVycm9yKHdpbmRvdy53Z1VMUygn6aG16Z2i5bey6KKr5o+Q5Lqk6Iez5a2Y5bqf6K6o6K6644CCJywgJ+mggemdouW3suiiq+aPkOS6pOiHs+WtmOW7ouiojuirluOAgicpKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgY29weXZpbyA9IC8oPzpcXHtcXHtcXHMqKGNvcHl2aW8pW157fV0qP1xcfVxcfSkvaS5leGVjKHRleHQpO1xuXHRcdFx0XHRpZiAoY29weXZpbykge1xuXHRcdFx0XHRcdHN0YXRlbGVtLmVycm9yKHdpbmRvdy53Z1VMUygn6aG16Z2i5Lit5bey5pyJ6JGX5L2c5p2D6aqM6K+B5qih5p2/44CCJywgJ+mggemdouS4reW3suacieiRl+S9nOasiumpl+itieaooeadv+OAgicpKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0VHdpbmtsZS54ZmQuY2FsbGJhY2tzLmFmZC5tYWluKHRhZ2dpbmdfcGFnZSk7XG5cdFx0XHR9LFxuXHRcdH0sXG5cdFx0ZmZkOiB7XG5cdFx0XHRtYWluOiAodGFnZ2luZ19wYWdlKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHBhcmFtcyA9IHRhZ2dpbmdfcGFnZS5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHRcdFx0VHdpbmtsZS54ZmQuY2FsbGJhY2tzLmZmZC50YWdnaW5nSW1hZ2UodGFnZ2luZ19wYWdlKTtcblx0XHRcdFx0Ly8gQWRkaW5nIGRpc2N1c3Npb25cblx0XHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRwYXJhbXMubG9ncGFnZSxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WKoOWFpeiuqOiuuuWIsOW9k+aXpeWIl+ihqCcsICfliqDlhaXoqI7oq5bliLDnlbbml6XliJfooagnKVxuXHRcdFx0XHQpO1xuXHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2Uuc2V0Rm9sbG93UmVkaXJlY3QodHJ1ZSk7XG5cdFx0XHRcdHlzYXJjaGl2ZXNfcGFnZS5zZXRDYWxsYmFja1BhcmFtZXRlcnMocGFyYW1zKTtcblx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLmxvYWQoVHdpbmtsZS54ZmQuY2FsbGJhY2tzLmZmZC50b2RheXNMaXN0KTtcblx0XHRcdFx0Ly8gTm90aWZpY2F0aW9uIHRvIGZpcnN0IGNvbnRyaWJ1dG9yXG5cdFx0XHRcdGlmIChwYXJhbXMubm90aWZ5KSB7XG5cdFx0XHRcdFx0Ly8gRGlzYWxsb3cgd2FybmluZyB5b3Vyc2VsZlxuXHRcdFx0XHRcdGlmIChwYXJhbXMuY3JlYXRvciA9PT0gbXcuY29uZmlnLmdldCgnd2dVc2VyTmFtZScpKSB7XG5cdFx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMud2Fybihcblx0XHRcdFx0XHRcdFx0YCR7d2luZG93LndnVUxTKCfpgJrnn6XpobXpnaLliJvlu7rogIXvvIgnLCAn6YCa55+l6aCB6Z2i5bu656uL6ICF77yIJykgKyBwYXJhbXMuY3JlYXRvcn3vvIlgLFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+aCqOWIm+W7uuS6huivpemhte+8jOi3s+i/h+mAmuefpScsICfmgqjlu7rnq4vkuoboqbLpoIHvvIzot7PpgY7pgJrnn6UnKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29uc3QgdGFsa1BhZ2VOYW1lID0gYFVzZXIgdGFsazoke3BhcmFtcy5jcmVhdG9yfWA7XG5cdFx0XHRcdFx0Y29uc3QgdXNlcnRhbGtwYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRcdHRhbGtQYWdlTmFtZSxcblx0XHRcdFx0XHRcdGAke3dpbmRvdy53Z1VMUygn6YCa55+l6aG16Z2i5Yib5bu66ICF77yIJywgJ+mAmuefpemggemdouW7uueri+iAhe+8iCcpICsgcGFyYW1zLmNyZWF0b3J977yJYFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0Y29uc3Qgbm90aWZ5dGV4dCA9ICdcXG57eycuY29uY2F0KCdzdWJzdDonLCBgaWR3fEZpbGU6JHttdy5jb25maWcuZ2V0KCd3Z1RpdGxlJyl9fX1gLCAnLS1+ficsICd+ficpO1xuXHRcdFx0XHRcdHVzZXJ0YWxrcGFnZS5zZXRBcHBlbmRUZXh0KG5vdGlmeXRleHQpO1xuXHRcdFx0XHRcdHVzZXJ0YWxrcGFnZS5zZXRFZGl0U3VtbWFyeShg6YCa55+l77ya5paH5Lu2W1ske01vcmViaXRzLnBhZ2VOYW1lTm9ybX1dXeWtmOW6n+iuqOiuuuaPkOWQjWApO1xuXHRcdFx0XHRcdHVzZXJ0YWxrcGFnZS5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRcdFx0dXNlcnRhbGtwYWdlLnNldENyZWF0ZU9wdGlvbigncmVjcmVhdGUnKTtcblx0XHRcdFx0XHR1c2VydGFsa3BhZ2Uuc2V0V2F0Y2hsaXN0KFR3aW5rbGUuZ2V0UHJlZigneGZkV2F0Y2hVc2VyJykpO1xuXHRcdFx0XHRcdHVzZXJ0YWxrcGFnZS5zZXRGb2xsb3dSZWRpcmVjdCh0cnVlLCBmYWxzZSk7XG5cdFx0XHRcdFx0dXNlcnRhbGtwYWdlLmFwcGVuZCgpO1xuXHRcdFx0XHRcdC8vIGFkZCB0aGlzIG5vbWluYXRpb24gdG8gdGhlIHVzZXIncyB1c2Vyc3BhY2UgbG9nLCBpZiB0aGUgdXNlciBoYXMgZW5hYmxlZCBpdFxuXHRcdFx0XHRcdGlmIChwYXJhbXMubG9nbm9taW5hdGlvbikge1xuXHRcdFx0XHRcdFx0VHdpbmtsZS54ZmQuY2FsbGJhY2tzLmFkZFRvTG9nKHBhcmFtcywgcGFyYW1zLmNyZWF0b3IpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBvciwgaWYgbm90IG5vdGlmeWluZywgYWRkIHRoaXMgbm9taW5hdGlvbiB0byB0aGUgdXNlcidzIHVzZXJzcGFjZSBsb2cgd2l0aG91dCB0aGUgaW5pdGlhbCBjb250cmlidXRvcidzIG5hbWVcblx0XHRcdFx0fSBlbHNlIGlmIChwYXJhbXMubG9nbm9taW5hdGlvbikge1xuXHRcdFx0XHRcdFR3aW5rbGUueGZkLmNhbGxiYWNrcy5hZGRUb0xvZyhwYXJhbXMsIG51bGwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0dGFnZ2luZ0ltYWdlOiAocGFnZW9iaikgPT4ge1xuXHRcdFx0XHRjb25zdCB0ZXh0ID0gcGFnZW9iai5nZXRQYWdlVGV4dCgpO1xuXHRcdFx0XHRjb25zdCBwYXJhbXMgPSBwYWdlb2JqLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0XHRwYWdlb2JqLnNldFBhZ2VUZXh0KFxuXHRcdFx0XHRcdGB7e2lmZHwke01vcmViaXRzLnN0cmluZy5mb3JtYXRSZWFzb25UZXh0KHBhcmFtcy54ZmRyZWFzb24pfXxkYXRlPXt7YC5jb25jYXQoXG5cdFx0XHRcdFx0XHQnc3Vic3Q6Jyxcblx0XHRcdFx0XHRcdGAjdGltZTpjfX19fVxcbiR7dGV4dH1gXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRwYWdlb2JqLnNldEVkaXRTdW1tYXJ5KFxuXHRcdFx0XHRcdGAke3dpbmRvdy53Z1VMUygn5paH5Lu25a2Y5bqf6K6o6K6677yaW1snLCAn5qqU5qGI5a2Y5bui6KiO6KuW77yaW1snKSArIHBhcmFtcy5sb2dwYWdlfSMke01vcmViaXRzLnBhZ2VOYW1lTm9ybX1dXWBcblx0XHRcdFx0KTtcblx0XHRcdFx0cGFnZW9iai5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRcdHBhZ2VvYmouc2V0V2F0Y2hsaXN0KFR3aW5rbGUuZ2V0UHJlZigneGZkV2F0Y2hQYWdlJykpO1xuXHRcdFx0XHRwYWdlb2JqLnNldENyZWF0ZU9wdGlvbigncmVjcmVhdGUnKTsgLy8gaXQgbWlnaHQgYmUgcG9zc2libGUgZm9yIGEgZmlsZSB0byBleGlzdCB3aXRob3V0IGEgZGVzY3JpcHRpb24gcGFnZVxuXHRcdFx0XHRwYWdlb2JqLnNhdmUoKTtcblx0XHRcdH0sXG5cdFx0XHR0b2RheXNMaXN0OiAocGFnZW9iaikgPT4ge1xuXHRcdFx0XHQvLyBjb25zdCB0ZXh0ID0gcGFnZW9iai5nZXRQYWdlVGV4dCgpO1xuXHRcdFx0XHRjb25zdCBwYXJhbXMgPSBwYWdlb2JqLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0XHRwYWdlb2JqLnNldEFwcGVuZFRleHQoXG5cdFx0XHRcdFx0J1xcbnt7Jy5jb25jYXQoXG5cdFx0XHRcdFx0XHQnc3Vic3Q6Jyxcblx0XHRcdFx0XHRcdGBJZmRJdGVtfEZpbGVuYW1lPSR7bXcuY29uZmlnLmdldCgnd2dUaXRsZScpfXxVcGxvYWRlcj0ke1xuXHRcdFx0XHRcdFx0XHRwYXJhbXMuY3JlYXRvclxuXHRcdFx0XHRcdFx0fXxSZWFzb249JHtNb3JlYml0cy5zdHJpbmcuZm9ybWF0UmVhc29uVGV4dChwYXJhbXMueGZkcmVhc29uKX19fS0tfn5gLmNvbmNhdCgnfn4nKVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KTtcblx0XHRcdFx0cGFnZW9iai5zZXRFZGl0U3VtbWFyeShg5Yqg5YWlW1ske01vcmViaXRzLnBhZ2VOYW1lTm9ybX1dXWApO1xuXHRcdFx0XHRwYWdlb2JqLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdFx0cGFnZW9iai5zZXRXYXRjaGxpc3QoVHdpbmtsZS5nZXRQcmVmKCd4ZmRXYXRjaERpc2N1c3Npb24nKSk7XG5cdFx0XHRcdHBhZ2VvYmouc2V0Q3JlYXRlT3B0aW9uKCdyZWNyZWF0ZScpO1xuXHRcdFx0XHRwYWdlb2JqLmFwcGVuZCgoKSA9PiB7XG5cdFx0XHRcdFx0VHdpbmtsZS54ZmQuY3VycmVudFJhdGlvbmFsZSA9IG51bGw7IC8vIGFueSBlcnJvcnMgZnJvbSBub3cgb24gZG8gbm90IG5lZWQgdG8gcHJpbnQgdGhlIHJhdGlvbmFsZSwgYXMgaXQgaXMgc2FmZWx5IHNhdmVkIG9uLXdpa2lcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXG5cdFx0XHRsb29rdXBDcmVhdGlvbjogKHRhcmdldF9wYWdlKSA9PiB7XG5cdFx0XHRcdHRhcmdldF9wYWdlLmdldFN0YXR1c0VsZW1lbnQoKS5pbmZvKCflrozmiJAnKTtcblx0XHRcdFx0Y29uc3QgcGFyYW1zID0gdGFyZ2V0X3BhZ2UuZ2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKCk7XG5cdFx0XHRcdHBhcmFtcy5jcmVhdG9yID0gdGFyZ2V0X3BhZ2UuZ2V0Q3JlYXRvcigpO1xuXHRcdFx0XHQvLyBUYWdnaW5nIGZpbGVcblx0XHRcdFx0Y29uc3QgdGFnZ2luZ19wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyksXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfliqDlhaXlrZjlup/orqjorrrmqKHmnb/liLDmlofku7bmj4/ov7DpobUnLCAn5Yqg5YWl5a2Y5bui6KiO6KuW5qih5p2/5Yiw5qqU5qGI5o+P6L+w6aCBJylcblx0XHRcdFx0KTtcblx0XHRcdFx0dGFnZ2luZ19wYWdlLnNldEZvbGxvd1JlZGlyZWN0KGZhbHNlKTtcblx0XHRcdFx0dGFnZ2luZ19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYXJhbXMpO1xuXHRcdFx0XHR0YWdnaW5nX3BhZ2UubG9hZChUd2lua2xlLnhmZC5jYWxsYmFja3MuZmZkLnRyeVRhZ2dpbmcpO1xuXHRcdFx0fSxcblx0XHRcdHRyeVRhZ2dpbmc6ICh0YWdnaW5nX3BhZ2UpID0+IHtcblx0XHRcdFx0Y29uc3Qgc3RhdGVsZW0gPSB0YWdnaW5nX3BhZ2UuZ2V0U3RhdHVzRWxlbWVudCgpO1xuXHRcdFx0XHRpZiAoIXRhZ2dpbmdfcGFnZS5leGlzdHMoKSkge1xuXHRcdFx0XHRcdHN0YXRlbGVtLmVycm9yKHdpbmRvdy53Z1VMUygn6aG16Z2i5LiN5a2Y5Zyo77yM5Y+v6IO95bey6KKr5Yig6ZmkJywgJ+mggemdouS4jeWtmOWcqO+8jOWPr+iDveW3suiiq+WIqumZpCcpKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgdGV4dCA9IHRhZ2dpbmdfcGFnZS5nZXRQYWdlVGV4dCgpO1xuXHRcdFx0XHRjb25zdCB4ZmQgPSAvKD86XFx7XFx7KFtyc2FpZnRjbXZdZmR8bWQxfHByb3Bvc2VkIGRlbGV0aW9uKVtee31dKj9cXH1cXH0pL2kuZXhlYyh0ZXh0KTtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHhmZCAmJlxuXHRcdFx0XHRcdCFjb25maXJtKFxuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfliKDpmaTnm7jlhbPmqKHmnb97eycsICfliKrpmaTnm7jpl5zmqKHmnb97eycpICtcblx0XHRcdFx0XHRcdFx0eGZkWzFdICtcblx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCd9feW3suiiq+e9ruS6jumhtemdouS4re+8jOaCqOaYr+WQpuS7jeaDs+e7p+e7reaPkOaKpe+8nycsXG5cdFx0XHRcdFx0XHRcdFx0J3195bey6KKr572u5pa86aCB6Z2i5Lit77yM5oKo5piv5ZCm5LuN5oOz57m857qM5o+Q5aCx77yfJ1xuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRzdGF0ZWxlbS5lcnJvcih3aW5kb3cud2dVTFMoJ+mhtemdouW3suiiq+aPkOS6pOiHs+WtmOW6n+iuqOiuuuOAgicsICfpoIHpnaLlt7Looqvmj5DkuqToh7PlrZjlu6LoqI7oq5bjgIInKSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFR3aW5rbGUueGZkLmNhbGxiYWNrcy5mZmQubWFpbih0YWdnaW5nX3BhZ2UpO1xuXHRcdFx0fSxcblx0XHR9LFxuXHRcdGFkZFRvTG9nOiAocGFyYW1zLCBpbml0aWFsQ29udHJpYikgPT4ge1xuXHRcdFx0Y29uc3QgZWRpdHN1bW1hcnkgPVxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+iusOW9leWvuVtbJywgJ+iomOmMhOWwjVtbJykgK1xuXHRcdFx0XHRNb3JlYml0cy5wYWdlTmFtZU5vcm0gK1xuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ11d55qE5a2Y5bqf6K6o6K665o+Q5ZCNJywgJ11d55qE5a2Y5bui6KiO6KuW5o+Q5ZCNJyk7XG5cdFx0XHRjb25zdCB1c2wgPSBuZXcgTW9yZWJpdHMudXNlcnNwYWNlTG9nZ2VyKFR3aW5rbGUuZ2V0UHJlZigneGZkTG9nUGFnZU5hbWUnKSk7XG5cdFx0XHR1c2wuaW5pdGlhbFRleHQgPSB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdGDov5nmmK/or6XnlKjmiLfkvb/nlKhbW0g6VFd8VHdpbmtsZV1d55qE5o+Q5Yig5qih5Z2X5YGa5Ye655qEW1tMSUI6WEZEfOWtmOW6n+iuqOiuul1d5o+Q5ZCN5YiX6KGo44CCXFxuXFxu6Iul5oKo5LiN5YaN5oOz5L+d55WZ5q2k5pel5b+X77yM6K+35ZyoW1ske1R3aW5rbGUuZ2V0UHJlZihcblx0XHRcdFx0XHQnY29uZmlnUGFnZSdcblx0XHRcdFx0KX185Y+C5pWw6K6+572uXV3kuK3lhbPmjonvvIzlubbkvb/nlKhbW0xJQjpDU0QjTzF8Q1NEIE8xXV3mj5DkuqTlv6vpgJ/liKDpmaTjgIJgLFxuXHRcdFx0XHRg6YCZ5piv6Kmy5L2/55So6ICF5L2/55SoW1tIOlRXfFR3aW5rbGVdXeeahOaPkOWIquaooeWhiuWBmuWHuueahFtbTElCOlhGRHzlrZjlu6LoqI7oq5ZdXeaPkOWQjeWIl+ihqOOAglxcblxcbuiLpeaCqOS4jeWGjeaDs+S/neeVmeatpOaXpeiqjO+8jOiri+WcqFtbJHtUd2lua2xlLmdldFByZWYoXG5cdFx0XHRcdFx0J2NvbmZpZ1BhZ2UnXG5cdFx0XHRcdCl9fOWBj+WlveioreWuml1d5Lit6Zec5o6J77yM5Lim5L2/55SoW1tMSUI6Q1NEI08xfENTRCBPMV1d5o+Q5Lqk5b+r6YCf5Yiq6Zmk44CCYFxuXHRcdFx0KTtcblx0XHRcdGxldCB4ZmRDYXROYW1lO1xuXHRcdFx0c3dpdGNoIChwYXJhbXMueGZkY2F0KSB7XG5cdFx0XHRcdGNhc2UgJ2RlbGV0ZSc6XG5cdFx0XHRcdFx0eGZkQ2F0TmFtZSA9IHdpbmRvdy53Z1VMUygn5Yig6ZmkJywgJ+WIqumZpCcpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdtZXJnZSc6XG5cdFx0XHRcdFx0eGZkQ2F0TmFtZSA9IHdpbmRvdy53Z1VMUygn5ZCI5bm25YiwJywgJ+WQiOS9teWIsCcpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdmd2Rjc2QnOlxuXHRcdFx0XHRcdHhmZENhdE5hbWUgPSB3aW5kb3cud2dVTFMoJ+i9rOS6pOiHquW/q+mAn+WIoOmZpOWAmemAiScsICfovYnkuqToh6rlv6vpgJ/liKrpmaTlgJnpgbgnKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnZmFtZSc6XG5cdFx0XHRcdFx0eGZkQ2F0TmFtZSA9IHdpbmRvdy53Z1VMUygn5om56YeP5YWz5rOo5bqm5o+Q5YigJywgJ+aJueasoemXnOazqOW6puaPkOWIqicpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdzdWJzdHViJzpcblx0XHRcdFx0XHR4ZmRDYXROYW1lID0gd2luZG93LndnVUxTKCfmibnph4/lsI/lsI/kvZzlk4Hmj5DliKAnLCAn5om55qyh5bCP5bCP5L2c5ZOB5o+Q5YiqJyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2JhdGNoJzpcblx0XHRcdFx0XHR4ZmRDYXROYW1lID0gd2luZG93LndnVUxTKCfmibnph4/lhbbku5bmj5DliKAnLCAn5om55qyh5YW25LuW5o+Q5YiqJyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0eGZkQ2F0TmFtZSA9IHdpbmRvdy53Z1VMUygn5paH5Lu25a2Y5bqf6K6o6K66JywgJ+aqlOahiOWtmOW7ouiojuirlicpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0Ly8gSWYgYSBsb2dnZWQgZmlsZSBpcyBkZWxldGVkIGJ1dCBleGlzdHMgb24gcmVtb3RlIHJlcG8sIHRoZSB3aWtpbGluayB3aWxsIGJlIGJsdWUsIHNvIHByb3ZpZGUgYSBsaW5rIHRvIHRoZSBsb2dcblx0XHRcdGxldCBhcHBlbmRUZXh0ID0gYCMgW1s6JHtNb3JlYml0cy5wYWdlTmFtZU5vcm19XV1gO1xuXHRcdFx0aWYgKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPT09IDYpIHtcblx0XHRcdFx0YXBwZW5kVGV4dCArPSBg77yIW3t7ZnVsbHVybDpTcGVjaWFsOkxvZ3xwYWdlPSR7bXcudXRpbC53aWtpVXJsZW5jb2RlKFxuXHRcdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKVxuXHRcdFx0XHQpfX19ICR7d2luZG93LndnVUxTKCfml6Xlv5cnLCAn5pel6KqMJyl9Xe+8iWA7XG5cdFx0XHR9XG5cdFx0XHRhcHBlbmRUZXh0ICs9IGDvvJoke3hmZENhdE5hbWV9YDtcblx0XHRcdGlmIChwYXJhbXMueGZkY2F0ID09PSAnbWVyZ2UnKSB7XG5cdFx0XHRcdGFwcGVuZFRleHQgKz0gYFtbOiR7cGFyYW1zLm1lcmdlaW50b31dXWA7XG5cdFx0XHR9XG5cdFx0XHRhcHBlbmRUZXh0ICs9ICfjgIInO1xuXHRcdFx0aWYgKHBhcmFtcy54ZmRyZWFzb24pIHtcblx0XHRcdFx0YXBwZW5kVGV4dCArPSBgJycnJHtcblx0XHRcdFx0XHRwYXJhbXMueGZkY2F0ID09PSAnZndkY3NkJyA/IHdpbmRvdy53Z1VMUygn5Y6f5Yig6Zmk55CG5o2uJywgJ+WOn+WIqumZpOeQhuaTmicpIDogd2luZG93LndnVUxTKCfnkIbmja4nLCAn55CG5pOaJylcblx0XHRcdFx0fScnJ++8miR7TW9yZWJpdHMuc3RyaW5nLmZvcm1hdFJlYXNvbkZvckxvZyhwYXJhbXMueGZkcmVhc29uKX1gO1xuXHRcdFx0XHRhcHBlbmRUZXh0ID0gTW9yZWJpdHMuc3RyaW5nLmFwcGVuZFB1bmN0dWF0aW9uKGFwcGVuZFRleHQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHBhcmFtcy5md2Rjc2RyZWFzb24pIHtcblx0XHRcdFx0YXBwZW5kVGV4dCArPSBgJycnJHtcblx0XHRcdFx0XHRwYXJhbXMueGZkY2F0ID09PSAnZndkY3NkJyA/IHdpbmRvdy53Z1VMUygn6L2s5Lqk55CG5o2uJywgJ+i9ieS6pOeQhuaTmicpIDogd2luZG93LndnVUxTKCfnkIbmja4nLCAn55CG5pOaJylcblx0XHRcdFx0fScnJ++8miR7TW9yZWJpdHMuc3RyaW5nLmZvcm1hdFJlYXNvbkZvckxvZyhwYXJhbXMuZndkY3NkcmVhc29uKX1gO1xuXHRcdFx0XHRhcHBlbmRUZXh0ID0gTW9yZWJpdHMuc3RyaW5nLmFwcGVuZFB1bmN0dWF0aW9uKGFwcGVuZFRleHQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGluaXRpYWxDb250cmliKSB7XG5cdFx0XHRcdGFwcGVuZFRleHQgKz0gYO+8m+mAmuefpXt7dXNlcnwke2luaXRpYWxDb250cmlifX19YDtcblx0XHRcdH1cblx0XHRcdGFwcGVuZFRleHQgKz0gJyB+ficuY29uY2F0KCd+ficsICd+XFxuJyk7XG5cdFx0XHR1c2wuY2hhbmdlVGFncyA9IFR3aW5rbGUuY2hhbmdlVGFncztcblx0XHRcdHVzbC5sb2coYXBwZW5kVGV4dCwgZWRpdHN1bW1hcnkpO1xuXHRcdH0sXG5cdH07XG5cdFR3aW5rbGUueGZkLmNhbGxiYWNrLmV2YWx1YXRlID0gKGUpID0+IHtcblx0XHRjb25zdCBwYXJhbXMgPSBNb3JlYml0cy5xdWlja0Zvcm0uZ2V0SW5wdXREYXRhKGUudGFyZ2V0KTtcblx0XHRpZiAocGFyYW1zLnhmZGNhdCA9PT0gJ21lcmdlJyAmJiBwYXJhbXMubWVyZ2VpbnRvLnRyaW0oKSA9PT0gJycpIHtcblx0XHRcdHZvaWQgbXcubm90aWZ5KHdpbmRvdy53Z1VMUygn6K+35o+Q5L6b5ZCI5bm255uu5qCH77yBJywgJ+iri+aPkOS+m+WQiOS9teebruaome+8gScpLCB7XG5cdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0dGFnOiAndHdpbmtsZXhmZCcsXG5cdFx0XHR9KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0TW9yZWJpdHMuc2ltcGxlV2luZG93LnNldEJ1dHRvbnNFbmFibGVkKGZhbHNlKTtcblx0XHRNb3JlYml0cy5zdGF0dXMuaW5pdChlLnRhcmdldCk7XG5cdFx0VHdpbmtsZS54ZmQuY3VycmVudFJhdGlvbmFsZSA9IHBhcmFtcy54ZmRyZWFzb247XG5cdFx0TW9yZWJpdHMuc3RhdHVzLm9uRXJyb3IoVHdpbmtsZS54ZmQucHJpbnRSYXRpb25hbGUpO1xuXHRcdGlmICghcGFyYW1zLmNhdGVnb3J5KSB7XG5cdFx0XHRNb3JlYml0cy5zdGF0dXMuZXJyb3IoJ+mUmeivrycsICfmnKrlrprkuYnnmoTliqjkvZwnKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0bGV0IHRhcmdldF9wYWdlO1xuXHRcdGNvbnN0IGRhdGUgPSBuZXcgTW9yZWJpdHMuZGF0ZSgpOyAvLyBYWFg6IGF2b2lkIHVzZSBvZiBjbGllbnQgY2xvY2ssIHN0aWxsIHVzZWQgYnkgVGZELCBGZkQgYW5kIENmRFxuXHRcdHN3aXRjaCAocGFyYW1zLmNhdGVnb3J5KSB7XG5cdFx0XHRjYXNlICdhZmQnOlxuXHRcdFx0XHQvLyBBRkRcblx0XHRcdFx0cGFyYW1zLmxvZ3BhZ2UgPSBgTElCX3RhbGs65a2Y5bqf6K6o6K66L+iusOW9lS8ke2RhdGUuZm9ybWF0KCdZWVlZL01NL0REJywgJ3V0YycpfWA7XG5cdFx0XHRcdHBhcmFtcy5sb2dub21pbmF0aW9uID1cblx0XHRcdFx0XHRUd2lua2xlLmdldFByZWYoJ2xvZ1hmZE5vbWluYXRpb25zJykgJiZcblx0XHRcdFx0XHQhVHdpbmtsZS5nZXRQcmVmKCdub0xvZ09uWGZkTm9taW5hdGlvbicpLmluY2x1ZGVzKHBhcmFtcy54ZmRjYXQpO1xuXHRcdFx0XHRNb3JlYml0cy53aWtpLmFkZENoZWNrcG9pbnQoKTtcblx0XHRcdFx0Ly8gVXBkYXRpbmcgZGF0YSBmb3IgdGhlIGFjdGlvbiBjb21wbGV0ZWQgZXZlbnRcblx0XHRcdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQucmVkaXJlY3QgPSBwYXJhbXMubG9ncGFnZTtcblx0XHRcdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQubm90aWNlID0gd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdCfmj5DlkI3lrozmiJDvvIzph43lrprlkJHliLDorqjorrrpobUnLFxuXHRcdFx0XHRcdCfmj5DlkI3lrozmiJDvvIzph43mlrDlsI7lkJHliLDoqI7oq5bpoIEnXG5cdFx0XHRcdCk7XG5cdFx0XHRcdC8vIExvb2t1cCBjcmVhdGlvblxuXHRcdFx0XHR0YXJnZXRfcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHRcdFx0bXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn6I635Y+W6aG16Z2i5Yib5bu65L+h5oGvJywgJ+WPluW+l+mggemdouW7uueri+izh+ioiicpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHRhcmdldF9wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYXJhbXMpO1xuXHRcdFx0XHRpZiAobXcuY29uZmlnLmdldCgnd2dQYWdlQ29udGVudE1vZGVsJykgPT09ICd3aWtpdGV4dCcpIHtcblx0XHRcdFx0XHR0YXJnZXRfcGFnZS5zZXRMb29rdXBOb25SZWRpcmVjdENyZWF0b3IodHJ1ZSk7IC8vIExvb2sgZm9yIGF1dGhvciBvZiBmaXJzdCBub24tcmVkaXJlY3QgcmV2aXNpb25cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRhcmdldF9wYWdlLmxvb2t1cENyZWF0aW9uKFR3aW5rbGUueGZkLmNhbGxiYWNrcy5hZmQubG9va3VwQ3JlYXRpb24pO1xuXHRcdFx0XHRNb3JlYml0cy53aWtpLnJlbW92ZUNoZWNrcG9pbnQoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdmZmQnOiB7XG5cdFx0XHRcdC8vIEZGRFxuXHRcdFx0XHRwYXJhbXMubG9ncGFnZSA9IGBMSUJfdGFsazrlrZjlup/orqjorrov6K6w5b2VLyR7ZGF0ZS5mb3JtYXQoJ1lZWVkvTU0vREQnLCAndXRjJyl9YDtcblx0XHRcdFx0cGFyYW1zLmxvZ25vbWluYXRpb24gPVxuXHRcdFx0XHRcdFR3aW5rbGUuZ2V0UHJlZignbG9nWGZkTm9taW5hdGlvbnMnKSAmJiAhVHdpbmtsZS5nZXRQcmVmKCdub0xvZ09uWGZkTm9taW5hdGlvbicpLmluY2x1ZGVzKCdmZmQnKTtcblx0XHRcdFx0TW9yZWJpdHMud2lraS5hZGRDaGVja3BvaW50KCk7XG5cdFx0XHRcdC8vIFVwZGF0aW5nIGRhdGEgZm9yIHRoZSBhY3Rpb24gY29tcGxldGVkIGV2ZW50XG5cdFx0XHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLnJlZGlyZWN0ID0gcGFyYW1zLmxvZ3BhZ2U7XG5cdFx0XHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLm5vdGljZSA9IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHQn5o+Q5ZCN5a6M5oiQ77yM6YeN5a6a5ZCR5Yiw6K6o6K666aG1Jyxcblx0XHRcdFx0XHQn5o+Q5ZCN5a6M5oiQ77yM6YeN5paw5bCO5ZCR5Yiw6KiO6KuW6aCBJ1xuXHRcdFx0XHQpO1xuXHRcdFx0XHQvLyBMb29rdXAgY3JlYXRpb25cblx0XHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyksXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfojrflj5bpobXpnaLliJvlu7rkv6Hmga8nLCAn5Y+W5b6X6aCB6Z2i5bu656uL6LOH6KiKJylcblx0XHRcdFx0KTtcblx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYXJhbXMpO1xuXHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2Uuc2V0TG9va3VwTm9uUmVkaXJlY3RDcmVhdG9yKHRydWUpOyAvLyBMb29rIGZvciBhdXRob3Igb2YgZmlyc3Qgbm9uLXJlZGlyZWN0IHJldmlzaW9uXG5cdFx0XHRcdHlzYXJjaGl2ZXNfcGFnZS5sb29rdXBDcmVhdGlvbihUd2lua2xlLnhmZC5jYWxsYmFja3MuZmZkLmxvb2t1cENyZWF0aW9uKTtcblx0XHRcdFx0TW9yZWJpdHMud2lraS5yZW1vdmVDaGVja3BvaW50KCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dm9pZCBtdy5ub3RpZnkoJ3R3aW5rbGV4ZmTvvJrmnKrlrprkuYnnmoTnsbvliKsnLCB7XG5cdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdHRhZzogJ3R3aW5rbGV4ZmQnLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9O1xuXHRUd2lua2xlLmFkZEluaXRDYWxsYmFjayhUd2lua2xlLnhmZCwgJ3hmZCcpO1xufSkoKTtcblxuZXhwb3J0IHt9O1xuIiwgIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1ub2NoZWNrXG4vKiEgVHdpbmtsZS5qcyAtIHR3aW5rbGVpbWFnZS5qcyAqL1xuKGZ1bmN0aW9uIHR3aW5rbGVpbWFnZSgpIHtcblx0LyoqXG5cdCAqIHR3aW5rbGVpbWFnZS5qczogSW1hZ2UgQ1NEIG1vZHVsZVxuXHQgKiBNb2RlIG9mIGludm9jYXRpb246IFRhYiAoXCJESVwiKVxuXHQgKiBBY3RpdmUgb246IExvY2FsIG5vbnJlZGlyZWN0IGZpbGUgcGFnZXMgKG5vdCBvbiBTaGFyZSlcblx0ICovXG5cdFR3aW5rbGUuaW1hZ2UgPSAoKSA9PiB7XG5cdFx0aWYgKFxuXHRcdFx0bXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSA9PT0gNiAmJlxuXHRcdFx0IWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtdy1zaGFyZWR1cGxvYWQnKSAmJlxuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI213LWltYWdlcGFnZS1zZWN0aW9uLWZpbGVoaXN0b3J5Jylcblx0XHQpIHtcblx0XHRcdFR3aW5rbGUuYWRkUG9ydGxldExpbmsoXG5cdFx0XHRcdFR3aW5rbGUuaW1hZ2UuY2FsbGJhY2ssXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn5Zu+5p2DJywgJ+WcluasiicpLFxuXHRcdFx0XHQndHctZGknLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+aPkOS6pOaWh+S7tuW/q+mAn+WIoOmZpCcsICfmj5DkuqTmqpTmoYjlv6vpgJ/liKrpmaQnKVxuXHRcdFx0KTtcblx0XHR9XG5cdH07XG5cdFR3aW5rbGUuaW1hZ2UuY2FsbGJhY2sgPSAoKSA9PiB7XG5cdFx0Y29uc3QgV2luZG93ID0gbmV3IE1vcmViaXRzLnNpbXBsZVdpbmRvdyg2MDAsIDMzMCk7XG5cdFx0V2luZG93LnNldFRpdGxlKHdpbmRvdy53Z1VMUygn5paH5Lu25b+r6YCf5Yig6Zmk5YCZ6YCJJywgJ+aqlOahiOW/q+mAn+WIqumZpOWAmemBuCcpKTtcblx0XHRXaW5kb3cuc2V0U2NyaXB0TmFtZSgnVHdpbmtsZScpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygn5b+r6YCf5Yig6Zmk5p2h5L6LJywgJ+W/q+mAn+WIqumZpOaineS+iycpLCAnTElCOkNTRCcpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygn5Zu+5p2D6K6+572uJywgJ+WcluasiuioreWumicpLCAnSDpUVy9QUkVGI2ltYWdlJyk7XG5cdFx0V2luZG93LmFkZEZvb3Rlckxpbmsod2luZG93LndnVUxTKCdUd2lua2xl5biu5YqpJywgJ1R3aW5rbGXoqqrmmI4nKSwgJ0g6VFcvRE9DI2ltYWdlJyk7XG5cdFx0Y29uc3QgZm9ybSA9IG5ldyBNb3JlYml0cy5xdWlja0Zvcm0oVHdpbmtsZS5pbWFnZS5jYWxsYmFjay5ldmFsdWF0ZSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+mAmuefpeS4iuS8oOiAhScsICfpgJrnn6XkuIrlgrPogIUnKSxcblx0XHRcdFx0XHR2YWx1ZTogJ25vdGlmeScsXG5cdFx0XHRcdFx0bmFtZTogJ25vdGlmeScsXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+iLpeaCqOWcqOagh+iusOWQjOS4gOeUqOaIt+eahOW+iOWkmuaWh+S7tu+8jOivt+WPlua2iOatpOWkjemAieahhuS7pemBv+WFjeWPkemAgei/h+Wkmua2iOaBr+OAgkNTRCBGNeawuOi/nOS4jeS8mumAmuefpeOAgicsXG5cdFx0XHRcdFx0XHQn6Iul5oKo5Zyo5qiZ6KiY5ZCM5LiA5L2/55So6ICF55qE5b6I5aSa5qqU5qGI77yM6KuL5Y+W5raI5q2k5qC45Y+W5pa55aGK5Lul6YG/5YWN55m86YCB6YGO5aSa6KiK5oGv44CCQ1NEIEY15rC46YGg5LiN5pyD6YCa55+l44CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0Y2hlY2tlZDogVHdpbmtsZS5nZXRQcmVmKCdub3RpZnlVc2VyT25EZWxpJyksXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0pO1xuXHRcdGNvbnN0IGZpZWxkID0gZm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2ZpZWxkJyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+mcgOimgeeahOWKqOS9nCcsICfpnIDopoHnmoTli5XkvZwnKSxcblx0XHR9KTtcblx0XHRmaWVsZC5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ3JhZGlvJyxcblx0XHRcdG5hbWU6ICd0eXBlJyxcblx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aYjuaYvuS+teadg+S5i+aWh+S7tu+8iENTRCBGMe+8iScsICfmmI7poa/kvrXmrIrkuYvmqpTmoYjvvIhDU0QgRjHvvIknKSxcblx0XHRcdFx0XHR2YWx1ZTogJ25vIHBlcm1pc3Npb24nLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfkuIrkvKDogIXlrqPnp7Dmi6XmnInvvIzogIzlnKjlhbbku5bmnaXmupDmib7liLDnmoTmlofku7bvvIzmiJbku47kvrXmnYPnmoTmnaXmupDojrflj5bnmoTmlofku7bjgIInLFxuXHRcdFx0XHRcdFx0J+S4iuWCs+iAheWuo+eoseaTgeacie+8jOiAjOWcqOWFtuS7luS+hua6kOaJvuWIsOeahOaqlOahiO+8jOaIluW+nuS+teasiueahOS+hua6kOWPluW+l+eahOaqlOahiOOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHN1Ymdyb3VwOiB7XG5cdFx0XHRcdFx0XHRuYW1lOiAnZjFfc291cmNlJyxcblx0XHRcdFx0XHRcdHR5cGU6ICd0ZXh0YXJlYScsXG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfkvrXmnYPmnaXmupDvvJonLCAn5L615qyK5L6G5rqQ77yaJyksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+adpea6kOS4jeaYju+8iENTRCBGM++8iScsICfkvobmupDkuI3mmI7vvIhDU0QgRjPvvIknKSxcblx0XHRcdFx0XHR2YWx1ZTogJ25vIHNvdXJjZScsXG5cdFx0XHRcdFx0Y2hlY2tlZDogdHJ1ZSxcblx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoJ+acrOaWh+S7tuW5tuacquazqOaYjuWOn+Wni+WHuuWkhCcsICfmnKzmqpTmoYjkuKbmnKroqLvmmI7ljp/lp4vlh7romZUnKSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+acquefpeiRl+S9nOadg+S/oeaBr++8iENTRCBGM++8iScsICfmnKrnn6XokZfkvZzmrIros4foqIrvvIhDU0QgRjPvvIknKSxcblx0XHRcdFx0XHR2YWx1ZTogJ25vIGxpY2Vuc2UnLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn5pys5paH5Lu257y65bCR6JGX5L2c5p2D5L+h5oGvJywgJ+acrOaqlOahiOe8uuWwkeiRl+S9nOasiuizh+ioiicpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6JGX5L2c5p2D5peg5rOV6KKr5p+l6K+B77yIQ1NEIEYz77yJJywgJ+iRl+S9nOasiueEoeazleiiq+afpeitie+8iENTRCBGM++8iScpLFxuXHRcdFx0XHRcdHZhbHVlOiAnbm8gbGljZW5zZScsXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKCfmnKzmlofku7blo7Dnp7DnmoTokZfkvZzmnYPkv6Hmga/ml6Dms5Xooqvmn6Xor4EnLCAn5pys5qqU5qGI6IGy56ix55qE6JGX5L2c5qyK6LOH6KiK54Sh5rOV6KKr5p+l6K2JJyksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflj6/ooqvmm7/ku6PnmoTpnZ7oh6rnlLHokZfkvZzmnYPmlofku7bvvIhDU0QgRjTvvIknLCAn5Y+v6KKr5pu/5Luj55qE6Z2e6Ieq55Sx6JGX5L2c5qyK5qqU5qGI77yIQ1NEIEY077yJJyksXG5cdFx0XHRcdFx0dmFsdWU6ICdyZXBsYWNlYWJsZSBmYWlyIHVzZScsXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+aWh+S7tuS7heeUqOS6juaPj+i/sOOAgeivhuWIq+aIluivhOiuuuaWh+S7tuS4reWxleekuueahOS6i+eJqe+8jOaIluS7heeUqOS9nOaPkuWbvu+8jOS4lOa7oei2s+S7peS4i+Wbm+S4quadoeS7tuS5i+S4gOOAguiLpee7meWHuuS6huWFtuS7luWQiOeQhuS9v+eUqOS+neaNru+8jOS4jemAgueUqOacrOadoeOAguWmguWvueaWh+S7tueahOWPr+abv+S7o+aAp+WtmOWcqOS6ieiuru+8jOW6lOS6pOaWh+S7tuWtmOW6n+iuqOiuuuWkhOeQhuOAguacrOadoeS5n+S4jemAgueUqOS6juato+WcqOaIluabvue7j+eUseaWh+S7tuWtmOW6n+iuqOiuuuWkhOeQhui/h+eahOaWh+S7tuOAgicsXG5cdFx0XHRcdFx0XHQn5qqU5qGI5YOF55So5pa85o+P6L+w44CB6L6o6K2Y5oiW6KmV6KuW5qqU5qGI5Lit5bGV56S655qE5LqL54mp77yM5oiW5YOF55So5L2c5o+S5ZyW77yM5LiU5ru/6Laz5Lul5LiL5Zub5YCL5qKd5Lu25LmL5LiA44CC6Iul57Wm5Ye65LqG5YW25LuW5ZCI55CG5L2/55So5L6d5pOa77yM5LiN6YGp55So5pys5qKd44CC5aaC5bCN5qqU5qGI55qE5Y+v5pu/5Luj5oCn5a2Y5Zyo54it6K2w77yM5oeJ5Lqk5qqU5qGI5a2Y5bui6KiO6KuW6JmV55CG44CC5pys5qKd5Lmf5LiN6YGp55So5pa85q2j5Zyo5oiW5pu+57aT55Sx5qqU5qGI5a2Y5bui6KiO6KuW6JmV55CG6YGO55qE5qqU5qGI44CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0c3ViZ3JvdXA6IHtcblx0XHRcdFx0XHRcdG5hbWU6ICdmNF90eXBlJyxcblx0XHRcdFx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6YCC55So57G75Z6L77yaJywgJ+mBqeeUqOmhnuWIpe+8micpLFxuXHRcdFx0XHRcdFx0c3R5bGU6ICd3aWR0aDogODUlOycsXG5cdFx0XHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfor7fpgInmi6knLCAn6KuL6YG45pOHJyksXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU6ICcnLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogJ29wdGlvbicsXG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHRcdCfmnInlhbbku5boh6rnlLHokZfkvZzmnYPmlofku7blsZXnpLrnm7jlkIznmoTkuovniaknLFxuXHRcdFx0XHRcdFx0XHRcdFx0J+acieWFtuS7luiHqueUseiRl+S9nOasiuaqlOahiOWxleekuuebuOWQjOeahOS6i+eJqSdcblx0XHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiAnMScsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdFx0J+aWh+S7tuaPj+i/sOeahOaYr+WcqOS4luaIluWBh+WumuWcqOS4luS6uueJqeOAgeS7jeeEtuWtmOWcqOeahOW7uuetkeOAgeWupOWklumbleWhkeaIluS7jeeEtuWcqOWUrueahOWVhuWTge+8jOS4lOmihOiuoeiHquihjOaLjeaRhOeahOeFp+eJh+S4jeWPl+S7luS6uuiRl+S9nOadg+S/neaKpCcsXG5cdFx0XHRcdFx0XHRcdFx0XHQn5qqU5qGI5o+P6L+w55qE5piv5Zyo5LiW5oiW5YGH5a6a5Zyo5LiW5Lq654mp44CB5LuN54S25a2Y5Zyo55qE5bu656+J44CB5a6k5aSW6ZuV5aGR5oiW5LuN54S25Zyo5ZSu55qE5ZWG5ZOB77yM5LiU6aCQ6KiI6Ieq6KGM5ouN5pSd55qE55u454mH5LiN5Y+X5LuW5Lq66JGX5L2c5qyK5L+d6K23J1xuXHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU6ICcyJyxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6ICdvcHRpb24nLFxuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aWh+S7tuS4uuWPr+iHquihjOe7mOWItueahOWcsOWbvuaIluWbvuihqCcsICfmqpTmoYjngrrlj6/oh6rooYznuaroo73nmoTlnLDlnJbmiJblnJbooagnKSxcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogJzMnLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogJ29wdGlvbicsXG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHRcdCfmlofku7bmnaXoh6rllYbkuJrlm77niYfmnLrmnoTvvIjlpoJHZXR0ee+8iScsXG5cdFx0XHRcdFx0XHRcdFx0XHQn5qqU5qGI5L6G6Ieq5ZWG5qWt5ZyW54mH5qmf5qeL77yI5aaCR2V0dHnvvIknXG5cdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogJzQnLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfmsqHmnInooqvmnaHnm67kvb/nlKjnmoTpnZ7oh6rnlLHokZfkvZzmnYPmlofku7bvvIhDU0QgRjXvvIknLFxuXHRcdFx0XHRcdFx0J+aykuacieiiq+aineebruS9v+eUqOeahOmdnuiHqueUseiRl+S9nOasiuaqlOahiO+8iENTRCBGNe+8iSdcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHZhbHVlOiAnb3JwaGFuZWQgZmFpciB1c2UnLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfmnKzmlofku7bkuLrpnZ7oh6rnlLHokZfkvZzmnYPkuJTmsqHmnInooqvmnaHnm67kvb/nlKgnLFxuXHRcdFx0XHRcdFx0J+acrOaqlOahiOeCuumdnuiHqueUseiRl+S9nOasiuS4lOaykuacieiiq+aineebruS9v+eUqCdcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfmsqHmnInloavlhpnku7vkvZXlkIjnkIbkvb/nlKjkvp3mja7nmoTpnZ7oh6rnlLHokZfkvZzmnYPmlofku7bvvIhDU0QgRjXvvIknLFxuXHRcdFx0XHRcdFx0J+aykuacieWhq+Wvq+S7u+S9leWQiOeQhuS9v+eUqOS+neaTmueahOmdnuiHqueUseiRl+S9nOasiuaqlOahiO+8iENTRCBGNe+8iSdcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHZhbHVlOiAnbm8gZmFpciB1c2UgcmF0aW9uYWxlJyxcblx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5LiN6YCC55So5LqO5pyJ5LqJ6K6u5L2G5a6M5pW055qE5ZCI55CG5L2/55So5L6d5o2u44CC6Iul6Z2e6Ieq55Sx6JGX5L2c5p2D5paH5Lu25Y+q5pyJ6YOo5YiG5p2h55uu55qE5L2/55So5L6d5o2u77yM5L2G5ZCM5pe26KKr5L2/55So5LqO5pyq5o+Q5L6b5ZCI55CG5L2/55So5L6d5o2u55qE5p2h55uu77yM5YiZ5pys5p2h5L6L5Lmf5LiN6YCC55So44CCJyxcblx0XHRcdFx0XHRcdCfkuI3pgannlKjmlrzmnInniK3orbDkvYblrozmlbTnmoTlkIjnkIbkvb/nlKjkvp3mk5rjgILoi6XpnZ7oh6rnlLHokZfkvZzmrIrmqpTmoYjlj6rmnInpg6jliIbmop3nm67nmoTkvb/nlKjkvp3mk5rvvIzkvYblkIzmmYLooqvkvb/nlKjmlrzmnKrmj5DkvpvlkIjnkIbkvb/nlKjkvp3mk5rnmoTmop3nm67vvIzliYfmnKzmop3kvovkuZ/kuI3pgannlKjjgIInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ3N1Ym1pdCcsXG5cdFx0fSk7XG5cdFx0Y29uc3QgcmVzdWx0ID0gZm9ybS5yZW5kZXIoKTtcblx0XHRXaW5kb3cuc2V0Q29udGVudChyZXN1bHQpO1xuXHRcdFdpbmRvdy5kaXNwbGF5KCk7XG5cdFx0Ly8gV2UgbXVzdCBpbml0IHRoZSBwYXJhbWV0ZXJzXG5cdFx0Y29uc3QgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG5cdFx0ZXZ0LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG5cdFx0cmVzdWx0LnR5cGVbMF0uZGlzcGF0Y2hFdmVudChldnQpO1xuXHR9O1xuXHRUd2lua2xlLmltYWdlLmNhbGxiYWNrLmV2YWx1YXRlID0gKGV2ZW50KSA9PiB7XG5cdFx0bGV0IHR5cGU7XG5cdFx0bGV0IG5vdGlmeSA9IGV2ZW50LnRhcmdldC5ub3RpZnkuY2hlY2tlZDtcblx0XHRjb25zdCB0eXBlcyA9IGV2ZW50LnRhcmdldC50eXBlO1xuXHRcdGZvciAoY29uc3QgdHlwZV8gb2YgdHlwZXMpIHtcblx0XHRcdGlmICh0eXBlXy5jaGVja2VkKSB7XG5cdFx0XHRcdHR5cGUgPSB0eXBlXy52YWx1ZXM7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRsZXQgY3NkY3JpdDtcblx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdGNhc2UgJ25vIHNvdXJjZSc6XG5cdFx0XHRcdGNzZGNyaXQgPSAnZjMnO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ25vIGxpY2Vuc2UnOlxuXHRcdFx0XHRjc2Rjcml0ID0gJ2YzJztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdvcnBoYW5lZCBmYWlyIHVzZSc6XG5cdFx0XHRcdGNzZGNyaXQgPSAnZjUnO1xuXHRcdFx0XHRub3RpZnkgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdubyBwZXJtaXNzaW9uJzpcblx0XHRcdFx0Y3NkY3JpdCA9ICdmMSc7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnbm8gZmFpciB1c2UgcmF0aW9uYWxlJzpcblx0XHRcdFx0Y3NkY3JpdCA9ICdmNSc7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAncmVwbGFjZWFibGUgZmFpciB1c2UnOlxuXHRcdFx0XHRjc2Rjcml0ID0gJ2Y0Jztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1R3aW5rbGUuaW1hZ2UuY2FsbGJhY2suZXZhbHVhdGXvvJrmnKrnn6XmnaHmrL4nKTtcblx0XHR9XG5cdFx0Y29uc3QgbG9nbm9taW5hdGlvbiA9XG5cdFx0XHRUd2lua2xlLmdldFByZWYoJ2xvZ1NwZWVkeU5vbWluYXRpb25zJykgJiZcblx0XHRcdCFUd2lua2xlLmdldFByZWYoJ25vTG9nT25TcGVlZHlOb21pbmF0aW9uJykuaW5jbHVkZXMoY3NkY3JpdC50b0xvd2VyQ2FzZSgpKTtcblx0XHRjb25zdCB0ZW1wbGF0ZW5hbWUgPSB0eXBlO1xuXHRcdGNvbnN0IHBhcmFtcyA9IHtcblx0XHRcdHR5cGUsXG5cdFx0XHR0ZW1wbGF0ZW5hbWUsXG5cdFx0XHRub3JtYWxpemVkOiBjc2Rjcml0LFxuXHRcdFx0bG9nbm9taW5hdGlvbixcblx0XHR9O1xuXHRcdGlmIChjc2Rjcml0ID09PSAnZjEnKSB7XG5cdFx0XHRwYXJhbXMuZjFfc291cmNlID0gZXZlbnQudGFyZ2V0Wyd0eXBlLmYxX3NvdXJjZSddLnZhbHVlO1xuXHRcdH1cblx0XHRpZiAoY3NkY3JpdCA9PT0gJ2Y0Jykge1xuXHRcdFx0Y29uc3QgZjRfdHlwZSA9IGV2ZW50LnRhcmdldFsndHlwZS5mNF90eXBlJ10udmFsdWU7XG5cdFx0XHRpZiAoIWY0X3R5cGUpIHtcblx0XHRcdFx0dm9pZCBtdy5ub3RpZnkod2luZG93LndnVUxTKCdDU0QgRjTvvJror7fpgInmi6npgILnlKjnsbvlnovjgIInLCAnQ1NEIEY077ya6KuL6YG45pOH6YGp55So6aGe5Yil44CCJyksIHtcblx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0dGFnOiAndHdpbmtsZWltYWdlJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHBhcmFtcy5mNF90eXBlID0gZjRfdHlwZTtcblx0XHR9XG5cdFx0TW9yZWJpdHMuc2ltcGxlV2luZG93LnNldEJ1dHRvbnNFbmFibGVkKGZhbHNlKTtcblx0XHRNb3JlYml0cy5zdGF0dXMuaW5pdChldmVudC50YXJnZXQpO1xuXHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLnJlZGlyZWN0ID0gbXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpO1xuXHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLm5vdGljZSA9IHdpbmRvdy53Z1VMUygn5qCH6K6w5a6M5oiQJywgJ+aomeiomOWujOaIkCcpO1xuXHRcdC8vIFRhZ2dpbmcgaW1hZ2Vcblx0XHRjb25zdCB5c2FyY2hpdmVzX3BhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0bXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLFxuXHRcdFx0d2luZG93LndnVUxTKCfliqDlhaXliKDpmaTmoIforrAnLCAn5Yqg5YWl5Yiq6Zmk5qiZ6KiYJylcblx0XHQpO1xuXHRcdHlzYXJjaGl2ZXNfcGFnZS5zZXRDYWxsYmFja1BhcmFtZXRlcnMocGFyYW1zKTtcblx0XHR5c2FyY2hpdmVzX3BhZ2UubG9hZChUd2lua2xlLmltYWdlLmNhbGxiYWNrcy50YWdnaW5nSW1hZ2UpO1xuXHRcdC8vIE5vdGlmeWluZyB1cGxvYWRlclxuXHRcdGlmIChub3RpZnkpIHtcblx0XHRcdHlzYXJjaGl2ZXNfcGFnZS5sb29rdXBDcmVhdGlvbihUd2lua2xlLmltYWdlLmNhbGxiYWNrcy51c2VyTm90aWZpY2F0aW9uKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gYWRkIHRvIENTRCBsb2cgaWYgZGVzaXJlZFxuXHRcdFx0aWYgKGxvZ25vbWluYXRpb24pIHtcblx0XHRcdFx0cGFyYW1zLmZyb21ESSA9IHRydWU7XG5cdFx0XHRcdFR3aW5rbGUuc3BlZWR5LmNhbGxiYWNrcy51c2VyLmFkZFRvTG9nKHBhcmFtcywgbnVsbCk7XG5cdFx0XHR9XG5cdFx0XHQvLyBObyBhdXRvLW5vdGlmaWNhdGlvbiwgZGlzcGxheSB3aGF0IHdhcyBnb2luZyB0byBiZSBhZGRlZC5cblx0XHRcdGlmICh0eXBlICE9PSAnb3JwaGFuZWQgZmFpciB1c2UnKSB7XG5cdFx0XHRcdGNvbnN0IG5vdGVEYXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncHJlJyk7XG5cdFx0XHRcdG5vdGVEYXRhLmFwcGVuZENoaWxkKFxuXHRcdFx0XHRcdGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFxuXHRcdFx0XHRcdFx0J3t7Jy5jb25jYXQoJ3N1YnN0OicsIGBVcGxvYWR2aW9ub3RpY2V8JHtNb3JlYml0cy5wYWdlTmFtZU5vcm19fX0tLX5+YCwgJ35+Jylcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdE1vcmViaXRzLnN0YXR1cy5pbmZvKCfmj5DnpLonLCBbXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfov5nkupvlhoXlrrnlupTotLTov5vkuIrkvKDogIXlr7nor53pobXvvJonLCAn6YCZ5Lqb5YWn5a655oeJ6LK86YCy5LiK5YKz6ICF6KiO6KuW6aCB77yaJyksXG5cdFx0XHRcdFx0bm90ZURhdGEsXG5cdFx0XHRcdF0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0VHdpbmtsZS5pbWFnZS5jYWxsYmFja3MgPSB7XG5cdFx0dGFnZ2luZ0ltYWdlOiAocGFnZW9iaikgPT4ge1xuXHRcdFx0bGV0IHRleHQgPSBwYWdlb2JqLmdldFBhZ2VUZXh0KCk7XG5cdFx0XHRjb25zdCBwYXJhbXMgPSBwYWdlb2JqLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0Ly8gcmVtb3ZlIHRhZyAtIGRlbGV0aW9uLXRhZ2dlZCBmaWxlcyBjYW5ub3QgYmUgbW92ZWRcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoXG5cdFx0XHRcdC9cXHtcXHsobXRjfChjb3B5IHxtb3ZlICk/dG8gPyhzaGFyZXxjb21tb25zKXxtb3ZlIHRvIChxaXV3ZW4gc2hhcmV8d2lraW1lZGlhIGNvbW1vbnMpfGNvcHkgdG8gKHFpdXdlbiBzaGFyZXx3aWtpbWVkaWEgY29tbW9ucykpW159XSpcXH1cXH0vZ2ksXG5cdFx0XHRcdCcnXG5cdFx0XHQpO1xuXHRcdFx0Ly8gQWRkaW5nIGRpc2N1c3Npb25cblx0XHRcdGlmIChwYXJhbXMudHlwZSAhPT0gJ29ycGhhbmVkIGZhaXIgdXNlJykge1xuXHRcdFx0XHRjb25zdCB5c2FyY2hpdmVzX3BhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0XHRcdCdMSUJfdGFsazrlrZjlup/orqjorrov5paH5Lu25b+r6YCf5Yig6Zmk5o+Q5oqlJyxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WKoOWFpeW/q+mAn+WIoOmZpOiusOW9lemhuScsICfliqDlhaXlv6vpgJ/liKrpmaToqJjpjITpoIUnKVxuXHRcdFx0XHQpO1xuXHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2Uuc2V0Rm9sbG93UmVkaXJlY3QodHJ1ZSk7XG5cdFx0XHRcdHlzYXJjaGl2ZXNfcGFnZS5zZXRDYWxsYmFja1BhcmFtZXRlcnMocGFyYW1zKTtcblx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLmxvYWQoVHdpbmtsZS5pbWFnZS5jYWxsYmFja3MuaW1hZ2VMaXN0KTtcblx0XHRcdH1cblx0XHRcdGxldCB0YWcgPSAnJztcblx0XHRcdHN3aXRjaCAocGFyYW1zLnR5cGUpIHtcblx0XHRcdFx0Y2FzZSAnb3JwaGFuZWQgZmFpciB1c2UnOlxuXHRcdFx0XHRcdHRhZyA9ICd7eycuY29uY2F0KCdzdWJzdDonLCAnb3JwaGFuZWQgZmFpciB1c2V9fVxcbicpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdubyBwZXJtaXNzaW9uJzpcblx0XHRcdFx0XHR0YWcgPSAne3snLmNvbmNhdChcblx0XHRcdFx0XHRcdCdzdWJzdDonLFxuXHRcdFx0XHRcdFx0YCR7cGFyYW1zLnRlbXBsYXRlbmFtZX0vYXV0b3wxPSR7cGFyYW1zLmYxX3NvdXJjZVxuXHRcdFx0XHRcdFx0XHQucmVwbGFjZSgvaHR0cC9nLCAnJiMxMDQ7dHRwJylcblx0XHRcdFx0XHRcdFx0LnJlcGxhY2UoL1xcbisvZywgJ1xcbicpXG5cdFx0XHRcdFx0XHRcdC5yZXBsYWNlKC9eXFxzKihbXipdKS9nbSwgJyogJDEnKVxuXHRcdFx0XHRcdFx0XHQucmVwbGFjZSgvXlxcKiAkL20sICcnKX19fVxcbmBcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdyZXBsYWNlYWJsZSBmYWlyIHVzZSc6XG5cdFx0XHRcdFx0dGFnID0gJ3t7Jy5jb25jYXQoJ3N1YnN0OicsIGAke3BhcmFtcy50ZW1wbGF0ZW5hbWV9L2F1dG98MT0ke3BhcmFtcy5mNF90eXBlfX19XFxuYCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGFnID0gJ3t7Jy5jb25jYXQoJ3N1YnN0OicsIGAke3BhcmFtcy50ZW1wbGF0ZW5hbWV9L2F1dG99fVxcbmApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgdGV4dE5vU2QgPSB0ZXh0LnJlcGxhY2UoXG5cdFx0XHRcdC9cXHtcXHtcXHMqKGRiKC1cXHcqKT98ZHxkZWxldGV8KD86aGFuZ3xob2xkKVstIF0/b24pXFxzKihcXHwoPzpcXHtcXHtbXnt9XSpcXH1cXH18W157fV0pKik/XFx9XFx9XFxzKi9naSxcblx0XHRcdFx0Jydcblx0XHRcdCk7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdHRleHQgIT09IHRleHROb1NkICYmXG5cdFx0XHRcdGNvbmZpcm0od2luZG93LndnVUxTKCflnKjpobXpnaLkuIrmib7liLDlv6vpgJ/liKDpmaTmqKHmnb/vvIzopoHnp7vpmaTlkJfvvJ8nLCAn5Zyo6aCB6Z2i5LiK5om+5Yiw5b+r6YCf5Yiq6Zmk5qih5p2/77yM6KaB56e76Zmk5ZeO77yfJykpXG5cdFx0XHQpIHtcblx0XHRcdFx0dGV4dCA9IHRleHROb1NkO1xuXHRcdFx0fVxuXHRcdFx0cGFnZW9iai5zZXRQYWdlVGV4dCh0YWcgKyB0ZXh0KTtcblx0XHRcdGxldCBlZGl0U3VtbWFyeSA9IHdpbmRvdy53Z1VMUygn6K+35rGC5b+r6YCf5Yig6Zmk77yIJywgJ+iri+axguW/q+mAn+WIqumZpO+8iCcpO1xuXHRcdFx0ZWRpdFN1bW1hcnkgKz0gYFtbUVc6Q1NEIyR7cGFyYW1zLm5vcm1hbGl6ZWQudG9VcHBlckNhc2UoKX18Q1NEICR7cGFyYW1zLm5vcm1hbGl6ZWQudG9VcHBlckNhc2UoKX1dXWA7XG5cdFx0XHRlZGl0U3VtbWFyeSArPSAn77yJJztcblx0XHRcdHBhZ2VvYmouc2V0RWRpdFN1bW1hcnkoZWRpdFN1bW1hcnkpO1xuXHRcdFx0cGFnZW9iai5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRwYWdlb2JqLnNldFdhdGNobGlzdChUd2lua2xlLmdldFByZWYoJ2RlbGlXYXRjaFBhZ2UnKSk7XG5cdFx0XHRwYWdlb2JqLnNldENyZWF0ZU9wdGlvbignbm9jcmVhdGUnKTtcblx0XHRcdHBhZ2VvYmouc2F2ZSgpO1xuXHRcdH0sXG5cdFx0dXNlck5vdGlmaWNhdGlvbjogKHBhZ2VvYmopID0+IHtcblx0XHRcdGNvbnN0IHBhcmFtcyA9IHBhZ2VvYmouZ2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKCk7XG5cdFx0XHRjb25zdCBpbml0aWFsQ29udHJpYiA9IHBhZ2VvYmouZ2V0Q3JlYXRvcigpO1xuXHRcdFx0Ly8gZGlzYWxsb3cgd2FybmluZyB5b3Vyc2VsZlxuXHRcdFx0aWYgKGluaXRpYWxDb250cmliID09PSBtdy5jb25maWcuZ2V0KCd3Z1VzZXJOYW1lJykpIHtcblx0XHRcdFx0cGFnZW9ialxuXHRcdFx0XHRcdC5nZXRTdGF0dXNFbGVtZW50KClcblx0XHRcdFx0XHQud2Fybihg5oKo77yIJHtpbml0aWFsQ29udHJpYn3vvIkke3dpbmRvdy53Z1VMUygn5Yib5bu65LqG6K+l6aG177yM6Lez6L+H6YCa55+lJywgJ+W7uueri+S6huipsumgge+8jOi3s+mBjumAmuefpScpfWApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3QgdGFsa1BhZ2VOYW1lID0gYFVzZXIgdGFsazoke2luaXRpYWxDb250cmlifWA7XG5cdFx0XHRcdGNvbnN0IHVzZXJ0YWxrcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHRcdFx0dGFsa1BhZ2VOYW1lLFxuXHRcdFx0XHRcdGAke3dpbmRvdy53Z1VMUygn6YCa55+l5LiK5Lyg6ICFJywgJ+mAmuefpeS4iuWCs+iAhScpfe+8iCR7aW5pdGlhbENvbnRyaWJ977yJYFxuXHRcdFx0XHQpO1xuXHRcdFx0XHRjb25zdCBub3RpZnl0ZXh0ID0gJ1xcbnt7Jy5jb25jYXQoXG5cdFx0XHRcdFx0J3N1YnN0OicsXG5cdFx0XHRcdFx0YERpLSR7cGFyYW1zLnRlbXBsYXRlbmFtZX0tbm90aWNlfDE9JHtNb3JlYml0cy5wYWdlTmFtZU5vcm19fX0tLX5+YCxcblx0XHRcdFx0XHQnfn4nXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHVzZXJ0YWxrcGFnZS5zZXRBcHBlbmRUZXh0KG5vdGlmeXRleHQpO1xuXHRcdFx0XHR1c2VydGFsa3BhZ2Uuc2V0RWRpdFN1bW1hcnkoXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfpgJrnn6XvvJrmlofku7ZbWycsICfpgJrnn6XvvJrmqpTmoYhbWycpICtcblx0XHRcdFx0XHRcdE1vcmViaXRzLnBhZ2VOYW1lTm9ybSArXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ11d5b+r6YCf5Yig6Zmk5o+Q5ZCNJywgJ11d5b+r6YCf5Yiq6Zmk5o+Q5ZCNJylcblx0XHRcdFx0KTtcblx0XHRcdFx0dXNlcnRhbGtwYWdlLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdFx0dXNlcnRhbGtwYWdlLnNldENyZWF0ZU9wdGlvbigncmVjcmVhdGUnKTtcblx0XHRcdFx0dXNlcnRhbGtwYWdlLnNldFdhdGNobGlzdChUd2lua2xlLmdldFByZWYoJ2RlbGlXYXRjaFVzZXInKSk7XG5cdFx0XHRcdHVzZXJ0YWxrcGFnZS5zZXRGb2xsb3dSZWRpcmVjdCh0cnVlLCBmYWxzZSk7XG5cdFx0XHRcdHVzZXJ0YWxrcGFnZS5hcHBlbmQoKTtcblx0XHRcdH1cblx0XHRcdC8vIGFkZCB0aGlzIG5vbWluYXRpb24gdG8gdGhlIHVzZXIncyB1c2Vyc3BhY2UgbG9nLCBpZiB0aGUgdXNlciBoYXMgZW5hYmxlZCBpdFxuXHRcdFx0aWYgKHBhcmFtcy5sb2dub21pbmF0aW9uKSB7XG5cdFx0XHRcdHBhcmFtcy5mcm9tREkgPSB0cnVlO1xuXHRcdFx0XHRUd2lua2xlLnNwZWVkeS5jYWxsYmFja3MudXNlci5hZGRUb0xvZyhwYXJhbXMsIGluaXRpYWxDb250cmliKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGltYWdlTGlzdDogKHBhZ2VvYmopID0+IHtcblx0XHRcdGNvbnN0IHRleHQgPSBwYWdlb2JqLmdldFBhZ2VUZXh0KCk7XG5cdFx0XHQvLyBjb25zdCBwYXJhbXMgPSBwYWdlb2JqLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0cGFnZW9iai5zZXRQYWdlVGV4dChgJHt0ZXh0fVxcbiogW1s6JHtNb3JlYml0cy5wYWdlTmFtZU5vcm19XV0tLX5+YC5jb25jYXQoJ35+JykpO1xuXHRcdFx0cGFnZW9iai5zZXRFZGl0U3VtbWFyeShg5Yqg5YWlW1ske01vcmViaXRzLnBhZ2VOYW1lTm9ybX1dXWApO1xuXHRcdFx0cGFnZW9iai5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRwYWdlb2JqLnNldENyZWF0ZU9wdGlvbigncmVjcmVhdGUnKTtcblx0XHRcdHBhZ2VvYmouc2F2ZSgpO1xuXHRcdH0sXG5cdH07XG5cdFR3aW5rbGUuYWRkSW5pdENhbGxiYWNrKFR3aW5rbGUuaW1hZ2UsICdpbWFnZScpO1xufSkoKTtcblxuZXhwb3J0IHt9O1xuIiwgIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQge2FwaX0gZnJvbSAnLi9hcGknO1xuXG4vKiEgVHdpbmtsZS5qcyAtIHR3aW5rbGVwcm90ZWN0LmpzICovXG4oZnVuY3Rpb24gdHdpbmtsZXByb3RlY3QoJCkge1xuXHRjb25zdCAkYm9keSA9ICQoJ2JvZHknKTtcblx0LyoqXG5cdCAqIHR3aW5rbGVwcm90ZWN0LmpzOiBQcm90ZWN0L1JQUCBtb2R1bGVcblx0ICogTW9kZSBvZiBpbnZvY2F0aW9uOiBUYWIgKFwiUFBcIi9cIlJQUFwiKVxuXHQgKiBBY3RpdmUgb246IE5vbi1zcGVjaWFsLCBub24tTWVkaWFXaWtpIHBhZ2VzXG5cdCAqL1xuXHQvLyBOb3RlOiBhIGxvdCBvZiBjb2RlIGluIHRoaXMgbW9kdWxlIGlzIHJlLXVzZWQvY2FsbGVkIGJ5IGJhdGNocHJvdGVjdC5cblx0VHdpbmtsZS5wcm90ZWN0ID0gKCkgPT4ge1xuXHRcdGlmIChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpIDwgMCB8fCBtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpID09PSA4KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFR3aW5rbGUuYWRkUG9ydGxldExpbmsoXG5cdFx0XHRUd2lua2xlLnByb3RlY3QuY2FsbGJhY2ssXG5cdFx0XHR3aW5kb3cud2dVTFMoJ+S/neaKpCcsICfkv53orbcnKSxcblx0XHRcdCd0dy1ycHAnLFxuXHRcdFx0TW9yZWJpdHMudXNlcklzU3lzb3AgPyB3aW5kb3cud2dVTFMoJ+S/neaKpOmhtemdoicsICfkv53orbfpoIHpnaInKSA6IHdpbmRvdy53Z1VMUygn6K+35rGC5L+d5oqk6aG16Z2iJywgJ+iri+axguS/neitt+mggemdoicpXG5cdFx0KTtcblx0fTtcblx0VHdpbmtsZS5wcm90ZWN0LmNhbGxiYWNrID0gKCkgPT4ge1xuXHRcdGNvbnN0IFdpbmRvdyA9IG5ldyBNb3JlYml0cy5zaW1wbGVXaW5kb3coNjIwLCA1MzApO1xuXHRcdFdpbmRvdy5zZXRUaXRsZShcblx0XHRcdE1vcmViaXRzLnVzZXJJc1N5c29wXG5cdFx0XHRcdD8gd2luZG93LndnVUxTKCfmlr3ooYzmiJbor7fmsYLkv53miqTpobXpnaInLCAn5pa96KGM5oiW6KuL5rGC5L+d6K236aCB6Z2iJylcblx0XHRcdFx0OiB3aW5kb3cud2dVTFMoJ+ivt+axguS/neaKpOmhtemdoicsICfoq4vmsYLkv53orbfpoIHpnaInKVxuXHRcdCk7XG5cdFx0V2luZG93LnNldFNjcmlwdE5hbWUoJ1R3aW5rbGUnKTtcblx0XHRXaW5kb3cuYWRkRm9vdGVyTGluayh3aW5kb3cud2dVTFMoJ+S/neaKpOadoeS+iycsICfkv53orbfmop3kvosnKSwgJ0xJQjpQUk9UJyk7XG5cdFx0V2luZG93LmFkZEZvb3Rlckxpbmsod2luZG93LndnVUxTKCfkv53miqTorr7nva4nLCAn5L+d6K236Kit5a6aJyksICdIOlRXL1BSRUYjcHJvdGVjdCcpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygnVHdpbmtsZeW4ruWKqScsICdUd2lua2xl6Kqq5piOJyksICdIOlRXL0RPQyNwcm90ZWN0Jyk7XG5cdFx0Y29uc3QgZm9ybSA9IG5ldyBNb3JlYml0cy5xdWlja0Zvcm0oVHdpbmtsZS5wcm90ZWN0LmNhbGxiYWNrLmV2YWx1YXRlKTtcblx0XHRjb25zdCBhY3Rpb25maWVsZCA9IGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmk43kvZznsbvlnosnLCAn5pON5L2c6aGe5YilJyksXG5cdFx0fSk7XG5cdFx0aWYgKE1vcmViaXRzLnVzZXJJc1N5c29wKSB7XG5cdFx0XHRhY3Rpb25maWVsZC5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAncmFkaW8nLFxuXHRcdFx0XHRuYW1lOiAnYWN0aW9udHlwZScsXG5cdFx0XHRcdGV2ZW50OiBUd2lua2xlLnByb3RlY3QuY2FsbGJhY2suY2hhbmdlQWN0aW9uLFxuXHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5L+d5oqk6aG16Z2iJywgJ+S/neitt+mggemdoicpLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICdwcm90ZWN0Jyxcblx0XHRcdFx0XHRcdGNoZWNrZWQ6IHRydWUsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRhY3Rpb25maWVsZC5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ3JhZGlvJyxcblx0XHRcdG5hbWU6ICdhY3Rpb250eXBlJyxcblx0XHRcdGV2ZW50OiBUd2lua2xlLnByb3RlY3QuY2FsbGJhY2suY2hhbmdlQWN0aW9uLFxuXHRcdFx0bGlzdDogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6K+35rGC5L+d5oqk6aG16Z2iJywgJ+iri+axguS/neitt+mggemdoicpLFxuXHRcdFx0XHRcdHZhbHVlOiAncmVxdWVzdCcsXG5cdFx0XHRcdFx0dG9vbHRpcDpcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn6Iul5oKo5oOz5ZyoTElCOlJGUFDor7fmsYLkv53miqTmraTpobUnLCAn6Iul5oKo5oOz5ZyoTElCOlJGUFDoq4vmsYLkv53orbfmraTpoIEnKSArXG5cdFx0XHRcdFx0XHQoTW9yZWJpdHMudXNlcklzU3lzb3AgPyAn6ICM5LiN5piv6Ieq6KGM5a6M5oiQ44CCJyA6ICfjgIInKSxcblx0XHRcdFx0XHRjaGVja2VkOiAhTW9yZWJpdHMudXNlcklzU3lzb3AsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnlKjkv53miqTmqKHmnb/moIforrDmraTpobUnLCAn55So5L+d6K235qih5p2/5qiZ6KiY5q2k6aCBJyksXG5cdFx0XHRcdFx0dmFsdWU6ICd0YWcnLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn5Y+v5Lul55So5q2k5Li66aG16Z2i5Yqg5LiK5ZCI6YCC55qE5L+d5oqk5qih5p2/44CCJywgJ+WPr+S7peeUqOatpOeCuumggemdouWKoOS4iuWQiOmBqeeahOS/neitt+aooeadv+OAgicpLFxuXHRcdFx0XHRcdGRpc2FibGVkOiBtdy5jb25maWcuZ2V0KCd3Z0FydGljbGVJZCcpID09PSAwIHx8IG13LmNvbmZpZy5nZXQoJ3dnUGFnZUNvbnRlbnRNb2RlbCcpID09PSAnU2NyaWJ1bnRvJyxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2ZpZWxkJyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+m7mOiupCcsICfpoJDoqK0nKSxcblx0XHRcdG5hbWU6ICdmaWVsZF9wcmVzZXQnLFxuXHRcdH0pO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRsYWJlbDogJzEnLFxuXHRcdFx0bmFtZTogJ2ZpZWxkMScsXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2ZpZWxkJyxcblx0XHRcdGxhYmVsOiAnMicsXG5cdFx0XHRuYW1lOiAnZmllbGQyJyxcblx0XHR9KTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnc3VibWl0Jyxcblx0XHR9KTtcblx0XHRjb25zdCByZXN1bHQgPSBmb3JtLnJlbmRlcigpO1xuXHRcdFdpbmRvdy5zZXRDb250ZW50KHJlc3VsdCk7XG5cdFx0V2luZG93LmRpc3BsYXkoKTtcblx0XHQvLyBXZSBtdXN0IGluaXQgdGhlIGNvbnRyb2xzXG5cdFx0Y29uc3QgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG5cdFx0ZXZ0LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG5cdFx0cmVzdWx0LmFjdGlvbnR5cGVbMF0uZGlzcGF0Y2hFdmVudChldnQpO1xuXHRcdC8vIGdldCBjdXJyZW50IHByb3RlY3Rpb24gbGV2ZWwgYXN5bmNocm9ub3VzbHlcblx0XHRUd2lua2xlLnByb3RlY3QuZmV0Y2hQcm90ZWN0aW9uTGV2ZWwoKTtcblx0fTtcblx0Ly8gQ3VzdG9taXphYmxlIG5hbWVzcGFjZSBhbmQgRmxhZ2dlZFJldnMgc2V0dGluZ3Ncblx0Ly8gSW4gdGhlb3J5IGl0J2QgYmUgbmljZSB0byBoYXZlIHJlc3RyaWN0aW9ubGV2ZWxzIGRlZmluZWQgaGVyZSxcblx0Ly8gYnV0IHRob3NlIGFyZSBvbmx5IGF2YWlsYWJsZSB2aWEgYSBzaXRlaW5mbyBxdWVyeVxuXHQvLyBMaW1pdCB0ZW1wbGF0ZSBlZGl0b3I7IGEgVHdpbmtsZSByZXN0cmljdGlvbiwgbm90IGEgc2l0ZSBzZXR0aW5nXG5cdGNvbnN0IGlzVGVtcGxhdGUgPSBtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpID09PSAxMCB8fCBtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpID09PSA4Mjg7XG5cdC8vIENvbnRhaW5zIHRoZSBjdXJyZW50IHByb3RlY3Rpb24gbGV2ZWwgaW4gYW4gb2JqZWN0XG5cdC8vIE9uY2UgZmlsbGVkLCBpdCB3aWxsIGxvb2sgc29tZXRoaW5nIGxpa2U6XG5cdC8vIHsgZWRpdDogeyBsZXZlbDogXCJzeXNvcFwiLCBleHBpcnk6IDxzb21lIGRhdGU+LCBjYXNjYWRlOiB0cnVlIH0sIC4uLiB9XG5cdFR3aW5rbGUucHJvdGVjdC5jdXJyZW50UHJvdGVjdGlvbkxldmVscyA9IHt9O1xuXHRUd2lua2xlLnByb3RlY3QucHJldmlvdXNQcm90ZWN0aW9uTGV2ZWxzID0ge307XG5cdFR3aW5rbGUucHJvdGVjdC5mZXRjaFByb3RlY3Rpb25MZXZlbCA9ICgpID0+IHtcblx0XHRjb25zdCBwYXJhbXMgPSB7XG5cdFx0XHRmb3JtYXQ6ICdqc29uJyxcblx0XHRcdGluZGV4cGFnZWlkczogdHJ1ZSxcblx0XHRcdGFjdGlvbjogJ3F1ZXJ5Jyxcblx0XHRcdGxpc3Q6ICdsb2dldmVudHMnLFxuXHRcdFx0bGV0eXBlOiAncHJvdGVjdCcsXG5cdFx0XHRsZXRpdGxlOiBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyksXG5cdFx0XHRwcm9wOiAnaW5mbycsXG5cdFx0XHRpbnByb3A6ICdwcm90ZWN0aW9ufHdhdGNoZWQnLFxuXHRcdFx0dGl0bGVzOiBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyksXG5cdFx0fTtcblx0XHR2b2lkIGFwaS5nZXQocGFyYW1zKS50aGVuKChwcm90ZWN0RGF0YSkgPT4ge1xuXHRcdFx0Y29uc3QgW3BhZ2VpZF0gPSBwcm90ZWN0RGF0YS5xdWVyeS5wYWdlaWRzO1xuXHRcdFx0Y29uc3QgcGFnZSA9IHByb3RlY3REYXRhLnF1ZXJ5LnBhZ2VzW3BhZ2VpZF07XG5cdFx0XHRjb25zdCBjdXJyZW50ID0ge307XG5cdFx0XHRjb25zdCBwcmV2aW91cyA9IHt9O1xuXHRcdFx0Ly8gU2F2ZSByZXF1ZXN0ZWQgcGFnZSdzIHdhdGNoZWQgc3RhdHVzIGZvciBsYXRlciBpbiBjYXNlIG5lZWRlZCB3aGVuIGZpbGluZyByZXF1ZXN0XG5cdFx0XHRUd2lua2xlLnByb3RlY3Qud2F0Y2hlZCA9IHBhZ2Uud2F0Y2hsaXN0ZXhwaXJ5IHx8IHBhZ2Uud2F0Y2hlZCA9PT0gJyc7XG5cdFx0XHRmb3IgKGNvbnN0IHByb3RlY3Rpb24gb2YgcGFnZS5wcm90ZWN0aW9uKSB7XG5cdFx0XHRcdGlmIChwcm90ZWN0aW9uLnR5cGUgIT09ICdhZnQnKSB7XG5cdFx0XHRcdFx0Y3VycmVudFtwcm90ZWN0aW9uLnR5cGVdID0ge1xuXHRcdFx0XHRcdFx0bGV2ZWw6IHByb3RlY3Rpb24ubGV2ZWwsXG5cdFx0XHRcdFx0XHRleHBpcnk6IHByb3RlY3Rpb24uZXhwaXJ5LFxuXHRcdFx0XHRcdFx0Y2FzY2FkZTogcHJvdGVjdGlvbi5jYXNjYWRlID09PSAnJyxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyBPbmx5IHVzZSB0aGUgbG9nIGV4Y2VwdCB1bnByb3RlY3Rcblx0XHRcdGlmIChwcm90ZWN0RGF0YS5xdWVyeS5sb2dldmVudHMubGVuZ3RoID49IDEgJiYgcHJvdGVjdERhdGEucXVlcnkubG9nZXZlbnRzWzBdLmFjdGlvbiAhPT0gJ3VucHJvdGVjdCcpIHtcblx0XHRcdFx0W1R3aW5rbGUucHJvdGVjdC5wcmV2aW91c1Byb3RlY3Rpb25Mb2ddID0gcHJvdGVjdERhdGEucXVlcnkubG9nZXZlbnRzO1xuXHRcdFx0fSBlbHNlIGlmIChwcm90ZWN0RGF0YS5xdWVyeS5sb2dldmVudHMubGVuZ3RoID49IDIpIHtcblx0XHRcdFx0WywgVHdpbmtsZS5wcm90ZWN0LnByZXZpb3VzUHJvdGVjdGlvbkxvZ10gPSBwcm90ZWN0RGF0YS5xdWVyeS5sb2dldmVudHM7XG5cdFx0XHR9XG5cdFx0XHRpZiAoVHdpbmtsZS5wcm90ZWN0LnByZXZpb3VzUHJvdGVjdGlvbkxvZykge1xuXHRcdFx0XHRmb3IgKGNvbnN0IHByb3RlY3Rpb24gb2YgVHdpbmtsZS5wcm90ZWN0LnByZXZpb3VzUHJvdGVjdGlvbkxvZy5wYXJhbXMuZGV0YWlscykge1xuXHRcdFx0XHRcdGlmIChwcm90ZWN0aW9uLnR5cGUgIT09ICdhZnQnKSB7XG5cdFx0XHRcdFx0XHRwcmV2aW91c1twcm90ZWN0aW9uLnR5cGVdID0ge1xuXHRcdFx0XHRcdFx0XHRsZXZlbDogcHJvdGVjdGlvbi5sZXZlbCxcblx0XHRcdFx0XHRcdFx0ZXhwaXJ5OiBwcm90ZWN0aW9uLmV4cGlyeSxcblx0XHRcdFx0XHRcdFx0Y2FzY2FkZTogcHJvdGVjdGlvbi5jYXNjYWRlID09PSAnJyxcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyBzaG93IHRoZSBwcm90ZWN0aW9uIGxldmVsIGFuZCBsb2cgaW5mb1xuXHRcdFx0VHdpbmtsZS5wcm90ZWN0Lmhhc1Byb3RlY3RMb2cgPSAhIXByb3RlY3REYXRhLnF1ZXJ5LmxvZ2V2ZW50cy5sZW5ndGg7XG5cdFx0XHRUd2lua2xlLnByb3RlY3QuY3VycmVudFByb3RlY3Rpb25MZXZlbHMgPSBjdXJyZW50O1xuXHRcdFx0VHdpbmtsZS5wcm90ZWN0LnByZXZpb3VzUHJvdGVjdGlvbkxldmVscyA9IHByZXZpb3VzO1xuXHRcdFx0VHdpbmtsZS5wcm90ZWN0LmNhbGxiYWNrLnNob3dMb2dBbmRDdXJyZW50UHJvdGVjdEluZm8oKTtcblx0XHR9KTtcblx0fTtcblx0VHdpbmtsZS5wcm90ZWN0LmNhbGxiYWNrLnNob3dMb2dBbmRDdXJyZW50UHJvdGVjdEluZm8gPSAoKSA9PiB7XG5cdFx0Y29uc3QgY3VycmVudGx5UHJvdGVjdGVkID0gT2JqZWN0LmtleXMoVHdpbmtsZS5wcm90ZWN0LmN1cnJlbnRQcm90ZWN0aW9uTGV2ZWxzKS5sZW5ndGggIT09IDA7XG5cdFx0aWYgKFR3aW5rbGUucHJvdGVjdC5oYXNQcm90ZWN0TG9nIHx8IFR3aW5rbGUucHJvdGVjdC5oYXNTdGFibGVMb2cpIHtcblx0XHRcdGNvbnN0ICRsaW5rTWFya3VwID0gJCgnPHNwYW4+Jyk7XG5cdFx0XHRpZiAoVHdpbmtsZS5wcm90ZWN0Lmhhc1Byb3RlY3RMb2cpIHtcblx0XHRcdFx0JGxpbmtNYXJrdXAuYXBwZW5kKFxuXHRcdFx0XHRcdCQoXG5cdFx0XHRcdFx0XHRgPGEgcmVsPVwibm9vcGVuZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiJHttdy51dGlsLmdldFVybCgnU3BlY2lhbDpMb2cnLCB7XG5cdFx0XHRcdFx0XHRcdGFjdGlvbjogJ3ZpZXcnLFxuXHRcdFx0XHRcdFx0XHRwYWdlOiBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyksXG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdwcm90ZWN0Jyxcblx0XHRcdFx0XHRcdH0pfVwiPiR7d2luZG93LndnVUxTKCfkv53miqTml6Xlv5cnLCAn5L+d6K235pel6KqMJyl9PC9hPmBcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFR3aW5rbGUucHJvdGVjdC5oYXNTdGFibGVMb2cgPyAkKCc8c3Bhbj4nKS5odG1sKCcgJmJ1bGw7ICcpIDogbnVsbFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoJGJvZHkuZmluZCgnZGl2W25hbWU9XCJoYXNwcm90ZWN0bG9nXCJdIHNwYW4nKVswXSk7XG5cdFx0XHRNb3JlYml0cy5zdGF0dXMud2Fybihcblx0XHRcdFx0Y3VycmVudGx5UHJvdGVjdGVkXG5cdFx0XHRcdFx0PyB3aW5kb3cud2dVTFMoJ+WFiOWJjeS/neaKpCcsICflhYjliY3kv53orbcnKVxuXHRcdFx0XHRcdDogW1xuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+atpOmhtemdouabvuWcqCcsICfmraTpoIHpnaLmm77lnKgnKSxcblx0XHRcdFx0XHRcdFx0JChcblx0XHRcdFx0XHRcdFx0XHRgPGI+JHtuZXcgTW9yZWJpdHMuZGF0ZShUd2lua2xlLnByb3RlY3QucHJldmlvdXNQcm90ZWN0aW9uTG9nLnRpbWVzdGFtcCkuY2FsZW5kYXIoXG5cdFx0XHRcdFx0XHRcdFx0XHQndXRjJ1xuXHRcdFx0XHRcdFx0XHRcdCl9PC9iPmBcblx0XHRcdFx0XHRcdFx0KVswXSxcblx0XHRcdFx0XHRcdFx0YOiiqyR7VHdpbmtsZS5wcm90ZWN0LnByZXZpb3VzUHJvdGVjdGlvbkxvZy51c2VyfSR7d2luZG93LndnVUxTKCfkv53miqQnLCAn5L+d6K23Jyl977yaYCxcblx0XHRcdFx0XHRcdFx0Li4uVHdpbmtsZS5wcm90ZWN0LmZvcm1hdFByb3RlY3Rpb25EZXNjcmlwdGlvbihUd2lua2xlLnByb3RlY3QucHJldmlvdXNQcm90ZWN0aW9uTGV2ZWxzKSxcblx0XHRcdFx0XHRcdF0sXG5cdFx0XHRcdCRsaW5rTWFya3VwWzBdXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRNb3JlYml0cy5zdGF0dXMuaW5pdCgkYm9keS5maW5kKCdkaXZbbmFtZT1cImN1cnJlbnRwcm90XCJdIHNwYW4nKVswXSk7XG5cdFx0bGV0IHByb3RlY3Rpb25Ob2RlID0gW107XG5cdFx0bGV0IHN0YXR1c0xldmVsID0gJ2luZm8nO1xuXHRcdHByb3RlY3Rpb25Ob2RlID0gVHdpbmtsZS5wcm90ZWN0LmZvcm1hdFByb3RlY3Rpb25EZXNjcmlwdGlvbihUd2lua2xlLnByb3RlY3QuY3VycmVudFByb3RlY3Rpb25MZXZlbHMpO1xuXHRcdGlmIChjdXJyZW50bHlQcm90ZWN0ZWQpIHtcblx0XHRcdHN0YXR1c0xldmVsID0gJ3dhcm4nO1xuXHRcdH1cblx0XHRNb3JlYml0cy5zdGF0dXNbc3RhdHVzTGV2ZWxdKHdpbmRvdy53Z1VMUygn5b2T5YmN5L+d5oqk562J57qnJywgJ+ebruWJjeS/neitt+etiee0micpLCBwcm90ZWN0aW9uTm9kZSk7XG5cdH07XG5cdFR3aW5rbGUucHJvdGVjdC5jYWxsYmFjay5jaGFuZ2VBY3Rpb24gPSAoZSkgPT4ge1xuXHRcdGxldCBmaWVsZF9wcmVzZXQ7XG5cdFx0bGV0IGZpZWxkMTtcblx0XHRsZXQgZmllbGQyO1xuXHRcdHN3aXRjaCAoZS50YXJnZXQudmFsdWVzKSB7XG5cdFx0XHRjYXNlICdwcm90ZWN0Jzpcblx0XHRcdFx0ZmllbGRfcHJlc2V0ID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybS5lbGVtZW50KHtcblx0XHRcdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+m7mOiupCcsICfpoJDoqK0nKSxcblx0XHRcdFx0XHRuYW1lOiAnZmllbGRfcHJlc2V0Jyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZpZWxkX3ByZXNldC5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0XHRcdG5hbWU6ICdjYXRlZ29yeScsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6YCJ5oup6buY6K6k77yaJywgJ+mBuOaTh+mgkOiore+8micpLFxuXHRcdFx0XHRcdGV2ZW50OiBUd2lua2xlLnByb3RlY3QuY2FsbGJhY2suY2hhbmdlUHJlc2V0LFxuXHRcdFx0XHRcdGxpc3Q6IG13LmNvbmZpZy5nZXQoJ3dnQXJ0aWNsZUlkJylcblx0XHRcdFx0XHRcdD8gVHdpbmtsZS5wcm90ZWN0LnByb3RlY3Rpb25UeXBlc0FkbWluXG5cdFx0XHRcdFx0XHQ6IFR3aW5rbGUucHJvdGVjdC5wcm90ZWN0aW9uVHlwZXNDcmVhdGUsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRmaWVsZDIgPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5L+d5oqk6YCJ6aG5JywgJ+S/neitt+mBuOmghScpLFxuXHRcdFx0XHRcdG5hbWU6ICdmaWVsZDInLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0ZmllbGQyLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdFx0bmFtZTogJ2N1cnJlbnRwcm90Jyxcblx0XHRcdFx0XHRsYWJlbDogJyAnLFxuXHRcdFx0XHR9KTsgLy8gaG9sZHMgdGhlIGN1cnJlbnQgcHJvdGVjdGlvbiBsZXZlbCwgYXMgZmlsbGVkIG91dCBieSB0aGUgYXN5bmMgY2FsbGJhY2tcblx0XHRcdFx0ZmllbGQyLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdFx0bmFtZTogJ2hhc3Byb3RlY3Rsb2cnLFxuXHRcdFx0XHRcdGxhYmVsOiAnICcsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHQvLyBmb3IgZXhpc3RpbmcgcGFnZXNcblx0XHRcdFx0aWYgKG13LmNvbmZpZy5nZXQoJ3dnQXJ0aWNsZUlkJykpIHtcblx0XHRcdFx0XHRmaWVsZDIuYXBwZW5kKHtcblx0XHRcdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdFx0XHRldmVudDogVHdpbmtsZS5wcm90ZWN0LmZvcm1ldmVudHMuZWRpdG1vZGlmeSxcblx0XHRcdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+S/ruaUuee8lui+keadg+mZkCcsICfkv67mlLnnt6jovK/mrIrpmZAnKSxcblx0XHRcdFx0XHRcdFx0XHRuYW1lOiAnZWRpdG1vZGlmeScsXG5cdFx0XHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdFx0J+iLpeatpOmhueWFs+mXre+8jOe8lui+keadg+mZkOWwhuS4jeS8muS/ruaUueOAgicsXG5cdFx0XHRcdFx0XHRcdFx0XHQn6Iul5q2k6aCF6Zec6ZaJ77yM57eo6Lyv5qyK6ZmQ5bCH5LiN5pyD5L+u5pS544CCJ1xuXHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdFx0Y2hlY2tlZDogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdF0sXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0ZmllbGQyLmFwcGVuZCh7XG5cdFx0XHRcdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdFx0XHRcdG5hbWU6ICdlZGl0bGV2ZWwnLFxuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn57yW6L6R5p2D6ZmQ77yaJywgJ+e3qOi8r+asiumZkO+8micpLFxuXHRcdFx0XHRcdFx0ZXZlbnQ6IFR3aW5rbGUucHJvdGVjdC5mb3JtZXZlbnRzLmVkaXRsZXZlbCxcblx0XHRcdFx0XHRcdGxpc3Q6IFR3aW5rbGUucHJvdGVjdC5wcm90ZWN0aW9uTGV2ZWxzLmZpbHRlcihcblx0XHRcdFx0XHRcdFx0Ly8gRmlsdGVyIFRFIG91dHNpZGUgb2YgdGVtcGxhdGVzIGFuZCBtb2R1bGVzXG5cdFx0XHRcdFx0XHRcdChsZXZlbCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBpc1RlbXBsYXRlIHx8IGxldmVsLnZhbHVlICE9PSAndGVtcGxhdGVlZGl0b3InO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGZpZWxkMi5hcHBlbmQoe1xuXHRcdFx0XHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHRcdFx0XHRuYW1lOiAnZWRpdGV4cGlyeScsXG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnu4jmraLml7bpl7TvvJonLCAn57WC5q2i5pmC6ZaT77yaJyksXG5cdFx0XHRcdFx0XHRldmVudDogKGV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRcdGlmIChldmVudC50YXJnZXQudmFsdWUgPT09ICdjdXN0b20nKSB7XG5cdFx0XHRcdFx0XHRcdFx0VHdpbmtsZS5wcm90ZWN0LmRvQ3VzdG9tRXhwaXJ5KGV2ZW50LnRhcmdldCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0JCgnaW5wdXRbbmFtZT1zbWFsbF0nLCAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgnZm9ybScpKVswXS5jaGVja2VkID1cblx0XHRcdFx0XHRcdFx0XHRldmVudC50YXJnZXQuc2VsZWN0ZWRJbmRleCA+PSA0OyAvLyAxIG1vbnRoXG5cdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHQvLyBkZWZhdWx0IGV4cGlyeSBzZWxlY3Rpb24gKDIgZGF5cykgaXMgY29uZGl0aW9uYWxseSBzZXQgaW4gVHdpbmtsZS5wcm90ZWN0LmNhbGxiYWNrLmNoYW5nZVByZXNldFxuXHRcdFx0XHRcdFx0bGlzdDogVHdpbmtsZS5wcm90ZWN0LnByb3RlY3Rpb25MZW5ndGhzLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGZpZWxkMi5hcHBlbmQoe1xuXHRcdFx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0XHRcdGV2ZW50OiBUd2lua2xlLnByb3RlY3QuZm9ybWV2ZW50cy5tb3ZlbW9kaWZ5LFxuXHRcdFx0XHRcdFx0bGlzdDogW1xuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5L+u5pS556e75Yqo5p2D6ZmQJywgJ+S/ruaUueenu+WLleasiumZkCcpLFxuXHRcdFx0XHRcdFx0XHRcdG5hbWU6ICdtb3ZlbW9kaWZ5Jyxcblx0XHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0XHQn6Iul5q2k6aG56KKr5YWz6Zet77yM56e75Yqo5p2D6ZmQ5bCG5LiN6KKr5L+u5pS544CCJyxcblx0XHRcdFx0XHRcdFx0XHRcdCfoi6XmraTpoIXooqvpl5zplonvvIznp7vli5XmrIrpmZDlsIfkuI3ooqvkv67mlLnjgIInXG5cdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRjaGVja2VkOiB0cnVlLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRmaWVsZDIuYXBwZW5kKHtcblx0XHRcdFx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0XHRcdFx0bmFtZTogJ21vdmVsZXZlbCcsXG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnp7vliqjmnYPpmZDvvJonLCAn56e75YuV5qyK6ZmQ77yaJyksXG5cdFx0XHRcdFx0XHRldmVudDogVHdpbmtsZS5wcm90ZWN0LmZvcm1ldmVudHMubW92ZWxldmVsLFxuXHRcdFx0XHRcdFx0bGlzdDogVHdpbmtsZS5wcm90ZWN0LnByb3RlY3Rpb25MZXZlbHMuZmlsdGVyKFxuXHRcdFx0XHRcdFx0XHQvLyBBdXRvY29uZmlybWVkIGlzIHJlcXVpcmVkIGZvciBhIG1vdmUsIHJlZHVuZGFudFxuXHRcdFx0XHRcdFx0XHQobGV2ZWwpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdFx0XHRcdFx0bGV2ZWwudmFsdWUgIT09ICdhdXRvY29uZmlybWVkJyAmJiAoaXNUZW1wbGF0ZSB8fCBsZXZlbC52YWx1ZSAhPT0gJ3RlbXBsYXRlZWRpdG9yJylcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGZpZWxkMi5hcHBlbmQoe1xuXHRcdFx0XHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHRcdFx0XHRuYW1lOiAnbW92ZWV4cGlyeScsXG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnu4jmraLml7bpl7TvvJonLCAn57WC5q2i5pmC6ZaT77yaJyksXG5cdFx0XHRcdFx0XHRldmVudDogKGV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRcdGlmIChldmVudC50YXJnZXQudmFsdWUgPT09ICdjdXN0b20nKSB7XG5cdFx0XHRcdFx0XHRcdFx0VHdpbmtsZS5wcm90ZWN0LmRvQ3VzdG9tRXhwaXJ5KGV2ZW50LnRhcmdldCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHQvLyBkZWZhdWx0IGV4cGlyeSBzZWxlY3Rpb24gKDIgZGF5cykgaXMgY29uZGl0aW9uYWxseSBzZXQgaW4gVHdpbmtsZS5wcm90ZWN0LmNhbGxiYWNrLmNoYW5nZVByZXNldFxuXHRcdFx0XHRcdFx0bGlzdDogVHdpbmtsZS5wcm90ZWN0LnByb3RlY3Rpb25MZW5ndGhzLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIGZvciBub24tZXhpc3RpbmcgcGFnZXNcblx0XHRcdFx0XHRmaWVsZDIuYXBwZW5kKHtcblx0XHRcdFx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0XHRcdFx0bmFtZTogJ2NyZWF0ZWxldmVsJyxcblx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WIm+W7uuadg+mZkO+8micsICflu7rnq4vmrIrpmZDvvJonKSxcblx0XHRcdFx0XHRcdGV2ZW50OiBUd2lua2xlLnByb3RlY3QuZm9ybWV2ZW50cy5jcmVhdGVsZXZlbCxcblx0XHRcdFx0XHRcdGxpc3Q6IFR3aW5rbGUucHJvdGVjdC5wcm90ZWN0aW9uTGV2ZWxzLmZpbHRlcihcblx0XHRcdFx0XHRcdFx0Ly8gRmlsdGVyIFRFIGFsd2F5cywgYW5kIGF1dG9jb25maXJtZWQgaW4gbWFpbnNwYWNlXG5cdFx0XHRcdFx0XHRcdChsZXZlbCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBsZXZlbC52YWx1ZSAhPT0gJ3RlbXBsYXRlZWRpdG9yJztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRmaWVsZDIuYXBwZW5kKHtcblx0XHRcdFx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0XHRcdFx0bmFtZTogJ2NyZWF0ZWV4cGlyeScsXG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnu4jmraLml7bpl7TvvJonLCAn57WC5q2i5pmC6ZaT77yaJyksXG5cdFx0XHRcdFx0XHRldmVudDogKGV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRcdGlmIChldmVudC50YXJnZXQudmFsdWUgPT09ICdjdXN0b20nKSB7XG5cdFx0XHRcdFx0XHRcdFx0VHdpbmtsZS5wcm90ZWN0LmRvQ3VzdG9tRXhwaXJ5KGV2ZW50LnRhcmdldCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHQvLyBkZWZhdWx0IGV4cGlyeSBzZWxlY3Rpb24gKGluZGVmaW5pdGUpIGlzIGNvbmRpdGlvbmFsbHkgc2V0IGluIFR3aW5rbGUucHJvdGVjdC5jYWxsYmFjay5jaGFuZ2VQcmVzZXRcblx0XHRcdFx0XHRcdGxpc3Q6IFR3aW5rbGUucHJvdGVjdC5wcm90ZWN0aW9uTGVuZ3Rocyxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmaWVsZDIuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bmFtZTogJ2Nsb3NlJyxcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5qCH6K6w6K+35rGC5L+d5oqk6aG16Z2i5Lit55qE6K+35rGCJywgJ+aomeiomOiri+axguS/neitt+mggemdouS4reeahOiri+axgicpLFxuXHRcdFx0XHRcdFx0XHRjaGVja2VkOiB0cnVlLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0ZmllbGQyLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ3RleHRhcmVhJyxcblx0XHRcdFx0XHRuYW1lOiAncHJvdGVjdFJlYXNvbicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn55CG55Sx77yI5L+d5oqk5pel5b+X77yJ77yaJywgJ+eQhueUse+8iOS/neitt+aXpeiqjO+8ie+8micpLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYgKCFtdy5jb25maWcuZ2V0KCd3Z0FydGljbGVJZCcpIHx8IG13LmNvbmZpZy5nZXQoJ3dnUGFnZUNvbnRlbnRNb2RlbCcpID09PSAnU2NyaWJ1bnRvJykge1xuXHRcdFx0XHRcdC8vIHRhZ2dpbmcgaXNuJ3QgcmVsZXZhbnQgZm9yIG5vbi1leGlzdGluZyBvciBtb2R1bGUgcGFnZXNcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAndGFnJzpcblx0XHRcdFx0ZmllbGQxID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybS5lbGVtZW50KHtcblx0XHRcdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+agh+iusOmAiemhuScsICfmqJnoqJjpgbjpoIUnKSxcblx0XHRcdFx0XHRuYW1lOiAnZmllbGQxJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZpZWxkMS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRcdG5hbWU6ICdjdXJyZW50cHJvdCcsXG5cdFx0XHRcdFx0bGFiZWw6ICcgJyxcblx0XHRcdFx0fSk7IC8vIGhvbGRzIHRoZSBjdXJyZW50IHByb3RlY3Rpb24gbGV2ZWwsIGFzIGZpbGxlZCBvdXQgYnkgdGhlIGFzeW5jIGNhbGxiYWNrXG5cdFx0XHRcdGZpZWxkMS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRcdG5hbWU6ICdoYXNwcm90ZWN0bG9nJyxcblx0XHRcdFx0XHRsYWJlbDogJyAnLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0ZmllbGQxLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHRcdFx0bmFtZTogJ3RhZ3R5cGUnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+mAieaLqeS/neaKpOaooeadv++8micsICfpgbjmk4fkv53orbfmqKHmnb/vvJonKSxcblx0XHRcdFx0XHRsaXN0OiBUd2lua2xlLnByb3RlY3QucHJvdGVjdGlvblRhZ3MsXG5cdFx0XHRcdFx0ZXZlbnQ6IFR3aW5rbGUucHJvdGVjdC5mb3JtZXZlbnRzLnRhZ3R5cGUsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRmaWVsZDEuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bmFtZTogJ3NtYWxsJyxcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5L2/55So5Zu+5qCH77yIc21hbGw9eWVz77yJJywgJ+S9v+eUqOWcluekuu+8iHNtYWxsPXllc++8iScpLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+Wwhue7meaooeadv+WKoOS4inxzbWFsbD15ZXPlj4LmlbDvvIzmmL7npLrmiJDlj7PkuIrop5LnmoTkuIDmiormjILplIHjgIInLFxuXHRcdFx0XHRcdFx0XHRcdCflsIfntabmqKHmnb/liqDkuIp8c21hbGw9eWVz5Y+D5pW477yM6aGv56S65oiQ5Y+z5LiK6KeS55qE5LiA5oqK5o6b6Y6W44CCJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bmFtZTogJ25vaW5jbHVkZScsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+eUqCZsdDtub2luY2x1ZGUmZ3Q75YyF6KO55L+d5oqk5qih5p2/JywgJ+eUqCZsdDtub2luY2x1ZGUmZ3Q75YyF6KO55L+d6K235qih5p2/JyksXG5cdFx0XHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5bCG5L+d5oqk5qih5p2/5YyF6KO55ZyoJmx0O25vaW5jbHVkZSZndDvkuK0nLFxuXHRcdFx0XHRcdFx0XHRcdCflsIfkv53orbfmqKHmnb/ljIXoo7nlnKgmbHQ7bm9pbmNsdWRlJmd0O+S4rSdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0Y2hlY2tlZDogbXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSA9PT0gMTAsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRuYW1lOiAnc2hvd2V4cGlyeScsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WcqOaooeadv+aYvuekuuWIsOacn+aXtumXtCcsICflnKjmqKHmnb/poa/npLrliLDmnJ/mmYLplpMnKSxcblx0XHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKCflsIbnu5nmqKHmnb/liqDkuIp8ZXhwaXJ55Y+C5pWwJywgJ+Wwh+e1puaooeadv+WKoOS4inxleHBpcnnlj4PmlbgnKSxcblx0XHRcdFx0XHRcdFx0Y2hlY2tlZDogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0aGlkZGVuOiBlLnRhcmdldC52YWx1ZXMgPT09ICd0YWcnLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdyZXF1ZXN0Jzpcblx0XHRcdFx0ZmllbGRfcHJlc2V0ID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybS5lbGVtZW50KHtcblx0XHRcdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+S/neaKpOexu+WeiycsICfkv53orbfpoZ7liKUnKSxcblx0XHRcdFx0XHRuYW1lOiAnZmllbGRfcHJlc2V0Jyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZpZWxkX3ByZXNldC5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0XHRcdG5hbWU6ICdjYXRlZ29yeScsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn57G75Z6L5ZKM55CG55Sx77yaJywgJ+mhnuWIpeWSjOeQhueUse+8micpLFxuXHRcdFx0XHRcdGV2ZW50OiBUd2lua2xlLnByb3RlY3QuY2FsbGJhY2suY2hhbmdlUHJlc2V0LFxuXHRcdFx0XHRcdGxpc3Q6IG13LmNvbmZpZy5nZXQoJ3dnQXJ0aWNsZUlkJylcblx0XHRcdFx0XHRcdD8gVHdpbmtsZS5wcm90ZWN0LnByb3RlY3Rpb25UeXBlc1xuXHRcdFx0XHRcdFx0OiBUd2lua2xlLnByb3RlY3QucHJvdGVjdGlvblR5cGVzQ3JlYXRlLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0ZmllbGQxID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybS5lbGVtZW50KHtcblx0XHRcdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+mAiemhuScsICfpgbjpoIUnKSxcblx0XHRcdFx0XHRuYW1lOiAnZmllbGQxJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZpZWxkMS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRcdG5hbWU6ICdjdXJyZW50cHJvdCcsXG5cdFx0XHRcdFx0bGFiZWw6ICcgJyxcblx0XHRcdFx0fSk7IC8vIGhvbGRzIHRoZSBjdXJyZW50IHByb3RlY3Rpb24gbGV2ZWwsIGFzIGZpbGxlZCBvdXQgYnkgdGhlIGFzeW5jIGNhbGxiYWNrXG5cdFx0XHRcdGZpZWxkMS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRcdG5hbWU6ICdoYXNwcm90ZWN0bG9nJyxcblx0XHRcdFx0XHRsYWJlbDogJyAnLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0ZmllbGQxLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHRcdFx0bmFtZTogJ2V4cGlyeScsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5pe26ZW/77yaJywgJ+aZgumVt++8micpLFxuXHRcdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6ICcnLFxuXHRcdFx0XHRcdFx0XHRzZWxlY3RlZDogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6ICcnLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Li05pe2JywgJ+iHqOaZgicpLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogJ3RlbXBvcmFyeScsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogJ+awuOS5hScsXG5cdFx0XHRcdFx0XHRcdHZhbHVlOiAnaW5maW5pdHknLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0ZmllbGQxLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ3RleHRhcmVhJyxcblx0XHRcdFx0XHRuYW1lOiAncmVhc29uJyxcblx0XHRcdFx0XHRsYWJlbDogJ+eQhueUse+8micsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHZvaWQgbXcubm90aWZ5KHdpbmRvdy53Z1VMUygn6L+Z546p5oSP5YS/6KKr5rW36LGa5ZCD5o6J5LqG77yBJywgJ+mAmeeOqeaEj+WFkuiiq+a1t+ixmuWQg+aOieS6hu+8gScpLCB7XG5cdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVwcm90ZWN0Jyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRsZXQgb2xkZmllbGQ7XG5cdFx0aWYgKGZpZWxkX3ByZXNldCkge1xuXHRcdFx0W29sZGZpZWxkXSA9ICQoZS50YXJnZXQuZm9ybSkuZmluZCgnZmllbGRzZXRbbmFtZT1cImZpZWxkX3ByZXNldFwiXScpO1xuXHRcdFx0b2xkZmllbGQucmVwbGFjZVdpdGgoZmllbGRfcHJlc2V0LnJlbmRlcigpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JChlLnRhcmdldC5mb3JtKS5maW5kKCdmaWVsZHNldFtuYW1lPVwiZmllbGRfcHJlc2V0XCJdJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcblx0XHR9XG5cdFx0aWYgKGZpZWxkMSkge1xuXHRcdFx0W29sZGZpZWxkXSA9ICQoZS50YXJnZXQuZm9ybSkuZmluZCgnZmllbGRzZXRbbmFtZT1cImZpZWxkMVwiXScpO1xuXHRcdFx0b2xkZmllbGQucmVwbGFjZVdpdGgoZmllbGQxLnJlbmRlcigpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JChlLnRhcmdldC5mb3JtKS5maW5kKCdmaWVsZHNldFtuYW1lPVwiZmllbGQxXCJdJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcblx0XHR9XG5cdFx0aWYgKGZpZWxkMikge1xuXHRcdFx0W29sZGZpZWxkXSA9ICQoZS50YXJnZXQuZm9ybSkuZmluZCgnZmllbGRzZXRbbmFtZT1cImZpZWxkMlwiXScpO1xuXHRcdFx0b2xkZmllbGQucmVwbGFjZVdpdGgoZmllbGQyLnJlbmRlcigpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JChlLnRhcmdldC5mb3JtKS5maW5kKCdmaWVsZHNldFtuYW1lPVwiZmllbGQyXCJdJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcblx0XHR9XG5cdFx0aWYgKGUudGFyZ2V0LnZhbHVlcyA9PT0gJ3Byb3RlY3QnKSB7XG5cdFx0XHQvLyBmYWtlIGEgY2hhbmdlIGV2ZW50IG9uIHRoZSBwcmVzZXQgZHJvcGRvd25cblx0XHRcdGNvbnN0IGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuXHRcdFx0ZXZ0LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRlLnRhcmdldC5mb3JtLmNhdGVnb3J5LmRpc3BhdGNoRXZlbnQoZXZ0KTtcblx0XHRcdC8vIHJlZHVjZSB2ZXJ0aWNhbCBoZWlnaHQgb2YgZGlhbG9nXG5cdFx0XHQkKGUudGFyZ2V0LmZvcm0pLmZpbmQoJ2ZpZWxkc2V0W25hbWU9XCJmaWVsZDJcIl0gc2VsZWN0JykucGFyZW50KCkuY3NzKHtcblx0XHRcdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG5cdFx0XHRcdG1hcmdpblJpZ2h0OiAnMC41ZW0nLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdC8vIHJlLWFkZCBwcm90ZWN0aW9uIGxldmVsIGFuZCBsb2cgaW5mbywgaWYgaXQncyBhdmFpbGFibGVcblx0XHRUd2lua2xlLnByb3RlY3QuY2FsbGJhY2suc2hvd0xvZ0FuZEN1cnJlbnRQcm90ZWN0SW5mbygpO1xuXHR9O1xuXHQvLyBOT1RFOiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYnkgYmF0Y2hwcm90ZWN0IGFzIHdlbGxcblx0VHdpbmtsZS5wcm90ZWN0LmZvcm1ldmVudHMgPSB7XG5cdFx0ZWRpdG1vZGlmeTogKGUpID0+IHtcblx0XHRcdGUudGFyZ2V0LmZvcm0uZWRpdGxldmVsLmRpc2FibGVkID0gIWUudGFyZ2V0LmNoZWNrZWQ7XG5cdFx0XHRlLnRhcmdldC5mb3JtLmVkaXRleHBpcnkuZGlzYWJsZWQgPSAhZS50YXJnZXQuY2hlY2tlZCB8fCBlLnRhcmdldC5mb3JtLmVkaXRsZXZlbC52YWx1ZSA9PT0gJ2FsbCc7XG5cdFx0XHRlLnRhcmdldC5mb3JtLmVkaXRsZXZlbC5zdHlsZS5jb2xvciA9IGUudGFyZ2V0LmNoZWNrZWQgPyAnJyA6ICd0cmFuc3BhcmVudCc7XG5cdFx0XHRlLnRhcmdldC5mb3JtLmVkaXRleHBpcnkuc3R5bGUuY29sb3IgPSBlLnRhcmdldC5jaGVja2VkID8gJycgOiAndHJhbnNwYXJlbnQnO1xuXHRcdH0sXG5cdFx0ZWRpdGxldmVsOiAoZSkgPT4ge1xuXHRcdFx0ZS50YXJnZXQuZm9ybS5lZGl0ZXhwaXJ5LmRpc2FibGVkID0gZS50YXJnZXQudmFsdWUgPT09ICdhbGwnO1xuXHRcdH0sXG5cdFx0bW92ZW1vZGlmeTogKGUpID0+IHtcblx0XHRcdC8vIHN5bmMgbW92ZSBzZXR0aW5ncyB3aXRoIGVkaXQgc2V0dGluZ3MgaWYgYXBwbGljYWJsZVxuXHRcdFx0aWYgKGUudGFyZ2V0LmZvcm0ubW92ZWxldmVsLmRpc2FibGVkICYmICFlLnRhcmdldC5mb3JtLmVkaXRsZXZlbC5kaXNhYmxlZCkge1xuXHRcdFx0XHRlLnRhcmdldC5mb3JtLm1vdmVsZXZlbC52YWx1ZSA9IGUudGFyZ2V0LmZvcm0uZWRpdGxldmVsLnZhbHVlO1xuXHRcdFx0XHRlLnRhcmdldC5mb3JtLm1vdmVleHBpcnkudmFsdWUgPSBlLnRhcmdldC5mb3JtLmVkaXRleHBpcnkudmFsdWU7XG5cdFx0XHR9IGVsc2UgaWYgKGUudGFyZ2V0LmZvcm0uZWRpdGxldmVsLmRpc2FibGVkKSB7XG5cdFx0XHRcdGUudGFyZ2V0LmZvcm0ubW92ZWxldmVsLnZhbHVlID0gJ3N5c29wJztcblx0XHRcdFx0ZS50YXJnZXQuZm9ybS5tb3ZlZXhwaXJ5LnZhbHVlID0gJ2luZmluaXR5Jztcblx0XHRcdH1cblx0XHRcdGUudGFyZ2V0LmZvcm0ubW92ZWxldmVsLmRpc2FibGVkID0gIWUudGFyZ2V0LmNoZWNrZWQ7XG5cdFx0XHRlLnRhcmdldC5mb3JtLm1vdmVleHBpcnkuZGlzYWJsZWQgPSAhZS50YXJnZXQuY2hlY2tlZCB8fCBlLnRhcmdldC5mb3JtLm1vdmVsZXZlbC52YWx1ZSA9PT0gJ2FsbCc7XG5cdFx0XHRlLnRhcmdldC5mb3JtLm1vdmVsZXZlbC5zdHlsZS5jb2xvciA9IGUudGFyZ2V0LmNoZWNrZWQgPyAnJyA6ICd0cmFuc3BhcmVudCc7XG5cdFx0XHRlLnRhcmdldC5mb3JtLm1vdmVleHBpcnkuc3R5bGUuY29sb3IgPSBlLnRhcmdldC5jaGVja2VkID8gJycgOiAndHJhbnNwYXJlbnQnO1xuXHRcdH0sXG5cdFx0bW92ZWxldmVsOiAoZSkgPT4ge1xuXHRcdFx0ZS50YXJnZXQuZm9ybS5tb3ZlZXhwaXJ5LmRpc2FibGVkID0gZS50YXJnZXQudmFsdWUgPT09ICdhbGwnO1xuXHRcdH0sXG5cdFx0Y3JlYXRlbGV2ZWw6IChlKSA9PiB7XG5cdFx0XHRlLnRhcmdldC5mb3JtLmNyZWF0ZWV4cGlyeS5kaXNhYmxlZCA9IGUudGFyZ2V0LnZhbHVlID09PSAnYWxsJztcblx0XHR9LFxuXHRcdHRhZ3R5cGU6IChlKSA9PiB7XG5cdFx0XHRlLnRhcmdldC5mb3JtLnNtYWxsLmRpc2FibGVkID0gZS50YXJnZXQudmFsdWUgPT09ICdub25lJyB8fCBlLnRhcmdldC52YWx1ZSA9PT0gJ25vb3AnO1xuXHRcdFx0ZS50YXJnZXQuZm9ybS5ub2luY2x1ZGUuZGlzYWJsZWQgPSBlLnRhcmdldC52YWx1ZSA9PT0gJ25vbmUnIHx8IGUudGFyZ2V0LnZhbHVlID09PSAnbm9vcCc7XG5cdFx0XHRlLnRhcmdldC5mb3JtLnNob3dleHBpcnkuZGlzYWJsZWQgPSBlLnRhcmdldC52YWx1ZSA9PT0gJ25vbmUnIHx8IGUudGFyZ2V0LnZhbHVlID09PSAnbm9vcCc7XG5cdFx0fSxcblx0fTtcblx0VHdpbmtsZS5wcm90ZWN0LmRvQ3VzdG9tRXhwaXJ5ID0gKHRhcmdldCkgPT4ge1xuXHRcdGNvbnN0IGN1c3RvbSA9IHByb21wdChcblx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0J+i+k+WFpeiHquWumuS5iee7iOatouaXtumXtOOAglxcbuaCqOWPr+S7peS9v+eUqOebuOWvueaXtumXtO+8jOWmguKAnDEgbWludXRl4oCd5oiW4oCcMTkgZGF5c+KAne+8jOaIlue7neWvueaXtumXtOKAnHl5eXltbWRkaGhtbeKAne+8iOWmguKAnDIwMDYwMjAxMTQwNeKAneaYrzIwMDblubQwMuaciDAx5pelMTTvvJowNe+8iFVUQ++8ie+8iScsXG5cdFx0XHRcdCfovLjlhaXoh6roqILntYLmraLmmYLplpPjgIJcXG7mgqjlj6/ku6Xkvb/nlKjnm7jlsI3mmYLplpPvvIzlpoLjgIwxIG1pbnV0ZeOAjeaIluOAjDE5IGRheXPjgI3vvIzmiJbntZXlsI3mmYLplpPjgIx5eXl5bW1kZGhobW3jgI3vvIjlpoLjgIwyMDA2MDIwMTE0MDXjgI3mmK8yMDA25bm0MDLmnIgwMeaXpTE077yaMDXvvIhVVEPvvInvvIknXG5cdFx0XHQpLFxuXHRcdFx0Jydcblx0XHQpO1xuXHRcdGlmIChjdXN0b20pIHtcblx0XHRcdGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuXHRcdFx0b3B0aW9uLnNldEF0dHJpYnV0ZSgndmFsdWUnLCBjdXN0b20pO1xuXHRcdFx0b3B0aW9uLnRleHRDb250ZW50ID0gY3VzdG9tO1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKG9wdGlvbik7XG5cdFx0XHR0YXJnZXQudmFsdWUgPSBjdXN0b207XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5zZWxlY3RlZEluZGV4ID0gMDtcblx0XHR9XG5cdH07XG5cdC8vIE5PVEU6IFRoaXMgbGlzdCBpcyB1c2VkIGJ5IGJhdGNocHJvdGVjdCBhcyB3ZWxsXG5cdFR3aW5rbGUucHJvdGVjdC5wcm90ZWN0aW9uTGV2ZWxzID0gW1xuXHRcdHtcblx0XHRcdGxhYmVsOiAn5YWo6YOoJyxcblx0XHRcdHZhbHVlOiAnYWxsJyxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+S7heWFgeiuuOiHquWKqOehruiupOeUqOaItycsICflg4XlhYHoqLHoh6rli5Xnorroqo3kvb/nlKjogIUnKSxcblx0XHRcdHZhbHVlOiAnYXV0b2NvbmZpcm1lZCcsXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfku4XmqKHmnb/nvJbovpHlkZjlkoznrqHnkIblkZgnLCAn5YOF5qih5p2/57eo6Lyv5ZOh5ZKM566h55CG5ZOhJyksXG5cdFx0XHR2YWx1ZTogJ3RlbXBsYXRlZWRpdG9yJyxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+S7heeuoeeQhuWRmCcsICflg4XnrqHnkIblk6EnKSxcblx0XHRcdHZhbHVlOiAnc3lzb3AnLFxuXHRcdFx0c2VsZWN0ZWQ6IHRydWUsXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfku4XlhYHorrjmoaPmoYjnkIbkuovlkZgnLCAn5YOF5YWB6Kix5qqU5qGI55CG5LqL5ZOhJyksXG5cdFx0XHR2YWx1ZTogJ29mZmljaWFscHJvdGVjdGVkJyxcblx0XHR9LFxuXHRdO1xuXHQvLyBkZWZhdWx0IGV4cGlyeSBzZWxlY3Rpb24gaXMgY29uZGl0aW9uYWxseSBzZXQgaW4gVHdpbmtsZS5wcm90ZWN0LmNhbGxiYWNrLmNoYW5nZVByZXNldFxuXHQvLyBOT1RFOiBUaGlzIGxpc3QgaXMgdXNlZCBieSBiYXRjaHByb3RlY3QgYXMgd2VsbFxuXHRUd2lua2xlLnByb3RlY3QucHJvdGVjdGlvbkxlbmd0aHMgPSBbXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICcx5aSpJyxcblx0XHRcdHZhbHVlOiAnMSBkYXknLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICcz5aSpJyxcblx0XHRcdHZhbHVlOiAnMyBkYXlzJyxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJzHlkagnLCAnMemAsScpLFxuXHRcdFx0dmFsdWU6ICcxIHdlZWsnLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygnMuWRqCcsICcy6YCxJyksXG5cdFx0XHR2YWx1ZTogJzIgd2Vla3MnLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygnMeS4quaciCcsICcx5YCL5pyIJyksXG5cdFx0XHR2YWx1ZTogJzEgbW9udGgnLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygnM+S4quaciCcsICcz5YCL5pyIJyksXG5cdFx0XHR2YWx1ZTogJzMgbW9udGhzJyxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJzbkuKrmnIgnLCAnNuWAi+aciCcpLFxuXHRcdFx0dmFsdWU6ICc2IG1vbnRocycsXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogJzHlubQnLFxuXHRcdFx0dmFsdWU6ICcxIHllYXInLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5peg6ZmQ5pyfJywgJ+eEoemZkOacnycpLFxuXHRcdFx0dmFsdWU6ICdpbmZpbml0eScsXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfoh6rlrprkuYnigKbigKYnLCAn6Ieq6KiC4oCm4oCmJyksXG5cdFx0XHR2YWx1ZTogJ2N1c3RvbScsXG5cdFx0fSxcblx0XTtcblx0VHdpbmtsZS5wcm90ZWN0LnByb3RlY3Rpb25UeXBlc0FkbWluID0gW1xuXHRcdHtcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+ino+mZpOS/neaKpCcsICfop6PpmaTkv53orbcnKSxcblx0XHRcdHZhbHVlOiAndW5wcm90ZWN0Jyxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WFqOS/neaKpCcsICflhajkv53orbcnKSxcblx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+W4uOinhO+8iOWFqO+8iScsICfluLjopo/vvIjlhajvvIknKSxcblx0XHRcdFx0XHR2YWx1ZTogJ3BwLXByb3RlY3RlZCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfkuonorq7jgIHnvJbovpHmiJjvvIjlhajvvIknLCAn54it6K2w44CB57eo6Lyv5oiw77yI5YWo77yJJyksXG5cdFx0XHRcdFx0dmFsdWU6ICdwcC1kaXNwdXRlJyxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmqKHmnb/kv53miqQnLCAn5qih5p2/5L+d6K23JyksXG5cdFx0XHRsaXN0OiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfpq5jpo47pmanmqKHmnb/vvIjmqKHmnb/vvIknLCAn6auY6aKo6Zqq5qih5p2/77yI5qih5p2/77yJJyksXG5cdFx0XHRcdFx0dmFsdWU6ICdwcC10ZW1wbGF0ZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Y2K5L+d5oqkJywgJ+WNiuS/neittycpLFxuXHRcdFx0bGlzdDogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bi46KeE77yI5Y2K77yJJywgJ+W4uOimj++8iOWNiu+8iScpLFxuXHRcdFx0XHRcdHZhbHVlOiAncHAtc2VtaS1wcm90ZWN0ZWQnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5oyB57ut56C05Z2P77yI5Y2K77yJJywgJ+aMgee6jOegtOWjnu+8iOWNiu+8iScpLFxuXHRcdFx0XHRcdHZhbHVlOiAncHAtc2VtaS12YW5kYWxpc20nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6L+d5Y+N55Sf6ICF5Lyg6K6w5p2h5L6L77yI5Y2K77yJJywgJ+mBleWPjeeUn+iAheWCs+iomOaineS+i++8iOWNiu+8iScpLFxuXHRcdFx0XHRcdHZhbHVlOiAncHAtc2VtaS1ibHAnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5YKA5YSh56C05Z2P77yI5Y2K77yJJywgJ+WCgOWEoeegtOWjnu+8iOWNiu+8iScpLFxuXHRcdFx0XHRcdHZhbHVlOiAncHAtc2VtaS1zb2NrJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+mrmOmjjumZqeaooeadv++8iOWNiu+8iScsICfpq5jpoqjpmqrmqKHmnb/vvIjljYrvvIknKSxcblx0XHRcdFx0XHR2YWx1ZTogJ3BwLXNlbWktdGVtcGxhdGUnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6KKr5bCB56aB55So5oi35rul55So6K6o6K666aG177yI5Y2K77yJJywgJ+iiq+WwgeemgeS9v+eUqOiAhea/q+eUqOiojuirlumgge+8iOWNiu+8iScpLFxuXHRcdFx0XHRcdHZhbHVlOiAncHAtc2VtaS11c2VydGFsaycsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn56e75Yqo5L+d5oqkJywgJ+enu+WLleS/neittycpLFxuXHRcdFx0bGlzdDogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bi46KeE77yI56e75Yqo77yJJywgJ+W4uOimj++8iOenu+WLle+8iScpLFxuXHRcdFx0XHRcdHZhbHVlOiAncHAtbW92ZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfkuonorq7jgIHnp7vliqjmiJjvvIjnp7vliqjvvIknLCAn54it6K2w44CB56e75YuV5oiw77yI56e75YuV77yJJyksXG5cdFx0XHRcdFx0dmFsdWU6ICdwcC1tb3ZlLWRpc3B1dGUnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn56e75Yqo56C05Z2P77yI56e75Yqo77yJJywgJ+enu+WLleegtOWjnu+8iOenu+WLle+8iScpLFxuXHRcdFx0XHRcdHZhbHVlOiAncHAtbW92ZS12YW5kYWxpc20nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6auY6aOO6Zmp6aG16Z2i77yI56e75Yqo77yJJywgJ+mrmOmiqOmaqumggemdou+8iOenu+WLle+8iScpLFxuXHRcdFx0XHRcdHZhbHVlOiAncHAtbW92ZS1pbmRlZicsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdF0uZmlsdGVyKFxuXHRcdChcblx0XHRcdC8vIEZpbHRlciBmb3IgdGVtcGxhdGVzXG5cdFx0XHR7bGFiZWx9XG5cdFx0KSA9PiB7XG5cdFx0XHRyZXR1cm4gaXNUZW1wbGF0ZSB8fCAobGFiZWwgIT09ICfmqKHmnb/kv53miqQnICYmIGxhYmVsICE9PSAn5qih5p2/5L+d6K23Jyk7XG5cdFx0fVxuXHQpO1xuXHRUd2lua2xlLnByb3RlY3QucHJvdGVjdGlvblR5cGVzQ3JlYXRlT25seSA9IFtcblx0XHR7XG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfnmb3nurjkv53miqQnLCAn55m957SZ5L+d6K23JyksXG5cdFx0XHRsaXN0OiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfluLjop4TvvIjnmb3nurjvvIknLCAn5bi46KaP77yI55m957SZ77yJJyksXG5cdFx0XHRcdFx0dmFsdWU6ICdwcC1jcmVhdGUnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5aSa5qyh6YeN5aSN5Yib5bu677yI55m957q477yJJywgJ+WkmuasoemHjeikh+W7uueri++8iOeZvee0me+8iScpLFxuXHRcdFx0XHRcdHZhbHVlOiAncHAtY3JlYXRlLXJlcGVhdCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmjIHnu63noLTlnY/vvIjnmb3nurjvvIknLCAn5oyB57qM56C05aOe77yI55m957SZ77yJJyksXG5cdFx0XHRcdFx0dmFsdWU6ICdwcC1jcmVhdGUtdmFuZGFsaXNtJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+W3suWwgeemgeeUqOaIt+eahOeUqOaIt+mhte+8iOeZvee6uO+8iScsICflt7LlsIHnpoHkvb/nlKjogIXnmoTkvb/nlKjogIXpoIHvvIjnmb3ntJnvvIknKSxcblx0XHRcdFx0XHR2YWx1ZTogJ3BwLWNyZWF0ZS11c2VycGFnZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdF07XG5cdFR3aW5rbGUucHJvdGVjdC5wcm90ZWN0aW9uVHlwZXMgPSBbXG5cdFx0Li4uVHdpbmtsZS5wcm90ZWN0LnByb3RlY3Rpb25UeXBlc0FkbWluLFxuXHRcdC4uLlR3aW5rbGUucHJvdGVjdC5wcm90ZWN0aW9uVHlwZXNDcmVhdGVPbmx5LFxuXHRdO1xuXHRUd2lua2xlLnByb3RlY3QucHJvdGVjdGlvblR5cGVzQ3JlYXRlID0gW1xuXHRcdHtcblx0XHRcdGxhYmVsOiAn6Kej6Zmk5L+d5oqkJyxcblx0XHRcdHZhbHVlOiAndW5wcm90ZWN0Jyxcblx0XHR9LFxuXHRcdC4uLlR3aW5rbGUucHJvdGVjdC5wcm90ZWN0aW9uVHlwZXNDcmVhdGVPbmx5LFxuXHRdO1xuXHQvLyBOT1RJQ0U6IGtlZXAgdGhpcyBzeW5jaGVkIHdpdGggW1tNZWRpYVdpa2k6UHJvdGVjdC1kcm9wZG93bl1dXG5cdC8vIGV4cGlyeSB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0c1xuXHRUd2lua2xlLnByb3RlY3QucHJvdGVjdGlvblByZXNldHNJbmZvID0ge1xuXHRcdCdwcC1wcm90ZWN0ZWQnOiB7XG5cdFx0XHRlZGl0OiAnc3lzb3AnLFxuXHRcdFx0bW92ZTogJ3N5c29wJyxcblx0XHRcdHJlYXNvbjogbnVsbCxcblx0XHR9LFxuXHRcdCdwcC1kaXNwdXRlJzoge1xuXHRcdFx0ZWRpdDogJ3N5c29wJyxcblx0XHRcdG1vdmU6ICdzeXNvcCcsXG5cdFx0XHRyZWFzb246IHdpbmRvdy53Z1VMUygn57yW6L6R5oiYJywgJ+e3qOi8r+aIsCcpLFxuXHRcdH0sXG5cdFx0J3BwLXRlbXBsYXRlJzoge1xuXHRcdFx0ZWRpdDogJ3RlbXBsYXRlZWRpdG9yJyxcblx0XHRcdG1vdmU6ICd0ZW1wbGF0ZWVkaXRvcicsXG5cdFx0XHRleHBpcnk6ICdpbmZpbml0eScsXG5cdFx0XHRyZWFzb246IHdpbmRvdy53Z1VMUygnW1tMSUI6SFJUfOmrmOmjjumZqeaooeadv11dJywgJ1tbTElCOkhSVHzpq5jpoqjpmqrmqKHmnb9dXScpLFxuXHRcdFx0dGVtcGxhdGU6ICdub29wJyxcblx0XHR9LFxuXHRcdCdwcC12YW5kYWxpc20nOiB7XG5cdFx0XHRlZGl0OiAnc3lzb3AnLFxuXHRcdFx0bW92ZTogJ3N5c29wJyxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCfooqvoh6rliqjnoa7orqTnlKjmiLfnoLTlnY8nLCAn6KKr6Ieq5YuV56K66KqN5L2/55So6ICF56C05aOeJyksXG5cdFx0fSxcblx0XHQncHAtc29jayc6IHtcblx0XHRcdGVkaXQ6ICdzeXNvcCcsXG5cdFx0XHRtb3ZlOiAnc3lzb3AnLFxuXHRcdFx0cmVhc29uOiB3aW5kb3cud2dVTFMoJ+aMgee7reeahOWCgOWEoeegtOWdjycsICfmjIHnuoznmoTlgoDlhKHnoLTlo54nKSxcblx0XHR9LFxuXHRcdCdwcC1zZW1pLXZhbmRhbGlzbSc6IHtcblx0XHRcdGVkaXQ6ICdhdXRvY29uZmlybWVkJyxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCfooqvmlrDnlKjmiLfnoLTlnY8nLCAn6KKr5paw5L2/55So6ICF56C05aOeJyksXG5cdFx0XHR0ZW1wbGF0ZTogJ3BwLXZhbmRhbGlzbScsXG5cdFx0fSxcblx0XHQncHAtc2VtaS1ibHAnOiB7XG5cdFx0XHRlZGl0OiAnYXV0b2NvbmZpcm1lZCcsXG5cdFx0XHRyZWFzb246IHdpbmRvdy53Z1VMUygn5paw55So5oi36L+d5Y+N55Sf6ICF5Lyg6K6w5p2h5L6LJywgJ+aWsOS9v+eUqOiAhemBleWPjeeUn+iAheWCs+iomOaineS+iycpLFxuXHRcdH0sXG5cdFx0J3BwLXNlbWktdXNlcnRhbGsnOiB7XG5cdFx0XHRlZGl0OiAnYXV0b2NvbmZpcm1lZCcsXG5cdFx0XHRyZWFzb246IHdpbmRvdy53Z1VMUygn6KKr5bCB56aB55So5oi35rul55So5YW26K6o6K666aG1JywgJ+iiq+WwgeemgeS9v+eUqOiAhea/q+eUqOWFtuiojuirlumggScpLFxuXHRcdH0sXG5cdFx0J3BwLXNlbWktdGVtcGxhdGUnOiB7XG5cdFx0XHQvLyByZW1vdmVkIGZvciBub3dcblx0XHRcdGVkaXQ6ICdhdXRvY29uZmlybWVkJyxcblx0XHRcdGV4cGlyeTogJ2luZmluaXR5Jyxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCdbW0xJQjpIUlR86auY6aOO6Zmp5qih5p2/XV0nLCAnW1tMSUI6SFJUfOmrmOmiqOmaquaooeadv11dJyksXG5cdFx0XHR0ZW1wbGF0ZTogJ25vb3AnLFxuXHRcdH0sXG5cdFx0J3BwLXNlbWktc29jayc6IHtcblx0XHRcdGVkaXQ6ICdhdXRvY29uZmlybWVkJyxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCfmjIHnu63nmoTlgoDlhKHnoLTlnY8nLCAn5oyB57qM55qE5YKA5YSh56C05aOeJyksXG5cdFx0XHR0ZW1wbGF0ZTogJ3BwLXNvY2snLFxuXHRcdH0sXG5cdFx0J3BwLXNlbWktcHJvdGVjdGVkJzoge1xuXHRcdFx0ZWRpdDogJ2F1dG9jb25maXJtZWQnLFxuXHRcdFx0cmVhc29uOiBudWxsLFxuXHRcdFx0dGVtcGxhdGU6ICdwcC1wcm90ZWN0ZWQnLFxuXHRcdH0sXG5cdFx0J3BwLW1vdmUnOiB7XG5cdFx0XHRtb3ZlOiAnc3lzb3AnLFxuXHRcdFx0cmVhc29uOiBudWxsLFxuXHRcdH0sXG5cdFx0J3BwLW1vdmUtZGlzcHV0ZSc6IHtcblx0XHRcdG1vdmU6ICdzeXNvcCcsXG5cdFx0XHRyZWFzb246IHdpbmRvdy53Z1VMUygn6aG16Z2i56e75Yqo5oiYJywgJ+mggemdouenu+WLleaIsCcpLFxuXHRcdH0sXG5cdFx0J3BwLW1vdmUtdmFuZGFsaXNtJzoge1xuXHRcdFx0bW92ZTogJ3N5c29wJyxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCfnp7vliqjnoLTlnY8nLCAn56e75YuV56C05aOeJyksXG5cdFx0fSxcblx0XHQncHAtbW92ZS1pbmRlZic6IHtcblx0XHRcdG1vdmU6ICdzeXNvcCcsXG5cdFx0XHRleHBpcnk6ICdpbmZpbml0eScsXG5cdFx0XHRyZWFzb246IHdpbmRvdy53Z1VMUygn6auY6aOO6Zmp6aG16Z2iJywgJ+mrmOmiqOmaqumggemdoicpLFxuXHRcdH0sXG5cdFx0dW5wcm90ZWN0OiB7XG5cdFx0XHRlZGl0OiAnYWxsJyxcblx0XHRcdG1vdmU6ICdhbGwnLFxuXHRcdFx0Y3JlYXRlOiAnYWxsJyxcblx0XHRcdHJlYXNvbjogbnVsbCxcblx0XHRcdHRlbXBsYXRlOiAnbm9uZScsXG5cdFx0fSxcblx0XHQncHAtY3JlYXRlJzoge1xuXHRcdFx0Y3JlYXRlOiAnYXV0b2NvbmZpcm1lZCcsXG5cdFx0XHRyZWFzb246IG51bGwsXG5cdFx0fSxcblx0XHQncHAtY3JlYXRlLXJlcGVhdCc6IHtcblx0XHRcdGNyZWF0ZTogJ2F1dG9jb25maXJtZWQnLFxuXHRcdFx0cmVhc29uOiB3aW5kb3cud2dVTFMoJ+WkmuasoemHjeWkjeWIm+W7uicsICflpJrmrKHph43opIflu7rnq4snKSxcblx0XHR9LFxuXHRcdCdwcC1jcmVhdGUtdmFuZGFsaXNtJzoge1xuXHRcdFx0Y3JlYXRlOiAnYXV0b2NvbmZpcm1lZCcsXG5cdFx0XHRyZWFzb246IHdpbmRvdy53Z1VMUygn6KKr5paw55So5oi356C05Z2PJywgJ+iiq+aWsOS9v+eUqOiAheegtOWjnicpLFxuXHRcdH0sXG5cdFx0J3BwLWNyZWF0ZS11c2VycGFnZSc6IHtcblx0XHRcdGNyZWF0ZTogJ3N5c29wJyxcblx0XHRcdGV4cGlyeTogJ2luZmluaXR5Jyxcblx0XHRcdHJlYXNvbjogd2luZG93LndnVUxTKCfooqvmsLjkuYXlsIHnpoHnmoTnlKjmiLfpobUnLCAn6KKr5rC45LmF5bCB56aB55qE5L2/55So6ICF6aCB6Z2iJyksXG5cdFx0fSxcblx0fTtcblx0VHdpbmtsZS5wcm90ZWN0LnByb3RlY3Rpb25UYWdzID0gW1xuXHRcdHtcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aXoO+8iOenu+mZpOeOsOacieaooeadv++8iScsICfnhKHvvIjnp7vpmaTnj77mnInmqKHmnb/vvIknKSxcblx0XHRcdHZhbHVlOiAnbm9uZScsXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfml6DvvIjkuI3np7vpmaTnjrDmnInmqKHmnb/vvIknLCAn54Sh77yI5LiN56e76Zmk54++5pyJ5qih5p2/77yJJyksXG5cdFx0XHR2YWx1ZTogJ25vb3AnLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICfpgJrnlKjmqKHmnb8nLFxuXHRcdFx0bGlzdDogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IGB7e3BwLWRpc3B1dGV9fTogJHt3aW5kb3cud2dVTFMoJ+S6ieiuricsICfniK3orbAnKX1gLFxuXHRcdFx0XHRcdHZhbHVlOiAncHAtZGlzcHV0ZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogYHt7cHAtdmFuZGFsaXNtfX06ICR7d2luZG93LndnVUxTKCfnoLTlnY8nLCAn56C05aOeJyl9YCxcblx0XHRcdFx0XHR2YWx1ZTogJ3BwLXZhbmRhbGlzbScsXG5cdFx0XHRcdFx0c2VsZWN0ZWQ6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogJ3t7cHAtc29ja319OiDlgoDlhKEnLFxuXHRcdFx0XHRcdHZhbHVlOiAncHAtc29jaycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogYHt7cHAtdGVtcGxhdGV9fTogJHt3aW5kb3cud2dVTFMoJ+mrmOmjjumZqeaooeadvycsICfpq5jpoqjpmqrmqKHmnb8nKX1gLFxuXHRcdFx0XHRcdHZhbHVlOiAncHAtdGVtcGxhdGUnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IGB7e3BwLXByb3RlY3RlZH19OiAke3dpbmRvdy53Z1VMUygn5bi46KeEJywgJ+W4uOimjycpfWAsXG5cdFx0XHRcdFx0dmFsdWU6ICdwcC1wcm90ZWN0ZWQnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WNiuS/neaKpOaooeadvycsICfljYrkv53orbfmqKHmnb8nKSxcblx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBge3twcC1zZW1pLXVzZXJ0YWxrfX06ICR7d2luZG93LndnVUxTKCflsIHnpoHnmoTnlKjmiLcnLCAn5bCB56aB55qE5L2/55So6ICFJyl9YCxcblx0XHRcdFx0XHR2YWx1ZTogJ3BwLXNlbWktdXNlcnRhbGsnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IGB7e3BwLXNlbWktYmxwfX06ICR7d2luZG93LndnVUxTKCfnlJ/ogIXkvKDorrAnLCAn55Sf6ICF5YKz6KiYJyl9YCxcblx0XHRcdFx0XHR2YWx1ZTogJ3BwLXNlbWktYmxwJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBge3twcC1zZW1pLWluZGVmfX06ICR7d2luZG93LndnVUxTKCfplb/mnJ8nLCAn6ZW35pyfJyl9YCxcblx0XHRcdFx0XHR2YWx1ZTogJ3BwLXNlbWktaW5kZWYnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+enu+WKqOS/neaKpOaooeadvycsICfnp7vli5Xkv53orbfmqKHmnb8nKSxcblx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBge3twcC1tb3ZlLWRpc3B1dGV9fTogJHt3aW5kb3cud2dVTFMoJ+S6ieiuricsICfniK3orbAnKX1gLFxuXHRcdFx0XHRcdHZhbHVlOiAncHAtbW92ZS1kaXNwdXRlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBge3twcC1tb3ZlLXZhbmRhbGlzbX19OiAke3dpbmRvdy53Z1VMUygn56C05Z2PJywgJ+egtOWjnicpfWAsXG5cdFx0XHRcdFx0dmFsdWU6ICdwcC1tb3ZlLXZhbmRhbGlzbScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogYHt7cHAtbW92ZS1pbmRlZn19OiAke3dpbmRvdy53Z1VMUygn6ZW/5pyfJywgJ+mVt+acnycpfWAsXG5cdFx0XHRcdFx0dmFsdWU6ICdwcC1tb3ZlLWluZGVmJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBge3twcC1tb3ZlfX06ICR7d2luZG93LndnVUxTKCfluLjop4QnLCAn5bi46KaPJyl9YCxcblx0XHRcdFx0XHR2YWx1ZTogJ3BwLW1vdmUnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRdO1xuXHRUd2lua2xlLnByb3RlY3QuY2FsbGJhY2suY2hhbmdlUHJlc2V0ID0gKGUpID0+IHtcblx0XHRjb25zdCB7Zm9ybX0gPSBlLnRhcmdldDtcblx0XHRjb25zdCBhY3Rpb250eXBlcyA9IGZvcm0uYWN0aW9udHlwZTtcblx0XHRsZXQgYWN0aW9udHlwZTtcblx0XHRmb3IgKGNvbnN0IGFjdGlvbl90eXBlX3ZhbHVlIG9mIGFjdGlvbnR5cGVzKSB7XG5cdFx0XHRpZiAoIWFjdGlvbl90eXBlX3ZhbHVlLmNoZWNrZWQpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRhY3Rpb250eXBlID0gYWN0aW9uX3R5cGVfdmFsdWUudmFsdWVzO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGlmIChhY3Rpb250eXBlID09PSAncHJvdGVjdCcpIHtcblx0XHRcdC8vIGFjdHVhbGx5IHByb3RlY3RpbmcgdGhlIHBhZ2Vcblx0XHRcdGNvbnN0IGl0ZW0gPSBUd2lua2xlLnByb3RlY3QucHJvdGVjdGlvblByZXNldHNJbmZvW2Zvcm0uY2F0ZWdvcnkudmFsdWVdO1xuXHRcdFx0aWYgKG13LmNvbmZpZy5nZXQoJ3dnQXJ0aWNsZUlkJykpIHtcblx0XHRcdFx0aWYgKGl0ZW0uZWRpdCkge1xuXHRcdFx0XHRcdGZvcm0uZWRpdG1vZGlmeS5jaGVja2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRUd2lua2xlLnByb3RlY3QuZm9ybWV2ZW50cy5lZGl0bW9kaWZ5KHtcblx0XHRcdFx0XHRcdHRhcmdldDogZm9ybS5lZGl0bW9kaWZ5LFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGZvcm0uZWRpdGxldmVsLnZhbHVlID0gaXRlbS5lZGl0O1xuXHRcdFx0XHRcdFR3aW5rbGUucHJvdGVjdC5mb3JtZXZlbnRzLmVkaXRsZXZlbCh7XG5cdFx0XHRcdFx0XHR0YXJnZXQ6IGZvcm0uZWRpdGxldmVsLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZvcm0uZWRpdG1vZGlmeS5jaGVja2VkID0gZmFsc2U7XG5cdFx0XHRcdFx0VHdpbmtsZS5wcm90ZWN0LmZvcm1ldmVudHMuZWRpdG1vZGlmeSh7XG5cdFx0XHRcdFx0XHR0YXJnZXQ6IGZvcm0uZWRpdG1vZGlmeSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaXRlbS5tb3ZlKSB7XG5cdFx0XHRcdFx0Zm9ybS5tb3ZlbW9kaWZ5LmNoZWNrZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFR3aW5rbGUucHJvdGVjdC5mb3JtZXZlbnRzLm1vdmVtb2RpZnkoe1xuXHRcdFx0XHRcdFx0dGFyZ2V0OiBmb3JtLm1vdmVtb2RpZnksXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0Zm9ybS5tb3ZlbGV2ZWwudmFsdWUgPSBpdGVtLm1vdmU7XG5cdFx0XHRcdFx0VHdpbmtsZS5wcm90ZWN0LmZvcm1ldmVudHMubW92ZWxldmVsKHtcblx0XHRcdFx0XHRcdHRhcmdldDogZm9ybS5tb3ZlbGV2ZWwsXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Zm9ybS5tb3ZlbW9kaWZ5LmNoZWNrZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRUd2lua2xlLnByb3RlY3QuZm9ybWV2ZW50cy5tb3ZlbW9kaWZ5KHtcblx0XHRcdFx0XHRcdHRhcmdldDogZm9ybS5tb3ZlbW9kaWZ5LFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvcm0uZWRpdGV4cGlyeS52YWx1ZSA9IGl0ZW0uZXhwaXJ5IHx8ICcxIHdlZWsnO1xuXHRcdFx0XHRmb3JtLm1vdmVleHBpcnkudmFsdWUgPSBpdGVtLmV4cGlyeSB8fCAnMSB3ZWVrJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChpdGVtLmNyZWF0ZSkge1xuXHRcdFx0XHRcdGZvcm0uY3JlYXRlbGV2ZWwudmFsdWUgPSBpdGVtLmNyZWF0ZTtcblx0XHRcdFx0XHRUd2lua2xlLnByb3RlY3QuZm9ybWV2ZW50cy5jcmVhdGVsZXZlbCh7XG5cdFx0XHRcdFx0XHR0YXJnZXQ6IGZvcm0uY3JlYXRlbGV2ZWwsXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0Zm9ybS5jcmVhdGVleHBpcnkudmFsdWUgPSBpdGVtLmNyZWF0ZWV4cGlyeSB8fCAnMSB3ZWVrJztcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3JtLmNyZWF0ZWV4cGlyeS52YWx1ZSA9IGl0ZW0uZXhwaXJ5IHx8ICcxIHdlZWsnO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgcmVhc29uRmllbGQgPSBhY3Rpb250eXBlID09PSAncHJvdGVjdCcgPyBmb3JtLnByb3RlY3RSZWFzb24gOiBmb3JtLnJlYXNvbjtcblx0XHRcdGlmIChpdGVtLnJlYXNvbikge1xuXHRcdFx0XHRyZWFzb25GaWVsZC52YWx1ZSA9IGl0ZW0ucmVhc29uO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVhc29uRmllbGQudmFsdWUgPSAnJztcblx0XHRcdH1cblx0XHRcdC8vIHNvcnQgb3V0IHRhZ2dpbmcgb3B0aW9ucywgZGlzYWJsZWQgaWYgbm9uZXhpc3RlbnQgb3IgbHVhXG5cdFx0XHRpZiAobXcuY29uZmlnLmdldCgnd2dBcnRpY2xlSWQnKSAmJiBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VDb250ZW50TW9kZWwnKSAhPT0gJ1NjcmlidW50bycpIHtcblx0XHRcdFx0aWYgKGZvcm0uY2F0ZWdvcnkudmFsdWUgPT09ICd1bnByb3RlY3QnKSB7XG5cdFx0XHRcdFx0Zm9ybS50YWd0eXBlLnZhbHVlID0gJ25vbmUnO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZvcm0udGFndHlwZS52YWx1ZSA9IGl0ZW0udGVtcGxhdGUgPz8gZm9ybS5jYXRlZ29yeS52YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRUd2lua2xlLnByb3RlY3QuZm9ybWV2ZW50cy50YWd0eXBlKHtcblx0XHRcdFx0XHR0YXJnZXQ6IGZvcm0udGFndHlwZSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGlmICgvdGVtcGxhdGUvLnRlc3QoZm9ybS5jYXRlZ29yeS52YWx1ZSkpIHtcblx0XHRcdFx0XHRmb3JtLm5vaW5jbHVkZS5jaGVja2VkID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIGlmIChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpICE9PSAxMCkge1xuXHRcdFx0XHRcdGZvcm0ubm9pbmNsdWRlLmNoZWNrZWQgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoZm9ybS5jYXRlZ29yeS52YWx1ZSA9PT0gJ3VucHJvdGVjdCcpIHtcblx0XHRcdC8vIFJQUCByZXF1ZXN0XG5cdFx0XHRmb3JtLmV4cGlyeS52YWx1ZSA9ICcnO1xuXHRcdFx0Zm9ybS5leHBpcnkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3JtLmV4cGlyeS52YWx1ZSA9ICcnO1xuXHRcdFx0Zm9ybS5leHBpcnkuZGlzYWJsZWQgPSBmYWxzZTtcblx0XHR9XG5cdH07XG5cdFR3aW5rbGUucHJvdGVjdC5jYWxsYmFjay5ldmFsdWF0ZSA9IChlKSA9PiB7XG5cdFx0Y29uc3QgZm9ybSA9IGUudGFyZ2V0O1xuXHRcdGNvbnN0IGlucHV0ID0gTW9yZWJpdHMucXVpY2tGb3JtLmdldElucHV0RGF0YShmb3JtKTtcblx0XHRsZXQgdGFncGFyYW1zO1xuXHRcdGlmIChcblx0XHRcdGlucHV0LmFjdGlvbnR5cGUgPT09ICd0YWcnIHx8XG5cdFx0XHQoaW5wdXQuYWN0aW9udHlwZSA9PT0gJ3Byb3RlY3QnICYmXG5cdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnQXJ0aWNsZUlkJykgJiZcblx0XHRcdFx0bXcuY29uZmlnLmdldCgnd2dQYWdlQ29udGVudE1vZGVsJykgIT09ICdTY3JpYnVudG8nKVxuXHRcdCkge1xuXHRcdFx0dGFncGFyYW1zID0ge1xuXHRcdFx0XHR0YWc6IGlucHV0LnRhZ3R5cGUsXG5cdFx0XHRcdHJlYXNvbjpcblx0XHRcdFx0XHQoaW5wdXQudGFndHlwZSA9PT0gJ3BwLXByb3RlY3RlZCcgfHxcblx0XHRcdFx0XHRcdGlucHV0LnRhZ3R5cGUgPT09ICdwcC1zZW1pLXByb3RlY3RlZCcgfHxcblx0XHRcdFx0XHRcdGlucHV0LnRhZ3R5cGUgPT09ICdwcC1tb3ZlJykgJiZcblx0XHRcdFx0XHRpbnB1dC5wcm90ZWN0UmVhc29uXG5cdFx0XHRcdFx0XHQ/IGlucHV0LnByb3RlY3RSZWFzb25cblx0XHRcdFx0XHRcdDogbnVsbCxcblx0XHRcdFx0c2hvd2V4cGlyeTogaW5wdXQuYWN0aW9udHlwZSA9PT0gJ3Byb3RlY3QnID8gaW5wdXQuc2hvd2V4cGlyeSA6IG51bGwsXG5cdFx0XHRcdHNtYWxsOiBpbnB1dC5zbWFsbCxcblx0XHRcdFx0bm9pbmNsdWRlOiBpbnB1dC5ub2luY2x1ZGUsXG5cdFx0XHR9O1xuXHRcdFx0aWYgKGlucHV0LmFjdGlvbnR5cGUgPT09ICdwcm90ZWN0Jykge1xuXHRcdFx0XHRpZiAoaW5wdXQuZWRpdG1vZGlmeSkge1xuXHRcdFx0XHRcdHRhZ3BhcmFtcy5leHBpcnkgPSBpbnB1dC5lZGl0ZXhwaXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYgKGlucHV0Lm1vdmVtb2RpZnkpIHtcblx0XHRcdFx0XHR0YWdwYXJhbXMuZXhwaXJ5ID0gaW5wdXQubW92ZWV4cGlyeTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRjb25zdCBjbG9zZXBhcmFtcyA9IHt9O1xuXHRcdGlmIChpbnB1dC5jbG9zZSkge1xuXHRcdFx0aWYgKGlucHV0LmNhdGVnb3J5ID09PSAndW5wcm90ZWN0Jykge1xuXHRcdFx0XHRjbG9zZXBhcmFtcy50eXBlID0gJ3VucHJvdGVjdCc7XG5cdFx0XHR9IGVsc2UgaWYgKG13LmNvbmZpZy5nZXQoJ3dnQXJ0aWNsZUlkJykpIHtcblx0XHRcdFx0aWYgKGlucHV0LmVkaXRtb2RpZnkpIHtcblx0XHRcdFx0XHRzd2l0Y2ggKGlucHV0LmVkaXRsZXZlbCkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnb2ZmaWNpYWxwcm90ZWN0ZWQnOlxuXHRcdFx0XHRcdFx0XHRjbG9zZXBhcmFtcy50eXBlID0gJ29mZmljaWFscHJvdGVjdGVkJztcblx0XHRcdFx0XHRcdFx0Y2xvc2VwYXJhbXMuZXhwaXJ5ID0gaW5wdXQuZWRpdGV4cGlyeTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdyZXZpc2lvbnByb3RlY3RlZCc6XG5cdFx0XHRcdFx0XHRcdGNsb3NlcGFyYW1zLnR5cGUgPSAncmV2aXNpb25wcm90ZWN0ZWQnO1xuXHRcdFx0XHRcdFx0XHRjbG9zZXBhcmFtcy5leHBpcnkgPSBpbnB1dC5lZGl0ZXhwaXJ5O1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ3N5c29wJzpcblx0XHRcdFx0XHRcdFx0Y2xvc2VwYXJhbXMudHlwZSA9ICdmdWxsJztcblx0XHRcdFx0XHRcdFx0Y2xvc2VwYXJhbXMuZXhwaXJ5ID0gaW5wdXQuZWRpdGV4cGlyeTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICd0ZW1wbGF0ZWVkaXRvcic6XG5cdFx0XHRcdFx0XHRcdGNsb3NlcGFyYW1zLnR5cGUgPSAndGVtcCc7XG5cdFx0XHRcdFx0XHRcdGNsb3NlcGFyYW1zLmV4cGlyeSA9IGlucHV0LmVkaXRleHBpcnk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnYXV0b2NvbmZpcm1lZCc6XG5cdFx0XHRcdFx0XHRcdGNsb3NlcGFyYW1zLnR5cGUgPSAnc2VtaSc7XG5cdFx0XHRcdFx0XHRcdGNsb3NlcGFyYW1zLmV4cGlyeSA9IGlucHV0LmVkaXRleHBpcnk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Ly8gTm8gZGVmYXVsdFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChcblx0XHRcdFx0XHRpbnB1dC5tb3ZlbW9kaWZ5ICYmXG5cdFx0XHRcdFx0WydvZmZpY2lhbHByb3RlY3RlZCcsICdyZXZpc2lvbnByb3RlY3RlZCcsICdzeXNvcCcsICd0ZW1wbGF0ZWVkaXRvciddLmluY2x1ZGVzKGlucHV0Lm1vdmVsZXZlbClcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Y2xvc2VwYXJhbXMudHlwZSA9ICdtb3ZlJztcblx0XHRcdFx0XHRjbG9zZXBhcmFtcy5leHBpcnkgPSBpbnB1dC5tb3ZlZXhwaXJ5O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGlucHV0LmNyZWF0ZWxldmVsICE9PSAnYWxsJykge1xuXHRcdFx0XHRjbG9zZXBhcmFtcy50eXBlID0gJ3NhbHQnO1xuXHRcdFx0XHRjbG9zZXBhcmFtcy5leHBpcnkgPSBpbnB1dC5jcmVhdGVleHBpcnk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHN3aXRjaCAoaW5wdXQuYWN0aW9udHlwZSkge1xuXHRcdFx0Y2FzZSAncHJvdGVjdCc6IHtcblx0XHRcdFx0Ly8gcHJvdGVjdCB0aGUgcGFnZVxuXHRcdFx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5yZWRpcmVjdCA9IG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKTtcblx0XHRcdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQubm90aWNlID0gd2luZG93LndnVUxTKCfkv53miqTlrozmiJAnLCAn5L+d6K235a6M5oiQJyk7XG5cdFx0XHRcdGxldCBzdGF0dXNJbml0ZWQgPSBmYWxzZTtcblx0XHRcdFx0bGV0IHRoaXNwYWdlO1xuXHRcdFx0XHRjb25zdCBhbGxEb25lID0gKCkgPT4ge1xuXHRcdFx0XHRcdGlmICh0aGlzcGFnZSkge1xuXHRcdFx0XHRcdFx0dGhpc3BhZ2UuZ2V0U3RhdHVzRWxlbWVudCgpLmluZm8oJ+WujOaIkCcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGFncGFyYW1zKSB7XG5cdFx0XHRcdFx0XHRUd2lua2xlLnByb3RlY3QuY2FsbGJhY2tzLnRhZ2dpbmdQYWdlSW5pdGlhbCh0YWdwYXJhbXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoY2xvc2VwYXJhbXMgJiYgY2xvc2VwYXJhbXMudHlwZSkge1xuXHRcdFx0XHRcdFx0Y29uc3QgcnBwUGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHRcdFx0XHRcdCdMSUJfdGFsazrpobXpnaLkv53miqTor7fmsYInLFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WFs+mXreivt+axgicsICfpl5zplonoq4vmsYInKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJwcFBhZ2Uuc2V0Rm9sbG93UmVkaXJlY3QodHJ1ZSk7XG5cdFx0XHRcdFx0XHRycHBQYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhjbG9zZXBhcmFtcyk7XG5cdFx0XHRcdFx0XHRycHBQYWdlLmxvYWQoVHdpbmtsZS5wcm90ZWN0LmNhbGxiYWNrcy5jbG9zZVJlcXVlc3QpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdFx0Y29uc3QgcHJvdGVjdEl0ID0gKG5leHQpID0+IHtcblx0XHRcdFx0XHR0aGlzcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHRcdFx0XHRtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyksXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+S/neaKpOmhtemdoicsICfkv53orbfpoIHpnaInKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0aWYgKG13LmNvbmZpZy5nZXQoJ3dnQXJ0aWNsZUlkJykpIHtcblx0XHRcdFx0XHRcdGlmIChpbnB1dC5lZGl0bW9kaWZ5KSB7XG5cdFx0XHRcdFx0XHRcdHRoaXNwYWdlLnNldEVkaXRQcm90ZWN0aW9uKGlucHV0LmVkaXRsZXZlbCwgaW5wdXQuZWRpdGV4cGlyeSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoaW5wdXQubW92ZW1vZGlmeSkge1xuXHRcdFx0XHRcdFx0XHQvLyBFbnN1cmUgYSBsZXZlbCBoYXMgYWN0dWFsbHkgYmVlbiBjaG9zZW5cblx0XHRcdFx0XHRcdFx0aWYgKGlucHV0Lm1vdmVsZXZlbCkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNwYWdlLnNldE1vdmVQcm90ZWN0aW9uKGlucHV0Lm1vdmVsZXZlbCwgaW5wdXQubW92ZWV4cGlyeSk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dm9pZCBtdy5ub3RpZnkod2luZG93LndnVUxTKCfmgqjpnIDopoHpgInmi6nkv53miqTlsYLnuqfvvIEnLCAn5oKo6ZyA6KaB6YG45pOH5L+d6K235bGk57Sa77yBJyksIHtcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVwcm90ZWN0Jyxcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRoaXNwYWdlLnNldFdhdGNobGlzdChUd2lua2xlLmdldFByZWYoJ3dhdGNoUHJvdGVjdGVkUGFnZXMnKSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXNwYWdlLnNldENyZWF0ZVByb3RlY3Rpb24oaW5wdXQuY3JlYXRlbGV2ZWwsIGlucHV0LmNyZWF0ZWV4cGlyeSk7XG5cdFx0XHRcdFx0XHR0aGlzcGFnZS5zZXRXYXRjaGxpc3QoZmFsc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoaW5wdXQucHJvdGVjdFJlYXNvbikge1xuXHRcdFx0XHRcdFx0dGhpc3BhZ2Uuc2V0RWRpdFN1bW1hcnkoaW5wdXQucHJvdGVjdFJlYXNvbik7XG5cdFx0XHRcdFx0XHR0aGlzcGFnZS5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHZvaWQgbXcubm90aWZ5KFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+aCqOW/hemhu+i+k+WFpeS/neaKpOeQhueUse+8jOi/meWwhuiiq+iusOW9leWcqOS/neaKpOaXpeW/l+S4reOAgicsXG5cdFx0XHRcdFx0XHRcdFx0J+aCqOW/hemgiOi8uOWFpeS/neitt+eQhueUse+8jOmAmeWwh+iiq+iomOmMhOWcqOS/neitt+aXpeiqjOS4reOAgidcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHRcdFx0XHR0YWc6ICd0d2lua2xlcHJvdGVjdCcsXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICghc3RhdHVzSW5pdGVkKSB7XG5cdFx0XHRcdFx0XHRNb3JlYml0cy5zaW1wbGVXaW5kb3cuc2V0QnV0dG9uc0VuYWJsZWQoZmFsc2UpO1xuXHRcdFx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoZm9ybSk7XG5cdFx0XHRcdFx0XHRzdGF0dXNJbml0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzcGFnZS5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRcdFx0dGhpc3BhZ2UucHJvdGVjdChuZXh0KTtcblx0XHRcdFx0fTtcblx0XHRcdFx0aWYgKGlucHV0LmVkaXRtb2RpZnkgfHwgaW5wdXQubW92ZW1vZGlmeSB8fCAhbXcuY29uZmlnLmdldCgnd2dBcnRpY2xlSWQnKSkge1xuXHRcdFx0XHRcdHByb3RlY3RJdChhbGxEb25lKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2b2lkIG13Lm5vdGlmeShcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0J+ivt+WRiuiviVR3aW5rbGXopoHlgZrku4DkuYjvvIFcXG7oi6Xmgqjlj6rmmK/mg7PmoIforrDor6XpobXvvIzor7fpgInmi6nkuIrpnaLnmoTigJznlKjkv53miqTmqKHmnb/moIforrDmraTpobXigJ3pgInpobnjgIInLFxuXHRcdFx0XHRcdFx0XHQn6KuL5ZGK6Ki0VHdpbmtsZeimgeWBmuS7gOm6vO+8gVxcbuiLpeaCqOWPquaYr+aDs+aomeiomOipsumgge+8jOiri+mBuOaTh+S4iumdoueahOOAjOeUqOS/neitt+aooeadv+aomeiomOatpOmggeOAjemBuOmgheOAgidcblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHRcdFx0dGFnOiAndHdpbmtsZXByb3RlY3QnLFxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRjYXNlICd0YWcnOlxuXHRcdFx0XHQvLyBhcHBseSBhIHByb3RlY3Rpb24gdGVtcGxhdGVcblx0XHRcdFx0TW9yZWJpdHMuc2ltcGxlV2luZG93LnNldEJ1dHRvbnNFbmFibGVkKGZhbHNlKTtcblx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoZm9ybSk7XG5cdFx0XHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLnJlZGlyZWN0ID0gbXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpO1xuXHRcdFx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5mb2xsb3dSZWRpcmVjdCA9IGZhbHNlO1xuXHRcdFx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5ub3RpY2UgPSB3aW5kb3cud2dVTFMoJ+agh+iusOWujOaIkCcsICfmqJnoqJjlrozmiJAnKTtcblx0XHRcdFx0VHdpbmtsZS5wcm90ZWN0LmNhbGxiYWNrcy50YWdnaW5nUGFnZUluaXRpYWwodGFncGFyYW1zKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdyZXF1ZXN0Jzoge1xuXHRcdFx0XHQvLyBmaWxlIHJlcXVlc3QgYXQgUkZQUFxuXHRcdFx0XHRsZXQgdHlwZW5hbWU7XG5cdFx0XHRcdGxldCB0eXBlcmVhc29uO1xuXHRcdFx0XHRzd2l0Y2ggKGlucHV0LmNhdGVnb3J5KSB7XG5cdFx0XHRcdFx0Y2FzZSAncHAtZGlzcHV0ZSc6XG5cdFx0XHRcdFx0Y2FzZSAncHAtcHJvdGVjdGVkJzpcblx0XHRcdFx0XHRcdHR5cGVuYW1lID0gd2luZG93LndnVUxTKCflhajkv53miqQnLCAn5YWo5L+d6K23Jyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcC10ZW1wbGF0ZSc6XG5cdFx0XHRcdFx0XHR0eXBlbmFtZSA9IHdpbmRvdy53Z1VMUygn5qih5p2/5L+d5oqkJywgJ+aooeadv+S/neittycpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncHAtdmFuZGFsaXNtJzpcblx0XHRcdFx0XHRjYXNlICdwcC1zZW1pLWRpc3J1cHRpdmUnOlxuXHRcdFx0XHRcdGNhc2UgJ3BwLXNlbWktdW5zb3VyY2VkJzpcblx0XHRcdFx0XHRjYXNlICdwcC1zZW1pLXZhbmRhbGlzbSc6XG5cdFx0XHRcdFx0Y2FzZSAncHAtc2VtaS11c2VydGFsayc6XG5cdFx0XHRcdFx0Y2FzZSAncHAtc2VtaS10ZW1wbGF0ZSc6IC8vIHJlbW92ZWQgZm9yIG5vd1xuXHRcdFx0XHRcdGNhc2UgJ3BwLXNlbWktc29jayc6XG5cdFx0XHRcdFx0Y2FzZSAncHAtc2VtaS1ibHAnOlxuXHRcdFx0XHRcdGNhc2UgJ3BwLXNlbWktcHJvdGVjdGVkJzpcblx0XHRcdFx0XHRcdHR5cGVuYW1lID0gd2luZG93LndnVUxTKCfljYrkv53miqQnLCAn5Y2K5L+d6K23Jyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcC1tb3ZlJzpcblx0XHRcdFx0XHRjYXNlICdwcC1tb3ZlLWRpc3B1dGUnOlxuXHRcdFx0XHRcdGNhc2UgJ3BwLW1vdmUtaW5kZWYnOlxuXHRcdFx0XHRcdGNhc2UgJ3BwLW1vdmUtdmFuZGFsaXNtJzpcblx0XHRcdFx0XHRcdHR5cGVuYW1lID0gd2luZG93LndnVUxTKCfnp7vliqjkv53miqQnLCAn56e75YuV5L+d6K23Jyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcC1jcmVhdGUnOlxuXHRcdFx0XHRcdGNhc2UgJ3BwLWNyZWF0ZS1vZmZlbnNpdmUnOlxuXHRcdFx0XHRcdGNhc2UgJ3BwLWNyZWF0ZS1ibHAnOlxuXHRcdFx0XHRcdGNhc2UgJ3BwLWNyZWF0ZS1zYWx0Jzpcblx0XHRcdFx0XHRjYXNlICdwcC1jcmVhdGUtdXNlcnBhZ2UnOlxuXHRcdFx0XHRcdGNhc2UgJ3BwLWNyZWF0ZS1yZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ3BwLWNyZWF0ZS12YW5kYWxpc20nOlxuXHRcdFx0XHRcdFx0dHlwZW5hbWUgPSB3aW5kb3cud2dVTFMoJ+eZvee6uOS/neaKpCcsICfnmb3ntJnkv53orbcnKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdC8qIGNhc2UgJ3VucHJvdGVjdCc6ICovXG5cdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHR0eXBlbmFtZSA9IHdpbmRvdy53Z1VMUygn6Kej6Zmk5L+d5oqkJywgJ+ino+mZpOS/neittycpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3dpdGNoIChpbnB1dC5jYXRlZ29yeSkge1xuXHRcdFx0XHRcdGNhc2UgJ3BwLWRpc3B1dGUnOlxuXHRcdFx0XHRcdFx0dHlwZXJlYXNvbiA9IHdpbmRvdy53Z1VMUygn5LqJ6K6u44CB57yW6L6R5oiYJywgJ+eIreitsOOAgee3qOi8r+aIsCcpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncHAtdmFuZGFsaXNtJzpcblx0XHRcdFx0XHRjYXNlICdwcC1zZW1pLXZhbmRhbGlzbSc6XG5cdFx0XHRcdFx0Y2FzZSAncHAtY3JlYXRlLXZhbmRhbGlzbSc6XG5cdFx0XHRcdFx0XHR0eXBlcmVhc29uID0gd2luZG93LndnVUxTKCfmjIHnu63noLTlnY8nLCAn5oyB57qM56C05aOeJyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcC10ZW1wbGF0ZSc6XG5cdFx0XHRcdFx0Y2FzZSAncHAtc2VtaS10ZW1wbGF0ZSc6XG5cdFx0XHRcdFx0XHQvLyByZW1vdmVkIGZvciBub3dcblx0XHRcdFx0XHRcdHR5cGVyZWFzb24gPSB3aW5kb3cud2dVTFMoJ+mrmOmjjumZqeaooeadvycsICfpq5jpoqjpmqrmqKHmnb8nKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3BwLWNyZWF0ZS11c2VycGFnZSc6XG5cdFx0XHRcdFx0XHR0eXBlcmVhc29uID0gd2luZG93LndnVUxTKCfooqvmsLjkuYXlsIHnpoHnmoTnlKjmiLfpobUnLCAn6KKr5rC45LmF5bCB6Y6W55qE5L2/55So6ICF6aCB6Z2iJyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcC1zZW1pLXVzZXJ0YWxrJzpcblx0XHRcdFx0XHRcdHR5cGVyZWFzb24gPSB3aW5kb3cud2dVTFMoJ+W3suWwgeemgeeUqOaIt+eahOiuqOiuuumhtScsICflt7LlsIHpjpbkvb/nlKjogIXnmoToqI7oq5bpoIEnKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3BwLXNlbWktc29jayc6XG5cdFx0XHRcdFx0XHR0eXBlcmVhc29uID0gd2luZG93LndnVUxTKCflgoDlhKHnoLTlnY8nLCAn5YKA5YSh56C05aOeJyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcC1zZW1pLWJscCc6XG5cdFx0XHRcdFx0XHR0eXBlcmVhc29uID0gd2luZG93LndnVUxTKCfov53lj43nlJ/ogIXkvKDorrDmnaHkvosnLCAn6YGV5Y+N55Sf6ICF5YKz6KiY5qKd5L6LJyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcC1tb3ZlLWRpc3B1dGUnOlxuXHRcdFx0XHRcdFx0dHlwZXJlYXNvbiA9IHdpbmRvdy53Z1VMUygn5LqJ6K6u44CB56e75Yqo5oiYJywgJ+eIreitsOOAgeenu+WLleaIsCcpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncHAtbW92ZS12YW5kYWxpc20nOlxuXHRcdFx0XHRcdFx0dHlwZXJlYXNvbiA9IHdpbmRvdy53Z1VMUygn56e75Yqo56C05Z2PJywgJ+enu+WLleegtOWjnicpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncHAtbW92ZS1pbmRlZic6XG5cdFx0XHRcdFx0XHR0eXBlcmVhc29uID0gd2luZG93LndnVUxTKCfpq5jpo47pmanpobXpnaInLCAn6auY6aKo6Zqq6aCB6Z2iJyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcC1jcmVhdGUtcmVwZWF0Jzpcblx0XHRcdFx0XHRcdHR5cGVyZWFzb24gPSB3aW5kb3cud2dVTFMoJ+WkmuasoemHjeWkjeWIm+W7uicsICflpJrmrKHph43opIflu7rnq4snKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHR0eXBlcmVhc29uID0gJyc7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRsZXQgcmVhc29uID0gdHlwZXJlYXNvbjtcblx0XHRcdFx0aWYgKGlucHV0LnJlYXNvbiAhPT0gJycpIHtcblx0XHRcdFx0XHRpZiAodHlwZXJlYXNvbiAhPT0gJycpIHtcblx0XHRcdFx0XHRcdHJlYXNvbiArPSAn77yaJztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmVhc29uICs9IGlucHV0LnJlYXNvbjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocmVhc29uICE9PSAnJykge1xuXHRcdFx0XHRcdHJlYXNvbiA9IE1vcmViaXRzLnN0cmluZy5hcHBlbmRQdW5jdHVhdGlvbihyZWFzb24pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IHJwcHBhcmFtcyA9IHtcblx0XHRcdFx0XHRyZWFzb24sXG5cdFx0XHRcdFx0dHlwZW5hbWUsXG5cdFx0XHRcdFx0Y2F0ZWdvcnk6IGlucHV0LmNhdGVnb3J5LFxuXHRcdFx0XHRcdGV4cGlyeTogaW5wdXQuZXhwaXJ5LFxuXHRcdFx0XHR9O1xuXHRcdFx0XHRNb3JlYml0cy5zaW1wbGVXaW5kb3cuc2V0QnV0dG9uc0VuYWJsZWQoZmFsc2UpO1xuXHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5pdChmb3JtKTtcblx0XHRcdFx0Y29uc3QgcnBwTmFtZSA9ICdMSUJfdGFsazrpobXpnaLkv53miqTor7fmsYInO1xuXHRcdFx0XHQvLyBVcGRhdGluZyBkYXRhIGZvciB0aGUgYWN0aW9uIGNvbXBsZXRlZCBldmVudFxuXHRcdFx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5yZWRpcmVjdCA9IHJwcE5hbWU7XG5cdFx0XHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLm5vdGljZSA9IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHQn5o+Q5ZCN5a6M5oiQ77yM6YeN5a6a5ZCR5Yiw6K6o6K666aG1Jyxcblx0XHRcdFx0XHQn5o+Q5ZCN5a6M5oiQ77yM6YeN5paw5bCO5ZCR5Yiw6KiO6KuW6aCBJ1xuXHRcdFx0XHQpO1xuXHRcdFx0XHRjb25zdCBycHBQYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShycHBOYW1lLCB3aW5kb3cud2dVTFMoJ+ivt+axguS/neaKpOmhtemdoicsICfoq4vmsYLkv53orbfpoIHpnaInKSk7XG5cdFx0XHRcdHJwcFBhZ2Uuc2V0Rm9sbG93UmVkaXJlY3QodHJ1ZSk7XG5cdFx0XHRcdHJwcFBhZ2Uuc2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKHJwcHBhcmFtcyk7XG5cdFx0XHRcdHJwcFBhZ2UubG9hZChUd2lua2xlLnByb3RlY3QuY2FsbGJhY2tzLmZpbGVSZXF1ZXN0KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR2b2lkIG13Lm5vdGlmeSgndHdpbmtsZXByb3RlY3Q6IOacquefpeaTjeS9nOexu+WeiycsIHtcblx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0dGFnOiAndHdpbmtsZXByb3RlY3QnLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9O1xuXHRUd2lua2xlLnByb3RlY3QuY2FsbGJhY2tzID0ge1xuXHRcdHRhZ2dpbmdQYWdlSW5pdGlhbDogKHRhZ3BhcmFtcykgPT4ge1xuXHRcdFx0aWYgKHRhZ3BhcmFtcy50YWcgPT09ICdub29wJykge1xuXHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5mbyhcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+W6lOeUqOS/neaKpOaooeadvycsICfmh4nnlKjkv53orbfmqKHmnb8nKSxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+ayoeS7gOS5iOimgeWBmueahCcsICfmspLku4DpurzopoHlgZrnmoQnKVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBwYWdlTmFtZSA9IG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKTtcblx0XHRcdGNvbnN0IHByb3RlY3RlZFBhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKHBhZ2VOYW1lLCB3aW5kb3cud2dVTFMoJ+agh+iusOmhtemdoicsICfmqJnoqJjpoIHpnaInKSk7XG5cdFx0XHRwcm90ZWN0ZWRQYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyh0YWdwYXJhbXMpO1xuXHRcdFx0cHJvdGVjdGVkUGFnZS5sb2FkKFR3aW5rbGUucHJvdGVjdC5jYWxsYmFja3MudGFnZ2luZ1BhZ2UpO1xuXHRcdH0sXG5cdFx0Z2V0VGFnZ2VkUGFnZTogKHBhcmFtcywgdGV4dCkgPT4ge1xuXHRcdFx0bGV0IHRhZztcblx0XHRcdGxldCBzdW1tYXJ5O1xuXHRcdFx0Y29uc3Qgb2xkdGFnX3JlID1cblx0XHRcdFx0Lyg/Ojxub2luY2x1ZGU+KT9bIFxcdF0qXFx7XFx7XFxzKihwcC1bXnt9XSo/fHByb3RlY3RlZHwoPzp0fHZ8c3xwLXx1c2VydGFsay12fHVzZXJ0YWxrLXN8c2J8bW92ZSlwcm90ZWN0ZWQoPzoyKT98cHJvdGVjdGVkIHRlbXBsYXRlfHByaXZhY3kgcHJvdGVjdGlvbilcXHMqP1xcfVxcfVxccyooPzo8XFwvbm9pbmNsdWRlPik/XFxzKi9naTtcblx0XHRcdGNvbnN0IHJlX3Jlc3VsdCA9IG9sZHRhZ19yZS5leGVjKHRleHQpO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRyZV9yZXN1bHQgJiZcblx0XHRcdFx0KHBhcmFtcy50YWcgPT09ICdub25lJyB8fFxuXHRcdFx0XHRcdGNvbmZpcm0oXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WcqOmhtemdouS4iuaJvuWIsHt7JywgJ+WcqOmggemdouS4iuaJvuWIsHt7JykgK1xuXHRcdFx0XHRcdFx0XHRyZV9yZXN1bHRbMV0gK1xuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J319XFxu5Y2V5Ye756Gu5a6a5Lul56e76Zmk77yM5oiW5Y2V5Ye75Y+W5raI5Lul5Y+W5raI5pON5L2c44CCJyxcblx0XHRcdFx0XHRcdFx0XHQnfX1cXG7pu57mk4rnorrlrprku6Xnp7vpmaTvvIzmiJbpu57mk4rlj5bmtojku6Xlj5bmtojmk43kvZzjgIInXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpKVxuXHRcdFx0KSB7XG5cdFx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2Uob2xkdGFnX3JlLCAnJyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocGFyYW1zLnRhZyA9PT0gJ25vbmUnKSB7XG5cdFx0XHRcdHN1bW1hcnkgPSB3aW5kb3cud2dVTFMoJ+enu+mZpOS/neaKpOaooeadvycsICfnp7vpmaTkv53orbfmqKHmnb8nKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCh7dGFnfSA9IHBhcmFtcyk7XG5cdFx0XHRcdGlmIChwYXJhbXMucmVhc29uKSB7XG5cdFx0XHRcdFx0dGFnICs9IGB8cmVhc29uPSR7cGFyYW1zLnJlYXNvbn1gO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwYXJhbXMuc2hvd2V4cGlyeSAmJiBwYXJhbXMuZXhwaXJ5ICYmICFNb3JlYml0cy5zdHJpbmcuaXNJbmZpbml0eShwYXJhbXMuZXhwaXJ5KSkge1xuXHRcdFx0XHRcdHRhZyArPSAnfGV4cGlyeT17eycuY29uY2F0KCdzdWJzdDonLCBgI3RpbWU6Y3wke3BhcmFtcy5leHBpcnl9fX1gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocGFyYW1zLnNtYWxsKSB7XG5cdFx0XHRcdFx0dGFnICs9ICd8c21hbGw9eWVzJztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoL15cXHMqIyg/OnJlZGlyZWN0fOmHjeWumuWQkXzph43mlrDlsI7lkJEpL2kudGVzdCh0ZXh0KSkge1xuXHRcdFx0XHRcdC8vIHJlZGlyZWN0IHBhZ2Vcblx0XHRcdFx0XHQvLyBPbmx5IHRhZyBpZiBubyB7e3JjYXQgc2hlbGx9fSBpcyBmb3VuZFxuXHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdHRleHQubWF0Y2goXG5cdFx0XHRcdFx0XHRcdC97eyg/OlJlZGlyZWN0WyBfXWNhdGVnb3J5IHNoZWxsfFJjYXRbIF9dc2hlbGx8VGhpc1sgX11pcyBhIHJlZGlyZWN0fOWkmuenjeexu+Wei+mHjeWumuWQkXzlpJrnqK7poZ7lnovph43lrprlkJF85aSa56iu6aGe5Z6L6YeN5paw5bCO5ZCRfOWkmuenjeexu+Wei+mHjeaWsOWvvOWQkXxSMHzlhbbku5bph43lrprlkJF8UkNTfFJlZGlyZWN0WyBfXXNoZWxsKS9pXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5mbyhcblx0XHRcdFx0XHRcdFx0J+W3suWtmOWcqFJlZGlyZWN0IGNhdGVnb3J5IHNoZWxsJyxcblx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfmsqHku4DkuYjlj6/lgZrnmoQnLCAn5rKS5LuA6bq85Y+v5YGa55qEJylcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoXG5cdFx0XHRcdFx0XHQvIyg/OnJlZGlyZWN0fOmHjeWumuWQkXzph43mlrDlsI7lkJEpID8oXFxbXFxbLio/XFxdXFxdKSguKikvaSxcblx0XHRcdFx0XHRcdGAjUkVESVJFQ1QgJDEkMlxcblxcbnt7JHt0YWd9fX1gXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAocGFyYW1zLm5vaW5jbHVkZSkge1xuXHRcdFx0XHRcdFx0dGFnID0gYDxub2luY2x1ZGU+e3ske3RhZ319fTwvbm9pbmNsdWRlPmA7XG5cdFx0XHRcdFx0XHQvLyDlj6rmnInooajmoLzpnIDopoHljZXni6zliqDlm57ovabvvIzlhbbku5bmg4XlhrXliqDlm57ovabkvJrnoLTlnY/mqKHmnb/jgIJcblx0XHRcdFx0XHRcdGlmICh0ZXh0LmluZGV4T2YoJ3t8JykgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0dGFnICs9ICdcXG4nO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0YWcgPSBge3ske3RhZ319fVxcbmA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIEluc2VydCB0YWcgYWZ0ZXIgc2hvcnQgZGVzY3JpcHRpb24gb3IgYW55IGhhdG5vdGVzXG5cdFx0XHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2l0ZXh0LnBhZ2UodGV4dCk7XG5cdFx0XHRcdFx0dGV4dCA9IHlzYXJjaGl2ZXNfcGFnZS5pbnNlcnRBZnRlclRlbXBsYXRlcyh0YWcsIFR3aW5rbGUuaGF0bm90ZVJlZ2V4KS5nZXRUZXh0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3VtbWFyeSA9IGDliqDlhaV7eyR7cGFyYW1zLnRhZ319fWA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0ZXh0LFxuXHRcdFx0XHRzdW1tYXJ5LFxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdHRhZ2dpbmdQYWdlOiAocHJvdGVjdGVkUGFnZSkgPT4ge1xuXHRcdFx0Y29uc3QgcGFyYW1zID0gcHJvdGVjdGVkUGFnZS5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHRcdGNvbnN0IHRleHQgPSBwcm90ZWN0ZWRQYWdlLmdldFBhZ2VUZXh0KCk7XG5cdFx0XHRjb25zdCBuZXdWZXJzaW9uID0gVHdpbmtsZS5wcm90ZWN0LmNhbGxiYWNrcy5nZXRUYWdnZWRQYWdlKHBhcmFtcywgdGV4dCk7XG5cdFx0XHRpZiAobmV3VmVyc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHByb3RlY3RlZFBhZ2UuZ2V0U3RhdHVzRWxlbWVudCgpLmluZm8oJ+WujOaIkCcpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRwcm90ZWN0ZWRQYWdlLnNldEVkaXRTdW1tYXJ5KG5ld1ZlcnNpb24uc3VtbWFyeSk7XG5cdFx0XHRwcm90ZWN0ZWRQYWdlLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdHByb3RlY3RlZFBhZ2Uuc2V0V2F0Y2hsaXN0KFR3aW5rbGUuZ2V0UHJlZignd2F0Y2hQUFRhZ2dlZFBhZ2VzJykpO1xuXHRcdFx0cHJvdGVjdGVkUGFnZS5zZXRQYWdlVGV4dChuZXdWZXJzaW9uLnRleHQpO1xuXHRcdFx0cHJvdGVjdGVkUGFnZS5zZXRDcmVhdGVPcHRpb24oJ25vY3JlYXRlJyk7XG5cdFx0XHRwcm90ZWN0ZWRQYWdlLnN1cHByZXNzUHJvdGVjdFdhcm5pbmcoKTsgLy8gbm8gbmVlZCB0byBsZXQgYWRtaW5zIGtub3cgdGhleSBhcmUgZWRpdGluZyB0aHJvdWdoIHByb3RlY3Rpb25cblx0XHRcdHByb3RlY3RlZFBhZ2Uuc2F2ZSgpO1xuXHRcdH0sXG5cdFx0ZmlsZVJlcXVlc3Q6IChycHBQYWdlKSA9PiB7XG5cdFx0XHRjb25zdCBwYXJhbXMgPSBycHBQYWdlLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0bGV0IHRleHQgPSBycHBQYWdlLmdldFBhZ2VUZXh0KCk7XG5cdFx0XHRjb25zdCBzdGF0dXNFbGVtZW50ID0gcnBwUGFnZS5nZXRTdGF0dXNFbGVtZW50KCk7XG5cdFx0XHRjb25zdCBycHBSZSA9IG5ldyBSZWdFeHAoXG5cdFx0XHRcdGA9PT1cXFxccyooXFxcXFtcXFxcWyk/XFxcXHMqOj9cXFxccyoke01vcmViaXRzLnN0cmluZy5lc2NhcGVSZWdFeHAoTW9yZWJpdHMucGFnZU5hbWVOb3JtKX1cXFxccyooXFxcXF1cXFxcXSk/XFxcXHMqPT09YCxcblx0XHRcdFx0J20nXG5cdFx0XHQpO1xuXHRcdFx0Y29uc3QgdGFnID0gcnBwUmUuZXhlYyh0ZXh0KTtcblx0XHRcdGNvbnN0IHJwcExpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cdFx0XHRycHBMaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsIG13LnV0aWwuZ2V0VXJsKHJwcFBhZ2UuZ2V0UGFnZU5hbWUoKSkpO1xuXHRcdFx0cnBwTGluay5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShycHBQYWdlLmdldFBhZ2VOYW1lKCkpKTtcblx0XHRcdGlmICh0YWcpIHtcblx0XHRcdFx0c3RhdHVzRWxlbWVudC5lcnJvcihbXG5cdFx0XHRcdFx0cnBwTGluayxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+W3suacieWvueatpOmhtemdoueahOS/neaKpOaPkOWQje+8jOWPlua2iOaTjeS9nOOAgicsICflt7LmnInlsI3mraTpoIHpnaLnmoTkv53orbfmj5DlkI3vvIzlj5bmtojmk43kvZzjgIInKSxcblx0XHRcdFx0XSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGxldCBuZXd0YWcgPSBgPT09IFtbOiR7TW9yZWJpdHMucGFnZU5hbWVOb3JtfV1dID09PVxcbmA7XG5cdFx0XHRpZiAobmV3IFJlZ0V4cChgXiR7bXcudXRpbC5lc2NhcGVSZWdFeHAobmV3dGFnKS5yZXBsYWNlKC9cXHMrL2csIFN0cmluZy5yYXdgXFxzKmApfWAsICdtJykudGVzdCh0ZXh0KSkge1xuXHRcdFx0XHRzdGF0dXNFbGVtZW50LmVycm9yKFtcblx0XHRcdFx0XHRycHBMaW5rLFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5bey5pyJ5a+55q2k6aG16Z2i55qE5L+d5oqk5o+Q5ZCN77yM5Y+W5raI5pON5L2c44CCJywgJ+W3suacieWwjeatpOmggemdoueahOS/neitt+aPkOWQje+8jOWPlua2iOaTjeS9nOOAgicpLFxuXHRcdFx0XHRdKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0bGV0IHdvcmRzO1xuXHRcdFx0c3dpdGNoIChwYXJhbXMuZXhwaXJ5KSB7XG5cdFx0XHRcdGNhc2UgJ3RlbXBvcmFyeSc6XG5cdFx0XHRcdFx0d29yZHMgPSB3aW5kb3cud2dVTFMoJ+S4tOaXticsICfoh6jmmYInKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnaW5maW5pdHknOlxuXHRcdFx0XHRcdHdvcmRzID0gJ+awuOS5hSc7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0d29yZHMgPSAnJztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdHdvcmRzICs9IHBhcmFtcy50eXBlbmFtZTtcblx0XHRcdG5ld3RhZyArPSBgKiA8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZTogOTAlXCI+JHt3aW5kb3cud2dVTFMoJ+W9k+WJjeS/neaKpOeKtuaAgScsICfnm67liY3kv53orbfni4DmhYsnKX3vvJp7e3Byb3RlY3Rpb24gc3RhdHVzfCR7XG5cdFx0XHRcdC9bPV0vLnRlc3QoTW9yZWJpdHMucGFnZU5hbWVOb3JtKSA/ICcxPScgOiAnJ1xuXHRcdFx0fSR7TW9yZWJpdHMucGFnZU5hbWVOb3JtfX19PC9zcGFuPlxcbmA7XG5cdFx0XHRuZXd0YWcgKz0gYCR7XG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn6K+35rGCJywgJ+iri+axgicpICtcblx0XHRcdFx0TW9yZWJpdHMuc3RyaW5nLnRvVXBwZXJDYXNlRmlyc3RDaGFyKHdvcmRzKSArXG5cdFx0XHRcdChwYXJhbXMucmVhc29uID09PSAnJyA/ICfjgIInIDogYO+8miR7TW9yZWJpdHMuc3RyaW5nLmZvcm1hdFJlYXNvblRleHQocGFyYW1zLnJlYXNvbil9YClcblx0XHRcdH0tLX5+YC5jb25jYXQoJ35+Jyk7XG5cdFx0XHRsZXQgcmVnO1xuXHRcdFx0aWYgKHBhcmFtcy5jYXRlZ29yeSA9PT0gJ3VucHJvdGVjdCcpIHtcblx0XHRcdFx0cmVnID0gLyg9PVxccyror7fmsYLop6PpmaTkv53miqRcXHMqPT0pLztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlZyA9IC8oe3tcXHMqXFwvaGVhZGVyXFxzKn19KS87XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBvcmlnaW5hbFRleHRMZW5ndGggPSB0ZXh0Lmxlbmd0aDtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UocmVnLCBgJDFcXG4ke25ld3RhZ31cXG5gKTtcblx0XHRcdGlmICh0ZXh0Lmxlbmd0aCA9PT0gb3JpZ2luYWxUZXh0TGVuZ3RoKSB7XG5cdFx0XHRcdGNvbnN0IGxpbmtub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHRcdFx0XHRsaW5rbm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBtdy51dGlsLmdldFVybCgnSGVscDpUd2lua2xlL+S/ruWkjVJGUFAnKSk7XG5cdFx0XHRcdGxpbmtub2RlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHdpbmRvdy53Z1VMUygn5aaC5L2V5L+u5aSNUkZQUCcsICflpoLkvZXkv67lvqlSRlBQJykpKTtcblx0XHRcdFx0c3RhdHVzRWxlbWVudC5lcnJvcihbXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+aXoOazleWcqExJQjpSRlBQ5LiK5om+5Yiw55u45YWz5a6a5L2N54K55qCH6K6w77yM6KaB5L+u5aSN5q2k6Zeu6aKY77yM6K+35Y+C6KeBJyxcblx0XHRcdFx0XHRcdCfnhKHms5XlnKhMSUI6UkZQUOS4iuaJvuWIsOebuOmXnOWumuS9jem7nuaomeiomO+8jOimgeS/ruW+qeatpOWVj+mhjO+8jOiri+WPg+imiydcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGxpbmtub2RlLFxuXHRcdFx0XHRcdCfjgIInLFxuXHRcdFx0XHRdKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0c3RhdHVzRWxlbWVudC5zdGF0dXMoJ+WKoOWFpeaWsOaPkOWQjeKApicpO1xuXHRcdFx0cnBwUGFnZS5zZXRFZGl0U3VtbWFyeShcblx0XHRcdFx0YC8qICR7TW9yZWJpdHMucGFnZU5hbWVOb3JtfSAqLyAke3dpbmRvdy53Z1VMUygn6K+35rGC5a+5JywgJ+iri+axguWwjScpfVtbJHtNb3JlYml0cy5wYWdlTmFtZU5vcm19XV0ke1xuXHRcdFx0XHRcdHBhcmFtcy50eXBlbmFtZVxuXHRcdFx0XHR9YFxuXHRcdFx0KTtcblx0XHRcdHJwcFBhZ2Uuc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0cnBwUGFnZS5zZXRQYWdlVGV4dCh0ZXh0KTtcblx0XHRcdHJwcFBhZ2Uuc2V0Q3JlYXRlT3B0aW9uKCdyZWNyZWF0ZScpO1xuXHRcdFx0cnBwUGFnZS5zYXZlKCgpID0+IHtcblx0XHRcdFx0Ly8gV2F0Y2ggdGhlIHBhZ2UgYmVpbmcgcmVxdWVzdGVkXG5cdFx0XHRcdGNvbnN0IHdhdGNoUHJlZiA9IFR3aW5rbGUuZ2V0UHJlZignd2F0Y2hSZXF1ZXN0ZWRQYWdlcycpO1xuXHRcdFx0XHQvLyBhY3Rpb249d2F0Y2ggaGFzIG5vIHdheSB0byByZWx5IG9uIHVzZXIgcHJlZmVyZW5jZXMgKFQyNjI5MTIpLCBzbyB3ZSBkbyBpdCBtYW51YWxseS5cblx0XHRcdFx0Ly8gVGhlIHdhdGNoZGVmYXVsdCBwcmVmIGFwcGVhcnMgdG8gcmVsaWFibHkgcmV0dXJuICcxJyAoc3RyaW5nKSxcblx0XHRcdFx0Ly8gYnV0IHRoYXQncyBub3QgY29uc2lzdGVudCBhbW9uZyBwcmVmcyBzbyBtaWdodCBhcyB3ZWxsIGJlIFwiY29ycmVjdFwiXG5cdFx0XHRcdGNvbnN0IHdhdGNoID1cblx0XHRcdFx0XHR3YXRjaFByZWYgIT09ICdubycgJiZcblx0XHRcdFx0XHQod2F0Y2hQcmVmICE9PSAnZGVmYXVsdCcgfHwgISFOdW1iZXIucGFyc2VJbnQobXcudXNlci5vcHRpb25zLmdldCgnd2F0Y2hkZWZhdWx0JyksIDEwKSk7XG5cdFx0XHRcdGlmICh3YXRjaCkge1xuXHRcdFx0XHRcdGNvbnN0IHdhdGNoX3F1ZXJ5ID0ge1xuXHRcdFx0XHRcdFx0YWN0aW9uOiAnd2F0Y2gnLFxuXHRcdFx0XHRcdFx0dGl0bGVzOiBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyksXG5cdFx0XHRcdFx0XHR0b2tlbjogbXcudXNlci50b2tlbnMuZ2V0KCd3YXRjaFRva2VuJyksXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHQvLyBPbmx5IGFkZCB0aGUgZXhwaXJ5IGlmIHBhZ2UgaXMgdW53YXRjaGVkIG9yIGFscmVhZHkgdGVtcG9yYXJpbHkgd2F0Y2hlZFxuXHRcdFx0XHRcdGlmIChUd2lua2xlLnByb3RlY3Qud2F0Y2hlZCAhPT0gdHJ1ZSAmJiB3YXRjaFByZWYgIT09ICdkZWZhdWx0JyAmJiB3YXRjaFByZWYgIT09ICd5ZXMnKSB7XG5cdFx0XHRcdFx0XHR3YXRjaF9xdWVyeS5leHBpcnkgPSB3YXRjaFByZWY7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ldyBNb3JlYml0cy53aWtpLmFwaShcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5bCG6K+35rGC5L+d5oqk55qE6aG16Z2i5Yqg5YWl5Yiw55uR6KeG5YiX6KGoJywgJ+Wwh+iri+axguS/neitt+eahOmggemdouWKoOWFpeWIsOebo+imlua4heWWricpLFxuXHRcdFx0XHRcdFx0d2F0Y2hfcXVlcnlcblx0XHRcdFx0XHQpLnBvc3QoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRjbG9zZVJlcXVlc3Q6IChycHBQYWdlKSA9PiB7XG5cdFx0XHRjb25zdCBwYXJhbXMgPSBycHBQYWdlLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0bGV0IHRleHQgPSBycHBQYWdlLmdldFBhZ2VUZXh0KCk7XG5cdFx0XHRjb25zdCBzdGF0dXNFbGVtZW50ID0gcnBwUGFnZS5nZXRTdGF0dXNFbGVtZW50KCk7XG5cdFx0XHRjb25zdCBzZWN0aW9ucyA9IHRleHQuc3BsaXQoLyg/PVxcbj09XFxzKuivt+axguino+mZpOS/neaKpFxccyo9PSkvKTtcblx0XHRcdGlmIChzZWN0aW9ucy5sZW5ndGggIT09IDIpIHtcblx0XHRcdFx0Y29uc3QgbGlua25vZGUyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHRcdFx0XHRsaW5rbm9kZTIuc2V0QXR0cmlidXRlKCdocmVmJywgbXcudXRpbC5nZXRVcmwoJ0hlbHA6VHdpbmtsZS/kv67lpI1SRlBQJykpO1xuXHRcdFx0XHRsaW5rbm9kZTIuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ+WmguS9leS/ruWkjVJGUFAnKSk7XG5cdFx0XHRcdHN0YXR1c0VsZW1lbnQuZXJyb3IoW1xuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfml6Dms5XlnKhMSUI6UkZQUOS4iuaJvuWIsOebuOWFs+WumuS9jeeCueagh+iusO+8jOimgeS/ruWkjeatpOmXrumimO+8jOivt+WPguingScsXG5cdFx0XHRcdFx0XHQn54Sh5rOV5ZyoTElCOlJGUFDkuIrmib7liLDnm7jpl5zlrprkvY3pu57mqJnoqJjvvIzopoHkv67lvqnmraTllY/poYzvvIzoq4vlj4PoposnXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRsaW5rbm9kZTIsXG5cdFx0XHRcdFx0J+OAgicsXG5cdFx0XHRcdF0pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRsZXQgc2VjdGlvblRleHQ7XG5cdFx0XHRsZXQgZXhwaXJ5VGV4dCA9ICcnO1xuXHRcdFx0aWYgKHBhcmFtcy50eXBlID09PSAndW5wcm90ZWN0Jykge1xuXHRcdFx0XHRbLCBzZWN0aW9uVGV4dF0gPSBzZWN0aW9ucztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFtzZWN0aW9uVGV4dF0gPSBzZWN0aW9ucztcblx0XHRcdFx0ZXhwaXJ5VGV4dCA9IE1vcmViaXRzLnN0cmluZy5mb3JtYXRUaW1lKHBhcmFtcy5leHBpcnkpO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgcmVxdWVzdExpc3QgPSBzZWN0aW9uVGV4dC5zcGxpdCgvKD89XFxuPT09Lis9PT1cXHMqXFxuKS8pO1xuXHRcdFx0bGV0IGZvdW5kID0gZmFsc2U7XG5cdFx0XHRjb25zdCBycHBSZSA9IG5ldyBSZWdFeHAoXG5cdFx0XHRcdGA9PT1cXFxccyooXFxcXFtcXFxcWyk/XFxcXHMqOj9cXFxccyoke01vcmViaXRzLnBhZ2VOYW1lUmVnZXgoTW9yZWJpdHMucGFnZU5hbWVOb3JtKX1cXFxccyooXFxcXF1cXFxcXSk/XFxcXHMqPT09YCxcblx0XHRcdFx0J20nXG5cdFx0XHQpO1xuXHRcdFx0Zm9yIChsZXQgcmVxdWVzdCBvZiByZXF1ZXN0TGlzdCkge1xuXHRcdFx0XHRpZiAocnBwUmUuZXhlYyhyZXF1ZXN0KSkge1xuXHRcdFx0XHRcdHJlcXVlc3QgPSByZXF1ZXN0LnRyaW1FbmQoKTtcblx0XHRcdFx0XHRpZiAocGFyYW1zLnR5cGUgPT09ICd1bnByb3RlY3QnKSB7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0ICs9ICdcXG46IHt7UkZQUHxpc3VufX3jgIItLX5+Jy5jb25jYXQoJ35+XFxuJyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlcXVlc3QgKz0gYFxcbjoge3tSRlBQfCR7cGFyYW1zLnR5cGV9fCR7XG5cdFx0XHRcdFx0XHRcdE1vcmViaXRzLnN0cmluZy5pc0luZmluaXR5KHBhcmFtcy5leHBpcnkpID8gJ2luZmluaXR5JyA6IGV4cGlyeVRleHRcblx0XHRcdFx0XHRcdH19feOAgi0tfn5gLmNvbmNhdCgnfn5cXG4nKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHRcdHN0YXR1c0VsZW1lbnQud2Fybih3aW5kb3cud2dVTFMoJ+ayoeacieaJvuWIsOebuOWFs+eahOivt+axgicsICfmspLmnInmib7liLDnm7jpl5znmoToq4vmsYInKSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmIChwYXJhbXMudHlwZSA9PT0gJ3VucHJvdGVjdCcpIHtcblx0XHRcdFx0dGV4dCA9IHNlY3Rpb25zWzBdICsgcmVxdWVzdExpc3Quam9pbignJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0ZXh0ID0gcmVxdWVzdExpc3Quam9pbignJykgKyBzZWN0aW9uc1sxXTtcblx0XHRcdH1cblx0XHRcdGxldCBzdW1tYXJ5ID0gJyc7XG5cdFx0XHRpZiAocGFyYW1zLnR5cGUgPT09ICd1bnByb3RlY3QnKSB7XG5cdFx0XHRcdFssIHNlY3Rpb25UZXh0XSA9IHNlY3Rpb25zO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0W3NlY3Rpb25UZXh0XSA9IHNlY3Rpb25zO1xuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChwYXJhbXMudHlwZSkge1xuXHRcdFx0XHRjYXNlICdzZW1pJzpcblx0XHRcdFx0XHRzdW1tYXJ5ID0gd2luZG93LndnVUxTKCfljYrkv53miqQnLCAn5Y2K5L+d6K23Jyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3RlbXAnOlxuXHRcdFx0XHRcdHN1bW1hcnkgPSB3aW5kb3cud2dVTFMoJ+aooeadv+S/neaKpCcsICfmqKHmnb/kv53orbcnKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnZWNwJzpcblx0XHRcdFx0XHRzdW1tYXJ5ID0gd2luZG93LndnVUxTKCflu7bkvLjnoa7orqTkv53miqQnLCAn5bu25Ly456K66KqN5L+d6K23Jyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2Z1bGwnOlxuXHRcdFx0XHRcdHN1bW1hcnkgPSB3aW5kb3cud2dVTFMoJ+WFqOS/neaKpCcsICflhajkv53orbcnKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAncmV2aXNpb25wcm90ZWN0ZWQnOlxuXHRcdFx0XHRcdHN1bW1hcnkgPSB3aW5kb3cud2dVTFMoJ+eJiOacrOS/neaKpCcsICfniYjmnKzkv53orbcnKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnb2ZmaWNpYWxwcm90ZWN0ZWQnOlxuXHRcdFx0XHRcdHN1bW1hcnkgPSB3aW5kb3cud2dVTFMoJ+ijgeWnlOS8muS/neaKpCcsICfoo4Hlp5TmnIPkv53orbcnKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnbW92ZSc6XG5cdFx0XHRcdFx0c3VtbWFyeSA9IHdpbmRvdy53Z1VMUygn56e75Yqo5L+d5oqkJywgJ+enu+WLleS/neittycpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdzYWx0Jzpcblx0XHRcdFx0XHRzdW1tYXJ5ID0gd2luZG93LndnVUxTKCfnmb3nurjkv53miqQnLCAn55m957SZ5L+d6K23Jyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3VucHJvdGVjdCc6XG5cdFx0XHRcdFx0c3VtbWFyeSA9IHdpbmRvdy53Z1VMUygn6Kej6Zmk5L+d5oqkJywgJ+ino+mZpOS/neittycpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHN0YXR1c0VsZW1lbnQud2Fybih3aW5kb3cud2dVTFMoJ+acquefpeS/neaKpOexu+WeiycsICfmnKrnn6Xkv53orbfpoZ7liKUnKSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKE1vcmViaXRzLnN0cmluZy5pc0luZmluaXR5KHBhcmFtcy5leHBpcnkpKSB7XG5cdFx0XHRcdHN1bW1hcnkgPSBleHBpcnlUZXh0ICsgc3VtbWFyeTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHN1bW1hcnkgKz0gZXhwaXJ5VGV4dDtcblx0XHRcdH1cblx0XHRcdHJwcFBhZ2Uuc2V0RWRpdFN1bW1hcnkoYC8qICR7TW9yZWJpdHMucGFnZU5hbWVOb3JtfSAqLyAke3N1bW1hcnl9YCk7XG5cdFx0XHRycHBQYWdlLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdHJwcFBhZ2Uuc2V0UGFnZVRleHQodGV4dCk7XG5cdFx0XHRycHBQYWdlLnNhdmUoKTtcblx0XHR9LFxuXHR9O1xuXHRUd2lua2xlLnByb3RlY3QuZm9ybWF0UHJvdGVjdGlvbkRlc2NyaXB0aW9uID0gKHByb3RlY3Rpb25MZXZlbHMpID0+IHtcblx0XHRjb25zdCBwcm90ZWN0aW9uTm9kZSA9IFtdO1xuXHRcdGlmIChPYmplY3Qua2V5cyhwcm90ZWN0aW9uTGV2ZWxzKS5sZW5ndGggPT09IDApIHtcblx0XHRcdFtwcm90ZWN0aW9uTm9kZVtwcm90ZWN0aW9uTm9kZS5sZW5ndGhdXSA9ICQoJzxiPicpLnRleHQod2luZG93LndnVUxTKCfml6Dkv53miqQnLCAn54Sh5L+d6K23JykpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGNvbnN0IFt0eXBlLCBzZXR0aW5nc10gb2YgT2JqZWN0LmVudHJpZXMocHJvdGVjdGlvbkxldmVscykpIHtcblx0XHRcdFx0bGV0IGxhYmVsO1xuXHRcdFx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdFx0XHRjYXNlICdlZGl0Jzpcblx0XHRcdFx0XHRcdGxhYmVsID0gd2luZG93LndnVUxTKCfnvJbovpEnLCAn57eo6LyvJyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtb3ZlJzpcblx0XHRcdFx0XHRcdGxhYmVsID0gd2luZG93LndnVUxTKCfnp7vliqgnLCAn56e75YuVJyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdjcmVhdGUnOlxuXHRcdFx0XHRcdFx0bGFiZWwgPSB3aW5kb3cud2dVTFMoJ+WIm+W7uicsICflu7rnq4snKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3VwbG9hZCc6XG5cdFx0XHRcdFx0XHRsYWJlbCA9IHdpbmRvdy53Z1VMUygn5LiK5LygJywgJ+S4iuWCsycpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGxhYmVsID0gdHlwZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxldCBsZXZlbDtcblx0XHRcdFx0c3dpdGNoIChzZXR0aW5ncy5sZXZlbCkge1xuXHRcdFx0XHRcdGNhc2UgJ29mZmljaWFscHJvdGVjdGVkJzpcblx0XHRcdFx0XHRcdGxldmVsID0gd2luZG93LndnVUxTKCfku4XlhYHorrjmoaPmoYjnkIbkuovlkZgnLCAn5YOF5YWB6Kix5qqU5qGI55CG5LqL5ZOhJyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdhdXRvY29uZmlybWVkJzpcblx0XHRcdFx0XHRcdGxldmVsID0gd2luZG93LndnVUxTKCfku4XlhYHorrjoh6rliqjnoa7orqTnlKjmiLcnLCAn5YOF5YWB6Kix6Ieq5YuV56K66KqN5L2/55So6ICFJyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICd0ZW1wbGF0ZWVkaXRvcic6XG5cdFx0XHRcdFx0XHRsZXZlbCA9IHdpbmRvdy53Z1VMUygn5LuF5qih5p2/57yW6L6R5ZGY5ZKM566h55CG5ZGYJywgJ+WDheaooeadv+e3qOi8r+WToeWSjOeuoeeQhuWToScpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc3lzb3AnOlxuXHRcdFx0XHRcdFx0bGV2ZWwgPSB3aW5kb3cud2dVTFMoJ+S7heeuoeeQhuWRmCcsICflg4XnrqHnkIblk6EnKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHQoe2xldmVsfSA9IHNldHRpbmdzKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFtwcm90ZWN0aW9uTm9kZVtwcm90ZWN0aW9uTm9kZS5sZW5ndGhdXSA9ICQoJzxiPicpLnRleHQoYCR7bGFiZWx977yaJHtsZXZlbH1gKTtcblx0XHRcdFx0aWYgKE1vcmViaXRzLnN0cmluZy5pc0luZmluaXR5KHNldHRpbmdzLmV4cGlyeSkpIHtcblx0XHRcdFx0XHRwcm90ZWN0aW9uTm9kZVtwcm90ZWN0aW9uTm9kZS5sZW5ndGhdID0gd2luZG93LndnVUxTKCfvvIjml6DpmZDmnJ/vvIknLCAn77yI54Sh6ZmQ5pyf77yJJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cHJvdGVjdGlvbk5vZGVbcHJvdGVjdGlvbk5vZGUubGVuZ3RoXSA9XG5cdFx0XHRcdFx0XHRgJHt3aW5kb3cud2dVTFMoJ++8iOi/h+acn++8micsICfvvIjpgY7mnJ/vvJonKSArIG5ldyBNb3JlYml0cy5kYXRlKHNldHRpbmdzLmV4cGlyeSkuY2FsZW5kYXIoJ3V0Yycpfe+8iWA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHNldHRpbmdzLmNhc2NhZGUpIHtcblx0XHRcdFx0XHRwcm90ZWN0aW9uTm9kZVtwcm90ZWN0aW9uTm9kZS5sZW5ndGhdID0gd2luZG93LndnVUxTKCfvvIjov57plIHvvIknLCAn77yI6YCj6Y6W77yJJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHByb3RlY3Rpb25Ob2RlO1xuXHR9O1xuXHRUd2lua2xlLmFkZEluaXRDYWxsYmFjayhUd2lua2xlLnByb3RlY3QsICdwcm90ZWN0Jyk7XG59KShqUXVlcnkpO1xuXG5leHBvcnQge307XG4iLCAiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuLy8gQHRzLW5vY2hlY2tcbi8qISBUd2lua2xlLmpzIC0gZnJpZW5kbHl0YWcuanMgKi9cbihmdW5jdGlvbiBmcmllbmRseXRhZygkKSB7XG5cdGNvbnN0ICRib2R5ID0gJCgnYm9keScpO1xuXHQvKipcblx0ICogZnJpZW5kbHl0YWcuanM6IFRhZyBtb2R1bGVcblx0ICogTW9kZSBvZiBpbnZvY2F0aW9uOiBUYWIgKFwiVGFnXCIpXG5cdCAqIEFjdGl2ZSBvbjogRXhpc3RpbmcgYXJ0aWNsZXMgYW5kIGRyYWZ0czsgZmlsZSBwYWdlcyB3aXRoIGEgY29ycmVzcG9uZGluZyBmaWxlXG5cdCAqIHdoaWNoIGlzIGxvY2FsIChub3Qgb24gU2hhcmUpOyBhbGwgcmVkaXJlY3RzXG5cdCAqL1xuXHRUd2lua2xlLnRhZyA9ICgpID0+IHtcblx0XHQvLyByZWRpcmVjdCB0YWdnaW5nXG5cdFx0aWYgKE1vcmViaXRzLmlzUGFnZVJlZGlyZWN0KCkpIHtcblx0XHRcdFR3aW5rbGUudGFnLm1vZGUgPSB3aW5kb3cud2dVTFMoJ+mHjeWumuWQkScsICfph43mlrDlsI7lkJEnKTtcblx0XHRcdFR3aW5rbGUudGFnLm1vZGVFbiA9ICdyZWRpcmVjdCc7XG5cdFx0XHRUd2lua2xlLmFkZFBvcnRsZXRMaW5rKFxuXHRcdFx0XHRUd2lua2xlLnRhZy5jYWxsYmFjayxcblx0XHRcdFx0d2luZG93LndnVUxTKCfmoIforrAnLCAn5qiZ6KiYJyksXG5cdFx0XHRcdCdmcmllbmRseS10YWcnLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+agh+iusOmHjeWumuWQkScsICfmqJnoqJjph43mlrDlsI7lkJEnKVxuXHRcdFx0KTtcblx0XHRcdC8vIGZpbGUgdGFnZ2luZ1xuXHRcdH0gZWxzZSBpZiAoXG5cdFx0XHRtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpID09PSA2ICYmXG5cdFx0XHQhZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI213LXNoYXJlZHVwbG9hZCcpICYmXG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXctaW1hZ2VwYWdlLXNlY3Rpb24tZmlsZWhpc3RvcnknKVxuXHRcdCkge1xuXHRcdFx0VHdpbmtsZS50YWcubW9kZSA9IHdpbmRvdy53Z1VMUygn5paH5Lu2JywgJ+aqlOahiCcpO1xuXHRcdFx0VHdpbmtsZS50YWcubW9kZUVuID0gJ2ZpbGUnO1xuXHRcdFx0VHdpbmtsZS5hZGRQb3J0bGV0TGluayhcblx0XHRcdFx0VHdpbmtsZS50YWcuY2FsbGJhY2ssXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn5qCH6K6wJywgJ+aomeiomCcpLFxuXHRcdFx0XHQnZnJpZW5kbHktdGFnJyxcblx0XHRcdFx0d2luZG93LndnVUxTKCfmoIforrDmlofku7YnLCAn5qiZ6KiY5qqU5qGIJylcblx0XHRcdCk7XG5cdFx0XHQvLyBhcnRpY2xlL2RyYWZ0IHRhZ2dpbmdcblx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0KFswLCAxMThdLmluY2x1ZGVzKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykpICYmIG13LmNvbmZpZy5nZXQoJ3dnQ3VyUmV2aXNpb25JZCcpKSB8fFxuXHRcdFx0TW9yZWJpdHMucGFnZU5hbWVOb3JtID09PSBUd2lua2xlLmdldFByZWYoJ3NhbmRib3hQYWdlJylcblx0XHQpIHtcblx0XHRcdFR3aW5rbGUudGFnLm1vZGUgPSB3aW5kb3cud2dVTFMoJ+adoeebricsICfmop3nm64nKTtcblx0XHRcdFR3aW5rbGUudGFnLm1vZGVFbiA9ICdhcnRpY2xlJztcblx0XHRcdC8vIENhbid0IHJlbW92ZSB0YWdzIHdoZW4gbm90IHZpZXdpbmcgY3VycmVudCB2ZXJzaW9uXG5cdFx0XHRUd2lua2xlLnRhZy5jYW5SZW1vdmUgPVxuXHRcdFx0XHRtdy5jb25maWcuZ2V0KCd3Z0N1clJldmlzaW9uSWQnKSA9PT0gbXcuY29uZmlnLmdldCgnd2dSZXZpc2lvbklkJykgJiZcblx0XHRcdFx0Ly8gRGlzYWJsZWQgb24gbGF0ZXN0IGRpZmYgYmVjYXVzZSB0aGUgZGlmZiBzbGlkZXIgY291bGQgYmUgdXNlZCB0byBzbGlkZVxuXHRcdFx0XHQvLyBhd2F5IGZyb20gdGhlIGxhdGVzdCBkaWZmIHdpdGhvdXQgY2F1c2luZyB0aGUgc2NyaXB0IHRvIHJlbG9hZFxuXHRcdFx0XHQhbXcuY29uZmlnLmdldCgnd2dEaWZmTmV3SWQnKTtcblx0XHRcdFR3aW5rbGUuYWRkUG9ydGxldExpbmsoXG5cdFx0XHRcdFR3aW5rbGUudGFnLmNhbGxiYWNrLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+agh+iusCcsICfmqJnoqJgnKSxcblx0XHRcdFx0J2ZyaWVuZGx5LXRhZycsXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn5qCH6K6w5p2h55uuJywgJ+aomeiomOaineebricpXG5cdFx0XHQpO1xuXHRcdH1cblx0fTtcblx0VHdpbmtsZS50YWcuY2hlY2tlZFRhZ3MgPSBbXTtcblx0VHdpbmtsZS50YWcuY2FsbGJhY2sgPSAoKSA9PiB7XG5cdFx0Y29uc3QgV2luZG93ID0gbmV3IE1vcmViaXRzLnNpbXBsZVdpbmRvdyg2MzAsIFR3aW5rbGUudGFnLm1vZGVFbiA9PT0gJ2FydGljbGUnID8gNTAwIDogNDAwKTtcblx0XHRXaW5kb3cuc2V0U2NyaXB0TmFtZSgnVHdpbmtsZScpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygn5qCH6K6w6K6+572uJywgJ+aomeiomOioreWumicpLCAnSDpUVy9QUkVGI3RhZycpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygnVHdpbmtsZeW4ruWKqScsICdUd2lua2xl6Kqq5piOJyksICdIOlRXL0RPQyN0YWcnKTtcblx0XHRjb25zdCBmb3JtID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybShUd2lua2xlLnRhZy5jYWxsYmFjay5ldmFsdWF0ZSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+etm+mAieagh+iusOWIl+ihqO+8micsICfnr6npgbjmqJnoqJjliJfooajvvJonKSxcblx0XHRcdG5hbWU6ICdxdWlja2ZpbHRlcicsXG5cdFx0XHRzaXplOiAnMzAnLFxuXHRcdFx0ZXZlbnQ6IGZ1bmN0aW9uIGV2ZW50KCkge1xuXHRcdFx0XHQvLyBmbHVzaCB0aGUgRE9NIG9mIGFsbCBleGlzdGluZyB1bmRlcmxpbmUgc3BhbnNcblx0XHRcdFx0JGFsbENoZWNrYm94RGl2cy5maW5kKCcuc2VhcmNoLWhpdCcpLmVhY2goKF9pLCBlKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgbGFiZWxfZWxlbWVudCA9IGUucGFyZW50RWxlbWVudDtcblx0XHRcdFx0XHQvLyBUaGlzIHdvdWxkIGNvbnZlcnQgPGxhYmVsPkhlbGxvIDxzcGFuIGNsYXNzPXNlYXJjaC1oaXQ+d288L3NwYW4+cmxkPC9sYWJlbD5cblx0XHRcdFx0XHQvLyB0byA8bGFiZWw+SGVsbG8gd29ybGQ8L2xhYmVsPlxuXHRcdFx0XHRcdGxhYmVsX2VsZW1lbnQuaW5uZXJIVE1MID0gbGFiZWxfZWxlbWVudC50ZXh0Q29udGVudDtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGlmICh0aGlzLnZhbHVlKSB7XG5cdFx0XHRcdFx0JGFsbENoZWNrYm94RGl2cy5oaWRlKCk7XG5cdFx0XHRcdFx0JGFsbEhlYWRlcnMuaGlkZSgpO1xuXHRcdFx0XHRcdGNvbnN0IHNlYXJjaFN0cmluZyA9IHRoaXMudmFsdWU7XG5cdFx0XHRcdFx0Y29uc3Qgc2VhcmNoUmVnZXggPSBuZXcgUmVnRXhwKG13LnV0aWwuZXNjYXBlUmVnRXhwKHNlYXJjaFN0cmluZyksICdpJyk7XG5cdFx0XHRcdFx0JGFsbENoZWNrYm94RGl2cy5maW5kKCdsYWJlbCcpLmVhY2goKF9pbmRleCwgZWxlbWVudCkgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3QgbGFiZWxfdGV4dCA9IGVsZW1lbnQudGV4dENvbnRlbnQ7XG5cdFx0XHRcdFx0XHRjb25zdCBzZWFyY2hIaXQgPSBzZWFyY2hSZWdleC5leGVjKGxhYmVsX3RleHQpO1xuXHRcdFx0XHRcdFx0aWYgKHNlYXJjaEhpdCkge1xuXHRcdFx0XHRcdFx0XHRjb25zdCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IFt0ZXh0bm9kZV0gPSBlbGVtZW50LmNoaWxkTm9kZXM7XG5cdFx0XHRcdFx0XHRcdHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyh0ZXh0bm9kZSk7XG5cdFx0XHRcdFx0XHRcdHJhbmdlLnNldFN0YXJ0KHRleHRub2RlLCBzZWFyY2hIaXQuaW5kZXgpO1xuXHRcdFx0XHRcdFx0XHRyYW5nZS5zZXRFbmQodGV4dG5vZGUsIHNlYXJjaEhpdC5pbmRleCArIHNlYXJjaFN0cmluZy5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBbdW5kZXJsaW5lX3NwYW5dID0gJCgnPHNwYW4+Jylcblx0XHRcdFx0XHRcdFx0XHQuYWRkQ2xhc3MoJ3NlYXJjaC1oaXQnKVxuXHRcdFx0XHRcdFx0XHRcdC5jc3MoJ3RleHQtZGVjb3JhdGlvbicsICd1bmRlcmxpbmUnKTtcblx0XHRcdFx0XHRcdFx0cmFuZ2Uuc3Vycm91bmRDb250ZW50cyh1bmRlcmxpbmVfc3Bhbik7XG5cdFx0XHRcdFx0XHRcdGVsZW1lbnQucGFyZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsgLy8gc2hvd1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCRhbGxDaGVja2JveERpdnMuc2hvdygpO1xuXHRcdFx0XHRcdCRhbGxIZWFkZXJzLnNob3coKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHR9KTtcblx0XHRzd2l0Y2ggKFR3aW5rbGUudGFnLm1vZGVFbikge1xuXHRcdFx0Y2FzZSAnYXJ0aWNsZSc6XG5cdFx0XHRcdFdpbmRvdy5zZXRUaXRsZSh3aW5kb3cud2dVTFMoJ+adoeebrue7tOaKpOagh+iusCcsICfmop3nm67ntq3orbfmqJnoqJgnKSk7XG5cdFx0XHRcdC8vIEJ1aWxkIHNvcnRpbmcgYW5kIGxvb2t1cCBvYmplY3QgZmxhdE9iamVjdCwgd2hpY2ggaXMgYWx3YXlzXG5cdFx0XHRcdC8vIG5lZWRlZCBidXQgYWxzbyB1c2VkIHRvIGdlbmVyYXRlIHRoZSBhbHBoYWJldGljYWwgbGlzdFxuXHRcdFx0XHQvLyBXb3VsZCBiZSBpbmZpbml0ZWx5IGJldHRlciB3aXRoIE9iamVjdC52YWx1ZXNcblx0XHRcdFx0VHdpbmtsZS50YWcuYXJ0aWNsZS5mbGF0T2JqZWN0ID0ge307XG5cdFx0XHRcdGZvciAoY29uc3QgZ3JvdXAgb2YgVHdpbmtsZS50YWcuYXJ0aWNsZS50YWdMaXN0KSB7XG5cdFx0XHRcdFx0Zm9yIChjb25zdCBzdWJncm91cCBvZiBncm91cC52YWx1ZSkge1xuXHRcdFx0XHRcdFx0aWYgKHN1Ymdyb3VwLnZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoY29uc3QgaXRlbSBvZiBzdWJncm91cC52YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRcdFR3aW5rbGUudGFnLmFydGljbGUuZmxhdE9iamVjdFtpdGVtLnRhZ10gPSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogaXRlbS5kZXNjcmlwdGlvbixcblx0XHRcdFx0XHRcdFx0XHRcdGV4Y2x1ZGVNSTogISFpdGVtLmV4Y2x1ZGVNSSxcblx0XHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRUd2lua2xlLnRhZy5hcnRpY2xlLmZsYXRPYmplY3Rbc3ViZ3JvdXAudGFnXSA9IHtcblx0XHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogc3ViZ3JvdXAuZGVzY3JpcHRpb24sXG5cdFx0XHRcdFx0XHRcdFx0ZXhjbHVkZU1JOiAhIXN1Ymdyb3VwLmV4Y2x1ZGVNSSxcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0XHRcdG5hbWU6ICdzb3J0b3JkZXInLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+afpeeci+WIl+ihqO+8micsICfmqqLoppbliJfooajvvJonKSxcblx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5oKo5Y+v5Lul5ZyoVHdpbmtsZeWPguaVsOiuvue9ru+8iEg6VFcvUFJFRu+8ieS4reabtOaUueatpOmhueOAgicsXG5cdFx0XHRcdFx0XHQn5oKo5Y+v5Lul5ZyoVHdpbmtsZeWBj+WlveioreWumu+8iEg6VFcvUFJFRu+8ieS4reabtOaUueatpOmgheOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGV2ZW50OiBUd2lua2xlLnRhZy51cGRhdGVTb3J0T3JkZXIsXG5cdFx0XHRcdFx0bGlzdDogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdFx0XHRcdFx0dmFsdWU6ICdjYXQnLFxuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmjInnsbvlnosnLCAn5oyJ6aGe5YilJyksXG5cdFx0XHRcdFx0XHRcdHNlbGVjdGVkOiBUd2lua2xlLmdldFByZWYoJ3RhZ0FydGljbGVTb3J0T3JkZXInKSA9PT0gJ2NhdCcsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdFx0XHRcdFx0dmFsdWU6ICdhbHBoYScsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiAn5oyJ5a2X5q+NJyxcblx0XHRcdFx0XHRcdFx0c2VsZWN0ZWQ6IFR3aW5rbGUuZ2V0UHJlZigndGFnQXJ0aWNsZVNvcnRPcmRlcicpID09PSAnYWxwaGEnLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYgKCFUd2lua2xlLnRhZy5jYW5SZW1vdmUpIHtcblx0XHRcdFx0XHRjb25zdCBkaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0XHRcdFx0ZGl2RWxlbWVudC5pbm5lckhUTUwgPSB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn6KaB56e76Zmk546w5pyJ57u05oqk5qCH6K6w77yM6K+35LuO5b2T5YmN5p2h55uu54mI5pys5Lit5omT5byA4oCc5qCH6K6w4oCd6I+c5Y2VJyxcblx0XHRcdFx0XHRcdCfopoHnp7vpmaTnj77mnInntq3orbfmqJnoqJjvvIzoq4vlvp7nm67liY3mop3nm67niYjmnKzkuK3miZPplovjgIzmqJnoqJjjgI3pgbjllq4nXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHRcdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdFx0XHRcdG5hbWU6ICd1bnRhZ25vdGljZScsXG5cdFx0XHRcdFx0XHRsYWJlbDogZGl2RWxlbWVudCxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdFx0aWQ6ICd0YWdXb3JrQXJlYScsXG5cdFx0XHRcdFx0Y2xhc3NOYW1lOiAnbW9yZWJpdHMtc2Nyb2xsYm94Jyxcblx0XHRcdFx0XHRzdHlsZTogJ21heC1oZWlnaHQ6IDI4ZW0nLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdFx0bGlzdDogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCflpoLlj6/og73vvIzlkIjlubblhaV7e211bHRpcGxlIGlzc3Vlc319Jyxcblx0XHRcdFx0XHRcdFx0XHQn5aaC5Y+v6IO977yM5ZCI5L215YWle3ttdWx0aXBsZSBpc3N1ZXN9fSdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6ICdncm91cCcsXG5cdFx0XHRcdFx0XHRcdG5hbWU6ICdncm91cCcsXG5cdFx0XHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn6Iul5Yqg5YWle3ttdWx0aXBsZSBpc3N1ZXN9feaUr+aMgeeahOS4ieS4quS7peS4iueahOaooeadv++8jOaJgOacieaUr+aMgeeahOaooeadv+mDveS8muiiq+WQiOW5tuWFpXt7bXVsdGlwbGUgaXNzdWVzfX3mqKHmnb/kuK3jgIInLFxuXHRcdFx0XHRcdFx0XHRcdCfoi6XliqDlhaV7e211bHRpcGxlIGlzc3Vlc3195pSv5o+055qE5LiJ5YCL5Lul5LiK55qE5qih5p2/77yM5omA5pyJ5pSv5o+055qE5qih5p2/6YO95pyD6KKr5ZCI5L215YWle3ttdWx0aXBsZSBpc3N1ZXN9feaooeadv+S4reOAgidcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0Y2hlY2tlZDogVHdpbmtsZS5nZXRQcmVmKCdncm91cEJ5RGVmYXVsdCcpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0bGFiZWw6ICfnkIbnlLHvvJonLFxuXHRcdFx0XHRcdG5hbWU6ICdyZWFzb24nLFxuXHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfpmYTliqDkuo7nvJbovpHmkZjopoHnmoTlj6/pgInnkIbnlLHvvIzkvovlpoLmjIflh7rmnaHnm67lhoXlrrnnmoTlk6rkupvpg6jliIbmnInpl67popjmiJbnp7vpmaTmqKHmnb/nmoTnkIbnlLHvvIzkvYboi6XnkIbnlLHlvojplb/liJnlupTor6Xlj5HooajlnKjorqjorrrpobXjgIInLFxuXHRcdFx0XHRcdFx0J+mZhOWKoOaWvOe3qOi8r+aRmOimgeeahOWPr+mBuOeQhueUse+8jOS+i+WmguaMh+WHuuaineebruWFp+WuueeahOWTquS6m+mDqOWIhuacieWVj+mhjOaIluenu+mZpOaooeadv+eahOeQhueUse+8jOS9huiLpeeQhueUseW+iOmVt+WJh+aHieipsueZvOihqOWcqOiojuirlumggeOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHNpemU6ICc4MCcsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ2ZpbGUnOlxuXHRcdFx0XHRXaW5kb3cuc2V0VGl0bGUod2luZG93LndnVUxTKCfmlofku7bnu7TmiqTmoIforrAnLCAn5qqU5qGI57at6K235qiZ6KiYJykpO1xuXHRcdFx0XHRmb3IgKGNvbnN0IGdyb3VwIG9mIFR3aW5rbGUudGFnLmZpbGVMaXN0KSB7XG5cdFx0XHRcdFx0aWYgKGdyb3VwLmJ1aWxkRmlsZW5hbWUpIHtcblx0XHRcdFx0XHRcdGZvciAoY29uc3QgZWwgb2YgZ3JvdXAudmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0ZWwuc3ViZ3JvdXAgPSB7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmm7/mjaLnmoTmlofku7bvvJonLCAn5pu/5o+b55qE5qqU5qGI77yaJyksXG5cdFx0XHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdFx0J+i+k+WFpeabv+aNouatpOaWh+S7tueahOaWh+S7tuWQjeensO+8iOW/heWhq++8iScsXG5cdFx0XHRcdFx0XHRcdFx0XHQn6Ly45YWl5pu/5o+b5q2k5qqU5qGI55qE5qqU5qGI5ZCN56ix77yI5b+F5aGr77yJJ1xuXHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdFx0bmFtZTogYCR7ZWwudmFsdWUucmVwbGFjZSgvIC9nLCAnXycpfUZpbGVgLFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHRcdFx0XHR0eXBlOiAnaGVhZGVyJyxcblx0XHRcdFx0XHRcdGxhYmVsOiBncm91cC5rZXksXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0XHRcdG5hbWU6ICd0YWdzJyxcblx0XHRcdFx0XHRcdGxpc3Q6IGdyb3VwLnZhbHVlLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChUd2lua2xlLmdldFByZWYoJ2N1c3RvbUZpbGVUYWdMaXN0JykubGVuZ3RoKSB7XG5cdFx0XHRcdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0XHRcdFx0dHlwZTogJ2hlYWRlcicsXG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfoh6rlrprkuYnmqKHmnb8nLCAn6Ieq6KiC5qih5p2/JyksXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0XHRcdG5hbWU6ICd0YWdzJyxcblx0XHRcdFx0XHRcdGxpc3Q6IFR3aW5rbGUuZ2V0UHJlZignY3VzdG9tRmlsZVRhZ0xpc3QnKSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ3JlZGlyZWN0Jzoge1xuXHRcdFx0XHRXaW5kb3cuc2V0VGl0bGUod2luZG93LndnVUxTKCfph43lrprlkJHmoIforrAnLCAn6YeN5paw5bCO5ZCR5qiZ6KiYJykpO1xuXHRcdFx0XHRjb25zdCBpID0gMTtcblx0XHRcdFx0Zm9yIChjb25zdCBncm91cCBvZiBUd2lua2xlLnRhZy5yZWRpcmVjdExpc3QpIHtcblx0XHRcdFx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHRcdFx0XHR0eXBlOiAnaGVhZGVyJyxcblx0XHRcdFx0XHRcdGlkOiBgdGFnSGVhZGVyJHtpfWAsXG5cdFx0XHRcdFx0XHRsYWJlbDogZ3JvdXAua2V5LFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdFx0XHRuYW1lOiAndGFncycsXG5cdFx0XHRcdFx0XHRsaXN0OiBncm91cC52YWx1ZS5tYXAoKGl0ZW0pID0+IHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogaXRlbS50YWcsXG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6IGB7eyR7aXRlbS50YWd9fX3vvJoke2l0ZW0uZGVzY3JpcHRpb259YCxcblx0XHRcdFx0XHRcdFx0XHRzdWJncm91cDogaXRlbS5zdWJncm91cCxcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChUd2lua2xlLmdldFByZWYoJ2N1c3RvbVJlZGlyZWN0VGFnTGlzdCcpLmxlbmd0aCkge1xuXHRcdFx0XHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHRcdHR5cGU6ICdoZWFkZXInLFxuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6Ieq5a6a5LmJ5qih5p2/JywgJ+iHquioguaooeadvycpLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdFx0XHRuYW1lOiAndGFncycsXG5cdFx0XHRcdFx0XHRsaXN0OiBUd2lua2xlLmdldFByZWYoJ2N1c3RvbVJlZGlyZWN0VGFnTGlzdCcpLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dm9pZCBtdy5ub3RpZnkoYFR3aW5rbGUudGFn77ya5pyq55+l5qih5byPICR7VHdpbmtsZS50YWcubW9kZX1gLCB7XG5cdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdHRhZzogJ2ZyaWVuZGx5dGFnJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhdHJvbGxpbmsnKSkge1xuXHRcdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5qCH6K6w6aG16Z2i5Li65bey5beh5p+lJywgJ+aomeiomOmggemdoueCuuW3suW3oeafpScpLFxuXHRcdFx0XHRcdFx0dmFsdWU6ICdwYXRyb2wnLFxuXHRcdFx0XHRcdFx0bmFtZTogJ3BhdHJvbCcsXG5cdFx0XHRcdFx0XHRjaGVja2VkOiBUd2lua2xlLmdldFByZWYoJ21hcmtUYWdnZWRQYWdlc0FzUGF0cm9sbGVkJyksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnc3VibWl0Jyxcblx0XHRcdGNsYXNzTmFtZTogJ3R3LXRhZy1zdWJtaXQnLFxuXHRcdH0pO1xuXHRcdGNvbnN0IHJlc3VsdCA9IGZvcm0ucmVuZGVyKCk7XG5cdFx0V2luZG93LnNldENvbnRlbnQocmVzdWx0KTtcblx0XHRXaW5kb3cuZGlzcGxheSgpO1xuXHRcdC8vIGZvciBxdWljayBmaWx0ZXI6XG5cdFx0JGFsbENoZWNrYm94RGl2cyA9ICQocmVzdWx0KS5maW5kKCdbbmFtZSQ9dGFnc10nKS5wYXJlbnQoKTtcblx0XHQkYWxsSGVhZGVycyA9ICQocmVzdWx0KS5maW5kKCdoNScpO1xuXHRcdHJlc3VsdC5xdWlja2ZpbHRlci5mb2N1cygpOyAvLyBwbGFjZSBjdXJzb3IgaW4gdGhlIHF1aWNrIGZpbHRlciBmaWVsZCBhcyBzb29uIGFzIHdpbmRvdyBpcyBvcGVuZWRcblx0XHRyZXN1bHQucXVpY2tmaWx0ZXIuYXV0b2NvbXBsZXRlID0gJ29mZic7IC8vIGRpc2FibGUgYnJvd3NlciBzdWdnZXN0aW9uc1xuXHRcdHJlc3VsdC5xdWlja2ZpbHRlci5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChlKSA9PiB7XG5cdFx0XHRpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcblx0XHRcdFx0Ly8gcHJldmVudCBlbnRlciBrZXkgZnJvbSBhY2NpZGVudGFsbHkgc3VibWl0dGluZyB0aGUgZm9ybVxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRpZiAoVHdpbmtsZS50YWcubW9kZUVuID09PSAnYXJ0aWNsZScpIHtcblx0XHRcdFR3aW5rbGUudGFnLmFscmVhZHlQcmVzZW50VGFncyA9IFtdO1xuXHRcdFx0aWYgKFR3aW5rbGUudGFnLmNhblJlbW92ZSkge1xuXHRcdFx0XHQvLyBMb29rIGZvciBleGlzdGluZyBtYWludGVuYW5jZSB0YWdzIGluIHRoZSBsZWFkIHNlY3Rpb24gYW5kIHB1dCB0aGVtIGluIGFycmF5XG5cdFx0XHRcdC8vIEFsbCB0YWdzIGFyZSBIVE1MIHRhYmxlIGVsZW1lbnRzIHRoYXQgYXJlIGRpcmVjdCBjaGlsZHJlbiBvZiAubXctcGFyc2VyLW91dHB1dCxcblx0XHRcdFx0Ly8gZXhjZXB0IHdoZW4gdGhleSBhcmUgd2l0aGluIHt7bXVsdGlwbGUgaXNzdWVzfX1cblx0XHRcdFx0JGJvZHlcblx0XHRcdFx0XHQuZmluZCgnLm13LXBhcnNlci1vdXRwdXQnKVxuXHRcdFx0XHRcdC5jaGlsZHJlbigpXG5cdFx0XHRcdFx0LmVhY2goKF9pLCBlKSA9PiB7XG5cdFx0XHRcdFx0XHQvLyBicmVhayBvdXQgb24gZW5jb3VudGVyaW5nIHRoZSBmaXJzdCBoZWFkaW5nLCB3aGljaCBtZWFucyB3ZSBhcmUgbm9cblx0XHRcdFx0XHRcdC8vIGxvbmdlciBpbiB0aGUgbGVhZCBzZWN0aW9uXG5cdFx0XHRcdFx0XHRpZiAoZS50YWdOYW1lID09PSAnSDInKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIFRoZSBhYmlsaXR5IHRvIHJlbW92ZSB0YWdzIGRlcGVuZHMgb24gdGhlIHRlbXBsYXRlJ3Mge3thbWJveH19IHxuYW1lPVxuXHRcdFx0XHRcdFx0Ly8gcGFyYW1ldGVyIGJlYXJpbmcgdGhlIHRlbXBsYXRlJ3MgY29ycmVjdCBuYW1lIChwcmVmZXJhYmx5KSBvciBhIG5hbWUgdGhhdCBhdFxuXHRcdFx0XHRcdFx0Ly8gbGVhc3QgcmVkaXJlY3RzIHRvIHRoZSBhY3R1YWwgbmFtZVxuXHRcdFx0XHRcdFx0Ly8gQWxsIHRhZ3MgaGF2ZSB0aGVpciBmaXJzdCBjbGFzcyBuYW1lIGFzIFwiYm94LVwiICsgdGVtcGxhdGUgbmFtZVxuXHRcdFx0XHRcdFx0aWYgKGUuY2xhc3NOYW1lLmluZGV4T2YoJ2JveC0nKSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRpZiAoZS5jbGFzc0xpc3RbMF0gPT09ICdib3gt6Zeu6aKY5p2h55uuJykge1xuXHRcdFx0XHRcdFx0XHRcdCQoZSlcblx0XHRcdFx0XHRcdFx0XHRcdC5maW5kKCcuYW1ib3gnKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmVhY2goKF9pbmRleCwgZWxlbWVudCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoZWxlbWVudC5jbGFzc0xpc3RbMF0uaW5kZXhPZignYm94LScpID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgYm94VGFnID0gZWxlbWVudC5jbGFzc0xpc3RbMF0uc2xpY2UoJ2JveC0nLmxlbmd0aCkucmVwbGFjZSgvXy9nLCAnICcpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFR3aW5rbGUudGFnLmFscmVhZHlQcmVzZW50VGFnc1tUd2lua2xlLnRhZy5hbHJlYWR5UHJlc2VudFRhZ3MubGVuZ3RoXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRib3hUYWc7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlOyAvLyBjb250aW51ZVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgdGFnID0gZS5jbGFzc0xpc3RbMF0uc2xpY2UoJ2JveC0nLmxlbmd0aCkucmVwbGFjZSgvXy9nLCAnICcpO1xuXHRcdFx0XHRcdFx0XHRUd2lua2xlLnRhZy5hbHJlYWR5UHJlc2VudFRhZ3NbVHdpbmtsZS50YWcuYWxyZWFkeVByZXNlbnRUYWdzLmxlbmd0aF0gPSB0YWc7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdC8vIHt7VW5jYXRlZ29yaXplZH19IGFuZCB7e0ltcHJvdmUgY2F0ZWdvcmllc319IGFyZSB1c3VhbGx5IHBsYWNlZCBhdCB0aGUgZW5kXG5cdFx0XHRcdGlmICgkYm9keS5maW5kKCcuYm94LVVuY2F0ZWdvcml6ZWQnKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRUd2lua2xlLnRhZy5hbHJlYWR5UHJlc2VudFRhZ3NbVHdpbmtsZS50YWcuYWxyZWFkeVByZXNlbnRUYWdzLmxlbmd0aF0gPSAnVW5jYXRlZ29yaXplZCc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCRib2R5LmZpbmQoJy5ib3gtSW1wcm92ZV9jYXRlZ29yaWVzJykubGVuZ3RoKSB7XG5cdFx0XHRcdFx0VHdpbmtsZS50YWcuYWxyZWFkeVByZXNlbnRUYWdzW1R3aW5rbGUudGFnLmFscmVhZHlQcmVzZW50VGFncy5sZW5ndGhdID0gJ0ltcHJvdmUgY2F0ZWdvcmllcyc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIEFkZCBzdGF0dXMgdGV4dCBub2RlIGFmdGVyIFN1Ym1pdCBidXR0b25cblx0XHRcdGNvbnN0IHN0YXR1c05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cdFx0XHRzdGF0dXNOb2RlLnN0eWxlLmZvbnRTaXplID0gJzkwJSc7XG5cdFx0XHRzdGF0dXNOb2RlLmlkID0gJ3R3LXRhZy1zdGF0dXMnO1xuXHRcdFx0VHdpbmtsZS50YWcuc3RhdHVzID0ge1xuXHRcdFx0XHQvLyBpbml0aWFsIHN0YXRlOyBkZWZpbmVkIGxpa2UgdGhpcyBiZWNhdXNlIHRoZXNlIG5lZWQgdG8gYmUgYXZhaWxhYmxlIGZvciByZWZlcmVuY2Vcblx0XHRcdFx0Ly8gaW4gdGhlIGNsaWNrIGV2ZW50IGhhbmRsZXJcblx0XHRcdFx0bnVtQWRkZWQ6IDAsXG5cdFx0XHRcdG51bVJlbW92ZWQ6IDAsXG5cdFx0XHR9O1xuXHRcdFx0JGJvZHkuZmluZCgnYnV0dG9uLnR3LXRhZy1zdWJtaXQnKS5hZnRlcihzdGF0dXNOb2RlKTtcblx0XHRcdC8vIGZha2UgYSBjaGFuZ2UgZXZlbnQgb24gdGhlIHNvcnQgZHJvcGRvd24sIHRvIGluaXRpYWxpemUgdGhlIHRhZyBsaXN0XG5cdFx0XHRjb25zdCBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcblx0XHRcdGV2dC5pbml0RXZlbnQoJ2NoYW5nZScsIHRydWUsIHRydWUpO1xuXHRcdFx0cmVzdWx0LnNvcnRvcmRlci5kaXNwYXRjaEV2ZW50KGV2dCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFJlZGlyZWN0cyBhbmQgZmlsZXM6IEFkZCBhIGxpbmsgdG8gZWFjaCB0ZW1wbGF0ZSdzIGRlc2NyaXB0aW9uIHBhZ2Vcblx0XHRcdGZvciAoY29uc3QgY2hlY2tib3ggb2YgTW9yZWJpdHMucXVpY2tGb3JtLmdldEVsZW1lbnRzKHJlc3VsdCwgJ3RhZ3MnKSkge1xuXHRcdFx0XHRnZW5lcmF0ZUxpbmtzKGNoZWNrYm94KTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdC8vICRhbGxDaGVja2JveERpdnMgYW5kICRhbGxIZWFkZXJzIGFyZSBkZWZpbmVkIGdsb2JhbGx5LCByYXRoZXIgdGhhbiBpbiB0aGVcblx0Ly8gcXVpY2tmaWx0ZXIgZXZlbnQgZnVuY3Rpb24sIHRvIGF2b2lkIGhhdmluZyB0byByZWNvbXB1dGUgdGhlbSBvbiBldmVyeSBrZXlkb3duXG5cdGxldCAkYWxsQ2hlY2tib3hEaXZzO1xuXHRsZXQgJGFsbEhlYWRlcnM7XG5cdFR3aW5rbGUudGFnLnVwZGF0ZVNvcnRPcmRlciA9IChlKSA9PiB7XG5cdFx0Y29uc3Qge2Zvcm19ID0gZS50YXJnZXQ7XG5cdFx0Y29uc3Qgc29ydG9yZGVyID0gZS50YXJnZXQudmFsdWU7XG5cdFx0VHdpbmtsZS50YWcuY2hlY2tlZFRhZ3MgPSBmb3JtLmdldENoZWNrZWQoJ3RhZ3MnKTtcblx0XHRjb25zdCBjb250YWluZXIgPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0dHlwZTogJ2ZyYWdtZW50Jyxcblx0XHR9KTtcblx0XHQvLyBmdW5jdGlvbiB0byBnZW5lcmF0ZSBhIGNoZWNrYm94LCB3aXRoIGFwcHJvcHJpYXRlIHN1Ymdyb3VwIGlmIG5lZWRlZFxuXHRcdGNvbnN0IG1ha2VDaGVja2JveCA9ICh0YWcsIGRlc2NyaXB0aW9uKSA9PiB7XG5cdFx0XHRjb25zdCBjaGVja2JveCA9IHtcblx0XHRcdFx0dmFsdWU6IHRhZyxcblx0XHRcdFx0bGFiZWw6IGB7eyR7dGFnfX19OiAke2Rlc2NyaXB0aW9ufWAsXG5cdFx0XHR9O1xuXHRcdFx0aWYgKFR3aW5rbGUudGFnLmNoZWNrZWRUYWdzLmluY2x1ZGVzKHRhZykpIHtcblx0XHRcdFx0Y2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRzd2l0Y2ggKHRhZykge1xuXHRcdFx0XHRjYXNlICdFeHBlcnQgbmVlZGVkJzpcblx0XHRcdFx0XHRjaGVja2JveC5zdWJncm91cCA9IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bmFtZTogJ2V4cGVydCcsXG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WTquS4qumihuWfn+eahOS4k+Wutu+8iOW/heWhq++8ie+8micsICflk6rlgIvpoJjln5/nmoTlsIjlrrbvvIjlv4XloavvvInvvJonKSxcblx0XHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCflv4XloavvvIzlj6/lj4LogIMgQ2F0ZWdvcnk66ZyA6KaB5LiT5Lia5Lq65aOr5YWz5rOo55qE6aG16Z2iIOS9v+eUqOeOsOWtmOeahOWIhuexu+OAgicsXG5cdFx0XHRcdFx0XHRcdFx0J+W/heWhq++8jOWPr+WPg+iAgyBDYXRlZ29yeTrpnIDopoHlsIjmpa3kurrlo6vpl5zms6jnmoTpoIHpnaIg5L2/55So54++5a2Y55qE5YiG6aGe44CCJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bmFtZTogJ2V4cGVydDInLFxuXHRcdFx0XHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflk6rkuKrpoobln5/nmoTkuJPlrrbvvJonLCAn5ZOq5YCL6aCY5Z+f55qE5bCI5a6277yaJyksXG5cdFx0XHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5Y+v6YCJ77yM5Y+v5Y+C6ICDIENhdGVnb3J5OumcgOimgeS4k+S4muS6uuWjq+WFs+azqOeahOmhtemdoiDkvb/nlKjnjrDlrZjnmoTliIbnsbvjgIInLFxuXHRcdFx0XHRcdFx0XHRcdCflj6/pgbjvvIzlj6/lj4PogIMgQ2F0ZWdvcnk66ZyA6KaB5bCI5qWt5Lq65aOr6Zec5rOo55qE6aCB6Z2iIOS9v+eUqOePvuWtmOeahOWIhumhnuOAgidcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdG5hbWU6ICdleHBlcnQzJyxcblx0XHRcdFx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5ZOq5Liq6aKG5Z+f55qE5LiT5a6277yaJywgJ+WTquWAi+mgmOWfn+eahOWwiOWutu+8micpLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+WPr+mAie+8jOWPr+WPguiAgyBDYXRlZ29yeTrpnIDopoHkuJPkuJrkurrlo6vlhbPms6jnmoTpobXpnaIg5L2/55So546w5a2Y55qE5YiG57G744CCJyxcblx0XHRcdFx0XHRcdFx0XHQn5Y+v6YG477yM5Y+v5Y+D6ICDIENhdGVnb3J5OumcgOimgeWwiOalreS6uuWjq+mXnOazqOeahOmggemdoiDkvb/nlKjnj77lrZjnmoTliIbpoZ7jgIInXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdF07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ01lcmdlJzpcblx0XHRcdFx0Y2FzZSAnTWVyZ2UgZnJvbSc6XG5cdFx0XHRcdGNhc2UgJ01lcmdlIHRvJzoge1xuXHRcdFx0XHRcdGxldCBvdGhlclRhZ05hbWUgPSAnTWVyZ2UnO1xuXHRcdFx0XHRcdHN3aXRjaCAodGFnKSB7XG5cdFx0XHRcdFx0XHRjYXNlICdNZXJnZSBmcm9tJzpcblx0XHRcdFx0XHRcdFx0b3RoZXJUYWdOYW1lID0gJ01lcmdlIHRvJztcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdNZXJnZSB0byc6XG5cdFx0XHRcdFx0XHRcdG90aGVyVGFnTmFtZSA9ICdNZXJnZSBmcm9tJztcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHQvLyBubyBkZWZhdWx0XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y2hlY2tib3guc3ViZ3JvdXAgPSBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdG5hbWU6ICdtZXJnZVRhcmdldCcsXG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WFtuS7luadoeebru+8micsICflhbbku5bmop3nm67vvJonKSxcblx0XHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCflpoLmjIflrprlpJrkuKrmnaHnm67vvIzor7fnlKjnrqHpgZPnrKbliIbpmpTvvJrmnaHnm67nlLJ85p2h55uu5LmZJyxcblx0XHRcdFx0XHRcdFx0XHQn5aaC5oyH5a6a5aSa5YCL5qKd55uu77yM6KuL55So566h6YGT56ym5YiG6ZqU77ya5qKd55uu55SyfOaineebruS5mSdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0XHRuYW1lOiAnbWVyZ2VUYWdPdGhlcicsXG5cdFx0XHRcdFx0XHRcdFx0XHRsYWJlbDogYOeUqHt7JHtvdGhlclRhZ05hbWV9JHt3aW5kb3cud2dVTFMoJ3195qCH6K6w5YW25LuW5p2h55uuJywgJ3195qiZ6KiY5YW25LuW5qKd55uuJyl9YCxcblx0XHRcdFx0XHRcdFx0XHRcdGNoZWNrZWQ6IHRydWUsXG5cdFx0XHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCfku4XlnKjlj6rovpPlhaXkuobkuIDkuKrmnaHnm67lkI3ml7blj6/nlKgnLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQn5YOF5Zyo5Y+q6Ly45YWl5LqG5LiA5YCL5qKd55uu5ZCN5pmC5Y+v55SoJ1xuXHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRdLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdO1xuXHRcdFx0XHRcdGlmIChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpID09PSAwKSB7XG5cdFx0XHRcdFx0XHRjaGVja2JveC5zdWJncm91cFtjaGVja2JveC5zdWJncm91cC5sZW5ndGhdID0ge1xuXHRcdFx0XHRcdFx0XHRuYW1lOiAnbWVyZ2VSZWFzb24nLFxuXHRcdFx0XHRcdFx0XHR0eXBlOiAndGV4dGFyZWEnLFxuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdGDlkIjlubbnkIbnlLHvvIjkvJrooqvotLTkuIoke3RhZyA9PT0gJ01lcmdlIHRvJyA/ICflhbbku5YnIDogJ+i/mSd95p2h55uu55qE6K6o6K666aG177yJ77yaYCxcblx0XHRcdFx0XHRcdFx0XHRg5ZCI5L2155CG55Sx77yI5pyD6KKr6LK85LiKJHt0YWcgPT09ICdNZXJnZSB0bycgPyAn5YW25LuWJyA6ICfpgJknfeaineebrueahOiojuirlumgge+8ie+8mmBcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCflj6/pgInvvIzkvYblvLrng4jmjqjojZDjgILlpoLkuI3pnIDopoHor7fnlZnnqbrjgILku4XlnKjlj6rovpPlhaXkuobkuIDkuKrmnaHnm67lkI3ml7blj6/nlKjjgIInLFxuXHRcdFx0XHRcdFx0XHRcdCflj6/pgbjvvIzkvYblvLfng4jmjqjolqbjgILlpoLkuI3pnIDopoHoq4vnlZnnqbrjgILlg4XlnKjlj6rovLjlhaXkuobkuIDlgIvmop3nm67lkI3mmYLlj6/nlKjjgIInXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRjYXNlICdNaXNzaW5nIGluZm9ybWF0aW9uJzpcblx0XHRcdFx0XHRjaGVja2JveC5zdWJncm91cCA9IHtcblx0XHRcdFx0XHRcdG5hbWU6ICdtaXNzaW5nSW5mb3JtYXRpb24nLFxuXHRcdFx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+e8uuWwkeeahOWGheWuue+8iOW/heWhq++8ie+8micsICfnvLrlsJHnmoTlhaflrrnvvIjlv4XloavvvInvvJonKSxcblx0XHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn5b+F5aGr77yM5pi+56S65Li64oCc57y65bCR5pyJ5YWz4oCm4oCm55qE5L+h5oGv44CC4oCdJywgJ+W/heWhq++8jOmhr+ekuueCuuOAjOe8uuWwkeaciemXnOKApuKApueahOizh+ioiuOAguOAjScpLFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ05vdGFiaWxpdHknOlxuXHRcdFx0XHRcdGNoZWNrYm94LnN1Ymdyb3VwID0ge1xuXHRcdFx0XHRcdFx0bmFtZTogJ25vdGFiaWxpdHknLFxuXHRcdFx0XHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogYHt7Tm90YWJpbGl0eX1977yaJHt3aW5kb3cud2dVTFMoJ+mAmueUqOeahOWFs+azqOW6puaMh+W8lScsICfpgJrnlKjnmoTpl5zms6jluqbmjIflvJUnKX1gLFxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiAnbm9uZScsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogYHt7Tm90YWJpbGl0eXxBc3Ryb31977yaJHt3aW5kb3cud2dVTFMoJ+WkqeS9kycsICflpKnpq5QnKX1gLFxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiAnQXN0cm8nLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6IGB7e05vdGFiaWxpdHl8QmlvZ3JhcGhpZXN9fe+8miR7d2luZG93LndnVUxTKCfkurrniankvKDorrAnLCAn5Lq654mp5YKz6KiYJyl9YCxcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogJ0Jpb2dyYXBoaWVzJyxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiBge3tOb3RhYmlsaXR5fEJvb2t9fe+8miR7d2luZG93LndnVUxTKCfkuabnsY0nLCAn5pu457GNJyl9YCxcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogJ0Jvb2snLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6IGB7e05vdGFiaWxpdHl8Q3ljbG9uZX1977yaJHt3aW5kb3cud2dVTFMoJ+awlOaXiycsICfmsKPml4snKX1gLFxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiAnQ3ljbG9uZScsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogYHt7Tm90YWJpbGl0eXxGaWN0aW9ufX3vvJoke3dpbmRvdy53Z1VMUygn6Jma5p6E5LqL54mpJywgJ+iZm+ani+S6i+eJqScpfWAsXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU6ICdGaWN0aW9uJyxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiBge3tOb3RhYmlsaXR5fEdlb2dyYXBoaWN9fe+8miR7d2luZG93LndnVUxTKCflnLDnkIbnibnlvoEnLCAn5Zyw55CG54m55b61Jyl9YCxcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogJ0dlb2dyYXBoaWMnLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6IGB7e05vdGFiaWxpdHl8R2VvbWV0cnl9fe+8miR7d2luZG93LndnVUxTKCflh6DkvZXlm77lvaInLCAn5bm+5L2V5ZyW5b2iJyl9YCxcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogJ0dlb21ldHJ5Jyxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiBge3tOb3RhYmlsaXR5fEludmVudGlvbn1977yaJHt3aW5kb3cud2dVTFMoJ+WPkeaYjuOAgeeglOepticsICfnmbzmmI7jgIHnoJTnqbYnKX1gLFxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiAnSW52ZW50aW9uJyxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiBge3tOb3RhYmlsaXR5fE11c2ljfX3vvJoke3dpbmRvdy53Z1VMUygn6Z+z5LmQJywgJ+mfs+aogicpfWAsXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU6ICdNdXNpYycsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogYHt7Tm90YWJpbGl0eXxOdW1iZXJzfX3vvJoke3dpbmRvdy53Z1VMUygn5pWw5a2XJywgJ+aVuOWtlycpfWAsXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU6ICdOdW1iZXJzJyxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiBge3tOb3RhYmlsaXR5fE9yZ2FuaXphdGlvbnN9fe+8miR7d2luZG93LndnVUxTKCfnu4Tnu4cnLCAn57WE57mUJyl9YCxcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogJ09yZ2FuaXphdGlvbnMnLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6IGB7e05vdGFiaWxpdHl8UHJvcGVydHl9fe+8miR7d2luZG93LndnVUxTKCfmgKfotKjooagnLCAn5oCn6LOq6KGoJyl9YCxcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogJ1Byb3BlcnR5Jyxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiAne3tOb3RhYmlsaXR5fFRyYWZmaWN9fe+8muS6pOmAmicsXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU6ICdUcmFmZmljJyxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiBge3tOb3RhYmlsaXR5fFdlYn1977yaJHt3aW5kb3cud2dVTFMoJ+e9keermeOAgee9kee7nOWGheWuuScsICfntrLnq5njgIHntrLot6/lhaflrrknKX3vvIjpnZ7mraPlvI/mjIflvJXvvIlgLFxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiAnV2ViJyxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdF0sXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnUmVxdWVzdGVkIG1vdmUnOlxuXHRcdFx0XHRcdGNoZWNrYm94LnN1Ymdyb3VwID0gW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRuYW1lOiAnbW92ZVRhcmdldCcsXG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aWsOWQjeensO+8micsICfmlrDlkI3nqLHvvJonKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdG5hbWU6ICdtb3ZlUmVhc29uJyxcblx0XHRcdFx0XHRcdFx0dHlwZTogJ3RleHRhcmVhJyxcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn56e75Yqo55CG55Sx77yI5Lya6KKr57KY6LS06K+l5p2h55uu55qE6K6o6K666aG177yJ77yaJyxcblx0XHRcdFx0XHRcdFx0XHQn56e75YuV55CG55Sx77yI5pyD6KKr6LK85LiK6Kmy5qKd55uu55qE6KiO6KuW6aCB77yJ77yaJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+WPr+mAie+8jOS9huW8uueDiOaOqOiNkOOAguWmguS4jemcgOimgeivt+eVmeepuuOAgicsXG5cdFx0XHRcdFx0XHRcdFx0J+WPr+mBuO+8jOS9huW8t+eDiOaOqOiWpuOAguWmguS4jemcgOimgeiri+eVmeepuuOAgidcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnU3BsaXQnOlxuXHRcdFx0XHRcdGNoZWNrYm94LnN1Ymdyb3VwID0gW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRuYW1lOiAndGFyZ2V0MScsXG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+mhtemdouWQjTHvvJonLCAn6aCB6Z2i5ZCNMe+8micpLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoJ+WPr+mAieOAgicsICflj6/pgbjjgIInKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdG5hbWU6ICd0YXJnZXQyJyxcblx0XHRcdFx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6aG16Z2i5ZCNMu+8micsICfpoIHpnaLlkI0y77yaJyksXG5cdFx0XHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn5Y+v6YCJ44CCJywgJ+WPr+mBuOOAgicpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bmFtZTogJ3RhcmdldDMnLFxuXHRcdFx0XHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfpobXpnaLlkI0z77yaJywgJ+mggemdouWQjTPvvJonKSxcblx0XHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKCflj6/pgInjgIInLCAn5Y+v6YG444CCJyksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdF07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0NsZWFudXAnOlxuXHRcdFx0XHRcdGNoZWNrYm94LnN1Ymdyb3VwID0gW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRuYW1lOiAnY2xlYW51cFJlYXNvbicsXG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiAn6ZyA6KaB5riF55CG55qE55CG55SxJyxcblx0XHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCflj6/pgInvvIzkvYblvLrng4jmjqjojZDjgILlpoLkuI3pnIDopoHor7fnlZnnqbrjgIInLFxuXHRcdFx0XHRcdFx0XHRcdCflj6/pgbjvvIzkvYblvLfng4jmjqjolqbjgILlpoLkuI3pnIDopoHoq4vnlZnnqbrjgIInXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdF07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY2hlY2tib3g7XG5cdFx0fTtcblx0XHRjb25zdCBtYWtlQ2hlY2tib3hlc0ZvckFscmVhZHlQcmVzZW50VGFncyA9ICgpID0+IHtcblx0XHRcdGNvbnRhaW5lci5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnaGVhZGVyJyxcblx0XHRcdFx0aWQ6ICd0YWdIZWFkZXIwJyxcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bey5pS+572u55qE57u05oqk5qCH6K6wJywgJ+W3suaUvue9rueahOe2reitt+aomeiomCcpLFxuXHRcdFx0fSk7XG5cdFx0XHRjb25zdCBzdWJkaXYgPSBjb250YWluZXIuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdGlkOiAndGFnU3ViZGl2MCcsXG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IGNoZWNrYm94ZXMgPSBbXTtcblx0XHRcdGNvbnN0IHVuQ2hlY2tlZFRhZ3MgPSBlLnRhcmdldC5mb3JtLmdldFVuY2hlY2tlZCgnZXhpc3RpbmdUYWdzJyk7XG5cdFx0XHRmb3IgKGNvbnN0IHRhZyBvZiBUd2lua2xlLnRhZy5hbHJlYWR5UHJlc2VudFRhZ3MpIHtcblx0XHRcdFx0Y29uc3QgY2hlY2tib3ggPSB7XG5cdFx0XHRcdFx0dmFsdWU6IHRhZyxcblx0XHRcdFx0XHRsYWJlbDogYHt7JHt0YWd9fX0ke1xuXHRcdFx0XHRcdFx0VHdpbmtsZS50YWcuYXJ0aWNsZS5mbGF0T2JqZWN0W3RhZ11cblx0XHRcdFx0XHRcdFx0PyBgOiAke1R3aW5rbGUudGFnLmFydGljbGUuZmxhdE9iamVjdFt0YWddLmRlc2NyaXB0aW9ufWBcblx0XHRcdFx0XHRcdFx0OiAnJ1xuXHRcdFx0XHRcdH1gLFxuXHRcdFx0XHRcdGNoZWNrZWQ6ICF1bkNoZWNrZWRUYWdzLmluY2x1ZGVzKHRhZyksXG5cdFx0XHRcdH07XG5cdFx0XHRcdGNoZWNrYm94ZXNbY2hlY2tib3hlcy5sZW5ndGhdID0gY2hlY2tib3g7XG5cdFx0XHR9XG5cdFx0XHRzdWJkaXYuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0bmFtZTogJ2V4aXN0aW5nVGFncycsXG5cdFx0XHRcdGxpc3Q6IGNoZWNrYm94ZXMsXG5cdFx0XHR9KTtcblx0XHR9O1xuXHRcdGlmIChzb3J0b3JkZXIgPT09ICdjYXQnKSB7XG5cdFx0XHQvLyBjYXRlZ29yaWNhbCBzb3J0IG9yZGVyXG5cdFx0XHQvLyBmdW5jdGlvbiB0byBpdGVyYXRlIHRocm91Z2ggdGhlIHRhZ3MgYW5kIGNyZWF0ZSBhIGNoZWNrYm94IGZvciBlYWNoIG9uZVxuXHRcdFx0Y29uc3QgZG9DYXRlZ29yeUNoZWNrYm94ZXMgPSAoc3ViZGl2LCBzdWJncm91cCkgPT4ge1xuXHRcdFx0XHRjb25zdCBjaGVja2JveGVzID0gW107XG5cdFx0XHRcdGZvciAoY29uc3QgaXRlbSBvZiBzdWJncm91cCkge1xuXHRcdFx0XHRcdGlmICghVHdpbmtsZS50YWcuYWxyZWFkeVByZXNlbnRUYWdzLmluY2x1ZGVzKGl0ZW0udGFnKSkge1xuXHRcdFx0XHRcdFx0Y2hlY2tib3hlc1tjaGVja2JveGVzLmxlbmd0aF0gPSBtYWtlQ2hlY2tib3goaXRlbS50YWcsIGl0ZW0uZGVzY3JpcHRpb24pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdWJkaXYuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRcdG5hbWU6ICd0YWdzJyxcblx0XHRcdFx0XHRsaXN0OiBjaGVja2JveGVzLFxuXHRcdFx0XHR9KTtcblx0XHRcdH07XG5cdFx0XHRpZiAoVHdpbmtsZS50YWcuYWxyZWFkeVByZXNlbnRUYWdzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0bWFrZUNoZWNrYm94ZXNGb3JBbHJlYWR5UHJlc2VudFRhZ3MoKTtcblx0XHRcdH1cblx0XHRcdGxldCBpID0gMTtcblx0XHRcdC8vIGdvIHRocm91Z2ggZWFjaCBjYXRlZ29yeSBhbmQgc3ViLWNhdGVnb3J5IGFuZCBhcHBlbmQgbGlzdHMgb2YgY2hlY2tib3hlc1xuXHRcdFx0Zm9yIChjb25zdCBncm91cCBvZiBUd2lua2xlLnRhZy5hcnRpY2xlLnRhZ0xpc3QpIHtcblx0XHRcdFx0Y29udGFpbmVyLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2hlYWRlcicsXG5cdFx0XHRcdFx0aWQ6IGB0YWdIZWFkZXIke2l9YCxcblx0XHRcdFx0XHRsYWJlbDogZ3JvdXAua2V5LFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0Y29uc3Qgc3ViZGl2ID0gY29udGFpbmVyLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdFx0aWQ6IGB0YWdTdWJkaXYke2krK31gLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYgKGdyb3VwLnZhbHVlWzBdLnRhZykge1xuXHRcdFx0XHRcdGRvQ2F0ZWdvcnlDaGVja2JveGVzKHN1YmRpdiwgZ3JvdXAudmFsdWUpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZvciAoY29uc3Qgc3ViZ3JvdXAgb2YgZ3JvdXAudmFsdWUpIHtcblx0XHRcdFx0XHRcdHN1YmRpdi5hcHBlbmQoe1xuXHRcdFx0XHRcdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdFx0XHRcdFx0bGFiZWw6IFtNb3JlYml0cy5odG1sTm9kZSgnYicsIHN1Ymdyb3VwLmtleSldLFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRkb0NhdGVnb3J5Q2hlY2tib3hlcyhzdWJkaXYsIHN1Ymdyb3VwLnZhbHVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gYWxwaGFiZXRpY2FsIHNvcnQgb3JkZXJcblx0XHRcdGlmIChUd2lua2xlLnRhZy5hbHJlYWR5UHJlc2VudFRhZ3MubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRtYWtlQ2hlY2tib3hlc0ZvckFscmVhZHlQcmVzZW50VGFncygpO1xuXHRcdFx0XHRjb250YWluZXIuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnaGVhZGVyJyxcblx0XHRcdFx0XHRpZDogJ3RhZ0hlYWRlcjEnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WPr+eUqOeahOe7tOaKpOagh+iusCcsICflj6/nlKjnmoTntq3orbfmqJnoqJgnKSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHQvLyBBdm9pZCByZXBlYXRlZGx5IHJlc29ydGluZ1xuXHRcdFx0VHdpbmtsZS50YWcuYXJ0aWNsZS5hbHBoYWJldGljYWxMaXN0IHx8PSBPYmplY3Qua2V5cyhUd2lua2xlLnRhZy5hcnRpY2xlLmZsYXRPYmplY3QpLnNvcnQoKTtcblx0XHRcdGNvbnN0IGNoZWNrYm94ZXMgPSBbXTtcblx0XHRcdGZvciAoY29uc3QgdGFnIG9mIFR3aW5rbGUudGFnLmFydGljbGUuYWxwaGFiZXRpY2FsTGlzdCkge1xuXHRcdFx0XHRpZiAoIVR3aW5rbGUudGFnLmFscmVhZHlQcmVzZW50VGFncy5pbmNsdWRlcyh0YWcpKSB7XG5cdFx0XHRcdFx0Y2hlY2tib3hlc1tjaGVja2JveGVzLmxlbmd0aF0gPSBtYWtlQ2hlY2tib3godGFnLCBUd2lua2xlLnRhZy5hcnRpY2xlLmZsYXRPYmplY3RbdGFnXS5kZXNjcmlwdGlvbik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGNvbnRhaW5lci5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRuYW1lOiAndGFncycsXG5cdFx0XHRcdGxpc3Q6IGNoZWNrYm94ZXMsXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Ly8gYXBwZW5kIGFueSBjdXN0b20gdGFnc1xuXHRcdGlmIChUd2lua2xlLmdldFByZWYoJ2N1c3RvbVRhZ0xpc3QnKS5sZW5ndGgpIHtcblx0XHRcdGNvbnRhaW5lci5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnaGVhZGVyJyxcblx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6Ieq5a6a5LmJ5qih5p2/JywgJ+iHquioguaooeadvycpLFxuXHRcdFx0fSk7XG5cdFx0XHRjb250YWluZXIuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0bmFtZTogJ3RhZ3MnLFxuXHRcdFx0XHRsaXN0OiBUd2lua2xlLmdldFByZWYoJ2N1c3RvbVRhZ0xpc3QnKS5tYXAoKGVsKSA9PiB7XG5cdFx0XHRcdFx0ZWwuY2hlY2tlZCA9IFR3aW5rbGUudGFnLmNoZWNrZWRUYWdzLmluY2x1ZGVzKGVsLnZhbHVlKTtcblx0XHRcdFx0XHRyZXR1cm4gZWw7XG5cdFx0XHRcdH0pLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGNvbnN0ICR3b3JrYXJlYSA9ICQoZm9ybSkuZmluZCgnI3RhZ1dvcmtBcmVhJyk7XG5cdFx0Y29uc3QgcmVuZGVyZWQgPSBjb250YWluZXIucmVuZGVyKCk7XG5cdFx0JHdvcmthcmVhLmVtcHR5KCkuYXBwZW5kKHJlbmRlcmVkKTtcblx0XHQvLyBmb3IgcXVpY2sgZmlsdGVyOlxuXHRcdCRhbGxDaGVja2JveERpdnMgPSAkd29ya2FyZWEuZmluZCgnW25hbWU9dGFnc10sIFtuYW1lPWV4aXN0aW5nVGFnc10nKS5wYXJlbnQoKTtcblx0XHQkYWxsSGVhZGVycyA9ICR3b3JrYXJlYS5maW5kKCdoNSwgLnF1aWNrZm9ybURlc2NyaXB0aW9uJyk7XG5cdFx0Zm9ybS5xdWlja2ZpbHRlci52YWx1ZSA9ICcnOyAvLyBjbGVhciBzZWFyY2gsIGJlY2F1c2UgdGhlIHNlYXJjaCByZXN1bHRzIGFyZSBub3QgcHJlc2VydmVkIG92ZXIgbW9kZSBjaGFuZ2Vcblx0XHRmb3JtLnF1aWNrZmlsdGVyLmZvY3VzKCk7XG5cdFx0Ly8gc3R5bGUgYWRqdXN0bWVudHNcblx0XHQkd29ya2FyZWEuZmluZCgnaDUnKS5jc3Moe1xuXHRcdFx0J2ZvbnQtc2l6ZSc6ICcxMTAlJyxcblx0XHR9KTtcblx0XHQkd29ya2FyZWEuZmluZCgnaDU6bm90KDpmaXJzdC1jaGlsZCknKS5jc3Moe1xuXHRcdFx0J21hcmdpbi10b3AnOiAnMWVtJyxcblx0XHR9KTtcblx0XHQkd29ya2FyZWEuZmluZCgnZGl2JykuZmlsdGVyKCc6aGFzKHNwYW4ucXVpY2tmb3JtRGVzY3JpcHRpb24pJykuY3NzKHtcblx0XHRcdCdtYXJnaW4tdG9wJzogJzAuNGVtJyxcblx0XHR9KTtcblx0XHRmb3IgKGNvbnN0IGNoZWNrYm94IG9mIE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhmb3JtLCAnZXhpc3RpbmdUYWdzJykpIHtcblx0XHRcdGdlbmVyYXRlTGlua3MoY2hlY2tib3gpO1xuXHRcdH1cblx0XHRmb3IgKGNvbnN0IGNoZWNrYm94IG9mIE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhmb3JtLCAndGFncycpKSB7XG5cdFx0XHRnZW5lcmF0ZUxpbmtzKGNoZWNrYm94KTtcblx0XHR9XG5cdFx0Ly8gdGFsbHkgdGFncyBhZGRlZC9yZW1vdmVkLCB1cGRhdGUgc3RhdHVzTm9kZSB0ZXh0XG5cdFx0Y29uc3Qgc3RhdHVzTm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0dy10YWctc3RhdHVzJyk7XG5cdFx0JGJvZHkuZmluZCgnW25hbWU9dGFnc10sIFtuYW1lPWV4aXN0aW5nVGFnc10nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAodGhpcy5uYW1lID09PSAndGFncycpIHtcblx0XHRcdFx0VHdpbmtsZS50YWcuc3RhdHVzLm51bUFkZGVkICs9IHRoaXMuY2hlY2tlZCA/IDEgOiAtMTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5uYW1lID09PSAnZXhpc3RpbmdUYWdzJykge1xuXHRcdFx0XHRUd2lua2xlLnRhZy5zdGF0dXMubnVtUmVtb3ZlZCArPSB0aGlzLmNoZWNrZWQgPyAtMSA6IDE7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBmaXJzdFBhcnQgPSBg5Yqg5YWlJHtUd2lua2xlLnRhZy5zdGF0dXMubnVtQWRkZWR9JHt3aW5kb3cud2dVTFMoJ+S4quagh+iusCcsICflgIvmqJnoqJgnKX1gO1xuXHRcdFx0Y29uc3Qgc2Vjb25kUGFydCA9IGDnp7vpmaQke1R3aW5rbGUudGFnLnN0YXR1cy5udW1SZW1vdmVkfSR7d2luZG93LndnVUxTKCfkuKrmoIforrAnLCAn5YCL5qiZ6KiYJyl9YDtcblx0XHRcdHN0YXR1c05vZGUudGV4dENvbnRlbnQgPVxuXHRcdFx0XHQoVHdpbmtsZS50YWcuc3RhdHVzLm51bUFkZGVkID8gYCAgJHtmaXJzdFBhcnR9YCA6ICcnKSArXG5cdFx0XHRcdChUd2lua2xlLnRhZy5zdGF0dXMubnVtUmVtb3ZlZCA/IChUd2lua2xlLnRhZy5zdGF0dXMubnVtQWRkZWQgPyAn77ybJyA6ICcgICcpICsgc2Vjb25kUGFydCA6ICcnKTtcblx0XHR9KTtcblx0fTtcblx0LyoqXG5cdCAqIEFkZHMgYSBsaW5rIHRvIGVhY2ggdGVtcGxhdGUncyBkZXNjcmlwdGlvbiBwYWdlXG5cdCAqXG5cdCAqIEBwYXJhbSB7TW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnR9IGNoZWNrYm94ICBhc3NvY2lhdGVkIHdpdGggdGhlIHRlbXBsYXRlXG5cdCAqL1xuXHRjb25zdCBnZW5lcmF0ZUxpbmtzID0gKGNoZWNrYm94KSA9PiB7XG5cdFx0Y29uc3QgbGluayA9IE1vcmViaXRzLmh0bWxOb2RlKCdhJywgJz4nKTtcblx0XHRsaW5rLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAndGFnLXRlbXBsYXRlLWxpbmsnKTtcblx0XHRjb25zdCB0YWduYW1lID0gY2hlY2tib3gudmFsdWVzO1xuXHRcdGxpbmsuc2V0QXR0cmlidXRlKFxuXHRcdFx0J2hyZWYnLFxuXHRcdFx0bXcudXRpbC5nZXRVcmwoXG5cdFx0XHRcdCh0YWduYW1lLmluY2x1ZGVzKCc6JykgPyAnJyA6ICdUZW1wbGF0ZTonKSArXG5cdFx0XHRcdFx0KHRhZ25hbWUuaW5jbHVkZXMoJ3wnKSA/IHRhZ25hbWUuc2xpY2UoMCwgdGFnbmFtZS5pbmRleE9mKCd8JykpIDogdGFnbmFtZSlcblx0XHRcdClcblx0XHQpO1xuXHRcdGxpbmsuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCAnX2JsYW5rJyk7XG5cdFx0bGluay5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdub29wZW5lciBub3JlZmVycmVyJyk7XG5cdFx0JChjaGVja2JveCkucGFyZW50KCkuYXBwZW5kKFsnXFx1MDBBMCcsIGxpbmtdKTtcblx0fTtcblx0Ly8gVGFncyBmb3IgQVJUSUNMRVMgc3RhcnQgaGVyZVxuXHRUd2lua2xlLnRhZy5hcnRpY2xlID0ge307XG5cdC8vIFRhZ3MgYXJyYW5nZWQgYnkgY2F0ZWdvcnk7IHdpbGwgYmUgdXNlZCB0byBnZW5lcmF0ZSB0aGUgYWxwaGFiZXRpY2FsIGxpc3QsXG5cdC8vIGJ1dCB0YWdzIHNob3VsZCBiZSBpbiBhbHBoYWJldGljYWwgb3JkZXIgd2l0aGluIHRoZSBjYXRlZ29yaWVzXG5cdC8vIGV4Y2x1ZGVNSTogdHJ1ZSBpbmRpY2F0ZSBhIHRhZyB0aGF0ICpkb2VzIG5vdCogd29yayBpbnNpZGUge3ttdWx0aXBsZSBpc3N1ZXN9fVxuXHQvLyBBZGQgbmV3IGNhdGVnb3JpZXMgd2l0aCBkaXNjcmV0aW9uIC0gdGhlIGxpc3QgaXMgbG9uZyBlbm91Z2ggYXMgaXMhXG5cdFR3aW5rbGUudGFnLmFydGljbGUudGFnTGlzdCA9IFtcblx0XHR7XG5cdFx0XHRrZXk6IHdpbmRvdy53Z1VMUygn5riF55CG5ZKM57u05oqk5qih5p2/JywgJ+a4heeQhuWSjOe2reitt+aooeadvycpLFxuXHRcdFx0dmFsdWU6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogd2luZG93LndnVUxTKCfluLjop4TmuIXnkIYnLCAn5bi46KaP5riF55CGJyksXG5cdFx0XHRcdFx0dmFsdWU6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnQ2xlYW51cCcsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+WPr+iDvemcgOimgei/m+ihjOa4heeQhu+8jOS7peespuWQiOacieWFveaho+ahiOmmhueahOi0qOmHj+agh+WHhicsXG5cdFx0XHRcdFx0XHRcdFx0J+WPr+iDvemcgOimgemAsuihjOa4heeQhu+8jOS7peespuWQiOacieeNuOaqlOahiOmkqOeahOizqumHj+aomea6lidcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ0NsZWFudXAgcmV3cml0ZScsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+S4jeespuWQiOacieWFveaho+ahiOmmhueahOi0qOmHj+agh+WHhu+8jOmcgOimgeWujOWFqOmHjeWGmScsXG5cdFx0XHRcdFx0XHRcdFx0J+S4jeespuWQiOacieeNuOaqlOahiOmkqOeahOizqumHj+aomea6lu+8jOmcgOimgeWujOWFqOmHjeWvqydcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ0NsZWFudXAtamFyZ29uJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5YyF5ZCr6L+H5aSa6KGM6K+d5oiW5LiT5Lia5pyv6K+t77yM5Y+v6IO96ZyA6KaB566A5YyW5oiW5o+Q5Ye66L+b5LiA5q2l6Kej6YeKJyxcblx0XHRcdFx0XHRcdFx0XHQn5YyF5ZCr6YGO5aSa6KGM6Kmx5oiW5bCI5qWt6KGT6Kqe77yM5Y+v6IO96ZyA6KaB57Ch5YyW5oiW5o+Q5Ye66YCy5LiA5q2l6Kej6YeLJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnQ29weSBlZGl0Jyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn6ZyA6KaB57yW5L+u77yM5Lul56Gu5L+d5paH5rOV44CB55So6K+N44CB6K+t5rCU44CB5qC85byP44CB5qCH54K5562J5L2/55So5oGw5b2TJyxcblx0XHRcdFx0XHRcdFx0XHQn6ZyA6KaB57eo5L+u77yM5Lul56K65L+d5paH5rOV44CB55So6Kme44CB6Kqe5rCj44CB5qC85byP44CB5qiZ6bue562J5L2/55So5oGw55W2J1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiB3aW5kb3cud2dVTFMoJ+WPr+iDveWkmuS9meeahOWGheWuuScsICflj6/og73lpJrppJjnmoTlhaflrrknKSxcblx0XHRcdFx0XHR2YWx1ZTogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdDb3B5cGFzdGUnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCflhoXlrrnlj6/og73mmK/ku47mn5DkuKrmnaXmupDlpITmi7fotJ3lkI7nspjotLQnLFxuXHRcdFx0XHRcdFx0XHRcdCflhaflrrnlj6/og73mmK/lvp7mn5DlgIvkvobmupDomZXmi7fosp3lvozosrzkuIonXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdFeHRlcm5hbCBsaW5rcycsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+S9v+eUqOWklumDqOmTvuaOpeeahOaWueW8j+WPr+iDveS4jeespuWQiOacieWFveaho+ahiOmmhueahOadoeS+iycsXG5cdFx0XHRcdFx0XHRcdFx0J+S9v+eUqOWklumDqOmAo+e1kOeahOaWueW8j+WPr+iDveS4jeespuWQiOacieeNuOaqlOahiOmkqOeahOaineS+iydcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ05vbi1mcmVlJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5Y+v6IO96L+H5aSa5oiW5LiN5b2T5Zyw5L2/55So5LqG5Y+X6JGX5L2c5p2D5L+d5oqk55qE5paH5a2X44CB5Zu+5YOP5oiW5aSa5aqS5L2T5paH5Lu2Jyxcblx0XHRcdFx0XHRcdFx0XHQn5Y+v6IO96YGO5aSa5oiW5LiN55W25Zyw5L2/55So5LqG5Y+X54mI5qyK5L+d6K2355qE5paH5a2X44CB5ZyW5YOP5oiW5aSa5aqS6auU5qqU5qGIJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiB3aW5kb3cud2dVTFMoJ+e7k+aehOWSjOWvvOiogCcsICfntZDmp4vlkozlsI7oqIAnKSxcblx0XHRcdFx0XHR2YWx1ZTogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdMZWFkIHRvbyBsb25nJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5a+86KiA6YOo5YiG5Lmf6K646L+H5LqO5YaX6ZW/JywgJ+WwjuiogOmDqOWIhuS5n+iosemBjuaWvOWGl+mVtycpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnTGVhZCB0b28gc2hvcnQnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCflr7zoqIDpg6jliIbkuZ/orrjkuI3otrPku6XmpoLmi6zlhbblhoXlrrknLCAn5bCO6KiA6YOo5YiG5Lmf6Kix5LiN6Laz5Lul5qaC5ous5YW25YWn5a65JyksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdWZXJ5IGxvbmcnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCflj6/og73ov4fkuo7lhpfplb8nLCAn5Y+v6IO96YGO5pa85YaX6ZW3JyksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdF0sXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6IHdpbmRvdy53Z1VMUygn6Jma5p6E5L2c5ZOB55u45YWz5riF55CGJywgJ+iZm+ani+S9nOWTgeebuOmXnOa4heeQhicpLFxuXHRcdFx0XHRcdHZhbHVlOiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ0luLXVuaXZlcnNlJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5L2/55So5bCP6K+05pWF5LqL5YaF55qE6KeC54K55o+P6L+w5LiA5Liq6Jma5p6E5LqL54mpJyxcblx0XHRcdFx0XHRcdFx0XHQn5L2/55So5bCP6Kqq5pWF5LqL5YWn55qE6KeA6bue5o+P6L+w5LiA5YCL6Jmb5qeL5LqL54mpJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnTG9uZyBwbG90Jyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5Y+v6IO95YyF5ZCr6L+H5LqO6K+m57uG55qE5Ymn5oOF5pGY6KaBJywgJ+WPr+iDveWMheWQq+mBjuaWvOips+e0sOeahOWKh+aDheaRmOimgScpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGtleTogd2luZG93LndnVUxTKCfluLjop4TmnaHnm67pl67popgnLCAn5bi46KaP5qKd55uu5ZWP6aGMJyksXG5cdFx0XHR2YWx1ZTogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAn6YeN6KaB5oCn5ZKM55+l5ZCN5bqmJyxcblx0XHRcdFx0XHR2YWx1ZTogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdOb3RhYmlsaXR5Jyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5Y+v6IO95LiN56ym5ZCI6YCa55So5YWz5rOo5bqm5oyH5byVJywgJ+WPr+iDveS4jeespuWQiOmAmueUqOmXnOazqOW6puaMh+W8lScpLFxuXHRcdFx0XHRcdFx0XHRleGNsdWRlTUk6IHRydWUsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdOb3RhYmlsaXR5IFVucmVmZXJlbmNlZCcsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+WPr+iDveWFt+Wkh+WFs+azqOW6pu+8jOS9humcgOimgeadpea6kOWKoOS7peW9sOaYvicsXG5cdFx0XHRcdFx0XHRcdFx0J+WPr+iDveWFt+WCmemXnOazqOW6pu+8jOS9humcgOimgeS+hua6kOWKoOS7peW9sOmhrydcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogd2luZG93LndnVUxTKCflhpnkvZzpo47moLwnLCAn5a+r5L2c6aKo5qC8JyksXG5cdFx0XHRcdFx0dmFsdWU6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnQWR2ZXJ0Jyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn57G75Ly85bm/5ZGK5oiW5a6j5Lyg5oCn5YaF5a65JywgJ+mhnuS8vOW7o+WRiuaIluWuo+WCs+aAp+WFp+WuuScpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnRmFucG92Jyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn57G75Ly854ix5aW96ICF572R6aG1JywgJ+mhnuS8vOaEm+WlveiAhee2sumggScpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnSG93LXRvJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5YyF5ZCr5oyH5Y2X5oiW5pWZ5a2m5YaF5a65JywgJ+WMheWQq+aMh+WNl+aIluaVmeWtuOWFp+WuuScpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnSW5hcHByb3ByaWF0ZSBwZXJzb24nLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCfkvb/nlKjkuI3pgILlvZPnmoTnrKzkuIDkurrnp7DlkoznrKzkuozkurrnp7AnLFxuXHRcdFx0XHRcdFx0XHRcdCfkvb/nlKjkuI3pgannlbbnmoTnrKzkuIDkurrnqLHlkoznrKzkuozkurrnqLEnXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdOZXdzcmVsZWFzZScsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+mYheivu+i1t+adpeWDj+aYr+aWsOmXu+eov+WPiuWMheWQq+i/h+W6pueahOWuo+S8oOaAp+ivreiwgycsXG5cdFx0XHRcdFx0XHRcdFx0J+mWseiugOi1t+S+huWDj+aYr+aWsOiBnueov+WPiuWMheWQq+mBjuW6pueahOWuo+WCs+aAp+iqnuiqvydcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ1Byb3NlJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5L2/55So5LqG5pel5pyf5oiW5pe26Ze05YiX6KGo5byP6K6w6L+w77yM6ZyA6KaB5pS55YaZ5Li66L+e6LSv55qE5Y+Z6L+w5oCn5paH5a2XJyxcblx0XHRcdFx0XHRcdFx0XHQn5L2/55So5LqG5pel5pyf5oiW5pmC6ZaT5YiX6KGo5byP6KiY6L+w77yM6ZyA6KaB5pS55a+r54K66YCj6LKr55qE5pWY6L+w5oCn5paH5a2XJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnUmV2aWV3Jyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn6ZiF6K+76LW35p2l57G75Ly86K+E6K6677yM6ZyA6KaB5riF55CGJywgJ+mWseiugOi1t+S+humhnuS8vOipleirlu+8jOmcgOimgea4heeQhicpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnVG9uZScsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+ivreiwg+aIlumjjuagvOWPr+iDveS4jemAguWQiOeZvuenkeWFqOS5pueahOWGmeS9nOaWueW8jycsXG5cdFx0XHRcdFx0XHRcdFx0J+iqnuiqv+aIlumiqOagvOWPr+iDveS4jemBqeWQiOeZvuenkeWFqOabuOeahOWvq+S9nOaWueW8jydcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogd2luZG93LndnVUxTKCflhoXlrrknLCAn5YWn5a65JyksXG5cdFx0XHRcdFx0dmFsdWU6IFtcblx0XHRcdFx0XHRcdHt0YWc6ICdNaXNzaW5nIGluZm9ybWF0aW9uJywgZGVzY3JpcHRpb246ICfnvLrlsJHlv4XopoHnmoTkv6Hmga8nfSwgLy8gdGhlc2UgdGhyZWUgaGF2ZSBhIHN1Ymdyb3VwIHdpdGggc2V2ZXJhbCBvcHRpb25zXG5cdFx0XHRcdFx0XHR7dGFnOiAnU3Vic3R1YicsIGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+i/h+S6juefreWwjycsICfpgY7mlrznn63lsI8nKSwgZXhjbHVkZU1JOiB0cnVlfSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnVW5lbmN5Y2xvcGVkaWMnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCflj6/og73kuI3pgILlkIjlhpnlhaXnmb7np5HlhajkuaYnLCAn5Y+v6IO95LiN6YGp5ZCI5a+r5YWl55m+56eR5YWo5pu4JyksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdF0sXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6IHdpbmRvdy53Z1VMUygn5L+h5oGv5ZKM57uG6IqCJywgJ+izh+ioiuWSjOe0sOevgCcpLFxuXHRcdFx0XHRcdHZhbHVlOiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ0V4cGVydCBuZWVkZWQnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCfpnIDopoHnsr7pgJrmiJbnhp/mgonmnKzkuLvpopjnmoTkuJPkuJrkurrlo6vvvIjkuJPlrrbvvInlj4LkuI7lj4rljY/liqnnvJbovpEnLFxuXHRcdFx0XHRcdFx0XHRcdCfpnIDopoHnsr7pgJrmiJbnhp/mgonmnKzkuLvpoYznmoTlsIjmpa3kurrlo6vvvIjlsIjlrrbvvInlj4PoiIflj4rljZTliqnnt6jovK8nXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdPdmVybHkgZGV0YWlsZWQnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCfljIXlkKvlpKrlpJrov4fluqbnu4boioLlhoXlrrknLCAn5YyF5ZCr5aSq5aSa6YGO5bqm57Sw56+A5YWn5a65JyksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdUcml2aWEnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCflupTpgb/lhY3mnInpmYjliJfmnYLpobnjgIHnkJDnoo7otYTmlpnnmoTpg6jliIYnLFxuXHRcdFx0XHRcdFx0XHRcdCfmh4npgb/lhY3mnInpmbPliJfpm5zpoIXjgIHnkaPnoo7os4fmlpnnmoTpg6jliIYnXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdF0sXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6IHdpbmRvdy53Z1VMUygn5pe26Ze05oCnJywgJ+aZgumWk+aApycpLFxuXHRcdFx0XHRcdHZhbHVlOiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ0N1cnJlbnQnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCforrDov7DmlrDpl7vliqjmgIEnLCAn6KiY6L+w5paw6IGe5YuV5oWLJyksXG5cdFx0XHRcdFx0XHRcdGV4Y2x1ZGVNSTogdHJ1ZSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ1VwZGF0ZScsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+W9k+WJjeadoeebruaIlueroOiKgumcgOimgeabtOaWsCcsICfnlbbliY3mop3nm67miJbnq6Dnr4DpnIDopoHmm7TmlrAnKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogd2luZG93LndnVUxTKCflrqLop4LmgKflkozkuovlrp7lh4bnoa7mgKcnLCAn5a6i6KeA5oCn5ZKM5LqL5a+m5rqW56K65oCnJyksXG5cdFx0XHRcdFx0dmFsdWU6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnQXV0b2Jpb2dyYXBoeScsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+exu+S8vOS4gOevh+iHquS8oO+8jOaIluWGheWuueS4u+imgeeUseadoeebruaPj+i/sOeahOW9k+S6i+S6uuaIlue7hOe7h+aSsOWGmeOAgee8lui+kScsXG5cdFx0XHRcdFx0XHRcdFx0J+mhnuS8vOS4gOevh+iHquWCs++8jOaIluWFp+WuueS4u+imgeeUseaineebruaPj+i/sOeahOeVtuS6i+S6uuaIlue1hOe5lOaSsOWvq+OAgee3qOi8rydcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ0NPSScsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+S4u+imgei0oeeMruiAheS4juacrOadoeebruaJgOWuo+aJrOeahOWGheWuueWPr+iDveWtmOWcqOWIqeebiuWGsueqgScsXG5cdFx0XHRcdFx0XHRcdFx0J+S4u+imgeiyoueNu+iAheiIh+acrOaineebruaJgOWuo+aPmueahOWFp+WuueWPr+iDveWtmOWcqOWIqeebiuihneeqgSdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ0Rpc3B1dGVkJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5YaF5a6555aR5qyg5YeG56Gu77yM5pyJ5b6F5p+l6K+BJywgJ+WFp+WuueeWkeasoOa6lueiuu+8jOacieW+heafpeitiScpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnR2xvYmFsaXplJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5LuF5YW35pyJ5LiA6YOo5YiG5Zyw5Yy655qE5L+h5oGv5oiW6KeC54K5JywgJ+WDheWFt+acieS4gOmDqOWIhuWcsOWNgOeahOizh+ioiuaIluingOm7nicpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnSG9heCcsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+ecn+WunuaAp+iiq+i0qOeWkScsICfnnJ/lr6bmgKfooqvos6rnlpEnKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ1BPVicsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+WuouinguaAp+acieS6ieiuruOAguWGheWuueOAgeivreiwg+WPr+iDveW4puacieaYjuaYvueahOS4quS6uuingueCueaIluWcsOaWueiJsuW9qScsXG5cdFx0XHRcdFx0XHRcdFx0J+WuouingOaAp+acieeIreitsOOAguWFp+WuueOAgeiqnuiqv+WPr+iDveW4tuacieaYjumhr+eahOWAi+S6uuingOm7nuaIluWcsOaWueiJsuW9qSdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ1NlbGYtY29udHJhZGljdG9yeScsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+WGheWuueiHquebuOefm+ebvicsICflhaflrrnoh6rnm7jnn5vnm74nKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ1dlYXNlbCcsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+ivreS5ieaooeajseS4pOWPr+iAjOaNn+WPiuWFtuWuouinguaAp+aIluWHhuehruaApycsXG5cdFx0XHRcdFx0XHRcdFx0J+iqnuaEj+aooeajseWFqeWPr+iAjOaQjeWPiuWFtuWuouingOaAp+aIlua6lueiuuaApydcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogd2luZG93LndnVUxTKCflj6/kvpvmn6Xor4HlkozmnaXmupAnLCAn5Y+v5L6b5p+l6K2J5ZKM5L6G5rqQJyksXG5cdFx0XHRcdFx0dmFsdWU6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnQkxQZGlzcHV0ZScsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+WPr+iDvei/neWPjeS6huacieWFveaho+ahiOmmhuWFs+S6jueUn+iAheS8oOiusOeahOadoeS+iycsXG5cdFx0XHRcdFx0XHRcdFx0J+WPr+iDvemBleWPjeS6huacieeNuOaqlOahiOmkqOmXnOaWvOeUn+iAheWCs+iomOeahOaineS+iydcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ0JMUHNvdXJjZXMnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCfnlJ/ogIXkvKDorrDpnIDopoHooaXlhYXmm7TlpJrlj6/kvpvmn6Xor4HnmoTmnaXmupAnLFxuXHRcdFx0XHRcdFx0XHRcdCfnlJ/ogIXlgrPoqJjpnIDopoHoo5zlhYXmm7TlpJrlj6/kvpvmn6XorYnnmoTkvobmupAnXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdCTFAgdW5zb3VyY2VkJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn55Sf6ICF5Lyg6K6w5rKh5pyJ5YiX5Ye65Lu75L2V5Y+C6ICD5oiW5p2l5rqQJyxcblx0XHRcdFx0XHRcdFx0XHQn55Sf6ICF5YKz6KiY5rKS5pyJ5YiX5Ye65Lu75L2V5Y+D6ICD5oiW5L6G5rqQJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnQ2l0ZWNoZWNrJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5Y+v6IO95YyF5ZCr5LiN6YCC55So5oiW6KKr5puy6Kej55qE5byV55So6LWE5paZ77yM6YOo5YiG5YaF5a6555qE5YeG56Gu5oCn5peg5rOV6KKr6K+B5a6eJyxcblx0XHRcdFx0XHRcdFx0XHQn5Y+v6IO95YyF5ZCr5LiN6YGp55So5oiW6KKr5puy6Kej55qE5byV55So6LOH5paZ77yM6YOo5YiG5YWn5a6555qE5rqW56K65oCn54Sh5rOV6KKr6K2J5a+mJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnTW9yZSBmb290bm90ZXMgbmVlZGVkJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5Zug5Li65paH5YaF5byV55So5LiN6Laz77yM6YOo5YiG5a2X5Y+l55qE5p2l5rqQ5LuN54S25LiN5piOJyxcblx0XHRcdFx0XHRcdFx0XHQn5Zug54K65paH5YWn5byV55So5LiN6Laz77yM6YOo5YiG5a2X5Y+l55qE5L6G5rqQ5LuN54S25LiN5piOJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnTm8gZm9vdG5vdGVzJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5Zug5Li65rKh5pyJ5YaF5paH5byV55So6ICM5p2l5rqQ5LuN54S25LiN5piOJyxcblx0XHRcdFx0XHRcdFx0XHQn5Zug54K65rKS5pyJ5YWn5paH5byV55So6ICM5L6G5rqQ5LuN54S25LiN5piOJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnT25lc291cmNlJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5p6B5aSn5oiW5a6M5YWo5Zyw5L6d6LWW5LqO5p+Q5Liq5Y2V5LiA55qE5p2l5rqQJyxcblx0XHRcdFx0XHRcdFx0XHQn5qW15aSn5oiW5a6M5YWo5Zyw5L6d6LO05pa85p+Q5YCL5Zau5LiA55qE5L6G5rqQJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnT3JpZ2luYWwgcmVzZWFyY2gnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCflj6/og73ljIXlkKvljp/liJvnoJTnqbbmiJbmnKrmn6Xor4HlhoXlrrknLCAn5Y+v6IO95YyF5ZCr5Y6f5Ym156CU56m25oiW5pyq5p+l6K2J5YWn5a65JyksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdQcmltYXJ5c291cmNlcycsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+S+nei1luesrOS4gOaJi+adpea6kCcsICfkvp3os7TnrKzkuIDmiYvkvobmupAnKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ1JlZmltcHJvdmUnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCfpnIDopoHooaXlhYXmm7TlpJrmnaXmupAnLCAn6ZyA6KaB6KOc5YWF5pu05aSa5L6G5rqQJyksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdVbnJlZmVyZW5jZWQnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCfmsqHmnInliJflh7rku7vkvZXlj4LogIPmiJbmnaXmupAnLCAn5rKS5pyJ5YiX5Ye65Lu75L2V5Y+D6ICD5oiW5L6G5rqQJyksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdF0sXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0a2V5OiB3aW5kb3cud2dVTFMoJ+WFt+S9k+WGheWuuemXrumimCcsICflhbfpq5TlhaflrrnllY/poYwnKSxcblx0XHRcdHZhbHVlOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6IHdpbmRvdy53Z1VMUygn6K+t6KiAJywgJ+iqnuiogCcpLFxuXHRcdFx0XHRcdHZhbHVlOiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ05vdE1hbmRhcmluJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5YyF5ZCr6L+H5aSa5LiN5piv546w5Luj5qCH5YeG5rGJ6K+t55qE5YaF5a65Jyxcblx0XHRcdFx0XHRcdFx0XHQn5YyF5ZCr6YGO5aSa5LiN5piv54++5Luj5qiZ5rqW5ryi6Kqe55qE5YWn5a65J1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRleGNsdWRlTUk6IHRydWUsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdSb3VnaCB0cmFuc2xhdGlvbicsXG5cdFx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+e/u+ivkeWTgei0qOS4jeS9sycsICfnv7vora/lk4Hos6rkuI3kvbMnKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogd2luZG93LndnVUxTKCfpk77mjqUnLCAn6YCj57WQJyksXG5cdFx0XHRcdFx0dmFsdWU6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnRGVhZCBlbmQnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCfpnIDopoHliqDkuIrlhoXpg6jpk77mjqXku6XmnoTnrZHnmb7np5HlhajkuabnmoTpk77mjqXnvZHnu5wnLFxuXHRcdFx0XHRcdFx0XHRcdCfpnIDopoHliqDkuIrlhafpg6jpgKPntZDku6Xmp4vnr4nnmb7np5Hlhajmm7jnmoTpgKPntZDntrLntaEnXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdPcnBoYW4nLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCfmsqHmnInmiJblj6rmnInlvojlsJHpk77lhaXpobXpnaInLCAn5rKS5pyJ5oiW5Y+q5pyJ5b6I5bCR6YCj5YWl6aCB6Z2iJyksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdPdmVybGlua2VkJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5ZCr5pyJ6L+H5aSa44CB6YeN5aSN44CB5oiW5LiN5b+F6KaB55qE5YaF6YOo6ZO+5o6lJyxcblx0XHRcdFx0XHRcdFx0XHQn5ZCr5pyJ6YGO5aSa44CB6YeN6KSH44CB5oiW5LiN5b+F6KaB55qE5YWn6YOo6YCj57WQJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGFnOiAnVW5kZXJsaW5rZWQnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdCfpnIDopoHmm7TlpJrlhoXpg6jpk77mjqXku6XmnoTnrZHnmb7np5HlhajkuabnmoTpk77mjqXnvZHnu5wnLFxuXHRcdFx0XHRcdFx0XHRcdCfpnIDopoHmm7TlpJrlhafpg6jpgKPntZDku6Xmp4vnr4nnmb7np5Hlhajmm7jnmoTpgKPntZDntrLntaEnXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdF0sXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6IHdpbmRvdy53Z1VMUygn5Y+C6ICD5oqA5pyvJywgJ+WPg+iAg+aKgOihkycpLFxuXHRcdFx0XHRcdHZhbHVlOiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ0NpdGF0aW9uIHN0eWxlJyxcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5byV55So6ZyA6KaB6L+b6KGM5riF55CGJywgJ+W8leeUqOmcgOimgemAsuihjOa4heeQhicpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiB3aW5kb3cud2dVTFMoJ+WIhuexuycsICfliIbpoZ4nKSxcblx0XHRcdFx0XHR2YWx1ZTogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YWc6ICdJbXByb3ZlIGNhdGVnb3JpZXMnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCfpnIDopoHmm7TlpJrpobXpnaLliIbnsbsnLCAn6ZyA6KaB5pu05aSa6aCB6Z2i5YiG6aGeJyksXG5cdFx0XHRcdFx0XHRcdGV4Y2x1ZGVNSTogdHJ1ZSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRhZzogJ1VuY2F0ZWdvcml6ZWQnLFxuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCfnvLrlsJHpobXpnaLliIbnsbsnLCAn57y65bCR6aCB6Z2i5YiG6aGeJyksXG5cdFx0XHRcdFx0XHRcdGV4Y2x1ZGVNSTogdHJ1ZSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRrZXk6IHdpbmRvdy53Z1VMUygn5ZCI5bm244CB5ouG5YiG44CB56e75YqoJywgJ+WQiOS9teOAgeaLhuWIhuOAgeenu+WLlScpLFxuXHRcdFx0dmFsdWU6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRhZzogJ01lcmdlIGZyb20nLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+W7uuiuruWwhumhtemdouW5tuWFpeatpOmhtemdoicsICflu7rorbDlsIfpoIHpnaLkvbXlhaXmraTpoIHpnaInKSxcblx0XHRcdFx0XHRleGNsdWRlTUk6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0YWc6ICdNZXJnZSB0bycsXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5bu66K6u5bCG5q2k6aG16Z2i5bm25YWl6aG16Z2iJywgJ+W7uuitsOWwh+atpOmggemdouS9teWFpemggemdoicpLFxuXHRcdFx0XHRcdGV4Y2x1ZGVNSTogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRhZzogJ01lcmdlJyxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCflu7rorq7mraTpobXpnaLkuI7pobXpnaLlkIjlubYnLCAn5bu66K2w5q2k6aCB6Z2i6IiH6aCB6Z2i5ZCI5L21JyksXG5cdFx0XHRcdFx0ZXhjbHVkZU1JOiB0cnVlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGFnOiAnUmVxdWVzdGVkIG1vdmUnLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+W7uuiuruWwhuatpOmhtemdouenu+WKqOWIsOaWsOWQjeensCcsICflu7rorbDlsIfmraTpoIHpnaLnp7vli5XliLDmlrDlkI3nqLEnKSxcblx0XHRcdFx0XHRleGNsdWRlTUk6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0YWc6ICdTcGxpdCcsXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5bu66K6u5bCG5q2k6aG16Z2i5YiG5Ymy5Li65aSa5Liq6aG16Z2iJywgJ+W7uuitsOWwh+atpOmggemdouWIhuWJsueCuuWkmuWAi+mggemdoicpLFxuXHRcdFx0XHRcdGV4Y2x1ZGVNSTogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0XTtcblx0Ly8gVGFncyBmb3IgUkVESVJFQ1RTIHN0YXJ0IGhlcmVcblx0Ly8gTm90IGJ5IHBvbGljeSwgYnV0IHRoZSBsaXN0IHJvdWdobHkgYXBwcm94aW1hdGVzIGl0ZW1zIHdpdGggPjUwMFxuXHQvLyB0cmFuc2NsdXNpb25zIGZyb20gVGVtcGxhdGU6UiB0ZW1wbGF0ZSBpbmRleFxuXHRUd2lua2xlLnRhZy5yZWRpcmVjdExpc3QgPSBbXG5cdFx0e1xuXHRcdFx0a2V5OiAn5bi455So5qih5p2/Jyxcblx0XHRcdHZhbHVlOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0YWc6IHdpbmRvdy53Z1VMUygn5ZCI5bm26YeN5a6a5ZCRJywgJ+WQiOS9temHjeWumuWQkScpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5L+d5oyB6aG16Z2i6aKY5ZCN6Iez55u45bqU5Li75p2h55uu77yM5Luk6aG16Z2i5YaF5a655Zyo5ZCI5bm25ZCO5LuN6IO95L+d5a2Y5YW257yW6L6R5Y6G5Y+yJyxcblx0XHRcdFx0XHRcdCfkv53mjIHpoIHpnaLpoYzlkI3oh7Pnm7jmh4nkuLvmop3nm67vvIzku6TpoIHpnaLlhaflrrnlnKjlkIjkvbXlvozku43og73lhLLlrZjlhbbnt6jovK/mrbflj7InXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRhZzogd2luZG93LndnVUxTKCfnroDnuYHph43lrprlkJEnLCAn57Ch57mB6YeN5a6a5ZCRJyksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5byV5a+8566A5L2T6Iez57mB5L2T77yM5oiW57mB5L2T6Iez566A5L2TJywgJ+W8leWwjuewoemrlOiHs+e5gemrlO+8jOaIlue5gemrlOiHs+ewoemrlCcpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGFnOiB3aW5kb3cud2dVTFMoJ+WFs+azqOW6pumHjeWumuWQkScsICfpl5zms6jluqbph43lrprlkJEnKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+e8uuS5j+WFs+azqOW6pueahOWtkOS4u+mimOWQkeacieWFs+azqOW6pueahOavjeS4u+mimOeahOmHjeWumuWQkScsXG5cdFx0XHRcdFx0XHQn57y65LmP6Zec5rOo5bqm55qE5a2Q5Li76aGM5ZCR5pyJ6Zec5rOo5bqm55qE5q+N5Li76aGM55qE6YeN5a6a5ZCRJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0YWc6ICfmqKHmnb/ph43lrprlkJEnLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+aMh+WQkeaooeadv+eahOmHjeWumuWQkemhtemdoicsICfmjIflkJHmqKHmnb/nmoTph43lrprlkJHpoIHpnaInKSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRhZzogd2luZG93LndnVUxTKCfliKvlkI3ph43lrprlkJEnLCAn5Yil5ZCN6YeN5a6a5ZCRJyksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfmoIfpopjnmoTlhbbku5blkI3np7DjgIHnrJTlkI3jgIHnu7Dlj7fjgIHlkIzkuYnlrZfnrYknLFxuXHRcdFx0XHRcdFx0J+aomemhjOeahOWFtuS7luWQjeeoseOAgeethuWQjeOAgee2veiZn+OAgeWQjOe+qeWtl+etiSdcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGFnOiB3aW5kb3cud2dVTFMoJ+ivkeWQjemHjeWumuWQkScsICfora/lkI3ph43lrprlkJEnKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+S6uueJqeOAgeS9nOWTgeetieWQhOmhueS6i+eJqeeahOWFtuS7lue/u+ivkeWQjeensCcsXG5cdFx0XHRcdFx0XHQn5Lq654mp44CB5L2c5ZOB562J5ZCE6aCF5LqL54mp55qE5YW25LuW57+76K2v5ZCN56ixJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0YWc6IHdpbmRvdy53Z1VMUygn57yp5YaZ6YeN5a6a5ZCRJywgJ+e4ruWvq+mHjeWumuWQkScpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+agh+mimOe8qeWGmScsICfmqJnpoYznuK7lr6snKSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRhZzogd2luZG93LndnVUxTKCfmi7zlhpnph43lrprlkJEnLCAn5ou85a+r6YeN5a6a5ZCRJyksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5qCH6aKY55qE5YW25LuW5LiN5ZCM5ou85YaZJywgJ+aomemhjOeahOWFtuS7luS4jeWQjOaLvOWvqycpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGFnOiB3aW5kb3cud2dVTFMoJ+mUmeWtl+mHjeWumuWQkScsICfpjK/lrZfph43lrprlkJEnKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCfnuqDmraPmoIfpopjnmoTluLjop4HplJnor6/mi7zlhpnmiJbor6/mpI0nLCAn57O+5q2j5qiZ6aGM55qE5bi46KaL6Yyv6Kqk5ou85a+r5oiW6Kqk5qSNJyksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0YWc6IHdpbmRvdy53Z1VMUygn5pen5ZCN6YeN5a6a5ZCRJywgJ+iIiuWQjemHjeWumuWQkScpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5bCG5LqL54mp5pep5YmN55qE5ZCN56ew5byV5a+86Iez5pu05pS55ZCO55qE5Li76aKYJyxcblx0XHRcdFx0XHRcdCflsIfkuovnianml6nliY3nmoTlkI3nqLHlvJXlsI7oh7Pmm7TmlLnlvoznmoTkuLvpoYwnXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRhZzogJ+WFqOWQjemHjeWumuWQkScsXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5qCH6aKY55qE5a6M5pW05oiW5pu05a6M5pW05ZCN56ewJywgJ+aomemhjOeahOWujOaVtOaIluabtOWujOaVtOWQjeeosScpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGFnOiAn55+t5ZCN6YeN5a6a5ZCRJyxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+WujOaVtOagh+mimOWQjeensOaIluS6uueJqeWFqOWQjeeahOmDqOWIhuOAgeS4jeWujOaVtOeahOWQjeensOaIlueugOensCcsXG5cdFx0XHRcdFx0XHQn5a6M5pW05qiZ6aGM5ZCN56ix5oiW5Lq654mp5YWo5ZCN55qE6YOo5YiG44CB5LiN5a6M5pW055qE5ZCN56ix5oiW57Ch56ixJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0YWc6ICflp5PmsI/ph43lrprlkJEnLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiAn5Lq654mp5aeT5rCPJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRhZzogJ+WQjeWtl+mHjeWumuWQkScsXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246ICfkurrniankurrlkI0nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGFnOiAn5pys5ZCN6YeN5a6a5ZCRJyxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogJ+S6uueJqeacrOWQjScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0YWc6ICfpnZ7kuK3mlofph43lrprlkJEnLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+mdnuS4reaWh+agh+mimCcsICfpnZ7kuK3mlofmqJnpoYwnKSxcblx0XHRcdFx0XHRzdWJncm91cDogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRuYW1lOiAnYWx0TGFuZ0Zyb20nLFxuXHRcdFx0XHRcdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0XHRcdFx0XHRsYWJlbDogJ+acrOmHjeaWsOWwjuWQkeeahOiqnuiogO+8iOWPr+mBuO+8iScsXG5cdFx0XHRcdFx0XHRcdHRvb2x0aXA6XG5cdFx0XHRcdFx0XHRcdFx0J+i8uOWFpemHjeaWsOWwjuWQkeWQjeeoseaJgOS9v+eUqOiqnuiogOeahElTTyA2Mznku6PnorzvvIzkvovlpoJlbuS7o+ihqOiLseiqnu+8jOS7o+eivOWPr+WPg+imiyBUZW1wbGF0ZTpJU09fNjM5X25hbWUnLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRdLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGFnOiAn5pel5paH6YeN5a6a5ZCRJyxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCfml6Xor63lkI3np7AnLCAn5pel6Kqe5ZCN56ixJyksXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0a2V5OiAn5YG255So5qih5p2/Jyxcblx0XHRcdHZhbHVlOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0YWc6ICfop5LoibLph43lrprlkJEnLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+eUteinhuWJp+OAgeeUteW9seOAgeS5puexjeetieS9nOWTgeeahOinkuiJsicsICfpm7voppbliofjgIHpm7vlvbHjgIHmm7jnsY3nrYnkvZzlk4HnmoTop5LoibInKSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRhZzogd2luZG93LndnVUxTKCfnq6DoioLph43lrprlkJEnLCAn56ug56+A6YeN5a6a5ZCRJyksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5a+85ZCR6Iez6L6D6auY5a+G5bqm57uE57uH55qE6aG16Z2iJywgJ+WwjuWQkeiHs+i8g+mrmOWvhuW6pue1hOe5lOeahOmggemdoicpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGFnOiAn5YiX6KGo6YeN5a6a5ZCRJyxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCflr7zlkJHoh7PkvY7lr4bluqbnmoTliJfooagnLCAn5bCO5ZCR6Iez5L2O5a+G5bqm55qE5YiX6KGoJyksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0YWc6ICflj6/og73mgKfph43lrprlkJEnLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5a+85ZCR6Iez5b2T5YmN5o+Q5L6b5YaF5a655pu05Li66K+m5bC955qE55uu5qCH6aG16Z2iJyxcblx0XHRcdFx0XHRcdCflsI7lkJHoh7PnlbbliY3mj5Dkvpvlhaflrrnmm7TngrroqbPnm6HnmoTnm67mqJnpoIHpnaInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRhZzogd2luZG93LndnVUxTKCflhbPogZTlrZfph43lrprlkJEnLCAn6Zec6IGv5a2X6YeN5a6a5ZCRJyksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5qCH6aKY5ZCN56ew5YWz6IGU5a2XJywgJ+aomemhjOWQjeeosemXnOiBr+WtlycpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGFnOiB3aW5kb3cud2dVTFMoJ+adoeebruivt+axgumHjeWumuWQkScsICfmop3nm67oq4vmsYLph43lrprlkJEnKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCfpnIDopoHni6znq4vmnaHnm67nmoTpobXpnaInLCAn6ZyA6KaB542o56uL5qKd55uu55qE6aCB6Z2iJyksXG5cdFx0XHRcdFx0c3ViZ3JvdXA6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bmFtZTogJ3JlcUFydGljbGVMYW5nJyxcblx0XHRcdFx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0XHRcdFx0bGFiZWw6ICflpJboqp7oqp7oqIDku6PnorzvvJonLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiAn5L2/55SoSVNPIDYzOeS7o+eivO+8jOWPr+WPg+imiyBUZW1wbGF0ZTpJU09fNjM5X25hbWUnLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bmFtZTogJ3JlcUFydGljbGVUaXRsZScsXG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiAn5aSW6Kqe6aCB6Z2i5ZCN56ix77yaJyxcblx0XHRcdFx0XHRcdFx0c2l6ZTogNjAsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdF0sXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0YWc6IHdpbmRvdy53Z1VMUygn5b+r5o235pa55byP6YeN5a6a5ZCRJywgJ+aNt+W+kemHjeWumuWQkScpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+acieWFveaho+ahiOmmhuW/q+aNt+aWueW8jycsICfmnInnjbjmqpTmoYjppKjlv6vmjbfmlrnlvI8nKSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRrZXk6IHdpbmRvdy53Z1VMUygn6bKc55So5qih5p2/JywgJ+murueUqOaooeadvycpLFxuXHRcdFx0dmFsdWU6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRhZzogd2luZG93LndnVUxTKCfor43nu4Tph43lrprlkJEnLCAn6Kme57WE6YeN5a6a5ZCRJyksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCflsIbor43nu4Qv6K+N57uEL+aIkOivreaMh+WQkeWIh+mimOeahOadoeebruWPiuaBsOW9k+eroOiKgicsXG5cdFx0XHRcdFx0XHQn5bCH6Kme57WEL+ipnue1hC/miJDoqp7mjIflkJHliIfpoYznmoTmop3nm67lj4rmgbDnlbbnq6Dnr4AnXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRhZzogd2luZG93LndnVUxTKCfmtojmrafkuYnpobXph43lrprlkJEnLCAn5raI5q2n576p6aCB6YeN5a6a5ZCRJyksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn5oyH5ZCR5raI5q2n5LmJ6aG1JywgJ+aMh+WQkea2iOatp+e+qemggScpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGFnOiAn5Z+f5ZCN6YeN5a6a5ZCRJyxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCfln5/lkI0nLCAn57ay5Z+f5ZCN56ixJyksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0YWc6ICflubTku6Pph43lrprlkJEnLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB3aW5kb3cud2dVTFMoJ+S6juW5tOS7veadoeebruWvvOWQkeiHs+W5tOS7o+adoeebricsICfmlrzlubTku73mop3nm67lsI7lkJHoh7PlubTku6Pmop3nm64nKSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRhZzogd2luZG93LndnVUxTKCfnlKjmiLfmoYbmqKHmnb/ph43lrprlkJEnLCAn55So5oi25qGG5qih5p2/6YeN5a6a5ZCRJyksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IHdpbmRvdy53Z1VMUygn55So5oi35qGG5qih5p2/JywgJ+eUqOaItuahhuaooeadvycpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGFnOiAn6YeN5a6a5ZCR5qih5p2/55So6YeN5a6a5ZCRJyxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCflr7zlkJHoh7Pph43lrprlkJHmqKHmnb8nLCAn5bCO5ZCR6Iez6YeN5a6a5ZCR5qih5p2/JyksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0YWc6ICdFWElG6YeN5a6a5ZCRJyxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogd2luZG93LndnVUxTKCdKUEVH5Zu+5YOP5paH5Lu25YyF5ZCrRVhJRuS/oeaBrycsICdKUEVH5ZyW5qqU5YyF5ZCrRVhJRuizh+ioiicpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRdO1xuXHQvLyBtYWludGVuYW5jZSB0YWdzIGZvciBGSUxFUyBzdGFydCBoZXJlXG5cdFR3aW5rbGUudGFnLmZpbGVMaXN0ID0gW1xuXHRcdHtcblx0XHRcdGtleTogd2luZG93LndnVUxTKCfokZfkvZzmnYPlkozmnaXmupDpl67popjmoIfnrb4nLCAn6JGX5L2c5qyK5ZKM5L6G5rqQ5ZWP6aGM5qiZ57GkJyksXG5cdFx0XHR2YWx1ZTogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IGB7e05vbi1mcmVlIHJlZHVjZX1977yaJHt3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn6Z2e5L2O5YiG6L6o546H55qE5ZCI55CG5L2/55So5Zu+5YOP77yI5oiW6L+H6ZW/55qE6Z+z6aKR5Ymq6L6R562J77yJJyxcblx0XHRcdFx0XHRcdCfpnZ7kvY7op6PmnpDluqbnmoTlkIjnkIbkvb/nlKjlnJblg4/vvIjmiJbpgY7plbfnmoTpn7PpoLvliarovK/nrYnvvIknXG5cdFx0XHRcdFx0KX1gLFxuXHRcdFx0XHRcdHZhbHVlOiAnTm9uLWZyZWUgcmVkdWNlJyxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRrZXk6IHdpbmRvdy53Z1VMUygn5riF55CG5qCH562+JywgJ+a4heeQhuaomeexpCcpLFxuXHRcdFx0dmFsdWU6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBge3tXYXRlcm1hcmt9fe+8miR7d2luZG93LndnVUxTKCflm77lg4/ljIXlkKvkuobmsLTljbAnLCAn5ZyW5YOP5YyF5ZCr5LqG5rWu5rC05Y2wJyl9YCxcblx0XHRcdFx0XHR2YWx1ZTogJ1dhdGVybWFyaycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogYHt7UmVuYW1lIG1lZGlhfX3vvJoke3dpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfmlofku7blupTor6XmoLnmja7mlofku7blkI3np7DmjIflvJXooqvph43lkb3lkI0nLFxuXHRcdFx0XHRcdFx0J+aqlOahiOaHieipsuagueaTmuaqlOahiOWQjeeoseaMh+W8leiiq+mHjeaWsOWRveWQjSdcblx0XHRcdFx0XHQpfWAsXG5cdFx0XHRcdFx0dmFsdWU6ICdSZW5hbWUgbWVkaWEnLFxuXHRcdFx0XHRcdHN1Ymdyb3VwOiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRcdFx0XHRcdG5hbWU6ICdyZW5hbWVtZWRpYU5ld25hbWUnLFxuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmlrDlkI3np7DvvJonLCAn5paw5ZCN56ix77yaJyksXG5cdFx0XHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUygn6L6T5YWl5Zu+5YOP55qE5paw5ZCN56ew77yI5Y+v6YCJ77yJJywgJ+i8uOWFpeWcluWDj+eahOaWsOWQjeeose+8iOWPr+mBuO+8iScpLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdFx0XHRcdFx0bmFtZTogJ3JlbmFtZW1lZGlhUmVhc29uJyxcblx0XHRcdFx0XHRcdFx0bGFiZWw6ICfljp/lm6DvvJonLFxuXHRcdFx0XHRcdFx0XHR0b29sdGlwOiB3aW5kb3cud2dVTFMoJ+i+k+WFpemHjeWRveWQjeeahOWOn+WboO+8iOWPr+mAie+8iScsICfovLjlhaXph43mlrDlkb3lkI3nmoTljp/lm6DvvIjlj6/pgbjvvIknKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBge3tTaG91bGQgYmUgU1ZHfX3vvJoke3dpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCdQTkfjgIFHSUbjgIFKUEVH5paH5Lu25bqU6K+l6YeN5Yi25oiQ55+i6YeP5Zu+5b2iJyxcblx0XHRcdFx0XHRcdCdQTkfjgIFHSUbjgIFKUEVH5qqU5qGI5oeJ6Kmy6YeN6KO95oiQ5ZCR6YeP5ZyW5b2iJ1xuXHRcdFx0XHRcdCl9YCxcblx0XHRcdFx0XHR2YWx1ZTogJ1Nob3VsZCBiZSBTVkcnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGtleTogd2luZG93LndnVUxTKCfmlofku7blj5bku6PmoIfnrb4nLCAn5qqU5qGI5Y+W5Luj5qiZ57GkJyksXG5cdFx0XHR2YWx1ZTogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IGB7e09ic29sZXRlfX3vvJoke3dpbmRvdy53Z1VMUygn5pyJ5paw54mI5pys5Y+v55So55qE6L+H5pe25paH5Lu2JywgJ+acieaWsOeJiOacrOWPr+eUqOeahOmBjuaZguaqlOahiCcpfWAsXG5cdFx0XHRcdFx0dmFsdWU6ICdPYnNvbGV0ZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogYHt7VmVjdG9yIHZlcnNpb24gYXZhaWxhYmxlfX3vvJoke3dpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfmnInnn6Lph4/lm77lvaLlj6/nlKjnmoTpnZ7nn6Lph4/lm77lvaLmlofku7YnLFxuXHRcdFx0XHRcdFx0J+acieWQkemHj+WcluW9ouWPr+eUqOeahOmdnuWQkemHj+WcluW9ouaqlOahiCdcblx0XHRcdFx0XHQpfWAsXG5cdFx0XHRcdFx0dmFsdWU6ICdWZWN0b3IgdmVyc2lvbiBhdmFpbGFibGUnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHRcdGJ1aWxkRmlsZW5hbWU6IHRydWUsXG5cdFx0fSxcblx0XTtcblx0VHdpbmtsZS50YWcuY2FsbGJhY2tzID0ge1xuXHRcdGFydGljbGU6IChwYWdlb2JqKSA9PiB7XG5cdFx0XHQvLyBSZW1vdmUgdGFncyB0aGF0IGJlY29tZSBzdXBlcmZsdW91cyB3aXRoIHRoaXMgYWN0aW9uXG5cdFx0XHRsZXQgcGFnZVRleHQgPSBwYWdlb2JqXG5cdFx0XHRcdC5nZXRQYWdlVGV4dCgpXG5cdFx0XHRcdC5yZXBsYWNlKFxuXHRcdFx0XHRcdC9cXHtcXHtcXHMqKFtObl1ldyB1bnJldmlld2VkIGFydGljbGV8W1V1XW5yZXZpZXdlZHxbVXVdc2Vyc3BhY2UgZHJhZnQpXFxzKihcXHwoPzpcXHtcXHtbXnt9XSpcXH1cXH18W157fV0pKik/XFx9XFx9XFxzKi9nLFxuXHRcdFx0XHRcdCcnXG5cdFx0XHRcdCk7XG5cdFx0XHRjb25zdCBwYXJhbXMgPSBwYWdlb2JqLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0LyoqXG5cdFx0XHQgKiBTYXZlcyB0aGUgcGFnZSBmb2xsb3dpbmcgdGhlIHJlbW92YWwgb2YgdGFncyBpZiBhbnkuIFRoZSBsYXN0IHN0ZXAuXG5cdFx0XHQgKiBDYWxsZWQgZnJvbSByZW1vdmVUYWdzKClcblx0XHRcdCAqL1xuXHRcdFx0Y29uc3QgcG9zdFJlbW92YWwgPSAoKSA9PiB7XG5cdFx0XHRcdGlmIChwYXJhbXMudGFnc1RvUmVtb3ZlLmxlbmd0aCkge1xuXHRcdFx0XHRcdC8vIFJlbW92ZSBlbXB0eSB7e211bHRpcGxlIGlzc3Vlc319IGlmIGZvdW5kXG5cdFx0XHRcdFx0cGFnZVRleHQgPSBwYWdlVGV4dC5yZXBsYWNlKFxuXHRcdFx0XHRcdFx0L1xce1xceyhtdWx0aXBsZSA/aXNzdWVzfGFydGljbGUgP2lzc3Vlc3xtaXxhaXxpc3N1ZXN85aSa5YCL5ZWP6aGMfOWkmuS4qumXrumimHzllY/poYzmop3nm6586Zeu6aKY5p2h55uufOaVuOWAi+WVj+mhjHzmlbDkuKrpl67popgpXFxzKlxcfFxccypcXH1cXH1cXG4/L2ltLFxuXHRcdFx0XHRcdFx0Jydcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdC8vIFJlbW92ZSBzaW5nbGUtZWxlbWVudCB7e211bHRpcGxlIGlzc3Vlc319IGlmIGZvdW5kXG5cdFx0XHRcdFx0cGFnZVRleHQgPSBwYWdlVGV4dC5yZXBsYWNlKFxuXHRcdFx0XHRcdFx0L1xce1xceyg/Om11bHRpcGxlID9pc3N1ZXN8YXJ0aWNsZSA/aXNzdWVzfG1pfGFpfGlzc3Vlc3zlpJrlgIvllY/poYx85aSa5Liq6Zeu6aKYfOWVj+mhjOaineebrnzpl67popjmnaHnm6585pW45YCL5ZWP6aGMfOaVsOS4qumXrumimClcXHMqXFx8XFxzKihcXHtcXHsoPzpcXHtcXHtbXnt9XSpcXH1cXH18W157fV0pK1xcfVxcfSlcXHMqXFx9XFx9L2ltLFxuXHRcdFx0XHRcdFx0JyQxJ1xuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gQnVpbGQgZWRpdCBzdW1tYXJ5XG5cdFx0XHRcdGNvbnN0IG1ha2VTZW50ZW5jZSA9IChhcnJheSkgPT4ge1xuXHRcdFx0XHRcdGlmIChhcnJheS5sZW5ndGggPCAzKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gYXJyYXkuam9pbign5ZKMJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvbnN0IGxhc3QgPSBhcnJheS5wb3AoKTtcblx0XHRcdFx0XHRyZXR1cm4gYCR7YXJyYXkuam9pbign44CBJyl95ZKMJHtsYXN0fWA7XG5cdFx0XHRcdH07XG5cdFx0XHRcdGNvbnN0IG1ha2VUZW1wbGF0ZUxpbmsgPSAodGFnKSA9PiB7XG5cdFx0XHRcdFx0bGV0IHRleHQgPSAne3tbWyc7XG5cdFx0XHRcdFx0Ly8gaWYgaXQgaXMgYSBjdXN0b20gdGFnIHdpdGggYSBwYXJhbWV0ZXJcblx0XHRcdFx0XHRpZiAodGFnLmluY2x1ZGVzKCd8JykpIHtcblx0XHRcdFx0XHRcdHRhZyA9IHRhZy5zbGljZSgwLCB0YWcuaW5kZXhPZignfCcpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGV4dCArPSB0YWcuaW5jbHVkZXMoJzonKSA/IHRhZyA6IGBUZW1wbGF0ZToke3RhZ318JHt0YWd9YDtcblx0XHRcdFx0XHRyZXR1cm4gYCR7dGV4dH1dXX19YDtcblx0XHRcdFx0fTtcblx0XHRcdFx0bGV0IHN1bW1hcnlUZXh0O1xuXHRcdFx0XHRjb25zdCBhZGRlZFRhZ3MgPSBwYXJhbXMudGFncy5tYXAobWFrZVRlbXBsYXRlTGluayk7XG5cdFx0XHRcdGNvbnN0IHJlbW92ZWRUYWdzID0gcGFyYW1zLnRhZ3NUb1JlbW92ZS5tYXAobWFrZVRlbXBsYXRlTGluayk7XG5cdFx0XHRcdGlmIChhZGRlZFRhZ3MubGVuZ3RoKSB7XG5cdFx0XHRcdFx0c3VtbWFyeVRleHQgPSBg5Yqg5YWlJHttYWtlU2VudGVuY2UoYWRkZWRUYWdzKX1gO1xuXHRcdFx0XHRcdHN1bW1hcnlUZXh0ICs9IHJlbW92ZWRUYWdzLmxlbmd0aCA/IGDkuKbnp7vpmaQke21ha2VTZW50ZW5jZShyZW1vdmVkVGFncyl9YCA6ICcnO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN1bW1hcnlUZXh0ID0gYOenu+mZpCR7bWFrZVNlbnRlbmNlKHJlbW92ZWRUYWdzKX1gO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN1bW1hcnlUZXh0ICs9IHdpbmRvdy53Z1VMUygn5qCH6K6wJywgJ+aomeiomCcpO1xuXHRcdFx0XHRpZiAocGFyYW1zLnJlYXNvbikge1xuXHRcdFx0XHRcdHN1bW1hcnlUZXh0ICs9IGDvvJoke3BhcmFtcy5yZWFzb259YDtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBhdm9pZCB0cnVuY2F0ZWQgc3VtbWFyaWVzXG5cdFx0XHRcdGlmIChzdW1tYXJ5VGV4dC5sZW5ndGggPiA0OTkpIHtcblx0XHRcdFx0XHRzdW1tYXJ5VGV4dCA9IHN1bW1hcnlUZXh0LnJlcGxhY2UoL1xcW1xcW1tefF0rXFx8KFteXFxdXSspXFxdXFxdL2csICckMScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHBhZ2VvYmouc2V0UGFnZVRleHQocGFnZVRleHQpO1xuXHRcdFx0XHRwYWdlb2JqLnNldEVkaXRTdW1tYXJ5KHN1bW1hcnlUZXh0KTtcblx0XHRcdFx0cGFnZW9iai5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRcdHBhZ2VvYmouc2V0V2F0Y2hsaXN0KFR3aW5rbGUuZ2V0UHJlZignd2F0Y2hUYWdnZWRQYWdlcycpKTtcblx0XHRcdFx0cGFnZW9iai5zZXRNaW5vckVkaXQoVHdpbmtsZS5nZXRQcmVmKCdtYXJrVGFnZ2VkUGFnZXNBc01pbm9yJykpO1xuXHRcdFx0XHRwYWdlb2JqLnNldENyZWF0ZU9wdGlvbignbm9jcmVhdGUnKTtcblx0XHRcdFx0cGFnZW9iai5zYXZlKCgpID0+IHtcblx0XHRcdFx0XHQvLyBzcGVjaWFsIGZ1bmN0aW9ucyBmb3IgbWVyZ2UgdGFnc1xuXHRcdFx0XHRcdGlmIChwYXJhbXMubWVyZ2VSZWFzb24pIHtcblx0XHRcdFx0XHRcdC8vIHBvc3QgdGhlIHJhdGlvbmFsZSBvbiB0aGUgdGFsayBwYWdlIChvbmx5IG9wZXJhdGVzIGluIG1haW4gbmFtZXNwYWNlKVxuXHRcdFx0XHRcdFx0Y29uc3QgdGFsa3BhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0XHRcdFx0XHRgVGFsazoke3BhcmFtcy5kaXNjdXNzQXJ0aWNsZX1gLFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WwhueQhueUsei0tOi/m+iuqOiuuumhtScsICflsIfnkIbnlLHosrzpgLLoqI7oq5bpoIEnKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHRhbGtwYWdlLnNldE5ld1NlY3Rpb25UZXh0KGAke3BhcmFtcy5tZXJnZVJlYXNvbi50cmltKCl9IH5+YC5jb25jYXQoJ35+JykpO1xuXHRcdFx0XHRcdFx0dGFsa3BhZ2Uuc2V0TmV3U2VjdGlvblRpdGxlKGDor7fmsYLkuI5bWyR7cGFyYW1zLm5vbkRpc2N1c3NBcnRpY2xlfV1d5ZCI5bm2YCk7XG5cdFx0XHRcdFx0XHR0YWxrcGFnZS5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRcdFx0XHR0YWxrcGFnZS5zZXRXYXRjaGxpc3QoVHdpbmtsZS5nZXRQcmVmKCd3YXRjaE1lcmdlRGlzY3Vzc2lvbnMnKSk7XG5cdFx0XHRcdFx0XHR0YWxrcGFnZS5zZXRDcmVhdGVPcHRpb24oJ3JlY3JlYXRlJyk7XG5cdFx0XHRcdFx0XHR0YWxrcGFnZS5uZXdTZWN0aW9uKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwYXJhbXMubWVyZ2VUYWdPdGhlcikge1xuXHRcdFx0XHRcdFx0Ly8gdGFnIHRoZSB0YXJnZXQgcGFnZSBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0XHRcdGxldCBvdGhlclRhZ05hbWUgPSAnTWVyZ2UnO1xuXHRcdFx0XHRcdFx0aWYgKHBhcmFtcy5tZXJnZVRhZyA9PT0gJ01lcmdlIGZyb20nKSB7XG5cdFx0XHRcdFx0XHRcdG90aGVyVGFnTmFtZSA9ICdNZXJnZSB0byc7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHBhcmFtcy5tZXJnZVRhZyA9PT0gJ01lcmdlIHRvJykge1xuXHRcdFx0XHRcdFx0XHRvdGhlclRhZ05hbWUgPSAnTWVyZ2UgZnJvbSc7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjb25zdCBuZXdQYXJhbXMgPSB7XG5cdFx0XHRcdFx0XHRcdHRhZ3M6IFtvdGhlclRhZ05hbWVdLFxuXHRcdFx0XHRcdFx0XHR0YWdzVG9SZW1vdmU6IFtdLFxuXHRcdFx0XHRcdFx0XHR0YWdzVG9SZW1haW46IFtdLFxuXHRcdFx0XHRcdFx0XHRtZXJnZVRhcmdldDogTW9yZWJpdHMucGFnZU5hbWVOb3JtLFxuXHRcdFx0XHRcdFx0XHRkaXNjdXNzQXJ0aWNsZTogcGFyYW1zLmRpc2N1c3NBcnRpY2xlLFxuXHRcdFx0XHRcdFx0XHR0YWxrRGlzY3Vzc2lvblRpdGxlOiBwYXJhbXMudGFsa0Rpc2N1c3Npb25UaXRsZSxcblx0XHRcdFx0XHRcdFx0dGFsa0Rpc2N1c3Npb25UaXRsZUxpbmtlZDogcGFyYW1zLnRhbGtEaXNjdXNzaW9uVGl0bGVMaW5rZWQsXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0Y29uc3Qgb3RoZXJwYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRcdFx0cGFyYW1zLm1lcmdlVGFyZ2V0LFxuXHRcdFx0XHRcdFx0XHRgJHt3aW5kb3cud2dVTFMoJ+agh+iusOWFtuS7lumhtemdou+8iCcsICfmqJnoqJjlhbbku5bpoIHpnaLvvIgnKSArIHBhcmFtcy5tZXJnZVRhcmdldH3vvIlgXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0b3RoZXJwYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhuZXdQYXJhbXMpO1xuXHRcdFx0XHRcdFx0b3RoZXJwYWdlLmxvYWQoVHdpbmtsZS50YWcuY2FsbGJhY2tzLmFydGljbGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBzcGVjaWFsIGZ1bmN0aW9ucyBmb3IgcmVxdWVzdGVkIG1vdmUgdGFnc1xuXHRcdFx0XHRcdGlmIChwYXJhbXMubW92ZVJlYXNvbikge1xuXHRcdFx0XHRcdFx0Ly8gcG9zdCB0aGUgcmF0aW9uYWxlIG9uIHRoZSB0YWxrIHBhZ2UgKG9ubHkgb3BlcmF0ZXMgaW4gbWFpbiBuYW1lc3BhY2UpXG5cdFx0XHRcdFx0XHRsZXQgbW92ZVRhbGtwYWdlVGV4dCA9ICdcXG5cXG57eycuY29uY2F0KCdzdWJzdDonLCBgUk18MT0ke3BhcmFtcy5tb3ZlUmVhc29uLnRyaW0oKX1gKTtcblx0XHRcdFx0XHRcdGlmIChwYXJhbXMubW92ZVRhcmdldCkge1xuXHRcdFx0XHRcdFx0XHRtb3ZlVGFsa3BhZ2VUZXh0ICs9IGB8Mj0ke3BhcmFtcy5tb3ZlVGFyZ2V0fWA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtb3ZlVGFsa3BhZ2VUZXh0ICs9ICd9fSc7XG5cdFx0XHRcdFx0XHRjb25zdCBtb3ZlVGFsa3BhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0XHRcdFx0XHRgVGFsazoke3BhcmFtcy5kaXNjdXNzQXJ0aWNsZX1gLFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WwhueQhueUsei0tOi/m+iuqOiuuumhtScsICflsIfnkIbnlLHosrzpgLLoqI7oq5bpoIEnKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdG1vdmVUYWxrcGFnZS5zZXRBcHBlbmRUZXh0KG1vdmVUYWxrcGFnZVRleHQpO1xuXHRcdFx0XHRcdFx0bW92ZVRhbGtwYWdlLnNldEVkaXRTdW1tYXJ5KFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+ivt+axguenu+WKqCcsICfoq4vmsYLnp7vli5UnKSArXG5cdFx0XHRcdFx0XHRcdFx0KHBhcmFtcy5tb3ZlVGFyZ2V0ID8gYOiHs1tbJHtwYXJhbXMubW92ZVRhcmdldH1dXWAgOiAnJylcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRtb3ZlVGFsa3BhZ2Uuc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0XHRcdFx0bW92ZVRhbGtwYWdlLnNldENyZWF0ZU9wdGlvbigncmVjcmVhdGUnKTtcblx0XHRcdFx0XHRcdG1vdmVUYWxrcGFnZS5hcHBlbmQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRpZiAocGFyYW1zLnBhdHJvbCkge1xuXHRcdFx0XHRcdHBhZ2VvYmoucGF0cm9sKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHQvKipcblx0XHRcdCAqIFJlbW92ZXMgdGhlIGV4aXN0aW5nIHRhZ3MgdGhhdCB3ZXJlIGRlc2VsZWN0ZWQgKGlmIGFueSlcblx0XHRcdCAqIENhbGxzIHBvc3RSZW1vdmFsKCkgd2hlbiBkb25lXG5cdFx0XHQgKi9cblx0XHRcdGNvbnN0IHJlbW92ZVRhZ3MgPSAoKSA9PiB7XG5cdFx0XHRcdGlmIChwYXJhbXMudGFnc1RvUmVtb3ZlLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdHBvc3RSZW1vdmFsKCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdE1vcmViaXRzLnN0YXR1cy5pbmZvKFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5L+h5oGvJywgJ+izh+ioiicpLFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn56e76Zmk5Y+W5raI6YCJ5oup55qE5bey5a2Y5Zyo5qCH6K6wJywgJ+enu+mZpOWPlua2iOmBuOaTh+eahOW3suWtmOWcqOaomeiomCcpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGNvbnN0IGdldFJlZGlyZWN0c0ZvciA9IFtdO1xuXHRcdFx0XHQvLyBSZW1vdmUgdGhlIHRhZ3MgZnJvbSB0aGUgcGFnZSB0ZXh0LCBpZiBmb3VuZCBpbiBpdHMgcHJvcGVyIG5hbWUsXG5cdFx0XHRcdC8vIG90aGVyd2lzZSBtb3ZlcyBpdCB0byBgZ2V0UmVkaXJlY3RzRm9yYCBhcnJheSBlYXJtYXJraW5nIGl0IGZvclxuXHRcdFx0XHQvLyBsYXRlciByZW1vdmFsXG5cdFx0XHRcdGZvciAoY29uc3QgdGFnIG9mIHBhcmFtcy50YWdzVG9SZW1vdmUpIHtcblx0XHRcdFx0XHRjb25zdCB0YWdfcmUgPSBuZXcgUmVnRXhwKGBcXFxce1xcXFx7JHtNb3JlYml0cy5wYWdlTmFtZVJlZ2V4KHRhZyl9XFxcXHMqKFxcXFx8W159XSspP1xcXFx9XFxcXH1cXFxcbj9gKTtcblx0XHRcdFx0XHRpZiAodGFnX3JlLnRlc3QocGFnZVRleHQpKSB7XG5cdFx0XHRcdFx0XHRwYWdlVGV4dCA9IHBhZ2VUZXh0LnJlcGxhY2UodGFnX3JlLCAnJyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGdldFJlZGlyZWN0c0ZvcltnZXRSZWRpcmVjdHNGb3IubGVuZ3RoXSA9IGBUZW1wbGF0ZToke3RhZ31gO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWdldFJlZGlyZWN0c0Zvci5sZW5ndGgpIHtcblx0XHRcdFx0XHRwb3N0UmVtb3ZhbCgpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBSZW1vdmUgdGFncyB3aGljaCBhcHBlYXIgaW4gcGFnZSB0ZXh0IGFzIHJlZGlyZWN0c1xuXHRcdFx0XHRjb25zdCBhcGkgPSBuZXcgTW9yZWJpdHMud2lraS5hcGkoXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfojrflj5bmqKHmnb/ph43lrprlkJEnLCAn5Y+W5b6X5qih5p2/6YeN5paw5bCO5ZCRJyksXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YWN0aW9uOiAncXVlcnknLFxuXHRcdFx0XHRcdFx0cHJvcDogJ2xpbmtzaGVyZScsXG5cdFx0XHRcdFx0XHR0aXRsZXM6IGdldFJlZGlyZWN0c0Zvci5qb2luKCd8JyksXG5cdFx0XHRcdFx0XHRyZWRpcmVjdHM6IDEsXG5cdFx0XHRcdFx0XHRsaG5hbWVzcGFjZTogJzEwJyxcblx0XHRcdFx0XHRcdGxoc2hvdzogJ3JlZGlyZWN0Jyxcblx0XHRcdFx0XHRcdGxobGltaXQ6ICdtYXgnLCAvLyA1MDAgaXMgbWF4IGZvciBub3JtYWwgdXNlcnMsIDUwMDAgZm9yIGJvdHMgYW5kIHN5c29wc1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0KGFwaW9iaikgPT4ge1xuXHRcdFx0XHRcdFx0JChhcGlvYmoucmVzcG9uc2VYTUwpXG5cdFx0XHRcdFx0XHRcdC5maW5kKCdwYWdlJylcblx0XHRcdFx0XHRcdFx0LmVhY2goKF9pZHgsIHBhZ2UpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRsZXQgcmVtb3ZlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdCQocGFnZSlcblx0XHRcdFx0XHRcdFx0XHRcdC5maW5kKCdsaCcpXG5cdFx0XHRcdFx0XHRcdFx0XHQuZWFjaCgoX2luZGV4LCBlbGVtZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IHRhZyA9ICQoZWxlbWVudCkuYXR0cigndGl0bGUnKS5zbGljZSg5KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgdGFnX3JlID0gbmV3IFJlZ0V4cChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRgXFxcXHtcXFxceyR7TW9yZWJpdHMucGFnZU5hbWVSZWdleChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRhZ1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCl9XFxcXHMqKFxcXFx8KD86XFxcXHtcXFxce1tee31dKlxcXFx9XFxcXH18W157fV0pKik/XFxcXH1cXFxcfVxcXFxuP2Bcblx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKHRhZ19yZS50ZXN0KHBhZ2VUZXh0KSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBhZ2VUZXh0ID0gcGFnZVRleHQucmVwbGFjZSh0YWdfcmUsICcnKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZW1vdmVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7IC8vIGJyZWFrIG91dCBvZiAkLmVhY2hcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIXJlbW92ZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdE1vcmViaXRzLnN0YXR1cy53YXJuKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+S/oeaBrycsICfos4foqIonKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfml6Dms5XlnKjpobXpnaLkuIrmib7liLB7eycsICfnhKHms5XlnKjpoIHpnaLkuIrmib7liLB7eycpICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkKHBhZ2UpLmF0dHIoJ3RpdGxlJykuc2xpY2UoOSkgK1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygnfX3igKbigKbot7Pov4cnLCAnfX3igKbigKbot7PpgY4nKVxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0cG9zdFJlbW92YWwoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cdFx0XHRcdGFwaS5wb3N0KCk7XG5cdFx0XHR9O1xuXHRcdFx0aWYgKCFwYXJhbXMudGFncy5sZW5ndGgpIHtcblx0XHRcdFx0cmVtb3ZlVGFncygpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRsZXQgdGFnUmU7XG5cdFx0XHRsZXQgdGFnVGV4dCA9ICcnO1xuXHRcdFx0bGV0IHRhZ3MgPSBbXTtcblx0XHRcdGNvbnN0IGdyb3VwYWJsZVRhZ3MgPSBbXTtcblx0XHRcdGNvbnN0IGdyb3VwYWJsZUV4aXN0aW5nVGFncyA9IFtdO1xuXHRcdFx0Ly8gRXhlY3V0ZXMgZmlyc3Q6IGFkZGl0aW9uIG9mIHNlbGVjdGVkIHRhZ3Ncblx0XHRcdC8qKlxuXHRcdFx0ICogVXBkYXRlcyBgdGFnVGV4dGAgd2l0aCB0aGUgc3ludGF4IG9mIGB0YWdOYW1lYCB0ZW1wbGF0ZSB3aXRoIGl0cyBwYXJhbWV0ZXJzXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcblx0XHRcdCAqL1xuXHRcdFx0Y29uc3QgYWRkVGFnID0gKHRhZ05hbWUpID0+IHtcblx0XHRcdFx0bGV0IGN1cnJlbnRUYWcgPSAnJztcblx0XHRcdFx0aWYgKHRhZ05hbWUgPT09ICdVbmNhdGVnb3JpemVkJyB8fCB0YWdOYW1lID09PSAnSW1wcm92ZSBjYXRlZ29yaWVzJykge1xuXHRcdFx0XHRcdHBhZ2VUZXh0ICs9IGBcXG5cXG57eyR7dGFnTmFtZX18dGltZT17e2AuY29uY2F0KCdzdWJzdDonLCAnI3RpbWU6Y319fX0nKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjdXJyZW50VGFnICs9IGB7eyR7dGFnTmFtZX1gO1xuXHRcdFx0XHRcdC8vIGZpbGwgaW4gb3RoZXIgcGFyYW1ldGVycywgYmFzZWQgb24gdGhlIHRhZ1xuXHRcdFx0XHRcdHN3aXRjaCAodGFnTmFtZSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnRXhwZXJ0IG5lZWRlZCc6XG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRUYWcgKz0gYHxzdWJqZWN0PSR7cGFyYW1zLmV4cGVydH1gO1xuXHRcdFx0XHRcdFx0XHRpZiAocGFyYW1zLmV4cGVydDIpIHtcblx0XHRcdFx0XHRcdFx0XHRjdXJyZW50VGFnICs9IGB8c3ViamVjdDI9JHtwYXJhbXMuZXhwZXJ0Mn1gO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChwYXJhbXMuZXhwZXJ0Mykge1xuXHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRUYWcgKz0gYHxzdWJqZWN0Mz0ke3BhcmFtcy5leHBlcnQzfWA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdNZXJnZSc6XG5cdFx0XHRcdFx0XHRjYXNlICdNZXJnZSB0byc6XG5cdFx0XHRcdFx0XHRjYXNlICdNZXJnZSBmcm9tJzpcblx0XHRcdFx0XHRcdFx0aWYgKHBhcmFtcy5tZXJnZVRhcmdldCkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIG5vcm1hbGl6ZSB0aGUgbWVyZ2UgdGFyZ2V0IGZvciBub3cgYW5kIGxhdGVyXG5cdFx0XHRcdFx0XHRcdFx0cGFyYW1zLm1lcmdlVGFyZ2V0ID0gTW9yZWJpdHMuc3RyaW5nLnRvVXBwZXJDYXNlRmlyc3RDaGFyKFxuXHRcdFx0XHRcdFx0XHRcdFx0cGFyYW1zLm1lcmdlVGFyZ2V0LnJlcGxhY2UoL18vZywgJyAnKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0Y3VycmVudFRhZyArPSBgfCR7cGFyYW1zLm1lcmdlVGFyZ2V0fWA7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gbGluayB0byB0aGUgY29ycmVjdCBzZWN0aW9uIG9uIHRoZSB0YWxrIHBhZ2UsIGZvciBhcnRpY2xlIHNwYWNlIG9ubHlcblx0XHRcdFx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHRcdFx0XHRtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpID09PSAwICYmXG5cdFx0XHRcdFx0XHRcdFx0XHQocGFyYW1zLm1lcmdlUmVhc29uIHx8IHBhcmFtcy5kaXNjdXNzQXJ0aWNsZSlcblx0XHRcdFx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICghcGFyYW1zLmRpc2N1c3NBcnRpY2xlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGRpc2N1c3NBcnRpY2xlIGlzIHRoZSBhcnRpY2xlIHdob3NlIHRhbGsgcGFnZSB3aWxsIGNvbnRhaW4gdGhlIGRpc2N1c3Npb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyYW1zLmRpc2N1c3NBcnRpY2xlID1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0YWdOYW1lID09PSAnTWVyZ2UgdG8nID8gcGFyYW1zLm1lcmdlVGFyZ2V0IDogbXcuY29uZmlnLmdldCgnd2dUaXRsZScpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBub25EaXNjdXNzQXJ0aWNsZSBpcyB0aGUgYXJ0aWNsZSB3aGljaCB3b24ndCBoYXZlIHRoZSBkaXNjdXNzaW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcmFtcy5ub25EaXNjdXNzQXJ0aWNsZSA9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGFnTmFtZSA9PT0gJ01lcmdlIHRvJyA/IG13LmNvbmZpZy5nZXQoJ3dnVGl0bGUnKSA6IHBhcmFtcy5tZXJnZVRhcmdldDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyYW1zLnRhbGtEaXNjdXNzaW9uVGl0bGUgPVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn6K+35rGC5LiOJywgJ+iri+axguiIhycpICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJhbXMubm9uRGlzY3Vzc0FydGljbGUgK1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5ZCI5bm2JywgJ+WQiOS9tScpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudFRhZyArPSBgfGRpc2N1c3M9VGFsazoke3BhcmFtcy5kaXNjdXNzQXJ0aWNsZX0jJHtwYXJhbXMudGFsa0Rpc2N1c3Npb25UaXRsZX1gO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ01pc3NpbmcgaW5mb3JtYXRpb24nOlxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VGFnICs9IGB8MT0ke3BhcmFtcy5taXNzaW5nSW5mb3JtYXRpb259YDtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdOb3RhYmlsaXR5Jzpcblx0XHRcdFx0XHRcdFx0aWYgKHBhcmFtcy5ub3RhYmlsaXR5ICE9PSAnbm9uZScpIHtcblx0XHRcdFx0XHRcdFx0XHRjdXJyZW50VGFnICs9IGB8Mz0ke3BhcmFtcy5ub3RhYmlsaXR5fWA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdSZXF1ZXN0ZWQgbW92ZSc6XG5cdFx0XHRcdFx0XHRcdGlmIChwYXJhbXMubW92ZVRhcmdldCkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIG5vcm1hbGl6ZSB0aGUgbW92ZSB0YXJnZXQgZm9yIG5vdyBhbmQgbGF0ZXJcblx0XHRcdFx0XHRcdFx0XHRwYXJhbXMubW92ZVRhcmdldCA9IE1vcmViaXRzLnN0cmluZy50b1VwcGVyQ2FzZUZpcnN0Q2hhcihcblx0XHRcdFx0XHRcdFx0XHRcdHBhcmFtcy5tb3ZlVGFyZ2V0LnJlcGxhY2UoL18vZywgJyAnKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0cGFyYW1zLmRpc2N1c3NBcnRpY2xlID0gbXcuY29uZmlnLmdldCgnd2dUaXRsZScpO1xuXHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRUYWcgKz0gYHwke3BhcmFtcy5tb3ZlVGFyZ2V0fWA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdTcGxpdCc6XG5cdFx0XHRcdFx0XHRcdGlmIChwYXJhbXMudGFyZ2V0MSkge1xuXHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRUYWcgKz0gYHwxPSR7cGFyYW1zLnRhcmdldDF9YDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAocGFyYW1zLnRhcmdldDIpIHtcblx0XHRcdFx0XHRcdFx0XHRjdXJyZW50VGFnICs9IGB8Mj0ke3BhcmFtcy50YXJnZXQyfWA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKHBhcmFtcy50YXJnZXQzKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y3VycmVudFRhZyArPSBgfDM9JHtwYXJhbXMudGFyZ2V0M31gO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ2xlYW51cCc6XG5cdFx0XHRcdFx0XHRcdGlmIChwYXJhbXMuY2xlYW51cFJlYXNvbikge1xuXHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRUYWcgKz0gYHxyZWFzb249JHtwYXJhbXMuY2xlYW51cFJlYXNvbn1gO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGN1cnJlbnRUYWcgKz0gJ3x0aW1lPXt7Jy5jb25jYXQoJ3N1YnN0OicsICcjdGltZTpjfX19fVxcbicpO1xuXHRcdFx0XHRcdHRhZ1RleHQgKz0gY3VycmVudFRhZztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdC8qKlxuXHRcdFx0ICogQWRkcyB0aGUgdGFncyB3aGljaCBnbyBvdXRzaWRlIHt7bXVsdGlwbGUgaXNzdWVzfX0sIGVpdGhlciBiZWNhdXNlXG5cdFx0XHQgKiB0aGVzZSB0YWdzIGFyZW4ndCBzdXBwb3J0ZWQgaW4ge3ttdWx0aXBsZSBpc3N1ZXN9fSBvciBiZWNhdXNlXG5cdFx0XHQgKiB7e211bHRpcGxlIGlzc3Vlc319IGlzIG5vdCBiZWluZyBhZGRlZCB0byB0aGUgcGFnZSBhdCBhbGxcblx0XHRcdCAqL1xuXHRcdFx0Y29uc3QgYWRkVW5ncm91cGVkVGFncyA9ICgpID0+IHtcblx0XHRcdFx0Zm9yIChjb25zdCB0YWcgb2YgdGFncykge1xuXHRcdFx0XHRcdGFkZFRhZyh0YWcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIEluc2VydCB0YWcgYWZ0ZXIgc2hvcnQgZGVzY3JpcHRpb24gb3IgYW55IGhhdG5vdGVzLFxuXHRcdFx0XHQvLyBhcyB3ZWxsIGFzIGRlbGV0aW9uL3Byb3RlY3Rpb24tcmVsYXRlZCB0ZW1wbGF0ZXNcblx0XHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2l0ZXh0LnBhZ2UocGFnZVRleHQpO1xuXHRcdFx0XHRjb25zdCB0ZW1wbGF0ZXNBZnRlciA9XG5cdFx0XHRcdFx0Ly8gUHJvdGVjdGlvbiB0ZW1wbGF0ZXNcblx0XHRcdFx0XHQvLyBDU0Rcblx0XHRcdFx0XHQvLyBBZkRcblx0XHRcdFx0XHRgJHtUd2lua2xlLmhhdG5vdGVSZWdleH1wcHxwcC0uKj98KD86RGVsZXRlfERiLXJlYXNvbnxEfERlbGV0ZWJlY2F1c2V8RGJ86YCf5YigfOmAn+WIqnxTcGVlZHl8U0R85b+r5YigfOW/q+WIqnxDU0QpfFtyc2FpZnRjbXZdZmR8dmZkLSg/OmJ8cXxzfHNvdXJjZXx2fHdpa3QpfCg/Ouenu+WKqOWIsOe7tOWfunznp7vli5XliLDntq3ln7opKD865pWZ56eR5LmmfOaVmeenkeabuHzor63lvZV86Kqe6YyEfOaWh+W6k3zmlofluqt85a+85ri4fOWwjumBinzor43lhbh86Kme5YW4KWA7XG5cdFx0XHRcdHBhZ2VUZXh0ID0geXNhcmNoaXZlc19wYWdlLmluc2VydEFmdGVyVGVtcGxhdGVzKHRhZ1RleHQsIHRlbXBsYXRlc0FmdGVyKS5nZXRUZXh0KCk7XG5cdFx0XHRcdHJlbW92ZVRhZ3MoKTtcblx0XHRcdH07XG5cdFx0XHQvLyBTZXBhcmF0ZSB0YWdzIGludG8gZ3JvdXBhYmxlIG9uZXMgKGBncm91cGFibGVUYWdzYCkgYW5kIG5vbi1ncm91cGFibGUgb25lcyAoYHRhZ3NgKVxuXHRcdFx0Zm9yIChjb25zdCB0YWcgb2YgcGFyYW1zLnRhZ3MpIHtcblx0XHRcdFx0dGFnUmUgPSBuZXcgUmVnRXhwKGBcXFxce1xcXFx7JHt0YWd9KFxcXFx8fFxcXFx9XFxcXH0pYCwgJ2ltJyk7XG5cdFx0XHRcdC8vIHJlZ2V4IGNoZWNrIGZvciBwcmVleGlzdGVuY2Ugb2YgdGFnIGNhbiBiZSBza2lwcGVkIGlmIGluIGNhblJlbW92ZSBtb2RlXG5cdFx0XHRcdGlmIChUd2lua2xlLnRhZy5jYW5SZW1vdmUgfHwgIXRhZ1JlLmV4ZWMocGFnZVRleHQpKSB7XG5cdFx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdFx0dGFnID09PSAnTm90YWJpbGl0eScgJiZcblx0XHRcdFx0XHRcdChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpID09PSAwIHx8XG5cdFx0XHRcdFx0XHRcdGNvbmZpcm0oXG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdFx0J+ivpemhtemdouS4jeaYr+adoeebru+8jOaCqOS7jeimgeaPkOaKpeWIsOWFs+azqOW6puaPkOaKpeWQl++8nycsXG5cdFx0XHRcdFx0XHRcdFx0XHQn6Kmy6aCB6Z2i5LiN5piv5qKd55uu77yM5oKo5LuN6KaB5o+Q5aCx5Yiw6Zec5rOo5bqm5o+Q5aCx5ZeO77yfJ1xuXHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0KSlcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdGNvbnN0IHlzYXJjaGl2ZXNfcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHRcdFx0XHRcdCdMSUJfdGFsazrlrZjlup/orqjorrov5YWz5rOo5bqm5o+Q5oqlJyxcblx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfliqDlhaXlhbPms6jluqborrDlvZXpobknLCAn5Yqg5YWl6Zec5rOo5bqm6KiY6YyE6aCFJylcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2Uuc2V0Rm9sbG93UmVkaXJlY3QodHJ1ZSk7XG5cdFx0XHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2Uuc2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKHBhcmFtcyk7XG5cdFx0XHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2UubG9hZChUd2lua2xlLnRhZy5jYWxsYmFja3Mubm90YWJpbGl0eUxpc3QpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBjb25kaXRpb24gVHdpbmtsZS50YWcuYXJ0aWNsZS50YWdzW3RhZ10gdG8gZW5zdXJlIHRoYXQgaXRzIG5vdCBhIGN1c3RvbSB0YWdcblx0XHRcdFx0XHQvLyBDdXN0b20gdGFncyBhcmUgYXNzdW1lZCBub24tZ3JvdXBhYmxlLCBzaW5jZSB3ZSBkb24ndCBrbm93IHdoZXRoZXIgTUkgdGVtcGxhdGUgc3VwcG9ydHMgdGhlbVxuXHRcdFx0XHRcdGlmIChUd2lua2xlLnRhZy5hcnRpY2xlLmZsYXRPYmplY3RbdGFnXSAmJiAhVHdpbmtsZS50YWcuYXJ0aWNsZS5mbGF0T2JqZWN0W3RhZ10uZXhjbHVkZU1JKSB7XG5cdFx0XHRcdFx0XHRncm91cGFibGVUYWdzW2dyb3VwYWJsZVRhZ3MubGVuZ3RoXSA9IHRhZztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGFnc1t0YWdzLmxlbmd0aF0gPSB0YWc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKHRhZyA9PT0gJ01lcmdlIGZyb20nKSB7XG5cdFx0XHRcdFx0dGFnc1t0YWdzLmxlbmd0aF0gPSB0YWc7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLndhcm4oXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+S/oeaBrycsICfos4foqIonKSxcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5Zyo6aG16Z2i5LiK5om+5Yiwe3snLCAn5Zyo6aCB6Z2i5LiK5om+5Yiwe3snKSArIHRhZyArIHdpbmRvdy53Z1VMUygnfX3igKbigKbot7Pov4cnLCAnfX3igKbigKbot7PpgY4nKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0Ly8gZG9uJ3QgZG8gYW55dGhpbmcgZWxzZSB3aXRoIG1lcmdlIHRhZ3Ncblx0XHRcdFx0XHRpZiAoWydNZXJnZScsICdNZXJnZSB0byddLmluY2x1ZGVzKHRhZykpIHtcblx0XHRcdFx0XHRcdHBhcmFtcy5tZXJnZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdFx0XHRwYXJhbXMubWVyZ2VSZWFzb24gPSBudWxsO1xuXHRcdFx0XHRcdFx0cGFyYW1zLm1lcmdlVGFnT3RoZXIgPSBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gVG8tYmUtcmV0YWluZWQgZXhpc3RpbmcgdGFncyB0aGF0IGFyZSBncm91cGFibGVcblx0XHRcdGZvciAoY29uc3QgdGFnIG9mIHBhcmFtcy50YWdzVG9SZW1haW4pIHtcblx0XHRcdFx0Ly8gSWYgdGhlIHRhZyBpcyB1bmtub3duIHRvIHVzLCB3ZSBjb25zaWRlciBpdCBub24tZ3JvdXBhYmxlXG5cdFx0XHRcdGlmIChUd2lua2xlLnRhZy5hcnRpY2xlLmZsYXRPYmplY3RbdGFnXSAmJiAhVHdpbmtsZS50YWcuYXJ0aWNsZS5mbGF0T2JqZWN0W3RhZ10uZXhjbHVkZU1JKSB7XG5cdFx0XHRcdFx0Z3JvdXBhYmxlRXhpc3RpbmdUYWdzW2dyb3VwYWJsZUV4aXN0aW5nVGFncy5sZW5ndGhdID0gdGFnO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBtaVRlc3QgPVxuXHRcdFx0XHQvXFx7XFx7KG11bHRpcGxlID9pc3N1ZXN8YXJ0aWNsZSA/aXNzdWVzfG1pfGFpfGlzc3Vlc3zlpJrlgIvllY/poYx85aSa5Liq6Zeu6aKYfOWVj+mhjOaineebrnzpl67popjmnaHnm6585pW45YCL5ZWP6aGMfOaVsOS4qumXrumimClcXHMqXFx8W159XStcXHsvaW0uZXhlYyhcblx0XHRcdFx0XHRwYWdlVGV4dFxuXHRcdFx0XHQpO1xuXHRcdFx0aWYgKG1pVGVzdCAmJiBncm91cGFibGVUYWdzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluZm8oXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfkv6Hmga8nLCAn6LOH6KiKJyksXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+WKoOWFpeaUr+aMgeeahOagh+iusOWFpeW3suWtmOWcqOeahHt7bXVsdGlwbGUgaXNzdWVzfX0nLFxuXHRcdFx0XHRcdFx0J+WKoOWFpeaUr+aPtOeahOaomeiomOWFpeW3suWtmOWcqOeahHt7bXVsdGlwbGUgaXNzdWVzfX0nXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpO1xuXHRcdFx0XHR0YWdUZXh0ID0gJyc7XG5cdFx0XHRcdGZvciAoY29uc3QgdGFnIG9mIGdyb3VwYWJsZVRhZ3MpIHtcblx0XHRcdFx0XHRhZGRUYWcodGFnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBtaVJlZ2V4ID0gbmV3IFJlZ0V4cChcblx0XHRcdFx0XHRgKFxcXFx7XFxcXHtcXFxccyoke21pVGVzdFsxXX1cXFxccyooPzpcXFxcfCg/OlxcXFx7XFxcXHtbXnt9XSpcXFxcfVxcXFx9fFtee31dKSopPylcXFxcfVxcXFx9XFxcXHMqYCxcblx0XHRcdFx0XHQnaW0nXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHBhZ2VUZXh0ID0gcGFnZVRleHQucmVwbGFjZShtaVJlZ2V4LCBgJDEke3RhZ1RleHR9fX1cXG5gKTtcblx0XHRcdFx0dGFnVGV4dCA9ICcnO1xuXHRcdFx0XHRhZGRVbmdyb3VwZWRUYWdzKCk7XG5cdFx0XHR9IGVsc2UgaWYgKHBhcmFtcy5ncm91cCAmJiAhbWlUZXN0ICYmIGdyb3VwYWJsZUV4aXN0aW5nVGFncy5sZW5ndGggKyBncm91cGFibGVUYWdzLmxlbmd0aCA+PSAyKSB7XG5cdFx0XHRcdE1vcmViaXRzLnN0YXR1cy5pbmZvKFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5L+h5oGvJywgJ+izh+ioiicpLFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5Yqg5YWl5pSv5oyB55qE5qCH6K6w5YWle3ttdWx0aXBsZSBpc3N1ZXN9fScsICfliqDlhaXmlK/mj7TnmoTmqJnoqJjlhaV7e211bHRpcGxlIGlzc3Vlc319Jylcblx0XHRcdFx0KTtcblx0XHRcdFx0dGFnVGV4dCArPSAne3tNdWx0aXBsZSBpc3N1ZXN8XFxuJztcblx0XHRcdFx0LyoqXG5cdFx0XHRcdCAqIEFkZHMgbmV3bHkgYWRkZWQgdGFncyB0byBNSVxuXHRcdFx0XHQgKi9cblx0XHRcdFx0Y29uc3QgYWRkTmV3VGFnc1RvTUkgPSAoKSA9PiB7XG5cdFx0XHRcdFx0Zm9yIChjb25zdCB0YWcgb2YgZ3JvdXBhYmxlVGFncykge1xuXHRcdFx0XHRcdFx0YWRkVGFnKHRhZyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRhZ1RleHQgKz0gJ319XFxuJztcblx0XHRcdFx0XHRhZGRVbmdyb3VwZWRUYWdzKCk7XG5cdFx0XHRcdH07XG5cdFx0XHRcdGNvbnN0IGdldFJlZGlyZWN0c0ZvciA9IFtdO1xuXHRcdFx0XHQvLyBSZXBvc2l0aW9uIHRoZSB0YWdzIG9uIHRoZSBwYWdlIGludG8ge3ttdWx0aXBsZSBpc3N1ZXN9fSwgaWYgZm91bmQgd2l0aCBpdHNcblx0XHRcdFx0Ly8gcHJvcGVyIG5hbWUsIGVsc2UgbW92ZXMgaXQgdG8gYGdldFJlZGlyZWN0c0ZvcmAgYXJyYXkgdG8gYmUgaGFuZGxlZCBsYXRlclxuXHRcdFx0XHRmb3IgKGNvbnN0IHRhZyBvZiBncm91cGFibGVFeGlzdGluZ1RhZ3MpIHtcblx0XHRcdFx0XHRjb25zdCB0YWdfcmUgPSBuZXcgUmVnRXhwKGAoXFxcXHtcXFxceyR7TW9yZWJpdHMucGFnZU5hbWVSZWdleCh0YWcpfVxcXFxzKihcXFxcfFtefV0rKT9cXFxcfVxcXFx9XFxcXG4/KWApO1xuXHRcdFx0XHRcdGlmICh0YWdfcmUudGVzdChwYWdlVGV4dCkpIHtcblx0XHRcdFx0XHRcdHRhZ1RleHQgKz0gdGFnX3JlLmV4ZWMocGFnZVRleHQpWzFdO1xuXHRcdFx0XHRcdFx0cGFnZVRleHQgPSBwYWdlVGV4dC5yZXBsYWNlKHRhZ19yZSwgJycpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRnZXRSZWRpcmVjdHNGb3JbZ2V0UmVkaXJlY3RzRm9yLmxlbmd0aF0gPSBgVGVtcGxhdGU6JHt0YWd9YDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFnZXRSZWRpcmVjdHNGb3IubGVuZ3RoKSB7XG5cdFx0XHRcdFx0YWRkTmV3VGFnc1RvTUkoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgYXBpID0gbmV3IE1vcmViaXRzLndpa2kuYXBpKFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn6I635Y+W5qih5p2/6YeN5a6a5ZCRJywgJ+WPluW+l+aooeadv+mHjeaWsOWwjuWQkScpLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGFjdGlvbjogJ3F1ZXJ5Jyxcblx0XHRcdFx0XHRcdHByb3A6ICdsaW5rc2hlcmUnLFxuXHRcdFx0XHRcdFx0dGl0bGVzOiBnZXRSZWRpcmVjdHNGb3Iuam9pbignfCcpLFxuXHRcdFx0XHRcdFx0cmVkaXJlY3RzOiAxLFxuXHRcdFx0XHRcdFx0bGhuYW1lc3BhY2U6ICcxMCcsXG5cdFx0XHRcdFx0XHRsaHNob3c6ICdyZWRpcmVjdCcsXG5cdFx0XHRcdFx0XHRsaGxpbWl0OiAnbWF4JywgLy8gNTAwIGlzIG1heCBmb3Igbm9ybWFsIHVzZXJzLCA1MDAwIGZvciBib3RzIGFuZCBzeXNvcHNcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdChhcGlvYmopID0+IHtcblx0XHRcdFx0XHRcdCQoYXBpb2JqLnJlc3BvbnNlWE1MKVxuXHRcdFx0XHRcdFx0XHQuZmluZCgncGFnZScpXG5cdFx0XHRcdFx0XHRcdC5lYWNoKChfaWR4LCBwYWdlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0bGV0IGZvdW5kID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0JChwYWdlKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmZpbmQoJ2xoJylcblx0XHRcdFx0XHRcdFx0XHRcdC5lYWNoKChfaW5kZXgsIGVsZW1lbnQpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgdGFnID0gJChlbGVtZW50KS5hdHRyKCd0aXRsZScpLnNsaWNlKDkpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCB0YWdfcmUgPSBuZXcgUmVnRXhwKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGAoXFxcXHtcXFxceyR7TW9yZWJpdHMucGFnZU5hbWVSZWdleCh0YWcpfVxcXFxzKihcXFxcfFtefV0qKT9cXFxcfVxcXFx9XFxcXG4/KWBcblx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKHRhZ19yZS50ZXN0KHBhZ2VUZXh0KSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRhZ1RleHQgKz0gdGFnX3JlLmV4ZWMocGFnZVRleHQpWzFdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBhZ2VUZXh0ID0gcGFnZVRleHQucmVwbGFjZSh0YWdfcmUsICcnKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBicmVhayBvdXQgb2YgJC5lYWNoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLndhcm4oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5L+h5oGvJywgJ+izh+ioiicpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+aXoOazleWcqOmhtemdouS4iuaJvuWIsHt7JywgJ+eEoeazleWcqOmggemdouS4iuaJvuWIsHt7JykgK1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCQocGFnZSkuYXR0cigndGl0bGUnKS5zbGljZSg5KSArXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCd9feKApuKApui3s+i/hycsICd9feKApuKApui3s+mBjicpXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRhZGROZXdUYWdzVG9NSSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblx0XHRcdFx0YXBpLnBvc3QoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRhZ3MgPSBbLi4udGFncywgLi4uZ3JvdXBhYmxlVGFnc107XG5cdFx0XHRcdGFkZFVuZ3JvdXBlZFRhZ3MoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG5vdGFiaWxpdHlMaXN0OiAocGFnZW9iaikgPT4ge1xuXHRcdFx0cGFnZW9iai5zZXRBcHBlbmRUZXh0KCdcXG57eycuY29uY2F0KCdzdWJzdDonLCBgRmFtZWl0ZW18dGl0bGU9JHtNb3JlYml0cy5wYWdlTmFtZU5vcm19fX1gKSk7XG5cdFx0XHRwYWdlb2JqLnNldEVkaXRTdW1tYXJ5KGDliqDlhaVbWyR7TW9yZWJpdHMucGFnZU5hbWVOb3JtfV1dYCk7XG5cdFx0XHRwYWdlb2JqLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdHBhZ2VvYmouc2V0Q3JlYXRlT3B0aW9uKCdyZWNyZWF0ZScpO1xuXHRcdFx0cGFnZW9iai5hcHBlbmQoKTtcblx0XHR9LFxuXHRcdHJlZGlyZWN0OiAocGFnZW9iaikgPT4ge1xuXHRcdFx0Y29uc3QgcGFyYW1zID0gcGFnZW9iai5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHRcdGxldCBwYWdlVGV4dCA9IHBhZ2VvYmouZ2V0UGFnZVRleHQoKTtcblx0XHRcdGxldCB0YWdSZTtcblx0XHRcdGxldCB0YWdUZXh0ID0gJyc7XG5cdFx0XHRsZXQgc3VtbWFyeVRleHQgPSAn5Yqg5YWlJztcblx0XHRcdGNvbnN0IHRhZ3MgPSBbXTtcblx0XHRcdGxldCBpO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IHBhcmFtcy50YWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHRhZ1JlID0gbmV3IFJlZ0V4cChgKFxcXFx7XFxcXHske3BhcmFtcy50YWdzW2ldfShcXFxcfHxcXFxcfVxcXFx9KSlgLCAnaW0nKTtcblx0XHRcdFx0aWYgKHRhZ1JlLmV4ZWMocGFnZVRleHQpKSB7XG5cdFx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLndhcm4oXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+S/oeaBrycsICfos4foqIonKSxcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5Zyo6YeN5a6a5ZCR5LiK5om+5Yiwe3snLCAn5Zyo6YeN5paw5bCO5ZCR5LiK5om+5Yiwe3snKSArXG5cdFx0XHRcdFx0XHRcdHBhcmFtcy50YWdzW2ldICtcblx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCd9feKApuKApui3s+i/hycsICd9feKApuKApui3s+mBjicpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0YWdzW3RhZ3MubGVuZ3RoXSA9IHBhcmFtcy50YWdzW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyB1c2VkIGluIEFycmF5I2ZvckVhY2hcblx0XHRcdGNvbnN0IGFkZFRhZyA9ICh0YWdOYW1lLCB0YWdJbmRleCkgPT4ge1xuXHRcdFx0XHR0YWdUZXh0ICs9IGBcXG57eyR7dGFnTmFtZX1gO1xuXHRcdFx0XHRpZiAodGFnTmFtZSA9PT0gJ+mdnuS4reaWh+mHjeWumuWQkScpIHtcblx0XHRcdFx0XHRpZiAocGFyYW1zLmFsdExhbmdGcm9tKSB7XG5cdFx0XHRcdFx0XHR0YWdUZXh0ICs9IGB8MT0ke3BhcmFtcy5hbHRMYW5nRnJvbX1gO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChcblx0XHRcdFx0XHQodGFnTmFtZSA9PT0gJ+adoeebruivt+axgumHjeWumuWQkScgfHwgdGFnTmFtZSA9PT0gJ+aineebruiri+axgumHjeWumuWQkScpICYmXG5cdFx0XHRcdFx0cGFyYW1zLnJlcUFydGljbGVMYW5nICYmXG5cdFx0XHRcdFx0cGFyYW1zLnJlcUFydGljbGVUaXRsZVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHR0YWdUZXh0ICs9IGB8MT0ke3BhcmFtcy5yZXFBcnRpY2xlTGFuZ31gO1xuXHRcdFx0XHRcdHRhZ1RleHQgKz0gYHwyPSR7cGFyYW1zLnJlcUFydGljbGVUaXRsZX1gO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRhZ1RleHQgKz0gJ319Jztcblx0XHRcdFx0aWYgKHRhZ0luZGV4ID4gMCkge1xuXHRcdFx0XHRcdGlmICh0YWdJbmRleCA9PT0gdGFncy5sZW5ndGggLSAxKSB7XG5cdFx0XHRcdFx0XHRzdW1tYXJ5VGV4dCArPSAn5ZKMJztcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRhZ0luZGV4IDwgdGFncy5sZW5ndGggLSAxKSB7XG5cdFx0XHRcdFx0XHRzdW1tYXJ5VGV4dCArPSAn44CBJztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3VtbWFyeVRleHQgKz0gYHt7W1s6JHt0YWdOYW1lLmluY2x1ZGVzKCc6JykgPyB0YWdOYW1lIDogYFRlbXBsYXRlOiR7dGFnTmFtZX18JHt0YWdOYW1lfWB9XV19fWA7XG5cdFx0XHR9O1xuXHRcdFx0aWYgKCF0YWdzLmxlbmd0aCkge1xuXHRcdFx0XHRNb3JlYml0cy5zdGF0dXMud2Fybihcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+S/oeaBrycsICfos4foqIonKSxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+ayoeacieagh+etvuWPr+S+m+agh+iusCcsICfmspLmnInmqJnnsaTlj6/kvpvmqJnoqJgnKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0dGFncy5zb3J0KCk7XG5cdFx0XHRmb3IgKGNvbnN0IHRhZyBvZiB0YWdzKSB7XG5cdFx0XHRcdGFkZFRhZyh0YWcpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGFsbCBSY2F0IHNoZWxsIHJlZGlyZWN0cyAoZnJvbSAjNDMzKVxuXHRcdFx0aWYgKHBhZ2VUZXh0Lm1hdGNoKC97eyg/OnJlZHJ8dGhpcyBpcyBhIHJlZGlyZWN0fHIoPzplZGlyZWN0KT8oPzouP2NhdC4qKT9bIF9dP3NoKS9pKSkge1xuXHRcdFx0XHQvLyBSZWdleCBpbnNwaXJlZCBieSBbW1VzZXI6S2VwaGlyL2dhZGdldHMvc2FnaXR0YXJpdXMuanNdXSAoW1tTcGVjaWFsOlBlcm1hTGluay84MzE0MDI4OTNdXSlcblx0XHRcdFx0Y29uc3Qgb2xkVGFncyA9IHBhZ2VUZXh0Lm1hdGNoKC8oXFxzKnt7W0EtWmEtelxcc10rXFx8KD86XFxzKjE9KT8pKCg/OltefHt9XXx7e1tefV0rfX0pKykofX0pXFxzKi9pKTtcblx0XHRcdFx0cGFnZVRleHQgPSBwYWdlVGV4dC5yZXBsYWNlKG9sZFRhZ3NbMF0sIG9sZFRhZ3NbMV0gKyB0YWdUZXh0ICsgb2xkVGFnc1syXSArIG9sZFRhZ3NbM10pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gRm9sZCBhbnkgcHJlLWV4aXN0aW5nIFJjYXRzIGludG8gdGFnbGlzdCBhbmQgdW5kZXIgUmNhdHNoZWxsXG5cdFx0XHRcdGNvbnN0IHBhZ2VUYWdzID0gcGFnZVRleHQubWF0Y2goL1xccyp7ey4rP+mHjeWumuWQkS4qP319L2dpbSk7XG5cdFx0XHRcdGxldCBvbGRQYWdlVGFncyA9ICcnO1xuXHRcdFx0XHRpZiAocGFnZVRhZ3MpIHtcblx0XHRcdFx0XHRmb3IgKGxldCBwYWdlVGFnIG9mIHBhZ2VUYWdzKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBwYWdlUmUgPSBuZXcgUmVnRXhwKE1vcmViaXRzLnN0cmluZy5lc2NhcGVSZWdFeHAocGFnZVRhZyksICdpbWcnKTtcblx0XHRcdFx0XHRcdHBhZ2VUZXh0ID0gcGFnZVRleHQucmVwbGFjZShwYWdlUmUsICcnKTtcblx0XHRcdFx0XHRcdHBhZ2VUYWcgPSBwYWdlVGFnLnRyaW0oKTtcblx0XHRcdFx0XHRcdG9sZFBhZ2VUYWdzICs9IGBcXG4ke3BhZ2VUYWd9YDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cGFnZVRleHQgKz0gYFxcbnt7UmVkaXJlY3QgY2F0ZWdvcnkgc2hlbGx8JHt0YWdUZXh0fSR7b2xkUGFnZVRhZ3N9XFxufX1gO1xuXHRcdFx0fVxuXHRcdFx0c3VtbWFyeVRleHQgKz1cblx0XHRcdFx0KHRhZ3MubGVuZ3RoID4gMCA/IHdpbmRvdy53Z1VMUygn5qCH6K6wJywgJ+aomeiomCcpIDogJ3t7UmVkaXJlY3QgY2F0ZWdvcnkgc2hlbGx9fScpICtcblx0XHRcdFx0d2luZG93LndnVUxTKCfliLDph43lrprlkJEnLCAn5Yiw6YeN5paw5bCO5ZCRJyk7XG5cdFx0XHQvLyBhdm9pZCB0cnVuY2F0ZWQgc3VtbWFyaWVzXG5cdFx0XHRpZiAoc3VtbWFyeVRleHQubGVuZ3RoID4gNDk5KSB7XG5cdFx0XHRcdHN1bW1hcnlUZXh0ID0gc3VtbWFyeVRleHQucmVwbGFjZSgvXFxbXFxbW158XStcXHwoW15cXF1dKylcXF1cXF0vZywgJyQxJyk7XG5cdFx0XHR9XG5cdFx0XHRwYWdlb2JqLnNldFBhZ2VUZXh0KHBhZ2VUZXh0KTtcblx0XHRcdHBhZ2VvYmouc2V0RWRpdFN1bW1hcnkoc3VtbWFyeVRleHQpO1xuXHRcdFx0cGFnZW9iai5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRwYWdlb2JqLnNldFdhdGNobGlzdChUd2lua2xlLmdldFByZWYoJ3dhdGNoVGFnZ2VkUGFnZXMnKSk7XG5cdFx0XHRwYWdlb2JqLnNldE1pbm9yRWRpdChUd2lua2xlLmdldFByZWYoJ21hcmtUYWdnZWRQYWdlc0FzTWlub3InKSk7XG5cdFx0XHRwYWdlb2JqLnNldENyZWF0ZU9wdGlvbignbm9jcmVhdGUnKTtcblx0XHRcdHBhZ2VvYmouc2F2ZSgpO1xuXHRcdFx0aWYgKHBhcmFtcy5wYXRyb2wpIHtcblx0XHRcdFx0cGFnZW9iai5wYXRyb2woKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGZpbGU6IChwYWdlb2JqKSA9PiB7XG5cdFx0XHRsZXQgdGV4dCA9IHBhZ2VvYmouZ2V0UGFnZVRleHQoKTtcblx0XHRcdGNvbnN0IHBhcmFtcyA9IHBhZ2VvYmouZ2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKCk7XG5cdFx0XHRsZXQgc3VtbWFyeSA9ICfliqDlhaUnO1xuXHRcdFx0Ly8gQWRkIG1haW50ZW5hbmNlIHRhZ3Ncblx0XHRcdGlmIChwYXJhbXMudGFncy5sZW5ndGgpIHtcblx0XHRcdFx0bGV0IHRhZ3RleHQgPSAnJztcblx0XHRcdFx0bGV0IGN1cnJlbnRUYWc7XG5cdFx0XHRcdGZvciAoY29uc3QgdGFnIG9mIHBhcmFtcy50YWdzKSB7XG5cdFx0XHRcdFx0Ly8gd2hlbiBvdGhlciBjb21tb25zLXJlbGF0ZWQgdGFncyBhcmUgcGxhY2VkLCByZW1vdmUgXCJtb3ZlIHRvIFNoYXJlXCIgdGFnXG5cdFx0XHRcdFx0aWYgKFsnS2VlcCBsb2NhbCcsICdOb3cgWXNBcmNoaXZlcyBTaGFyZScsICdEbyBub3QgbW92ZSB0byBZc0FyY2hpdmVzIFNoYXJlJ10uaW5jbHVkZXModGFnKSkge1xuXHRcdFx0XHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZShcblx0XHRcdFx0XHRcdFx0L3t7KG10Y3woY29weSB8bW92ZSApP3RvID9zaGFyZXxtb3ZlIHRvIHlzYXJjaGl2ZXMgc2hhcmV8Y29weSB0byB5c2FyY2hpdmVzIHNoYXJlKVtefV0qfX0vZ2ksXG5cdFx0XHRcdFx0XHRcdCcnXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGFnID09PSAnVmVjdG9yIHZlcnNpb24gYXZhaWxhYmxlJykge1xuXHRcdFx0XHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZShcblx0XHRcdFx0XHRcdFx0L1xce1xceygoY29udmVydCB0byB8Y29udmVydHRvfHNob3VsZCBiZSB8c2hvdWxkYmV8dG8pP3N2Z3xiYWRwbmd8dmVjdG9yaXplKVtefV0qXFx9XFx9L2dpLFxuXHRcdFx0XHRcdFx0XHQnJ1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y3VycmVudFRhZyA9IHRhZztcblx0XHRcdFx0XHRzd2l0Y2ggKHRhZykge1xuXHRcdFx0XHRcdFx0Y2FzZSAnTm93IENvbW1vbnMnOlxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VGFnID0gYHN1YnN0OiR7Y3VycmVudFRhZ31gOyAvLyBzdWJzdFxuXHRcdFx0XHRcdFx0XHRpZiAocGFyYW1zLm5vd2NvbW1vbnNOYW1lICE9PSAnJykge1xuXHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRUYWcgKz0gYHwxPSR7cGFyYW1zLm5vd2NvbW1vbnNOYW1lfWA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdLZWVwIGxvY2FsJzpcblx0XHRcdFx0XHRcdFx0aWYgKHBhcmFtcy5rZWVwbG9jYWxOYW1lICE9PSAnJykge1xuXHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRUYWcgKz0gYHwxPSR7cGFyYW1zLmtlZXBsb2NhbE5hbWV9YDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAocGFyYW1zLmtlZXBsb2NhbFJlYXNvbiAhPT0gJycpIHtcblx0XHRcdFx0XHRcdFx0XHRjdXJyZW50VGFnICs9IGB8cmVhc29uPSR7cGFyYW1zLmtlZXBsb2NhbFJlYXNvbn1gO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnUmVuYW1lIG1lZGlhJzpcblx0XHRcdFx0XHRcdFx0aWYgKHBhcmFtcy5yZW5hbWVtZWRpYU5ld25hbWUgIT09ICcnKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y3VycmVudFRhZyArPSBgfDE9JHtwYXJhbXMucmVuYW1lbWVkaWFOZXduYW1lfWA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKHBhcmFtcy5yZW5hbWVtZWRpYVJlYXNvbiAhPT0gJycpIHtcblx0XHRcdFx0XHRcdFx0XHRjdXJyZW50VGFnICs9IGB8Mj0ke3BhcmFtcy5yZW5hbWVtZWRpYVJlYXNvbn1gO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnVmVjdG9yIHZlcnNpb24gYXZhaWxhYmxlJzpcblx0XHRcdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0XHRcdGNhc2UgJ09ic29sZXRlJzpcblx0XHRcdFx0XHRcdFx0Y3VycmVudFRhZyArPSBgfDE9JHtwYXJhbXNbYCR7dGFnLnJlcGxhY2UoLyAvZywgJ18nKX1GaWxlYF19YDtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdEbyBub3QgbW92ZSB0byBDb21tb25zJzpcblx0XHRcdFx0XHRcdFx0Y3VycmVudFRhZyArPSBgfHJlYXNvbj0ke3BhcmFtcy5Eb05vdE1vdmVUb0NvbW1vbnNfcmVhc29ufWA7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ29weSB0byBXaWtpbWVkaWEgQ29tbW9ucyc6XG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRUYWcgKz0gYHxodW1hbj0ke213LmNvbmZpZy5nZXQoJ3dnVXNlck5hbWUnKX1gO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Ly8gZG9uJ3QgY2FyZVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGN1cnJlbnRUYWcgPSBge3ske2N1cnJlbnRUYWd9fX1cXG5gO1xuXHRcdFx0XHRcdHRhZ3RleHQgKz0gY3VycmVudFRhZztcblx0XHRcdFx0XHRzdW1tYXJ5ICs9IGB7eyR7dGFnfX1944CBYDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXRhZ3RleHQpIHtcblx0XHRcdFx0XHRwYWdlb2JqXG5cdFx0XHRcdFx0XHQuZ2V0U3RhdHVzRWxlbWVudCgpXG5cdFx0XHRcdFx0XHQud2Fybih3aW5kb3cud2dVTFMoJ+eUqOaIt+WPlua2iOaTjeS9nO+8jOayoeS7gOS5iOimgeWBmueahCcsICfkvb/nlKjogIXlj5bmtojmk43kvZzvvIzmspLku4DpurzopoHlgZrnmoQnKSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRleHQgPSB0YWd0ZXh0ICsgdGV4dDtcblx0XHRcdH1cblx0XHRcdHBhZ2VvYmouc2V0UGFnZVRleHQodGV4dCk7XG5cdFx0XHRwYWdlb2JqLnNldEVkaXRTdW1tYXJ5KHN1bW1hcnkuc2xpY2UoMCwgTWF0aC5tYXgoMCwgc3VtbWFyeS5sZW5ndGggLSAxKSkpO1xuXHRcdFx0cGFnZW9iai5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRwYWdlb2JqLnNldFdhdGNobGlzdChUd2lua2xlLmdldFByZWYoJ3dhdGNoVGFnZ2VkUGFnZXMnKSk7XG5cdFx0XHRwYWdlb2JqLnNldE1pbm9yRWRpdChUd2lua2xlLmdldFByZWYoJ21hcmtUYWdnZWRQYWdlc0FzTWlub3InKSk7XG5cdFx0XHRwYWdlb2JqLnNldENyZWF0ZU9wdGlvbignbm9jcmVhdGUnKTtcblx0XHRcdHBhZ2VvYmouc2F2ZSgpO1xuXHRcdFx0aWYgKHBhcmFtcy5wYXRyb2wpIHtcblx0XHRcdFx0cGFnZW9iai5wYXRyb2woKTtcblx0XHRcdH1cblx0XHR9LFxuXHR9O1xuXHRUd2lua2xlLnRhZy5jYWxsYmFjay5ldmFsdWF0ZSA9IChlKSA9PiB7XG5cdFx0Y29uc3QgZm9ybSA9IGUudGFyZ2V0O1xuXHRcdGNvbnN0IHBhcmFtcyA9IE1vcmViaXRzLnF1aWNrRm9ybS5nZXRJbnB1dERhdGEoZm9ybSk7XG5cdFx0Ly8gVmFsaWRhdGlvblxuXHRcdC8vIEdpdmVuIGFuIGFycmF5IG9mIGluY29tcGF0aWJsZSB0YWdzLCBjaGVjayBpZiB3ZSBoYXZlIHR3byBvciBtb3JlIHNlbGVjdGVkXG5cdFx0Y29uc3QgY2hlY2tJbmNvbXBhdGlibGUgPSAoY29uZmxpY3RzLCBleHRyYSkgPT4ge1xuXHRcdFx0Y29uc3QgY291bnQgPSBjb25mbGljdHMucmVkdWNlKChzdW0sIHRhZykgPT4ge1xuXHRcdFx0XHRyZXR1cm4gKHN1bSArPSBwYXJhbXMudGFncy5pbmNsdWRlcyh0YWcpKTtcblx0XHRcdH0sIDApO1xuXHRcdFx0aWYgKGNvdW50ID4gMSkge1xuXHRcdFx0XHRsZXQgbWVzc2FnZSA9IGAke3dpbmRvdy53Z1VMUygn6K+35Zyo5Lul5LiL5qCH562+5Lit5oup5LiA5L2/55SoJywgJ+iri+WcqOS7peS4i+aomeexpOS4reaTh+S4gOS9v+eUqCcpfe+8mnt7JHtjb25mbGljdHMuam9pbihcblx0XHRcdFx0XHQnfX3jgIF7eydcblx0XHRcdFx0KX19feOAgmA7XG5cdFx0XHRcdG1lc3NhZ2UgKz0gZXh0cmEgfHwgJyc7XG5cdFx0XHRcdHZvaWQgbXcubm90aWZ5KG1lc3NhZ2UsIHtcblx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0dGFnOiAnZnJpZW5kbHl0YWcnLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHQvLyBHaXZlbiBhIHRhZywgZW5zdXJlIGFuIGFzc29jaWF0ZSBwYXJhbWV0ZXIgaXMgcHJlc2VudFxuXHRcdC8vIE1heWJlIGp1c3Qgc29jayB0aGlzIGF3YXkgaW4gZWFjaCBmdW5jdGlvbj8/P1xuXHRcdGNvbnN0IGNoZWNrUGFyYW1ldGVyID0gKHRhZywgcGFyYW1ldGVyLCBkZXNjcmlwdGlvbiA9ICfnkIbnlLEnKSA9PiB7XG5cdFx0XHRpZiAocGFyYW1zLnRhZ3MuaW5jbHVkZXModGFnKSAmJiBwYXJhbXNbcGFyYW1ldGVyXS50cmltKCkgPT09ICcnKSB7XG5cdFx0XHRcdHZvaWQgbXcubm90aWZ5KGAke3dpbmRvdy53Z1VMUygn5oKo5b+F6aG75oyH5a6aJywgJ+aCqOW/hemgiOaMh+WumicpfXt7JHt0YWd9fX3nmoQke2Rlc2NyaXB0aW9ufeOAgmAsIHtcblx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0dGFnOiAnZnJpZW5kbHl0YWcnLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHQvLyBXZSBjb3VsZCB0aGVvcmV0aWNhbGx5IHB1dCB0aGVtIGFsbCBjaGVja0luY29tcGF0aWJsZSBjYWxscyBpbiBhXG5cdFx0Ly8gZm9yRWFjaCBsb29wLCBidXQgaXQncyBwcm9iYWJseSBjbGVhcmVyIG5vdCB0byBoYXZlIFtbYXJyYXkgb25lXSxcblx0XHQvLyBbYXJyYXkgdHdvXV0gZGV2b2lkIG9mIGNvbnRleHQuIExpa2V3aXNlLCBhbGwgdGhlIGNoZWNrUGFyYW1ldGVyXG5cdFx0Ly8gY2FsbHMgY291bGQgYmUgaW4gb25lIGlmLCBidXQgY291bGQgYmUgc2ltaWxhcmx5IGNvbmZ1c2luZy5cblx0XHRzd2l0Y2ggKFR3aW5rbGUudGFnLm1vZGVFbikge1xuXHRcdFx0Y2FzZSAnYXJ0aWNsZSc6XG5cdFx0XHRcdHBhcmFtcy50YWdzVG9SZW1vdmUgPSBmb3JtLmdldFVuY2hlY2tlZCgnZXhpc3RpbmdUYWdzJyk7IC8vIG5vdCBpbiBgaW5wdXRgXG5cdFx0XHRcdHBhcmFtcy50YWdzVG9SZW1haW4gPSBwYXJhbXMuZXhpc3RpbmdUYWdzIHx8IFtdOyAvLyBjb250YWluZXIgbm90IGNyZWF0ZWQgaWYgbm9uZSBwcmVzZW50XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRwYXJhbXMudGFncy5pbmNsdWRlcygnTWVyZ2UnKSB8fFxuXHRcdFx0XHRcdHBhcmFtcy50YWdzLmluY2x1ZGVzKCdNZXJnZSBmcm9tJykgfHxcblx0XHRcdFx0XHRwYXJhbXMudGFncy5pbmNsdWRlcygnTWVyZ2UgdG8nKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHRjaGVja0luY29tcGF0aWJsZShcblx0XHRcdFx0XHRcdFx0WydNZXJnZScsICdNZXJnZSBmcm9tJywgJ01lcmdlIHRvJ10sXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn6Iul6ZyA6KaB5aSa5qyh5ZCI5bm277yM6K+35L2/55Soe3tNZXJnZX195bm255So566h6YGT56ym5YiG6ZqU5p2h55uu5ZCN77yI5L2G5Zyo6L+Z56eN5oOF5b2i5LitVHdpbmtsZeS4jeiDveiHquWKqOagh+iusOWFtuS7luadoeebru+8ieOAgicsXG5cdFx0XHRcdFx0XHRcdFx0J+iLpemcgOimgeWkmuasoeWQiOS9te+8jOiri+S9v+eUqHt7TWVyZ2V9feS4pueUqOeuoemBk+espuWIhumalOaineebruWQje+8iOS9huWcqOmAmeeoruaDheW9ouS4rVR3aW5rbGXkuI3og73oh6rli5XmqJnoqJjlhbbku5bmop3nm67vvInjgIInXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCFwYXJhbXMubWVyZ2VUYXJnZXQpIHtcblx0XHRcdFx0XHRcdHZvaWQgbXcubm90aWZ5KFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+ivt+aMh+WumuS9v+eUqOS6jm1lcmdl5qih5p2/5Lit55qE5Y+m5LiA5Liq6aG16Z2i5qCH6aKY44CCJyxcblx0XHRcdFx0XHRcdFx0XHQn6KuL5oyH5a6a5L2/55So5pa8bWVyZ2XmqKHmnb/kuK3nmoTlj6bkuIDlgIvpoIHpnaLmqJnpoYzjgIInXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0XHRcdFx0dGFnOiAnZnJpZW5kbHl0YWcnLFxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoKHBhcmFtcy5tZXJnZVRhZ090aGVyIHx8IHBhcmFtcy5tZXJnZVJlYXNvbikgJiYgcGFyYW1zLm1lcmdlVGFyZ2V0LmluY2x1ZGVzKCd8JykpIHtcblx0XHRcdFx0XHRcdHZvaWQgbXcubm90aWZ5KFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+W9k+WJjei/mOS4jeaUr+aMgeWcqOS4gOasoeWQiOW5tuS4reagh+iusOWkmuS4quadoeebru+8jOS4juW8gOWQr+WFs+S6juWkmuS4quadoeebrueahOiuqOiuuuOAguivt+S4jeimgeWLvumAieKAnOagh+iusOWFtuS7luadoeebruKAneW5tua4heepuuKAnOeQhueUseKAneahhuWQjuWGjeaPkOS6pOOAgicsXG5cdFx0XHRcdFx0XHRcdFx0J+ebruWJjemChOS4jeaUr+aPtOWcqOS4gOasoeWQiOS9teS4reaomeiomOWkmuWAi+aineebru+8jOiIh+mWi+WVn+mXnOaWvOWkmuWAi+aineebrueahOiojuirluOAguiri+S4jeimgeWLvumBuOOAjOaomeiomOWFtuS7luaineebruOAjeS4pua4heepuuOAjOeQhueUseOAjeahhuW+jOWGjeaPkOS6pOOAgidcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHRcdFx0XHR0YWc6ICdmcmllbmRseXRhZycsXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRjaGVja1BhcmFtZXRlcihcblx0XHRcdFx0XHRcdCdNaXNzaW5nIGluZm9ybWF0aW9uJyxcblx0XHRcdFx0XHRcdCdtaXNzaW5nSW5mb3JtYXRpb24nLFxuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfnvLrlsJHnmoTlhoXlrrknLCAn57y65bCR55qE5YWn5a65Jylcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY2hlY2tQYXJhbWV0ZXIoJ0V4cGVydCBuZWVkZWQnLCAnZXhwZXJ0Jywgd2luZG93LndnVUxTKCfkuJPlrrbpoobln58nLCAn5bCI5a626aCY5Z+fJykpKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnZmlsZSc6XG5cdFx0XHRcdC8vIFNpbGx5IHRvIHByb3ZpZGUgdGhlIHNhbWUgc3RyaW5nIHRvIGVhY2ggb2YgdGhlc2Vcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdGNoZWNrUGFyYW1ldGVyKCdPYnNvbGV0ZScsICdPYnNvbGV0ZUZpbGUnLCB3aW5kb3cud2dVTFMoJ+abv+aNoueahOaWh+S7tuWQjeensCcsICfmm7/mj5vnmoTmqpTmoYjlkI3nqLEnKSkgfHxcblx0XHRcdFx0XHRjaGVja1BhcmFtZXRlcihcblx0XHRcdFx0XHRcdCdWZWN0b3IgdmVyc2lvbiBhdmFpbGFibGUnLFxuXHRcdFx0XHRcdFx0J1ZlY3Rvcl92ZXJzaW9uX2F2YWlsYWJsZUZpbGUnLFxuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfmm7/mjaLnmoTmlofku7blkI3np7AnLCAn5pu/5o+b55qE5qqU5qGI5ZCN56ixJylcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY2hlY2tQYXJhbWV0ZXIoJ0RvIG5vdCBtb3ZlIHRvIENvbW1vbnMnLCAnRG9Ob3RNb3ZlVG9Db21tb25zX3JlYXNvbicpKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAncmVkaXJlY3QnOlxuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHZvaWQgbXcubm90aWZ5KGBUd2lua2xlLnRhZ++8muacquefpeaooeW8jyAke1R3aW5rbGUudGFnLm1vZGV9YCwge1xuXHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHR0YWc6ICdmcmllbmRseXRhZycsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0Ly8gRmlsZS9yZWRpcmVjdDogcmV0dXJuIGlmIG5vIHRhZ3Mgc2VsZWN0ZWRcblx0XHQvLyBBcnRpY2xlOiByZXR1cm4gaWYgbm8gdGFnIGlzIHNlbGVjdGVkIGFuZCBubyBhbHJlYWR5IHByZXNlbnQgdGFnIGlzIGRlc2VsZWN0ZWRcblx0XHRpZiAocGFyYW1zLnRhZ3MubGVuZ3RoID09PSAwICYmIChUd2lua2xlLnRhZy5tb2RlRW4gIT09ICdhcnRpY2xlJyB8fCBwYXJhbXMudGFnc1RvUmVtb3ZlLmxlbmd0aCA9PT0gMCkpIHtcblx0XHRcdHZvaWQgbXcubm90aWZ5KHdpbmRvdy53Z1VMUygn5b+F6aG76YCJ5oup6Iez5bCR5LiA5Liq5qCH6K6w77yBJywgJ+W/hemgiOmBuOaTh+iHs+WwkeS4gOWAi+aomeiomO+8gScpLCB7XG5cdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0dGFnOiAnZnJpZW5kbHl0YWcnLFxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdE1vcmViaXRzLnNpbXBsZVdpbmRvdy5zZXRCdXR0b25zRW5hYmxlZChmYWxzZSk7XG5cdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoZm9ybSk7XG5cdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQucmVkaXJlY3QgPSBNb3JlYml0cy5wYWdlTmFtZU5vcm07XG5cdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQubm90aWNlID0gd2luZG93LndnVUxTKFxuXHRcdFx0J+agh+iusOWujOaIkO+8jOWwhuWcqOWHoOenkuWGheWIt+aWsOmhtemdoicsXG5cdFx0XHQn5qiZ6KiY5a6M5oiQ77yM5bCH5Zyo5bm+56eS5YWn6YeN5paw5pW055CG6aCB6Z2iJ1xuXHRcdCk7XG5cdFx0aWYgKFR3aW5rbGUudGFnLm1vZGVFbiA9PT0gJ3JlZGlyZWN0Jykge1xuXHRcdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQuZm9sbG93UmVkaXJlY3QgPSBmYWxzZTtcblx0XHR9XG5cdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdE1vcmViaXRzLnBhZ2VOYW1lTm9ybSxcblx0XHRcdHdpbmRvdy53Z1VMUygn5q2j5Zyo5qCH6K6wJywgJ+ato+WcqOaomeiomCcpICsgVHdpbmtsZS50YWcubW9kZVxuXHRcdCk7XG5cdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYXJhbXMpO1xuXHRcdHlzYXJjaGl2ZXNfcGFnZS5sb2FkKFR3aW5rbGUudGFnLmNhbGxiYWNrc1tUd2lua2xlLnRhZy5tb2RlRW5dKTtcblx0fTtcblx0VHdpbmtsZS5hZGRJbml0Q2FsbGJhY2soVHdpbmtsZS50YWcsICd0YWcnKTtcbn0pKGpRdWVyeSk7XG5cbmV4cG9ydCB7fTtcbiIsICIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHtnZW5lcmF0ZUFycmF5fSBmcm9tICdleHQuZ2FkZ2V0LlV0aWwnO1xuXG4vKiEgVHdpbmtsZS5qcyAtIHR3aW5rbGVzdHViLmpzICovXG4oZnVuY3Rpb24gdHdpbmtsZXN0dWIoJCkge1xuXHQvKipcblx0ICogdHdpbmtsZXN0dWIuanM6IFRhZyBtb2R1bGVcblx0ICogTW9kZSBvZiBpbnZvY2F0aW9uOiBUYWIgKFwiU3R1YlwiKVxuXHQgKiBBY3RpdmUgb246IEV4aXN0aW5nIGFydGljbGVzXG5cdCAqIENvbmZpZyBkaXJlY3RpdmVzIGluOiBGcmllbmRseUNvbmZpZ1xuXHQgKiBOb3RlOiBjdXN0b21pc2VkIGZyaWVuZGx5dGFnIG1vZHVsZVxuXHQgKi9cblx0VHdpbmtsZS5zdHViID0gKCkgPT4ge1xuXHRcdGlmIChNb3JlYml0cy5pc1BhZ2VSZWRpcmVjdCgpKSB7XG5cdFx0XHQvLyBTa2lwXG5cdFx0XHQvLyBhcnRpY2xlL2RyYWZ0IGFydGljbGUgdGFnZ2luZ1xuXHRcdH0gZWxzZSBpZiAoXG5cdFx0XHQoWzAsIDMwMl0uaW5jbHVkZXMobXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSkgJiYgbXcuY29uZmlnLmdldCgnd2dDdXJSZXZpc2lvbklkJykpIHx8XG5cdFx0XHRNb3JlYml0cy5wYWdlTmFtZU5vcm0gPT09IFR3aW5rbGUuZ2V0UHJlZignc2FuZGJveFBhZ2UnKVxuXHRcdCkge1xuXHRcdFx0VHdpbmtsZS5zdHViLm1vZGUgPSAn5p2h55uuJztcblx0XHRcdFR3aW5rbGUuYWRkUG9ydGxldExpbmsoVHdpbmtsZS5zdHViLmNhbGxiYWNrLCAn5bCP5L2c5ZOBJywgJ2ZyaWVuZGx5LXRhZycsICfmoIforrDlsI/kvZzlk4EnKTtcblx0XHR9XG5cdH07XG5cdFR3aW5rbGUuc3R1Yi5jYWxsYmFjayA9ICgpID0+IHtcblx0XHRpZiAoTW9yZWJpdHMuaXNQYWdlUmVkaXJlY3QoKSkge1xuXHRcdFx0Ly8gU2tpcFxuXHRcdFx0Ly8gYXJ0aWNsZS9kcmFmdCBhcnRpY2xlIHRhZ2dpbmdcblx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0KChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpID09PSAwIHx8IG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPT09IDMwMikgJiZcblx0XHRcdFx0bXcuY29uZmlnLmdldCgnd2dDdXJSZXZpc2lvbklkJykpIHx8XG5cdFx0XHRNb3JlYml0cy5wYWdlTmFtZU5vcm0gPT09IFR3aW5rbGUuZ2V0UHJlZignc2FuZGJveFBhZ2UnKVxuXHRcdCkge1xuXHRcdFx0VHdpbmtsZS5zdHViLm1vZGUgPSB3aW5kb3cud2dVTFMoJ+adoeebricsICfmop3nm64nKTtcblx0XHRcdFR3aW5rbGUuYWRkUG9ydGxldExpbmsoXG5cdFx0XHRcdFR3aW5rbGUuc3R1Yi5jYWxsYmFjayxcblx0XHRcdFx0J+Wwj+S9nOWTgScsXG5cdFx0XHRcdCdmcmllbmRseS10YWcnLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+agh+iusOWwj+S9nOWTgScsICfmqJnoqJjlsI/kvZzlk4EnKVxuXHRcdFx0KTtcblx0XHR9XG5cdH07XG5cdFR3aW5rbGUuc3R1Yi5jYWxsYmFjayA9ICgpID0+IHtcblx0XHRjb25zdCBXaW5kb3cgPSBuZXcgTW9yZWJpdHMuc2ltcGxlV2luZG93KDYzMCwgVHdpbmtsZS5zdHViLm1vZGUgPT09ICdhcnRpY2xlJyA/IDQ1MCA6IDQwMCk7XG5cdFx0V2luZG93LnNldFNjcmlwdE5hbWUoJ1R3aW5rbGUnKTtcblx0XHRXaW5kb3cuYWRkRm9vdGVyTGluayh3aW5kb3cud2dVTFMoJ+Wwj+S9nOWTgeiqquaYjicsICflsI/kvZzlk4Hor7TmmI4nKSwgJ1FXOuWwj+S9nOWTgScpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygn5bCP5L2c5ZOB6K6+572uJywgJ+Wwj+S9nOWTgeioreWumicpLCAnSDpUVy9QUkVGI3N0dWInKTtcblx0XHRXaW5kb3cuYWRkRm9vdGVyTGluayh3aW5kb3cud2dVTFMoJ1R3aW5rbGXluK7liqknLCAnVHdpbmtsZeiqquaYjicpLCAnSDpUVy9ET0Mjc3R1YicpO1xuXHRcdGNvbnN0IGZvcm0gPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtKFR3aW5rbGUuc3R1Yi5jYWxsYmFjay5ldmFsdWF0ZSk7XG5cdFx0aWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYXRyb2xsaW5rJykpIHtcblx0XHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0bGlzdDogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+agh+iusOmhtemdouS4uuW3suW3oeafpScsICfmqJnoqJjpoIHpnaLngrrlt7Llt6Hmn6UnKSxcblx0XHRcdFx0XHRcdHZhbHVlOiAncGF0cm9sUGFnZScsXG5cdFx0XHRcdFx0XHRuYW1lOiAncGF0cm9sUGFnZScsXG5cdFx0XHRcdFx0XHRjaGVja2VkOiBUd2lua2xlLmdldFByZWYoJ21hcmtTdHViYmVkUGFnZXNBc1BhdHJvbGxlZCcpLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdF0sXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0c3dpdGNoIChUd2lua2xlLnN0dWIubW9kZSkge1xuXHRcdFx0Y2FzZSAn5qKd55uuJzpcblx0XHRcdGNhc2UgJ+adoeebric6XG5cdFx0XHRcdFdpbmRvdy5zZXRUaXRsZSh3aW5kb3cud2dVTFMoJ+adoeebruWwj+S9nOWTgeagh+iusCcsICfmop3nm67lsI/kvZzlk4HmqJnoqJgnKSk7XG5cdFx0XHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdFx0XHRuYW1lOiAnc29ydG9yZGVyJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmn6XnnIvliJfooajvvJonLCAn5qqi6KaW5YiX6KGo77yaJyksXG5cdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+aCqOWPr+S7peWcqFR3aW5rbGXlj4LmlbDorr7nva7vvIhIOlRXL1BSRUbvvInkuK3mm7TmlLnmraTpobnjgIInLFxuXHRcdFx0XHRcdFx0J+aCqOWPr+S7peWcqFR3aW5rbGXlgY/lpb3oqK3lrprvvIhIOlRXL1BSRUbvvInkuK3mm7TmlLnmraTpoIXjgIInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRldmVudDogVHdpbmtsZS5zdHViLnVwZGF0ZVNvcnRPcmRlcixcblx0XHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdvcHRpb24nLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogJ2NhdCcsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aMieexu+WeiycsICfmjInpoZ7liKUnKSxcblx0XHRcdFx0XHRcdFx0c2VsZWN0ZWQ6IFR3aW5rbGUuZ2V0UHJlZignc3R1YkFydGljbGVTb3J0T3JkZXInKSA9PT0gJ2NhdCcsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdFx0XHRcdFx0dmFsdWU6ICdhbHBoYScsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiAn5oyJ5a2X5q+NJyxcblx0XHRcdFx0XHRcdFx0c2VsZWN0ZWQ6IFR3aW5rbGUuZ2V0UHJlZignc3R1YkFydGljbGVTb3J0T3JkZXInKSA9PT0gJ2FscGhhJyxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdFx0XHRpZDogJ3RhZ1dvcmtBcmVhJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dm9pZCBtdy5ub3RpZnkoYFR3aW5rbGUuc3R1Yu+8muacquefpeaooeW8jyAke1R3aW5rbGUuc3R1Yi5tb2RlfWAsIHtcblx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0dGFnOiAndHdpbmtsZXN0dWInLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdzdWJtaXQnLFxuXHRcdH0pO1xuXHRcdGNvbnN0IHJlc3VsdCA9IGZvcm0ucmVuZGVyKCk7XG5cdFx0V2luZG93LnNldENvbnRlbnQocmVzdWx0KTtcblx0XHRXaW5kb3cuZGlzcGxheSgpO1xuXHRcdGlmIChbJ+adoeebricsICfmop3nm64nXS5pbmNsdWRlcyhUd2lua2xlLnN0dWIubW9kZSkpIHtcblx0XHRcdC8vIGZha2UgYSBjaGFuZ2UgZXZlbnQgb24gdGhlIHNvcnQgZHJvcGRvd24sIHRvIGluaXRpYWxpemUgdGhlIHRhZyBsaXN0XG5cdFx0XHRjb25zdCBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcblx0XHRcdGV2dC5pbml0RXZlbnQoJ2NoYW5nZScsIHRydWUsIHRydWUpO1xuXHRcdFx0cmVzdWx0LnNvcnRvcmRlci5kaXNwYXRjaEV2ZW50KGV2dCk7XG5cdFx0fVxuXHR9O1xuXHRUd2lua2xlLnN0dWIuY2hlY2tlZFRhZ3MgPSBbXTtcblx0VHdpbmtsZS5zdHViLnVwZGF0ZVNvcnRPcmRlciA9IChlKSA9PiB7XG5cdFx0Y29uc3Qgc29ydG9yZGVyID0gZS50YXJnZXQudmFsdWU7XG5cdFx0VHdpbmtsZS5zdHViLmNoZWNrZWRUYWdzID0gZS50YXJnZXQuZm9ybS5nZXRDaGVja2VkKCdhcnRpY2xlVGFncycpO1xuXHRcdFR3aW5rbGUuc3R1Yi5jaGVja2VkVGFncyA/Pz0gW107XG5cdFx0Y29uc3QgY29udGFpbmVyID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybS5lbGVtZW50KHtcblx0XHRcdHR5cGU6ICdmcmFnbWVudCcsXG5cdFx0fSk7XG5cdFx0Ly8gZnVuY3Rpb24gdG8gZ2VuZXJhdGUgYSBjaGVja2JveCwgd2l0aCBhcHByb3ByaWF0ZSBzdWJncm91cCBpZiBuZWVkZWRcblx0XHRjb25zdCBtYWtlQ2hlY2tib3ggPSAodGFnLCBkZXNjcmlwdGlvbikgPT4ge1xuXHRcdFx0Y29uc3QgY2hlY2tib3ggPSB7XG5cdFx0XHRcdHZhbHVlOiB0YWcsXG5cdFx0XHRcdGxhYmVsOiBge3ske3RhZ319fTogJHtkZXNjcmlwdGlvbn1gLFxuXHRcdFx0fTtcblx0XHRcdGlmIChUd2lua2xlLnN0dWIuY2hlY2tlZFRhZ3MuaW5jbHVkZXModGFnKSkge1xuXHRcdFx0XHRjaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjaGVja2JveDtcblx0XHR9O1xuXHRcdC8vIGFwcGVuZCBhbnkgY3VzdG9tIHRhZ3Ncblx0XHRpZiAoVHdpbmtsZS5nZXRQcmVmKCdjdXN0b21TdHViTGlzdCcpLmxlbmd0aCkge1xuXHRcdFx0Y29udGFpbmVyLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdoZWFkZXInLFxuXHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfoh6rlrprkuYnmqKHmnb8nLCAn6Ieq6KiC5qih5p2/JyksXG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IGN1c3RvbWNoZWNrYm94ZXMgPSBbXTtcblx0XHRcdGZvciAoY29uc3QgaXRlbSBvZiBUd2lua2xlLmdldFByZWYoJ2N1c3RvbVN0dWJMaXN0JykpIHtcblx0XHRcdFx0Y3VzdG9tY2hlY2tib3hlc1tjdXN0b21jaGVja2JveGVzLmxlbmd0aF0gPSBtYWtlQ2hlY2tib3goaXRlbS52YWx1ZSwgaXRlbS5sYWJlbCk7XG5cdFx0XHR9XG5cdFx0XHRjb250YWluZXIuYXBwZW5kKHtcblx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0bmFtZTogJ2FydGljbGVUYWdzJyxcblx0XHRcdFx0bGlzdDogY3VzdG9tY2hlY2tib3hlcyxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHQvLyBjYXRlZ29yaWNhbCBzb3J0IG9yZGVyXG5cdFx0aWYgKHNvcnRvcmRlciA9PT0gJ2NhdCcpIHtcblx0XHRcdC8vIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgdGhyb3VnaCB0aGUgdGFncyBhbmQgY3JlYXRlIGEgY2hlY2tib3ggZm9yIGVhY2ggb25lXG5cdFx0XHRjb25zdCBkb0NhdGVnb3J5Q2hlY2tib3hlcyA9IChzdWJkaXYsIGFycmF5KSA9PiB7XG5cdFx0XHRcdGNvbnN0IGNoZWNrYm94ZXMgPSBbXTtcblx0XHRcdFx0Zm9yIChjb25zdCB0YWcgb2YgYXJyYXkpIHtcblx0XHRcdFx0XHRjb25zdCBkZXNjcmlwdGlvbiA9IFR3aW5rbGUuc3R1Yi5hcnRpY2xlLnRhZ3NbdGFnXTtcblx0XHRcdFx0XHRjaGVja2JveGVzW2NoZWNrYm94ZXMubGVuZ3RoXSA9IG1ha2VDaGVja2JveCh0YWcsIGRlc2NyaXB0aW9uKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzdWJkaXYuYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRcdG5hbWU6ICdhcnRpY2xlVGFncycsXG5cdFx0XHRcdFx0bGlzdDogY2hlY2tib3hlcyxcblx0XHRcdFx0fSk7XG5cdFx0XHR9O1xuXHRcdFx0bGV0IGkgPSAwO1xuXHRcdFx0Ly8gZ28gdGhyb3VnaCBlYWNoIGNhdGVnb3J5IGFuZCBzdWItY2F0ZWdvcnkgYW5kIGFwcGVuZCBsaXN0cyBvZiBjaGVja2JveGVzXG5cdFx0XHRmb3IgKGNvbnN0IFt0aXRsZSwgY29udGVudF0gb2YgT2JqZWN0LmVudHJpZXMoVHdpbmtsZS5zdHViLmFydGljbGUudGFnQ2F0ZWdvcmllcykpIHtcblx0XHRcdFx0Y29uc3QgdGl0bGVOYW1lID0gVHdpbmtsZS5zdHViLmFydGljbGUudGFnQ2F0ZWdvcmllc0hlYWRlclt0aXRsZV07XG5cdFx0XHRcdGNvbnRhaW5lci5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdoZWFkZXInLFxuXHRcdFx0XHRcdGlkOiBgdGFnSGVhZGVyJHtpfWAsXG5cdFx0XHRcdFx0bGFiZWw6IHRpdGxlTmFtZSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGNvbnN0IHN1YmRpdiA9IGNvbnRhaW5lci5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRcdGlkOiBgdGFnU3ViZGl2JHtpKyt9YCxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KGNvbnRlbnQpKSB7XG5cdFx0XHRcdFx0ZG9DYXRlZ29yeUNoZWNrYm94ZXMoc3ViZGl2LCBjb250ZW50KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRmb3IgKGNvbnN0IFtzdWJ0aXRsZSwgc3ViY29udGVudF0gb2YgT2JqZWN0LmVudHJpZXMoY29udGVudCkpIHtcblx0XHRcdFx0XHRcdHN1YmRpdi5hcHBlbmQoe1xuXHRcdFx0XHRcdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdFx0XHRcdFx0bGFiZWw6IFtNb3JlYml0cy5odG1sTm9kZSgnYicsIHN1YnRpdGxlKV0sXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGRvQ2F0ZWdvcnlDaGVja2JveGVzKHN1YmRpdiwgc3ViY29udGVudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyBhbHBoYWJldGljYWwgc29ydCBvcmRlclxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBjaGVja2JveGVzID0gW107XG5cdFx0XHRmb3IgKGNvbnN0IFt0YWcsIGRlc2NyaXB0aW9uXSBvZiBPYmplY3QuZW50cmllcyhUd2lua2xlLnN0dWIuYXJ0aWNsZS50YWdzKSkge1xuXHRcdFx0XHRjaGVja2JveGVzW2NoZWNrYm94ZXMubGVuZ3RoXSA9IG1ha2VDaGVja2JveCh0YWcsIGRlc2NyaXB0aW9uKTtcblx0XHRcdH1cblx0XHRcdGNvbnRhaW5lci5hcHBlbmQoe1xuXHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRuYW1lOiAnYXJ0aWNsZVRhZ3MnLFxuXHRcdFx0XHRsaXN0OiBjaGVja2JveGVzLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGNvbnN0ICR3b3JrYXJlYSA9ICQoZS50YXJnZXQuZm9ybSkuZmluZCgnZGl2I3RhZ1dvcmtBcmVhJyk7XG5cdFx0Y29uc3QgcmVuZGVyZWQgPSBjb250YWluZXIucmVuZGVyKCk7XG5cdFx0JHdvcmthcmVhLmVtcHR5KCkuYXBwZW5kKHJlbmRlcmVkKTtcblx0XHQvLyBzdHlsZSBhZGp1c3RtZW50c1xuXHRcdCR3b3JrYXJlYS5maW5kKCdoNScpLmNzcyh7XG5cdFx0XHQnZm9udC1zaXplJzogJzExMCUnLFxuXHRcdH0pO1xuXHRcdCR3b3JrYXJlYS5maW5kKCdoNTpub3QoOmZpcnN0LWNoaWxkKScpLmNzcyh7XG5cdFx0XHQnbWFyZ2luLXRvcCc6ICcxZW0nLFxuXHRcdH0pO1xuXHRcdCR3b3JrYXJlYS5maW5kKCdkaXYnKS5maWx0ZXIoJzpoYXMoc3Bhbi5xdWlja2Zvcm1EZXNjcmlwdGlvbiknKS5jc3Moe1xuXHRcdFx0J21hcmdpbi10b3AnOiAnMC40ZW0nLFxuXHRcdH0pO1xuXHRcdC8vIGFkZCBhIGxpbmsgdG8gZWFjaCB0ZW1wbGF0ZSdzIGRlc2NyaXB0aW9uIHBhZ2Vcblx0XHRmb3IgKGNvbnN0IGNoZWNrYm94IG9mIE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhlLnRhcmdldC5mb3JtLCAnYXJ0aWNsZVRhZ3MnKSkge1xuXHRcdFx0Y29uc3QgJGNoZWNrYm94ID0gJChjaGVja2JveCk7XG5cdFx0XHRjb25zdCBsaW5rID0gTW9yZWJpdHMuaHRtbE5vZGUoJ2EnLCAnPicpO1xuXHRcdFx0bGluay5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3RhZy10ZW1wbGF0ZS1saW5rJyk7XG5cdFx0XHRsaW5rLnNldEF0dHJpYnV0ZShcblx0XHRcdFx0J2hyZWYnLFxuXHRcdFx0XHRtdy51dGlsLmdldFVybChgVGVtcGxhdGU6JHtNb3JlYml0cy5zdHJpbmcudG9VcHBlckNhc2VGaXJzdENoYXIoY2hlY2tib3gudmFsdWVzKX1gKVxuXHRcdFx0KTtcblx0XHRcdGxpbmsuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCAnX2JsYW5rJyk7XG5cdFx0XHRsaW5rLnNldEF0dHJpYnV0ZSgncmVsJywgJ25vb3BlbmVyIG5vcmVmZXJyZXInKTtcblx0XHRcdCRjaGVja2JveC5wYXJlbnQoKS5hcHBlbmQoWydcXHUwMEEwJywgbGlua10pO1xuXHRcdH1cblx0fTtcblx0Ly8gVGFncyBmb3IgQVJUSUNMRVMgc3RhcnQgaGVyZVxuXHRUd2lua2xlLnN0dWIuYXJ0aWNsZSA9IHt9O1xuXHQvLyBBIGxpc3Qgb2YgYWxsIGFydGljbGUgdGFncywgaW4gYWxwaGFiZXRpY2FsIG9yZGVyXG5cdC8vIFRvIGVuc3VyZSB0YWdzIGFwcGVhciBpbiB0aGUgZGVmYXVsdCBcImNhdGVnb3JpemVkXCIgdmlldywgYWRkIHRoZW0gdG8gdGhlIHRhZ0NhdGVnb3JpZXMgaGFzaCBiZWxvdy5cblx0VHdpbmtsZS5zdHViLmFydGljbGUudGFncyA9IHtcblx0XHQnYWN0b3Itc3R1Yic6ICfmvJTlkZgnLFxuXHRcdCdhc2lhLXN0dWInOiAn5Lqa5rSyJyxcblx0XHQnYmlvLXN0dWInOiAn5Lq654mpJyxcblx0XHQnYmlvbG9neS1zdHViJzogJ+eUn+eJqeWtpicsXG5cdFx0J2NoZW0tc3R1Yic6ICfljJblraYnLFxuXHRcdCdldXJvcGUtc3R1Yic6ICfmrKfmtLInLFxuXHRcdCdleHBhbmQgbGlzdCc6ICfmnKrlrozmiJDliJfooagnLFxuXHRcdCdmb29kLXN0dWInOiAn6aOf54mpJyxcblx0XHQnZnJhbmNlLWdlby1zdHViJzogJ+azleWbveWcsOeQhicsXG5cdFx0J2dlby1zdHViJzogJ+WcsOeQhuS9jee9ricsXG5cdFx0J2hpc3Qtc3R1Yic6ICfljoblj7LmiJbljoblj7LlraYnLFxuXHRcdCdKUC1zdHViJzogJ+aXpeacrCcsXG5cdFx0J2xpdC1zdHViJzogJ+aWh+WtpicsXG5cdFx0J21hdGgtc3R1Yic6ICfmlbDlraYnLFxuXHRcdCdtZWQtc3R1Yic6ICfljLvlraYnLFxuXHRcdCdtaWwtc3R1Yic6ICflhpvkuosnLFxuXHRcdCdtb3ZpZS1zdHViJzogJ+eUteW9sScsXG5cdFx0J211c2ljLXN0dWInOiAn6Z+z5LmQJyxcblx0XHQncGh5c2ljcy1zdHViJzogJ+eJqeeQhuWtpicsXG5cdFx0J3BvbGl0aWMtc3R1Yic6ICfmlL/msrsnLFxuXHRcdCdyZWxpZ2lvbi1zdHViJzogJ+Wul+aVmScsXG5cdFx0J3NjaWVuY2Utc3R1Yic6ICfnp5HlraYnLFxuXHRcdCdzcG9ydC1zdHViJzogJ+S9k+iCsicsXG5cdFx0c3R1YjogJ+mAmueUqOWwj+S9nOWTgScsXG5cdFx0J3N3aXR6ZXJsYW5kLXN0dWInOiAn55Ge5aOrJyxcblx0XHQndGVjaC1zdHViJzogJ+enkeaKgCcsXG5cdFx0J3RyYW5zcC1zdHViJzogJ+S6pOmAmicsXG5cdFx0J1RWLXN0dWInOiAn55S16KeGJyxcblx0XHQnVUstc3R1Yic6ICfoi7Hlm70nLFxuXHRcdCdVUy1iaW8tc3R1Yic6ICfnvo7lm73kurrniaknLFxuXHRcdCdVUy1nZW8tc3R1Yic6ICfnvo7lm73lnLDnkIYnLFxuXHRcdCdVUy1zdHViJzogJ+e+juWbvScsXG5cdFx0J3dlYXRoZXItc3R1Yic6ICflpKnmsJTlkoznibnliKvnmoTlpKnmsJTkuovku7YnLFxuXHR9O1xuXHQvLyBBIGxpc3Qgb2YgdGFncyBpbiBvcmRlciBvZiBjYXRlZ29yeVxuXHQvLyBUYWdzIHNob3VsZCBiZSBpbiBhbHBoYWJldGljYWwgb3JkZXIgd2l0aGluIHRoZSBjYXRlZ29yaWVzXG5cdC8vIEFkZCBuZXcgY2F0ZWdvcmllcyB3aXRoIGRpc2NyZXRpb24gLSB0aGUgbGlzdCBpcyBsb25nIGVub3VnaCBhcyBpcyFcblx0VHdpbmtsZS5zdHViLmFydGljbGUudGFnQ2F0ZWdvcmllc0hlYWRlciA9IHtcblx0XHRnZW5lcmFsOiAn6YCa55So5qih5p2/Jyxcblx0XHRnZW86ICflm73lrrblkozlnLDnkIYnLFxuXHRcdG90aGVyczogJ+adgumhuScsXG5cdFx0YmlvOiAn5Lq654mpJyxcblx0XHRzY2llbmNlOiAn56eR5a2mJyxcblx0XHRzcG9ydDogJ+S9k+iCsicsXG5cdFx0dGVjaDogJ+aKgOacrycsXG5cdFx0YXJ0OiAn6Im65pyvJyxcblx0fTtcblx0VHdpbmtsZS5zdHViLmFydGljbGUudGFnQ2F0ZWdvcmllcyA9IHtcblx0XHRnZW5lcmFsOiBbJ3N0dWInLCAnZXhwYW5kIGxpc3QnXSxcblx0XHRnZW86IFtcblx0XHRcdCdhc2lhLXN0dWInLFxuXHRcdFx0J2V1cm9wZS1zdHViJyxcblx0XHRcdCdmcmFuY2UtZ2VvLXN0dWInLFxuXHRcdFx0J2dlby1zdHViJyxcblx0XHRcdCdKUC1zdHViJyxcblx0XHRcdCdzd2l0emVybGFuZC1zdHViJyxcblx0XHRcdCdVSy1zdHViJyxcblx0XHRcdCdVUy1iaW8tc3R1YicsXG5cdFx0XHQnVVMtZ2VvLXN0dWInLFxuXHRcdFx0J1VTLXN0dWInLFxuXHRcdF0sXG5cdFx0b3RoZXJzOiBbJ2Zvb2Qtc3R1YicsICdoaXN0LXN0dWInLCAnbWlsLXN0dWInLCAncG9saXRpYy1zdHViJywgJ3JlbGlnaW9uLXN0dWInLCAndHJhbnNwLXN0dWInXSxcblx0XHRiaW86IFsnYWN0b3Itc3R1YicsICdiaW8tc3R1YicsICdVUy1iaW8tc3R1YiddLFxuXHRcdHNjaWVuY2U6IFsnYmlvbG9neS1zdHViJywgJ2NoZW0tc3R1YicsICdtYXRoLXN0dWInLCAnbWVkLXN0dWInLCAncGh5c2ljcy1zdHViJywgJ3NjaWVuY2Utc3R1YicsICd3ZWF0aGVyLXN0dWInXSxcblx0XHRzcG9ydDogWydzcG9ydC1zdHViJ10sXG5cdFx0dGVjaDogWyd0ZWNoLXN0dWInXSxcblx0XHRhcnQ6IFsnYWN0b3Itc3R1YicsICdsaXQtc3R1YicsICdtb3ZpZS1zdHViJywgJ211c2ljLXN0dWInLCAnVFYtc3R1YiddLFxuXHR9O1xuXHQvLyBUYWdzIGZvciBSRURJUkVDVFMgc3RhcnQgaGVyZVxuXHRUd2lua2xlLnN0dWIuY2FsbGJhY2tzID0ge1xuXHRcdG1haW46IChwYWdlb2JqKSA9PiB7XG5cdFx0XHRjb25zdCBwYXJhbXMgPSBwYWdlb2JqLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0bGV0IHRhZ1JlO1xuXHRcdFx0bGV0IHN1bW1hcnlUZXh0ID0gJ+WKoOWFpSc7XG5cdFx0XHRsZXQgdGFncyA9IFtdO1xuXHRcdFx0Y29uc3QgZ3JvdXBhYmxlVGFncyA9IFtdO1xuXHRcdFx0bGV0IGk7XG5cdFx0XHQvLyBSZW1vdmUgdGFncyB0aGF0IGJlY29tZSBzdXBlcmZsdW91cyB3aXRoIHRoaXMgYWN0aW9uXG5cdFx0XHRsZXQgcGFnZVRleHQgPSBwYWdlb2JqLmdldFBhZ2VUZXh0KCk7XG5cdFx0XHQvLyBDaGVjayBmb3IgcHJlZXhpc3RpbmcgdGFncyBhbmQgc2VwYXJhdGUgdGFncyBpbnRvIGdyb3VwYWJsZSBhbmQgbm9uLWdyb3VwYWJsZSBhcnJheXNcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBwYXJhbXMudGFncy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR0YWdSZSA9IG5ldyBSZWdFeHAoYChcXFxce1xcXFx7JHtwYXJhbXMudGFnc1tpXX0oXFxcXHx8XFxcXH1cXFxcfSkpYCwgJ2ltJyk7XG5cdFx0XHRcdGlmICh0YWdSZS5leGVjKHBhZ2VUZXh0KSkge1xuXHRcdFx0XHRcdE1vcmViaXRzLnN0YXR1cy5pbmZvKFxuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfkv6Hmga8nLCAn6LOH6KiKJyksXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdGDlnKjpobXpnaLkuIrmib7liLB7eyR7cGFyYW1zLnRhZ3NbaV19fX3igKbigKbot7Pov4dgLFxuXHRcdFx0XHRcdFx0XHRg5Zyo6aCB6Z2i5LiK5om+5Yiwe3ske3BhcmFtcy50YWdzW2ldfX194oCm4oCm6Lez6YGOYFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGFncyA9IFsuLi50YWdzLCAuLi5nZW5lcmF0ZUFycmF5KHBhcmFtcy50YWdzW2ldKV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRhZ3MgPSBbLi4udGFncywgLi4uZ3JvdXBhYmxlVGFnc107XG5cdFx0XHR0YWdzLnNvcnQoKTtcblx0XHRcdGNvbnN0IHRvdGFsVGFncyA9IHRhZ3MubGVuZ3RoO1xuXHRcdFx0Y29uc3QgYWRkVGFnID0gKHRhZ05hbWUsIHRhZ0luZGV4KSA9PiB7XG5cdFx0XHRcdHBhZ2VUZXh0ICs9IGBcXG57eyR7dGFnTmFtZX19fWA7XG5cdFx0XHRcdGlmICh0YWdJbmRleCA+IDApIHtcblx0XHRcdFx0XHRpZiAodGFnSW5kZXggPT09IHRvdGFsVGFncyAtIDEpIHtcblx0XHRcdFx0XHRcdHN1bW1hcnlUZXh0ICs9ICflkownO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodGFnSW5kZXggPCB0b3RhbFRhZ3MgLSAxKSB7XG5cdFx0XHRcdFx0XHRzdW1tYXJ5VGV4dCArPSAn44CBJztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3VtbWFyeVRleHQgKz0gJ3t7W1snO1xuXHRcdFx0XHRzdW1tYXJ5VGV4dCArPSB0YWdOYW1lLmluY2x1ZGVzKCc6JykgPyB0YWdOYW1lIDogYFRlbXBsYXRlOiR7dGFnTmFtZX18JHt0YWdOYW1lfWA7XG5cdFx0XHRcdHN1bW1hcnlUZXh0ICs9ICddXX19Jztcblx0XHRcdH07XG5cdFx0XHRmb3IgKGNvbnN0IHRhZyBvZiB0YWdzKSB7XG5cdFx0XHRcdGFkZFRhZyh0YWcpO1xuXHRcdFx0fVxuXHRcdFx0c3VtbWFyeVRleHQgKz0gd2luZG93LndnVUxTKCfmoIforrDliLAnLCAn5qiZ6KiY5YiwJykgKyBUd2lua2xlLnN0dWIubW9kZTtcblx0XHRcdHBhZ2VvYmouc2V0UGFnZVRleHQocGFnZVRleHQpO1xuXHRcdFx0cGFnZW9iai5zZXRFZGl0U3VtbWFyeShzdW1tYXJ5VGV4dCk7XG5cdFx0XHRwYWdlb2JqLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdHBhZ2VvYmouc2V0V2F0Y2hsaXN0KFR3aW5rbGUuZ2V0UHJlZignd2F0Y2hTdHViYmVkUGFnZXMnKSk7XG5cdFx0XHRwYWdlb2JqLnNldE1pbm9yRWRpdChUd2lua2xlLmdldFByZWYoJ21hcmtTdHViYmVkUGFnZXNBc01pbm9yJykpO1xuXHRcdFx0cGFnZW9iai5zZXRDcmVhdGVPcHRpb24oJ25vY3JlYXRlJyk7XG5cdFx0XHRwYWdlb2JqLnNhdmUoKTtcblx0XHRcdGlmIChwYXJhbXMucGF0cm9sKSB7XG5cdFx0XHRcdHBhZ2VvYmoucGF0cm9sKCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0fTtcblx0VHdpbmtsZS5zdHViLmNhbGxiYWNrLmV2YWx1YXRlID0gKGUpID0+IHtcblx0XHRjb25zdCBmb3JtID0gZS50YXJnZXQ7XG5cdFx0Y29uc3QgcGFyYW1zID0ge307XG5cdFx0aWYgKGZvcm0ucGF0cm9sUGFnZSkge1xuXHRcdFx0cGFyYW1zLnBhdHJvbCA9IGZvcm0ucGF0cm9sUGFnZS5jaGVja2VkO1xuXHRcdH1cblx0XHRzd2l0Y2ggKFR3aW5rbGUuc3R1Yi5tb2RlKSB7XG5cdFx0XHRjYXNlICfmop3nm64nOlxuXHRcdFx0Y2FzZSAn5p2h55uuJzpcblx0XHRcdFx0cGFyYW1zLnRhZ3MgPSBmb3JtLmdldENoZWNrZWQoJ2FydGljbGVUYWdzJyk7XG5cdFx0XHRcdHBhcmFtcy5ncm91cCA9IGZhbHNlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHZvaWQgbXcubm90aWZ5KGBUd2lua2xlLnN0dWLvvJrmnKrnn6XmqKHlvI8gJHtUd2lua2xlLnN0dWIubW9kZX1gLCB7XG5cdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdHRhZzogJ3R3aW5rbGVzdHViJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRpZiAoIXBhcmFtcy50YWdzLmxlbmd0aCkge1xuXHRcdFx0dm9pZCBtdy5ub3RpZnkoJ+W/hemhu+mAieaLqeiHs+WwkeS4gOS4quagh+iusO+8gScsIHtcblx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHR0YWc6ICd0d2lua2xlc3R1YicsXG5cdFx0XHR9KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0TW9yZWJpdHMuc2ltcGxlV2luZG93LnNldEJ1dHRvbnNFbmFibGVkKGZhbHNlKTtcblx0XHRNb3JlYml0cy5zdGF0dXMuaW5pdChmb3JtKTtcblx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5yZWRpcmVjdCA9IG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKTtcblx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5ub3RpY2UgPSB3aW5kb3cud2dVTFMoXG5cdFx0XHQn5qCH6K6w5a6M5oiQ77yM5bCG5Zyo5Yeg56eS5YaF5Yi35paw6aG16Z2iJyxcblx0XHRcdCfmqJnoqJjlrozmiJDvvIzlsIflnKjlub7np5Llhafph43mlrDmlbTnkIbpoIHpnaInXG5cdFx0KTtcblx0XHRpZiAoVHdpbmtsZS5zdHViLm1vZGUgPT09ICfph43lrprlkJEnKSB7XG5cdFx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5mb2xsb3dSZWRpcmVjdCA9IGZhbHNlO1xuXHRcdH1cblx0XHRjb25zdCB5c2FyY2hpdmVzX3BhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0bXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLFxuXHRcdFx0d2luZG93LndnVUxTKCfmraPlnKjmoIforrAnLCAn5q2j5Zyo5qiZ6KiYJykgKyBUd2lua2xlLnN0dWIubW9kZVxuXHRcdCk7XG5cdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYXJhbXMpO1xuXHRcdHN3aXRjaCAoVHdpbmtsZS5zdHViLm1vZGUpIHtcblx0XHRcdGNhc2UgJ+aineebric6XG5cdFx0XHRjYXNlICfmnaHnm64nOlxuXHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAn6YeN5a6a5ZCRJzpcblx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLmxvYWQoVHdpbmtsZS5zdHViLmNhbGxiYWNrcy5tYWluKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0Y2FzZSAn5paH5Lu2Jzpcblx0XHRcdGNhc2UgJ+aqlOahiCc6XG5cdFx0XHRcdHlzYXJjaGl2ZXNfcGFnZS5sb2FkKFR3aW5rbGUuc3R1Yi5jYWxsYmFja3MuZmlsZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dm9pZCBtdy5ub3RpZnkoYFR3aW5rbGUuc3R1Yu+8muacquefpeaooeW8jyAke1R3aW5rbGUuc3R1Yi5tb2RlfWAsIHtcblx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0dGFnOiAndHdpbmtsZXN0dWInLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9O1xuXHRUd2lua2xlLmFkZEluaXRDYWxsYmFjayhUd2lua2xlLnN0dWIsICdzdHViJyk7XG59KShqUXVlcnkpO1xuXG5leHBvcnQge307XG4iLCAiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuLy8gQHRzLW5vY2hlY2tcbi8qISBUd2lua2xlLmpzIC0gdHdpbmtsZWRpZmYuanMgKi9cbihmdW5jdGlvbiB0d2lua2xlZGlmZigkKSB7XG5cdC8qKlxuXHQgKiB0d2lua2xlZGlmZi5qczogRGlmZiBtb2R1bGVcblx0ICogTW9kZSBvZiBpbnZvY2F0aW9uOiBUYWIgb24gbm9uLWRpZmYgcGFnZXMgKFwiTGFzdFwiKTtcblx0ICogdGFicyBvbiBkaWZmIHBhZ2VzIChcIlNpbmNlXCIsIFwiU2luY2UgbWluZVwiLCBcIkN1cnJlbnRcIilcblx0ICogQWN0aXZlIG9uOiBFeGlzdGluZyBub24tc3BlY2lhbCBwYWdlc1xuXHQgKi9cblx0VHdpbmtsZS5kaWZmID0gKCkgPT4ge1xuXHRcdGlmIChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpIDwgMCB8fCAhbXcuY29uZmlnLmdldCgnd2dBcnRpY2xlSWQnKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRUd2lua2xlLmFkZFBvcnRsZXRMaW5rKFxuXHRcdFx0bXcudXRpbC5nZXRVcmwobXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLCB7XG5cdFx0XHRcdGRpZmY6ICdjdXInLFxuXHRcdFx0XHRvbGRpZDogJ3ByZXYnLFxuXHRcdFx0fSksXG5cdFx0XHR3aW5kb3cud2dVTFMoJ+acgOWQjicsICfmnIDlvownKSxcblx0XHRcdCd0dy1sYXN0ZGlmZicsXG5cdFx0XHR3aW5kb3cud2dVTFMoJ+aYvuekuuacgOWQjuS/ruaUuScsICfpoa/npLrmnIDlvozkv67mlLknKVxuXHRcdCk7XG5cdFx0Ly8gU2hvdyBhZGRpdGlvbmFsIHRhYnMgb25seSBvbiBkaWZmIHBhZ2VzXG5cdFx0aWYgKG13LmNvbmZpZy5nZXQoJ3dnRGlmZk5ld0lkJykpIHtcblx0XHRcdFR3aW5rbGUuYWRkUG9ydGxldExpbmsoXG5cdFx0XHRcdCgpID0+IHtcblx0XHRcdFx0XHRUd2lua2xlLmRpZmYuZXZhbHVhdGUoZmFsc2UpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQn6Ieq5LiKJyxcblx0XHRcdFx0J3R3LXNpbmNlJyxcblx0XHRcdFx0d2luZG93LndnVUxTKCfmmL7npLrkuI7kuIrkuIDkv67orqLniYjmnKzpl7TnmoTlt67lvIInLCAn6aGv56S66IiH5LiK5LiA5L+u6KiC54mI5pys6ZaT55qE5beu55WwJylcblx0XHRcdCk7XG5cdFx0XHRUd2lua2xlLmFkZFBvcnRsZXRMaW5rKFxuXHRcdFx0XHQoKSA9PiB7XG5cdFx0XHRcdFx0VHdpbmtsZS5kaWZmLmV2YWx1YXRlKHRydWUpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQn6Ieq5oiRJyxcblx0XHRcdFx0J3R3LXNpbmNlbWluZScsXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn5pi+56S65LiO5oiR5YGa5Ye655qE5L+u6K6i54mI5pys55qE5beu5byCJywgJ+mhr+ekuuiIh+aIkeWBmuWHuueahOS/ruiogueJiOacrOeahOW3rueVsCcpXG5cdFx0XHQpO1xuXHRcdFx0VHdpbmtsZS5hZGRQb3J0bGV0TGluayhcblx0XHRcdFx0bXcudXRpbC5nZXRVcmwobXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLCB7XG5cdFx0XHRcdFx0ZGlmZjogJ2N1cicsXG5cdFx0XHRcdFx0b2xkaWQ6IG13LmNvbmZpZy5nZXQoJ3dnRGlmZk5ld0lkJyksXG5cdFx0XHRcdH0pLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+W9k+WJjScsICfnm67liY0nKSxcblx0XHRcdFx0J3R3LWN1cmRpZmYnLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+aYvuekuuS4juW9k+WJjeeJiOacrOmXtOeahOW3ruW8gicsICfpoa/npLroiIfnm67liY3niYjmnKzplpPnmoTlt67nlbAnKVxuXHRcdFx0KTtcblx0XHR9XG5cdH07XG5cdFR3aW5rbGUuZGlmZi5ldmFsdWF0ZSA9IChtZSkgPT4ge1xuXHRcdGxldCB1c2VyO1xuXHRcdGlmIChtZSkge1xuXHRcdFx0dXNlciA9IG13LmNvbmZpZy5nZXQoJ3dnVXNlck5hbWUnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3Qgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtdy1kaWZmLW50aXRsZTInKTtcblx0XHRcdGlmICghbm9kZSkge1xuXHRcdFx0XHQvLyBub3RoaW5nIHRvIGRvP1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR1c2VyID0gJChub2RlKS5maW5kKCdhJykuZmlyc3QoKS50ZXh0KCk7XG5cdFx0fVxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cHJvcDogJ3JldmlzaW9ucycsXG5cdFx0XHRhY3Rpb246ICdxdWVyeScsXG5cdFx0XHR0aXRsZXM6IG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSxcblx0XHRcdHJ2bGltaXQ6IDEsXG5cdFx0XHRydnByb3A6IFsnaWRzJywgJ3VzZXInXSxcblx0XHRcdHJ2c3RhcnRpZDogbXcuY29uZmlnLmdldCgnd2dDdXJSZXZpc2lvbklkJykgLSAxLFxuXHRcdFx0cnZ1c2VyOiB1c2VyLFxuXHRcdH07XG5cdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI213LWNvbnRlbnQtdGV4dCcpKTtcblx0XHRjb25zdCB5c2FyY2hpdmVzX2FwaSA9IG5ldyBNb3JlYml0cy53aWtpLmFwaShcblx0XHRcdHdpbmRvdy53Z1VMUygn5oqT5Y+W5pyA5Yid6LSh54yu6ICF5L+h5oGvJywgJ+aKk+WPluacgOWIneiyoueNu+iAheizh+ioiicpLFxuXHRcdFx0cXVlcnksXG5cdFx0XHRUd2lua2xlLmRpZmYuY2FsbGJhY2tzLm1haW5cblx0XHQpO1xuXHRcdHlzYXJjaGl2ZXNfYXBpLnBhcmFtcyA9IHtcblx0XHRcdHVzZXIsXG5cdFx0fTtcblx0XHR5c2FyY2hpdmVzX2FwaS5wb3N0KCk7XG5cdH07XG5cdFR3aW5rbGUuZGlmZi5jYWxsYmFja3MgPSB7XG5cdFx0bWFpbjogKHNlbGYpID0+IHtcblx0XHRcdGNvbnN0IHhtbERvYyA9IHNlbGYucmVzcG9uc2VYTUw7XG5cdFx0XHRjb25zdCByZXZpZCA9ICQoeG1sRG9jKS5maW5kKCdyZXYnKS5hdHRyKCdyZXZpZCcpO1xuXHRcdFx0aWYgKCFyZXZpZCkge1xuXHRcdFx0XHRzZWxmLnN0YXRlbGVtLmVycm9yKFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5pyq5om+5Yiw5ZCI6YCC55qE5pep5pyf54mI5pys77yM5oiWICcsICfmnKrmib7liLDlkIjpgannmoTml6nmnJ/niYjmnKzvvIzmiJYgJykgK1xuXHRcdFx0XHRcdFx0c2VsZi5wYXJhbXMudXNlciArXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJyDmmK/llK/kuIDotKHnjK7ogIXjgILlj5bmtojjgIInLCAnIOaYr+WUr+S4gOiyoueNu+iAheOAguWPlua2iOOAgicpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGxvY2F0aW9uID0gbXcudXRpbC5nZXRVcmwobXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLCB7XG5cdFx0XHRcdGRpZmY6IG13LmNvbmZpZy5nZXQoJ3dnQ3VyUmV2aXNpb25JZCcpLFxuXHRcdFx0XHRvbGRpZDogcmV2aWQsXG5cdFx0XHR9KTtcblx0XHR9LFxuXHR9O1xuXHRUd2lua2xlLmFkZEluaXRDYWxsYmFjayhUd2lua2xlLmRpZmYsICdkaWZmJyk7XG59KShqUXVlcnkpO1xuXG5leHBvcnQge307XG4iLCAiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuLy8gQHRzLW5vY2hlY2tcbi8qISBUd2lua2xlLmpzIC0gdHdpbmtsZXVubGluay5qcyAqL1xuKGZ1bmN0aW9uIHR3aW5rbGV1bmxpbmsoJCkge1xuXHQvKipcblx0ICogdHdpbmtsZXVubGluay5qczogVW5saW5rIG1vZHVsZVxuXHQgKiBNb2RlIG9mIGludm9jYXRpb246IFRhYiAoXCJVbmxpbmtcIilcblx0ICogQWN0aXZlIG9uOiBOb24tc3BlY2lhbCBwYWdlcywgZXhjZXB0IExJQjrmspnnm5Jcblx0ICovXG5cdFR3aW5rbGUudW5saW5rID0gKCkgPT4ge1xuXHRcdGlmIChcblx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPCAwIHx8XG5cdFx0XHRtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJykgPT09IFR3aW5rbGUuZ2V0UHJlZignc2FuZGJveFBhZ2UnKSB8fFxuXHRcdFx0IU1vcmViaXRzLnVzZXJJc1N5c29wXG5cdFx0KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFR3aW5rbGUuYWRkUG9ydGxldExpbmsoXG5cdFx0XHRUd2lua2xlLnVubGluay5jYWxsYmFjayxcblx0XHRcdHdpbmRvdy53Z1VMUygn5raI6ZO+JywgJ+a2iOmAoycpLFxuXHRcdFx0J3R3LXVubGluaycsXG5cdFx0XHR3aW5kb3cud2dVTFMoJ+WPlua2iOWIsOacrOmhteeahOmTvuaOpScsICflj5bmtojliLDmnKzpoIHnmoTpgKPntZAnKVxuXHRcdCk7XG5cdH07XG5cdC8vIHRoZSBwYXJhbWV0ZXIgaXMgdXNlZCB3aGVuIGludm9raW5nIHVubGluayBmcm9tIGFkbWluIHNwZWVkeVxuXHRUd2lua2xlLnVubGluay5jYWxsYmFjayA9IChwcmVzZXRSZWFzb24pID0+IHtcblx0XHRjb25zdCBmaWxlU3BhY2UgPSBtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpID09PSA2O1xuXHRcdGNvbnN0IFdpbmRvdyA9IG5ldyBNb3JlYml0cy5zaW1wbGVXaW5kb3coNjAwLCA0NDApO1xuXHRcdFdpbmRvdy5zZXRUaXRsZShcblx0XHRcdHdpbmRvdy53Z1VMUygn5Y+W5raI6ZO+5YWlJywgJ+WPlua2iOmAo+WFpScpICtcblx0XHRcdFx0KGZpbGVTcGFjZSA/IHdpbmRvdy53Z1VMUygn5ZKM5qih5p2/44CB5paH5Lu25L2/55SoJywgJ+WSjOaooeadv+OAgeaqlOahiOS9v+eUqCcpIDogJycpXG5cdFx0KTtcblx0XHRXaW5kb3cuc2V0U2NyaXB0TmFtZSgnVHdpbmtsZScpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygn6ZO+5YWl6K6+572uJywgJ+mAo+WFpeioreWumicpLCAnSDpUVy9QUkVGI3VubGluaycpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygnVHdpbmtsZeW4ruWKqScsICdUd2lua2xl6Kqq5piOJyksICdIOlRXL0RPQyN1bmxpbmsnKTtcblx0XHRjb25zdCBmb3JtID0gbmV3IE1vcmViaXRzLnF1aWNrRm9ybShUd2lua2xlLnVubGluay5jYWxsYmFjay5ldmFsdWF0ZSk7XG5cdFx0Ly8gcHJlcGVuZCBzb21lIGRvY3VtZW50YXRpb246IGZpbGVzIGFyZSBjb21tZW50ZWQgb3V0LCB3aGlsZSBhbnlcblx0XHQvLyBkaXNwbGF5IHRleHQgaXMgcHJlc2VydmVkIGZvciBsaW5rcyAob3RoZXJ3aXNlIHRoZSBsaW5rIGl0c2VsZiBpcyB1c2VkKVxuXHRcdGNvbnN0IGxpbmtUZXh0QmVmb3JlID0gTW9yZWJpdHMuaHRtbE5vZGUoXG5cdFx0XHQnY29kZScsXG5cdFx0XHRgW1ske2ZpbGVTcGFjZSA/ICc6JyA6ICcnfSR7TW9yZWJpdHMucGFnZU5hbWVOb3JtfSR7d2luZG93LndnVUxTKCd86ZO+5o6l5paH5a2XXV0nLCAnfOmAo+e1kOaWh+Wtl11dJyl9YFxuXHRcdCk7XG5cdFx0Y29uc3QgbGlua1RleHRBZnRlciA9IE1vcmViaXRzLmh0bWxOb2RlKCdjb2RlJywgd2luZG93LndnVUxTKCfpk77mjqXmloflrZcnLCAn6YCj57WQ5paH5a2XJykpO1xuXHRcdGNvbnN0IGxpbmtQbGFpbkJlZm9yZSA9IE1vcmViaXRzLmh0bWxOb2RlKCdjb2RlJywgYFtbJHtNb3JlYml0cy5wYWdlTmFtZU5vcm19XV1gKTtcblx0XHRjb25zdCBsaW5rVGVtcGxhdGVCZWZvcmUgPSBNb3JlYml0cy5odG1sTm9kZSgnY29kZScsIGB7eyR7bXcuY29uZmlnLmdldCgnd2dUaXRsZScpfX19YCk7XG5cdFx0bGV0IGxpbmtQbGFpbkFmdGVyO1xuXHRcdGlmIChmaWxlU3BhY2UpIHtcblx0XHRcdGxpbmtQbGFpbkFmdGVyID0gTW9yZWJpdHMuaHRtbE5vZGUoJ2NvZGUnLCBgPCEtLSBbWyR7TW9yZWJpdHMucGFnZU5hbWVOb3JtfV1dIC0tPmApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsaW5rUGxhaW5BZnRlciA9IE1vcmViaXRzLmh0bWxOb2RlKCdjb2RlJywgTW9yZWJpdHMucGFnZU5hbWVOb3JtKTtcblx0XHR9XG5cdFx0Zm9yIChjb25zdCBub2RlIG9mIFtsaW5rVGV4dEJlZm9yZSwgbGlua1RleHRBZnRlciwgbGlua1BsYWluQmVmb3JlLCBsaW5rUGxhaW5BZnRlciwgbGlua1RlbXBsYXRlQmVmb3JlXSkge1xuXHRcdFx0bm9kZS5zdHlsZS5mb250RmFtaWx5ID0gJ21vbm9zcGFjZSc7XG5cdFx0XHRub2RlLnN0eWxlLmZvbnRTdHlsZSA9ICdub3JtYWwnO1xuXHRcdH1cblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdHN0eWxlOiAnbWFyZ2luLWJvdHRvbTogMC41ZW07IGZvbnQtc3R5bGU6IG5vcm1hbCcsXG5cdFx0XHRsYWJlbDogW1xuXHRcdFx0XHRgJHtcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn6L+Z5Liq5bel5YW35Y+v5Lul5Y+W5raI5omA5pyJ5oyH5ZCR6K+l6aG155qE6ZO+5o6l77yI4oCc6ZO+5YWl4oCd77yJJyxcblx0XHRcdFx0XHRcdCfpgJnlgIvlt6Xlhbflj6/ku6Xlj5bmtojmiYDmnInmjIflkJHoqbLpoIHnmoTpgKPntZDvvIjjgIzpgKPlhaXjgI3vvIknXG5cdFx0XHRcdFx0KSArXG5cdFx0XHRcdFx0KGZpbGVTcGFjZVxuXHRcdFx0XHRcdFx0PyB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J++8jOaIlumAmui/h+WKoOWFpTwhLS0gLS0+5rOo6YeK5qCH6K6w6ZqQ6JeP5omA5pyJ5a+55q2k5paH5Lu255qE5L2/55SoJyxcblx0XHRcdFx0XHRcdFx0XHQn77yM5oiW6YCP6YGO5Yqg5YWlPCEtLSAtLT7ms6jph4vmqJnoqJjpmrHol4/miYDmnInlsI3mraTmqpTmoYjnmoTkvb/nlKgnXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdDogJycpXG5cdFx0XHRcdH3jgILkvovlpoLvvJpgLFxuXHRcdFx0XHRsaW5rVGV4dEJlZm9yZSxcblx0XHRcdFx0d2luZG93LndnVUxTKCflsIbkvJrlj5jmiJAnLCAn5bCH5pyD6K6K5oiQJyksXG5cdFx0XHRcdGxpbmtUZXh0QWZ0ZXIsXG5cdFx0XHRcdCfvvIwnLFxuXHRcdFx0XHRsaW5rUGxhaW5CZWZvcmUsXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn5bCG5Lya5Y+Y5oiQJywgJ+Wwh+acg+iuiuaIkCcpLFxuXHRcdFx0XHRsaW5rUGxhaW5BZnRlcixcblx0XHRcdFx0J++8jCcsXG5cdFx0XHRcdGxpbmtUZW1wbGF0ZUJlZm9yZSxcblx0XHRcdFx0d2luZG93LndnVUxTKCflsIbkvJrooqvnp7vpmaQnLCAn5bCH5pyD6KKr56e76ZmkJyksXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn44CC6K+35bCP5b+D5L2/55So44CCJywgJ+OAguiri+Wwj+W/g+S9v+eUqOOAgicpLFxuXHRcdFx0XSxcblx0XHR9KTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0bmFtZTogJ3JlYXNvbicsXG5cdFx0XHRsYWJlbDogJ+eQhueUse+8micsXG5cdFx0XHR2YWx1ZTogcHJlc2V0UmVhc29uIHx8ICcnLFxuXHRcdFx0c2l6ZTogNjAsXG5cdFx0fSk7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRhY3Rpb246ICdxdWVyeScsXG5cdFx0XHRsaXN0OiAnYmFja2xpbmtzJyxcblx0XHRcdGJsdGl0bGU6IG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSxcblx0XHRcdGJsbGltaXQ6ICdtYXgnLFxuXHRcdFx0Ly8gNTAwIGlzIG1heCBmb3Igbm9ybWFsIHVzZXJzLCA1MDAwIGZvciBib3RzIGFuZCBzeXNvcHNcblx0XHRcdGJsbmFtZXNwYWNlOiBUd2lua2xlLmdldFByZWYoJ3VubGlua05hbWVzcGFjZXMnKSxcblx0XHRcdHJhd2NvbnRpbnVlOiB0cnVlLFxuXHRcdFx0Zm9ybWF0OiAnanNvbicsXG5cdFx0fTtcblx0XHRpZiAoZmlsZVNwYWNlKSB7XG5cdFx0XHRxdWVyeS5saXN0ICs9ICd8aW1hZ2V1c2FnZSc7XG5cdFx0XHRxdWVyeS5pdXRpdGxlID0gcXVlcnkuYmx0aXRsZTtcblx0XHRcdHF1ZXJ5Lml1bGltaXQgPSBxdWVyeS5ibGxpbWl0O1xuXHRcdFx0cXVlcnkuaXVuYW1lc3BhY2UgPSBxdWVyeS5ibG5hbWVzcGFjZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cXVlcnkuYmxmaWx0ZXJyZWRpciA9ICdub25yZWRpcmVjdHMnO1xuXHRcdH1cblx0XHRjb25zdCB5c2FyY2hpdmVzX2FwaSA9IG5ldyBNb3JlYml0cy53aWtpLmFwaShcblx0XHRcdHdpbmRvdy53Z1VMUygn5oqT5Y+W6ZO+5YWlJywgJ+aKk+WPlumAo+WFpScpLFxuXHRcdFx0cXVlcnksXG5cdFx0XHRUd2lua2xlLnVubGluay5jYWxsYmFja3MuZGlzcGxheS5iYWNrbGlua3Ncblx0XHQpO1xuXHRcdHlzYXJjaGl2ZXNfYXBpLnBhcmFtcyA9IHtcblx0XHRcdGZvcm0sXG5cdFx0XHRXaW5kb3csXG5cdFx0XHRpbWFnZTogZmlsZVNwYWNlLFxuXHRcdH07XG5cdFx0eXNhcmNoaXZlc19hcGkucG9zdCgpO1xuXHRcdGNvbnN0IHJvb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRyb290LnN0eWxlLnBhZGRpbmcgPSAnMTVweCc7IC8vIGp1c3Qgc28gaXQgZG9lc24ndCBsb29rIGJyb2tlblxuXHRcdE1vcmViaXRzLnN0YXR1cy5pbml0KHJvb3QpO1xuXHRcdHlzYXJjaGl2ZXNfYXBpLnN0YXRlbGVtLnN0YXR1cyh3aW5kb3cud2dVTFMoJ+WKoOi9veS4reKApuKApicsICfovInlhaXkuK3igKbigKYnKSk7XG5cdFx0V2luZG93LnNldENvbnRlbnQocm9vdCk7XG5cdFx0V2luZG93LmRpc3BsYXkoKTtcblx0fTtcblx0VHdpbmtsZS51bmxpbmsuY2FsbGJhY2suZXZhbHVhdGUgPSAoZXZlbnQpID0+IHtcblx0XHRjb25zdCBmb3JtID0gZXZlbnQudGFyZ2V0O1xuXHRcdGNvbnN0IGlucHV0ID0gTW9yZWJpdHMucXVpY2tGb3JtLmdldElucHV0RGF0YShmb3JtKTtcblx0XHRpZiAoIWlucHV0LnJlYXNvbikge1xuXHRcdFx0dm9pZCBtdy5ub3RpZnkod2luZG93LndnVUxTKCfmgqjlv4XpobvmjIflrprlj5bmtojpk77lhaXnmoTnkIbnlLHjgIInLCAn5oKo5b+F6aCI5oyH5a6a5Y+W5raI6YCj5YWl55qE55CG55Sx44CCJyksIHtcblx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHR0YWc6ICd0d2lua2xldW5saW5rJyxcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpbnB1dC5iYWNrbGlua3MgfHw9IFtdO1xuXHRcdGlucHV0LmltYWdldXNhZ2UgfHw9IFtdO1xuXHRcdGNvbnN0IHBhZ2VzID0gTW9yZWJpdHMuYXJyYXkudW5pcShbLi4uaW5wdXQuYmFja2xpbmtzLCAuLi5pbnB1dC5pbWFnZXVzYWdlXSk7XG5cdFx0aWYgKCFwYWdlcy5sZW5ndGgpIHtcblx0XHRcdHZvaWQgbXcubm90aWZ5KFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+aCqOW/hemhu+iHs+WwkemAieaLqeS4gOS4quimgeWPlua2iOmTvuWFpeeahOmhtemdouOAgicsICfmgqjlv4XpoIjoh7PlsJHpgbjmk4fkuIDlgIvopoHlj5bmtojpgKPlhaXnmoTpoIHpnaLjgIInKSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0XHR0YWc6ICd0d2lua2xldW5saW5rJyxcblx0XHRcdFx0fVxuXHRcdFx0KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0TW9yZWJpdHMuc2ltcGxlV2luZG93LnNldEJ1dHRvbnNFbmFibGVkKGZhbHNlKTtcblx0XHRNb3JlYml0cy5zdGF0dXMuaW5pdChmb3JtKTtcblx0XHRjb25zdCB1bmxpbmtlciA9IG5ldyBNb3JlYml0cy5iYXRjaE9wZXJhdGlvbihcblx0XHRcdGDlj5bmtogke1xuXHRcdFx0XHRpbnB1dC5iYWNrbGlua3MubGVuZ3RoXG5cdFx0XHRcdFx0PyB3aW5kb3cud2dVTFMoJ+mTvuWFpScsICfpgKPlhaUnKSArXG5cdFx0XHRcdFx0XHQoaW5wdXQuaW1hZ2V1c2FnZS5sZW5ndGggPyB3aW5kb3cud2dVTFMoJ+S4juaWh+S7tuS9v+eUqCcsICfoiIfmqpTmoYjkvb/nlKgnKSA6ICcnKVxuXHRcdFx0XHRcdDogd2luZG93LndnVUxTKCfmlofku7bkvb/nlKgnLCAn5qqU5qGI5L2/55SoJylcblx0XHRcdH1gXG5cdFx0KTtcblx0XHR1bmxpbmtlci5zZXRPcHRpb24oJ3ByZXNlcnZlSW5kaXZpZHVhbFN0YXR1c0xpbmVzJywgdHJ1ZSk7XG5cdFx0dW5saW5rZXIuc2V0UGFnZUxpc3QocGFnZXMpO1xuXHRcdGNvbnN0IHBhcmFtcyA9IHtcblx0XHRcdHJlYXNvbjogaW5wdXQucmVhc29uLFxuXHRcdFx0dW5saW5rZXIsXG5cdFx0fTtcblx0XHR1bmxpbmtlci5ydW4oKHBhZ2VOYW1lKSA9PiB7XG5cdFx0XHRjb25zdCB5c2FyY2hpdmVzX3BhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0XHRwYWdlTmFtZSxcblx0XHRcdFx0d2luZG93LndnVUxTKCflnKjpobXpnaLigJwnLCAn5Zyo6aCB6Z2i44CMJykgKyBwYWdlTmFtZSArIHdpbmRvdy53Z1VMUygn4oCd5Lit5Y+W5raI6ZO+5YWlJywgJ+OAjeS4reWPlua2iOmAo+WFpScpXG5cdFx0XHQpO1xuXHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldEJvdEVkaXQodHJ1ZSk7IC8vIHVubGluayBjb25zaWRlcmVkIGEgZmxvb2R5IG9wZXJhdGlvblxuXHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyh7XG5cdFx0XHRcdGRvQmFja2xpbmtzOiBpbnB1dC5iYWNrbGlua3MuaW5jbHVkZXMocGFnZU5hbWUpLFxuXHRcdFx0XHRkb0ltYWdldXNhZ2U6IGlucHV0LmltYWdldXNhZ2UuaW5jbHVkZXMocGFnZU5hbWUpLFxuXHRcdFx0XHQuLi5wYXJhbXMsXG5cdFx0XHR9KTtcblx0XHRcdHlzYXJjaGl2ZXNfcGFnZS5sb2FkKFR3aW5rbGUudW5saW5rLmNhbGxiYWNrcy51bmxpbmtCYWNrbGlua3MpO1xuXHRcdH0pO1xuXHR9O1xuXHRUd2lua2xlLnVubGluay5jYWxsYmFja3MgPSB7XG5cdFx0ZGlzcGxheToge1xuXHRcdFx0YmFja2xpbmtzOiAoYXBpb2JqKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHJlc3BvbnNlID0gYXBpb2JqLmdldFJlc3BvbnNlKCk7XG5cdFx0XHRcdGxldCBoYXZlY29udGVudCA9IGZhbHNlO1xuXHRcdFx0XHRsZXQgbGlzdDtcblx0XHRcdFx0bGV0IG5hbWVzcGFjZXM7XG5cdFx0XHRcdGxldCBpO1xuXHRcdFx0XHRpZiAoYXBpb2JqLnBhcmFtcy5pbWFnZSkge1xuXHRcdFx0XHRcdGNvbnN0IGltYWdldXNhZ2UgPSByZXNwb25zZS5xdWVyeS5pbWFnZXVzYWdlLnNvcnQoVHdpbmtsZS5zb3J0QnlOYW1lc3BhY2UpO1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgaW1hZ2V1c2FnZS5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRcdFx0Ly8gTGFiZWwgbWFkZSBieSBUd2lua2xlLmdlbmVyYXRlQmF0Y2hQYWdlTGlua3Ncblx0XHRcdFx0XHRcdGxpc3RbbGlzdC5sZW5ndGhdID0ge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogJycsXG5cdFx0XHRcdFx0XHRcdHZhbHVlOiBpbWFnZXVzYWdlW2ldLnRpdGxlLFxuXHRcdFx0XHRcdFx0XHRjaGVja2VkOiB0cnVlLFxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGxpc3QubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRhcGlvYmoucGFyYW1zLmZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHRcdFx0dHlwZTogJ2hlYWRlcicsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aWh+S7tuS9v+eUqCcsICfmqpTmoYjkvb/nlKgnKSxcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0bmFtZXNwYWNlcyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCB2IG9mIFR3aW5rbGUuZ2V0UHJlZigndW5saW5rTmFtZXNwYWNlcycpKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWVzcGFjZXNbbmFtZXNwYWNlcy5sZW5ndGhdID1cblx0XHRcdFx0XHRcdFx0XHR2ID09PSAnMCdcblx0XHRcdFx0XHRcdFx0XHRcdD8gd2luZG93LndnVUxTKCfvvIjmnaHnm67vvIknLCAn77yI5qKd55uu77yJJylcblx0XHRcdFx0XHRcdFx0XHRcdDogbXcuY29uZmlnLmdldCgnd2dGb3JtYXR0ZWROYW1lc3BhY2VzJylbdl07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRhcGlvYmoucGFyYW1zLmZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+W3sumAieaLqeeahOWRveWQjeepuumXtO+8micsICflt7Lpgbjmk4fnmoTlkb3lkI3nqbrplpPvvJonKSArIG5hbWVzcGFjZXMuam9pbign44CBJyksXG5cdFx0XHRcdFx0XHRcdHRvb2x0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHQn5oKo5Y+v5ZyoVHdpbmtsZeWPguaVsOiuvue9ruS4reabtOaUueebuOWFs+mAiemhue+8jOivt+WPguingVtbSDpUVy9QUkVGXV0nLFxuXHRcdFx0XHRcdFx0XHRcdCfmgqjlj6/lnKhUd2lua2xl5YGP5aW96Kit5a6a5Lit5pu05pS555u46Zec6YG46aCF77yM6KuL5Y+D6KaLW1tIOlRXL1BSRUZdXSdcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0aWYgKHJlc3BvbnNlWydxdWVyeS1jb250aW51ZSddICYmIHJlc3BvbnNlWydxdWVyeS1jb250aW51ZSddLmltYWdldXNhZ2UpIHtcblx0XHRcdFx0XHRcdFx0YXBpb2JqLnBhcmFtcy5mb3JtLmFwcGVuZCh7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdFx0XHRcdFx0bGFiZWw6XG5cdFx0XHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+aYvuekuuWJjScsICfpoa/npLrliY0nKSArXG5cdFx0XHRcdFx0XHRcdFx0XHRtdy5sYW5ndWFnZS5jb252ZXJ0TnVtYmVyKGxpc3QubGVuZ3RoKSArXG5cdFx0XHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+S4quaWh+S7tuS9v+eUqOOAgicsICflgIvmqpTmoYjkvb/nlKjjgIInKSxcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRhcGlvYmoucGFyYW1zLmZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHRcdFx0dHlwZTogJ2J1dHRvbicsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WFqOmAiScsICflhajpgbgnKSxcblx0XHRcdFx0XHRcdFx0ZXZlbnQ6IChlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0JChNb3JlYml0cy5xdWlja0Zvcm0uZ2V0RWxlbWVudHMoZS50YXJnZXQuZm9ybSwgJ2ltYWdldXNhZ2UnKSkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRhcGlvYmoucGFyYW1zLmZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHRcdFx0dHlwZTogJ2J1dHRvbicsXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WFqOS4jemAiScsICflhajkuI3pgbgnKSxcblx0XHRcdFx0XHRcdFx0ZXZlbnQ6IChlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0JChNb3JlYml0cy5xdWlja0Zvcm0uZ2V0RWxlbWVudHMoZS50YXJnZXQuZm9ybSwgJ2ltYWdldXNhZ2UnKSkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0YXBpb2JqLnBhcmFtcy5mb3JtLmFwcGVuZCh7XG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdFx0XHRcdG5hbWU6ICdpbWFnZXVzYWdlJyxcblx0XHRcdFx0XHRcdFx0c2hpZnRDbGlja1N1cHBvcnQ6IHRydWUsXG5cdFx0XHRcdFx0XHRcdGxpc3QsXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGhhdmVjb250ZW50ID0gdHJ1ZTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0YXBpb2JqLnBhcmFtcy5mb3JtLmFwcGVuZCh7XG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdkaXYnLFxuXHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmnKrmib7liLDmlofku7bkvb/nlKjjgIInLCAn5pyq5om+5Yiw5qqU5qGI5L2/55So44CCJyksXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgYmFja2xpbmtzID0gcmVzcG9uc2UucXVlcnkuYmFja2xpbmtzLnNvcnQoVHdpbmtsZS5zb3J0QnlOYW1lc3BhY2UpO1xuXHRcdFx0XHRpZiAoYmFja2xpbmtzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGJhY2tsaW5rcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRcdFx0Ly8gTGFiZWwgbWFkZSBieSBUd2lua2xlLmdlbmVyYXRlQmF0Y2hQYWdlTGlua3Ncblx0XHRcdFx0XHRcdGxpc3RbbGlzdC5sZW5ndGhdID0ge1xuXHRcdFx0XHRcdFx0XHRsYWJlbDogJycsXG5cdFx0XHRcdFx0XHRcdHZhbHVlOiBiYWNrbGlua3NbaV0udGl0bGUsXG5cdFx0XHRcdFx0XHRcdGNoZWNrZWQ6IHRydWUsXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRhcGlvYmoucGFyYW1zLmZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHRcdHR5cGU6ICdoZWFkZXInLFxuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6ZO+5YWlJywgJ+mAo+WFpScpLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdG5hbWVzcGFjZXMgPSBbXTtcblx0XHRcdFx0XHRmb3IgKGNvbnN0IHYgb2YgVHdpbmtsZS5nZXRQcmVmKCd1bmxpbmtOYW1lc3BhY2VzJykpIHtcblx0XHRcdFx0XHRcdG5hbWVzcGFjZXNbbmFtZXNwYWNlcy5sZW5ndGhdID1cblx0XHRcdFx0XHRcdFx0diA9PT0gJzAnXG5cdFx0XHRcdFx0XHRcdFx0PyB3aW5kb3cud2dVTFMoJ++8iOadoeebru+8iScsICfvvIjmop3nm67vvIknKVxuXHRcdFx0XHRcdFx0XHRcdDogbXcuY29uZmlnLmdldCgnd2dGb3JtYXR0ZWROYW1lc3BhY2VzJylbdl07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGFwaW9iai5wYXJhbXMuZm9ybS5hcHBlbmQoe1xuXHRcdFx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflt7LpgInmi6nnmoTlkb3lkI3nqbrpl7TvvJonLCAn5bey6YG45pOH55qE5ZG95ZCN56m66ZaT77yaJykgKyBuYW1lc3BhY2VzLmpvaW4oJ+OAgScpLFxuXHRcdFx0XHRcdFx0dG9vbHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHQn5oKo5Y+v5ZyoVHdpbmtsZeWPguaVsOiuvue9ruS4reabtOaUueebuOWFs+mAiemhue+8jOivt+WPguingVtbSDpUVy9QUkVGXV0nLFxuXHRcdFx0XHRcdFx0XHQn5oKo5Y+v5ZyoVHdpbmtsZeWBj+WlveioreWumuS4reabtOaUueebuOmXnOmBuOmghe+8jOiri+WPg+imi1tbSDpUVy9QUkVGXV0nXG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGlmIChyZXNwb25zZVsncXVlcnktY29udGludWUnXSAmJiByZXNwb25zZVsncXVlcnktY29udGludWUnXS5iYWNrbGlua3MpIHtcblx0XHRcdFx0XHRcdGFwaW9iai5wYXJhbXMuZm9ybS5hcHBlbmQoe1xuXHRcdFx0XHRcdFx0XHR0eXBlOiAnZGl2Jyxcblx0XHRcdFx0XHRcdFx0bGFiZWw6XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfmmL7npLrliY0nLCAn6aGv56S65YmNJykgK1xuXHRcdFx0XHRcdFx0XHRcdG13Lmxhbmd1YWdlLmNvbnZlcnROdW1iZXIobGlzdC5sZW5ndGgpICtcblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+S4qumTvuWFpeOAgicsICflgIvpgKPlhaXjgIInKSxcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRhcGlvYmoucGFyYW1zLmZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHRcdHR5cGU6ICdidXR0b24nLFxuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5YWo6YCJJywgJ+WFqOmBuCcpLFxuXHRcdFx0XHRcdFx0ZXZlbnQ6IChlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdCQoTW9yZWJpdHMucXVpY2tGb3JtLmdldEVsZW1lbnRzKGUudGFyZ2V0LmZvcm0sICdiYWNrbGlua3MnKSkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRhcGlvYmoucGFyYW1zLmZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHRcdHR5cGU6ICdidXR0b24nLFxuXHRcdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5YWo5LiN6YCJJywgJ+WFqOS4jemBuCcpLFxuXHRcdFx0XHRcdFx0ZXZlbnQ6IChlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdCQoTW9yZWJpdHMucXVpY2tGb3JtLmdldEVsZW1lbnRzKGUudGFyZ2V0LmZvcm0sICdiYWNrbGlua3MnKSkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0YXBpb2JqLnBhcmFtcy5mb3JtLmFwcGVuZCh7XG5cdFx0XHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRcdFx0bmFtZTogJ2JhY2tsaW5rcycsXG5cdFx0XHRcdFx0XHRzaGlmdENsaWNrU3VwcG9ydDogdHJ1ZSxcblx0XHRcdFx0XHRcdGxpc3QsXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0aGF2ZWNvbnRlbnQgPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGFwaW9iai5wYXJhbXMuZm9ybS5hcHBlbmQoe1xuXHRcdFx0XHRcdFx0dHlwZTogJ2RpdicsXG5cdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmnKrmib7liLDpk77lhaXjgIInLCAn5pyq5om+5Yiw6YCj5YWl44CCJyksXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGhhdmVjb250ZW50KSB7XG5cdFx0XHRcdFx0YXBpb2JqLnBhcmFtcy5mb3JtLmFwcGVuZCh7XG5cdFx0XHRcdFx0XHR0eXBlOiAnc3VibWl0Jyxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCByZXN1bHQgPSBhcGlvYmoucGFyYW1zLmZvcm0ucmVuZGVyKCk7XG5cdFx0XHRcdGFwaW9iai5wYXJhbXMuV2luZG93LnNldENvbnRlbnQocmVzdWx0KTtcblx0XHRcdFx0Zm9yIChjb25zdCBsaW5rIG9mIE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhyZXN1bHQsICdiYWNrbGlua3MnKSkge1xuXHRcdFx0XHRcdFR3aW5rbGUuZ2VuZXJhdGVCYXRjaFBhZ2VMaW5rcyhsaW5rKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKGNvbnN0IGxpbmsgb2YgTW9yZWJpdHMucXVpY2tGb3JtLmdldEVsZW1lbnRzKHJlc3VsdCwgJ2ltYWdldXNhZ2UnKSkge1xuXHRcdFx0XHRcdFR3aW5rbGUuZ2VuZXJhdGVCYXRjaFBhZ2VMaW5rcyhsaW5rKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHR9LFxuXHRcdHVubGlua0JhY2tsaW5rczogKHBhZ2VvYmopID0+IHtcblx0XHRcdGxldCBvbGR0ZXh0ID0gcGFnZW9iai5nZXRQYWdlVGV4dCgpO1xuXHRcdFx0Y29uc3QgcGFyYW1zID0gcGFnZW9iai5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHRcdGNvbnN0IHlzYXJjaGl2ZXNfcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpdGV4dC5wYWdlKG9sZHRleHQpO1xuXHRcdFx0bGV0IHN1bW1hcnlUZXh0ID0gJyc7XG5cdFx0XHRsZXQgd2FybmluZ1N0cmluZyA9IGZhbHNlO1xuXHRcdFx0bGV0IHRleHQ7XG5cdFx0XHQvLyByZW1vdmUgaW1hZ2UgdXNhZ2VzXG5cdFx0XHRpZiAocGFyYW1zLmRvSW1hZ2V1c2FnZSkge1xuXHRcdFx0XHR0ZXh0ID0geXNhcmNoaXZlc19wYWdlXG5cdFx0XHRcdFx0LmNvbW1lbnRPdXRJbWFnZShtdy5jb25maWcuZ2V0KCd3Z1RpdGxlJyksIHdpbmRvdy53Z1VMUygn5rOo6YeKJywgJ+azqOmHiycpKVxuXHRcdFx0XHRcdC5nZXRUZXh0KCk7XG5cdFx0XHRcdC8vIGRpZCB3ZSBhY3R1YWxseSBtYWtlIGFueSBjaGFuZ2VzP1xuXHRcdFx0XHRpZiAodGV4dCA9PT0gb2xkdGV4dCkge1xuXHRcdFx0XHRcdHdhcm5pbmdTdHJpbmcgPSB3aW5kb3cud2dVTFMoJ+aWh+S7tuS9v+eUqCcsICfmqpTmoYjkvb/nlKgnKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdW1tYXJ5VGV4dCA9IHdpbmRvdy53Z1VMUygn5rOo6YeK5paH5Lu25L2/55SoJywgJ+azqOmHi+aqlOahiOS9v+eUqCcpO1xuXHRcdFx0XHRcdG9sZHRleHQgPSB0ZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyByZW1vdmUgYmFja2xpbmtzXG5cdFx0XHRpZiAocGFyYW1zLmRvQmFja2xpbmtzKSB7XG5cdFx0XHRcdHRleHQgPSB5c2FyY2hpdmVzX3BhZ2UucmVtb3ZlTGluayhNb3JlYml0cy5wYWdlTmFtZU5vcm0pLmdldFRleHQoKTtcblx0XHRcdFx0dGV4dCA9IHlzYXJjaGl2ZXNfcGFnZS5yZW1vdmVUZW1wbGF0ZShtdy5jb25maWcuZ2V0KCd3Z1RpdGxlJykpLmdldFRleHQoKTtcblx0XHRcdFx0Ly8gZGlkIHdlIGFjdHVhbGx5IG1ha2UgYW55IGNoYW5nZXM/XG5cdFx0XHRcdGlmICh0ZXh0ID09PSBvbGR0ZXh0KSB7XG5cdFx0XHRcdFx0d2FybmluZ1N0cmluZyA9IHdhcm5pbmdTdHJpbmdcblx0XHRcdFx0XHRcdD8gd2luZG93LndnVUxTKCflj5bmtojpk77lhaXmiJbmlofku7bkvb/nlKgnLCAn5Y+W5raI6YCj5YWl5oiW5qqU5qGI5L2/55SoJylcblx0XHRcdFx0XHRcdDogd2luZG93LndnVUxTKCflj5bmtojpk77lhaUnLCAn5Y+W5raI6YCj5YWlJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3VtbWFyeVRleHQgPSAoc3VtbWFyeVRleHQgPyBgJHtzdW1tYXJ5VGV4dH0gLyBgIDogJycpICsgd2luZG93LndnVUxTKCflj5bmtojpk77mjqXliLAnLCAn5Y+W5raI6YCj57WQ5YiwJyk7XG5cdFx0XHRcdFx0b2xkdGV4dCA9IHRleHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh3YXJuaW5nU3RyaW5nKSB7XG5cdFx0XHRcdC8vIG5vdGhpbmcgdG8gZG8hXG5cdFx0XHRcdHBhZ2VvYmpcblx0XHRcdFx0XHQuZ2V0U3RhdHVzRWxlbWVudCgpXG5cdFx0XHRcdFx0LmVycm9yKGAke3dpbmRvdy53Z1VMUygn5pyq6IO95Zyo6aG16Z2i5LiK5om+5YiwJywgJ+acquiDveWcqOmggemdouS4iuaJvuWIsCcpICsgd2FybmluZ1N0cmluZ33jgIJgKTtcblx0XHRcdFx0cGFyYW1zLnVubGlua2VyLndvcmtlckZhaWx1cmUocGFnZW9iaik7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHBhZ2VvYmouc2V0UGFnZVRleHQodGV4dCk7XG5cdFx0XHRwYWdlb2JqLnNldEVkaXRTdW1tYXJ5KFxuXHRcdFx0XHRzdW1tYXJ5VGV4dCArXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfigJwnLCAn44CMJykgK1xuXHRcdFx0XHRcdE1vcmViaXRzLnBhZ2VOYW1lTm9ybSArXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfigJ3vvJonLCAn44CN77yaJykgK1xuXHRcdFx0XHRcdHBhcmFtcy5yZWFzb25cblx0XHRcdCk7XG5cdFx0XHRwYWdlb2JqLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdHBhZ2VvYmouc2V0Q3JlYXRlT3B0aW9uKCdub2NyZWF0ZScpO1xuXHRcdFx0cGFnZW9iai5zYXZlKHBhcmFtcy51bmxpbmtlci53b3JrZXJTdWNjZXNzLCBwYXJhbXMudW5saW5rZXIud29ya2VyRmFpbHVyZSk7XG5cdFx0fSxcblx0fTtcblx0VHdpbmtsZS5hZGRJbml0Q2FsbGJhY2soVHdpbmtsZS51bmxpbmssICd1bmxpbmsnKTtcbn0pKGpRdWVyeSk7XG5cbmV4cG9ydCB7fTtcbiIsICIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4vLyBAdHMtbm9jaGVja1xuXG4vKiEgVHdpbmtsZS5qcyAtIHR3aW5rbGVmbHVmZi5qcyAqL1xuKGZ1bmN0aW9uIHR3aW5rbGVmbHVmZigkKSB7XG5cdGNvbnN0ICRib2R5ID0gJCgnYm9keScpO1xuXHQvKipcblx0ICogdHdpbmtsZWZsdWZmLmpzOiBSZXZlcnQvcm9sbGJhY2sgbW9kdWxlXG5cdCAqIE1vZGUgb2YgaW52b2NhdGlvbjogTGlua3Mgb24gY29udHJpYnV0aW9ucyxcblx0ICogcmVjZW50IGNoYW5nZXMsIGhpc3RvcnksIGFuZCBkaWZmIHBhZ2VzXG5cdCAqIEFjdGl2ZSBvbjogRGlmZiBwYWdlcywgaGlzdG9yeSBwYWdlcyxcblx0ICogU3BlY2lhbDpSZWNlbnRDaGFuZ2VzKExpbmtlZCksIGFuZCBTcGVjaWFsOkNvbnRyaWJ1dGlvbnNcblx0ICovXG5cdC8qKlxuXHQgKiBUd2lua2xlZmx1ZmYgcmV2ZXJ0IGFuZCBhbnRpdmFuZGFsaXNtIHV0aWxpdHlcblx0ICovXG5cdFR3aW5rbGUuZmx1ZmYgPSAoKSA9PiB7XG5cdFx0Ly8gT25seSBwcm9jZWVkIGlmIHRoZSB1c2VyIGNhbiBhY3R1YWxseSBlZGl0IHRoZSBwYWdlIGluIHF1ZXN0aW9uLlxuXHRcdC8vIHdnSXNQcm9iYWJseUVkaXRhYmxlIHNob3VsZCB0YWtlXG5cdFx0Ly8gY2FyZSBvZiBuYW1lc3BhY2UvY29udGVudE1vZGVsIHJlc3RyaWN0aW9ucyBhcyB3ZWxsIGFzIGV4cGxpY2l0XG5cdFx0Ly8gcHJvdGVjdGlvbnM7IGl0IHdvbid0IHRha2UgY2FyZSBvZiBjYXNjYWRpbmcgb3IgVGl0bGVCbGFja2xpc3QuXG5cdFx0aWYgKG13LmNvbmZpZy5nZXQoJ3dnSXNQcm9iYWJseUVkaXRhYmxlJykpIHtcblx0XHRcdC8vIHdnRGlmZk9sZElkIGluY2x1ZGVkIGZvciBjbGFyaXR5IGluIGlmIGVsc2UgbG9vcFxuXHRcdFx0aWYgKG13LmNvbmZpZy5nZXQoJ3dnRGlmZk5ld0lkJykgfHwgbXcuY29uZmlnLmdldCgnd2dEaWZmT2xkSWQnKSkge1xuXHRcdFx0XHQvLyBSZWxvYWQgYWxvbmdzaWRlIHRoZSByZXZpc2lvbiBzbGlkZXJcblx0XHRcdFx0bXcuaG9vaygnd2lraXBhZ2UuZGlmZicpLmFkZCgoKSA9PiB7XG5cdFx0XHRcdFx0VHdpbmtsZS5mbHVmZi5hZGRMaW5rcy5kaWZmKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIGlmIChcblx0XHRcdFx0bXcuY29uZmlnLmdldCgnd2dBY3Rpb24nKSA9PT0gJ3ZpZXcnICYmXG5cdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnUmV2aXNpb25JZCcpICYmXG5cdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnQ3VyUmV2aXNpb25JZCcpICE9PSBtdy5jb25maWcuZ2V0KCd3Z1JldmlzaW9uSWQnKVxuXHRcdFx0KSB7XG5cdFx0XHRcdFR3aW5rbGUuZmx1ZmYuYWRkTGlua3Mub2xkaWQoKTtcblx0XHRcdH0gZWxzZSBpZiAobXcuY29uZmlnLmdldCgnd2dBY3Rpb24nKSA9PT0gJ2hpc3RvcnknKSB7XG5cdFx0XHRcdFR3aW5rbGUuZmx1ZmYuYWRkTGlua3MuaGlzdG9yeSgpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAobXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSA9PT0gLTEpIHtcblx0XHRcdFR3aW5rbGUuZmx1ZmYuc2tpcFRhbGsgPSAhVHdpbmtsZS5nZXRQcmVmKCdvcGVuVGFsa1BhZ2VPbkF1dG9SZXZlcnQnKTtcblx0XHRcdFR3aW5rbGUuZmx1ZmYucm9sbGJhY2tJblBsYWNlID0gVHdpbmtsZS5nZXRQcmVmKCdyb2xsYmFja0luUGxhY2UnKTtcblx0XHRcdGlmIChtdy5jb25maWcuZ2V0KCd3Z0Nhbm9uaWNhbFNwZWNpYWxQYWdlTmFtZScpID09PSAnQ29udHJpYnV0aW9ucycpIHtcblx0XHRcdFx0VHdpbmtsZS5mbHVmZi5hZGRMaW5rcy5jb250cmlidXRpb25zKCk7XG5cdFx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0XHRtdy5jb25maWcuZ2V0KCd3Z0Nhbm9uaWNhbFNwZWNpYWxQYWdlTmFtZScpID09PSAnUmVjZW50Y2hhbmdlcycgfHxcblx0XHRcdFx0bXcuY29uZmlnLmdldCgnd2dDYW5vbmljYWxTcGVjaWFsUGFnZU5hbWUnKSA9PT0gJ1JlY2VudGNoYW5nZXNsaW5rZWQnXG5cdFx0XHQpIHtcblx0XHRcdFx0Ly8gUmVsb2FkIHdpdGggcmVjZW50IGNoYW5nZXMgdXBkYXRlc1xuXHRcdFx0XHQvLyBzdHJ1Y3R1cmVkQ2hhbmdlRmlsdGVycy51aS5pbml0aWFsaXplZCBpcyBqdXN0IG9uIGxvYWRcblx0XHRcdFx0bXcuaG9vaygnd2lraXBhZ2UuY29udGVudCcpLmFkZCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdGlmIChpdGVtLmlzKCdkaXYnKSkge1xuXHRcdFx0XHRcdFx0VHdpbmtsZS5mbHVmZi5hZGRMaW5rcy5yZWNlbnRjaGFuZ2VzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdC8vIEEgbGlzdCBvZiB1c2VybmFtZXMsIHVzdWFsbHkgb25seSBib3RzLCB0aGF0IHZhbmRhbGlzbSByZXZlcnQgaXMganVtcGVkXG5cdC8vIG92ZXI7IHRoYXQgaXMsIGlmIHZhbmRhbGlzbSByZXZlcnQgd2FzIGNob3NlbiBvbiBzdWNoIHVzZXJuYW1lLCB0aGVuIGl0c1xuXHQvLyB0YXJnZXQgaXMgb24gdGhlIHJldmlzaW9uIGJlZm9yZS4gIFRoaXMgaXMgZm9yIGhhbmRsaW5nIHF1aWNrIGJvdHMgdGhhdFxuXHQvLyBtYWtlcyBlZGl0cyBzZWNvbmRzIGFmdGVyIHRoZSBvcmlnaW5hbCBlZGl0IGlzIG1hZGUuICBUaGlzIG9ubHkgYWZmZWN0c1xuXHQvLyB2YW5kYWxpc20gcm9sbGJhY2s7IGZvciBnb29kIGZhaXRoIHJvbGxiYWNrLCBpdCB3aWxsIHN0b3AsIGluZGljYXRpbmcgYSBib3Rcblx0Ly8gaGFzIG5vIGZhaXRoLCBhbmQgZm9yIG5vcm1hbCByb2xsYmFjaywgaXQgd2lsbCByb2xsYmFjayB0aGF0IGVkaXQuXG5cdFR3aW5rbGUuZmx1ZmYudHJ1c3RlZEJvdHMgPSBbXTtcblx0VHdpbmtsZS5mbHVmZi5za2lwVGFsayA9IG51bGw7XG5cdFR3aW5rbGUuZmx1ZmYucm9sbGJhY2tJblBsYWNlID0gbnVsbDtcblx0Ly8gU3RyaW5nIHRvIGluc2VydCB3aGVuIGEgdXNlcm5hbWUgaXMgaGlkZGVuXG5cdFR3aW5rbGUuZmx1ZmYuaGlkZGVuTmFtZSA9IHdpbmRvdy53Z1VMUygn5bey6ZqQ6JeP55qE55So5oi3JywgJ+W3sumaseiXj+eahOS9v+eUqOiAhScpO1xuXHQvLyBDb25zb2xpZGF0ZWQgY29uc3RydWN0aW9uIG9mIGZsdWZmIGxpbmtzXG5cdFR3aW5rbGUuZmx1ZmYubGlua0J1aWxkZXIgPSB7XG5cdFx0c3BhblRhZzogKGNvbG9yLCBjb250ZW50KSA9PiB7XG5cdFx0XHRjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuXHRcdFx0c3Bhbi5zdHlsZS5jb2xvciA9IGNvbG9yO1xuXHRcdFx0c3Bhbi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjb250ZW50KSk7XG5cdFx0XHRyZXR1cm4gc3Bhbjtcblx0XHR9LFxuXHRcdGJ1aWxkTGluazogKGNvbG9yLCB0ZXh0KSA9PiB7XG5cdFx0XHRjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHRcdFx0bGluay5hcHBlbmRDaGlsZChUd2lua2xlLmZsdWZmLmxpbmtCdWlsZGVyLnNwYW5UYWcoJ0JsYWNrJywgJ1snKSk7XG5cdFx0XHRsaW5rLmFwcGVuZENoaWxkKFR3aW5rbGUuZmx1ZmYubGlua0J1aWxkZXIuc3BhblRhZyhjb2xvciwgdGV4dCkpO1xuXHRcdFx0bGluay5hcHBlbmRDaGlsZChUd2lua2xlLmZsdWZmLmxpbmtCdWlsZGVyLnNwYW5UYWcoJ0JsYWNrJywgJ10nKSk7XG5cdFx0XHRsaW5rLmhyZWYgPSAnIyc7XG5cdFx0XHRyZXR1cm4gbGluaztcblx0XHR9LFxuXHRcdC8qKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBbdmFuZGFsPW51bGxdIC0gVXNlcm5hbWUgb2YgdGhlIGVkaXRvciBiZWluZyByZXZlcnRlZFxuXHRcdCAqIFByb3ZpZGUgYSBmYWxzZXkgdmFsdWUgaWYgdGhlIHVzZXJuYW1lIGlzIGhpZGRlbiwgZGVmYXVsdHMgdG8gbnVsbFxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5saW5lIC0gVHJ1ZSB0byBjcmVhdGUgdHdvIGxpbmtzIGluIGEgc3BhbiwgZmFsc2Vcblx0XHQgKiB0byBjcmVhdGUgdGhyZWUgbGlua3MgaW4gYSBkaXYgKG9wdGlvbmFsKVxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW3Jldj13Z0N1clJldmlzaW9uSWRdIC0gUmV2aXNpb24gSUQgYmVpbmcgcmV2ZXJ0ZWQgKG9wdGlvbmFsKVxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBbcGFnZT13Z1BhZ2VOYW1lXSAtIFBhZ2UgYmVpbmcgcmV2ZXJ0ZWQgKG9wdGlvbmFsKVxuXHRcdCAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSByZXZOb2RlXG5cdFx0ICovXG5cdFx0cm9sbGJhY2tMaW5rczogKHZhbmRhbCwgaW5saW5lLCByZXYsIHBhZ2UpID0+IHtcblx0XHRcdHZhbmRhbCB8fD0gbnVsbDtcblx0XHRcdGNvbnN0IGVsZW0gPSBpbmxpbmUgPyAnc3BhbicgOiAnZGl2Jztcblx0XHRcdGNvbnN0IHJldk5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW0pO1xuXHRcdFx0cmV2ID0gTnVtYmVyLnBhcnNlSW50KHJldiwgMTApO1xuXHRcdFx0aWYgKHJldikge1xuXHRcdFx0XHRyZXZOb2RlLnNldEF0dHJpYnV0ZSgnaWQnLCBgdHctcmV2ZXJ0JHtyZXZ9YCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXZOb2RlLnNldEF0dHJpYnV0ZSgnaWQnLCAndHctcmV2ZXJ0Jyk7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBub3JtTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0cm9uZycpO1xuXHRcdFx0Y29uc3QgdmFuZE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHJvbmcnKTtcblx0XHRcdGNvbnN0IG5vcm1MaW5rID0gVHdpbmtsZS5mbHVmZi5saW5rQnVpbGRlci5idWlsZExpbmsoJ1N0ZWVsQmx1ZScsICflm57pgIAnKTtcblx0XHRcdGNvbnN0IHZhbmRMaW5rID0gVHdpbmtsZS5mbHVmZi5saW5rQnVpbGRlci5idWlsZExpbmsoJ1JlZCcsIHdpbmRvdy53Z1VMUygn56C05Z2PJywgJ+egtOWjnicpKTtcblx0XHRcdCQobm9ybUxpbmspLm9uKCdjbGljaycsIChlKSA9PiB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0VHdpbmtsZS5mbHVmZi5yZXZlcnQoJ25vcm0nLCB2YW5kYWwsIHJldiwgcGFnZSk7XG5cdFx0XHRcdFR3aW5rbGUuZmx1ZmYuZGlzYWJsZUxpbmtzKHJldk5vZGUpO1xuXHRcdFx0fSk7XG5cdFx0XHQkKHZhbmRMaW5rKS5vbignY2xpY2snLCAoZSkgPT4ge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFR3aW5rbGUuZmx1ZmYucmV2ZXJ0KCd2YW5kJywgdmFuZGFsLCByZXYsIHBhZ2UpO1xuXHRcdFx0XHRUd2lua2xlLmZsdWZmLmRpc2FibGVMaW5rcyhyZXZOb2RlKTtcblx0XHRcdH0pO1xuXHRcdFx0dmFuZE5vZGUuYXBwZW5kQ2hpbGQodmFuZExpbmspO1xuXHRcdFx0bm9ybU5vZGUuYXBwZW5kQ2hpbGQobm9ybUxpbmspO1xuXHRcdFx0Y29uc3Qgc2VwYXJhdG9yID0gaW5saW5lID8gJyAnIDogJyB8fCAnO1xuXHRcdFx0cmV2Tm9kZS5hcHBlbmRDaGlsZChub3JtTm9kZSk7XG5cdFx0XHRyZXZOb2RlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHNlcGFyYXRvcikpO1xuXHRcdFx0cmV2Tm9kZS5hcHBlbmRDaGlsZCh2YW5kTm9kZSk7XG5cdFx0XHRyZXR1cm4gcmV2Tm9kZTtcblx0XHR9LFxuXHRcdC8vIEJ1aWxkIFtyZXN0b3JlIHRoaXMgcmV2aXNpb25dIGxpbmtzXG5cdFx0cmVzdG9yZVRoaXNSZXZpc2lvbkxpbms6IChyZXZpc2lvblJlZiwgaW5saW5lKSA9PiB7XG5cdFx0XHQvLyBJZiBub3QgYSBzcGVjaWZpYyByZXZpc2lvbiBudW1iZXIsIHNob3VsZCBiZSB3Z0RpZmZOZXdJZC93Z0RpZmZPbGRJZC93Z1JldmlzaW9uSWRcblx0XHRcdHJldmlzaW9uUmVmID0gdHlwZW9mIHJldmlzaW9uUmVmID09PSAnbnVtYmVyJyA/IHJldmlzaW9uUmVmIDogbXcuY29uZmlnLmdldChyZXZpc2lvblJlZik7XG5cdFx0XHRjb25zdCBlbGVtID0gaW5saW5lID8gJ3NwYW4nIDogJ2Rpdic7XG5cdFx0XHRjb25zdCByZXZlcnRUb1JldmlzaW9uTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbSk7XG5cdFx0XHRyZXZlcnRUb1JldmlzaW9uTm9kZS5zZXRBdHRyaWJ1dGUoJ2lkJywgYHR3LXJldmVydC10by0ke3JldmlzaW9uUmVmfWApO1xuXHRcdFx0cmV2ZXJ0VG9SZXZpc2lvbk5vZGUuc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcblx0XHRcdGNvbnN0IHJldmVydFRvUmV2aXNpb25MaW5rID0gVHdpbmtsZS5mbHVmZi5saW5rQnVpbGRlci5idWlsZExpbmsoXG5cdFx0XHRcdCdTYWRkbGVCcm93bicsXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn5oGi5aSN5q2k54mI5pysJywgJ+aBouW+qeatpOeJiOacrCcpXG5cdFx0XHQpO1xuXHRcdFx0JChyZXZlcnRUb1JldmlzaW9uTGluaykub24oJ2NsaWNrJywgKGUpID0+IHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRUd2lua2xlLmZsdWZmLnJldmVydFRvUmV2aXNpb24ocmV2aXNpb25SZWYpO1xuXHRcdFx0fSk7XG5cdFx0XHRpZiAoaW5saW5lKSB7XG5cdFx0XHRcdHJldmVydFRvUmV2aXNpb25Ob2RlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcgJykpO1xuXHRcdFx0fVxuXHRcdFx0cmV2ZXJ0VG9SZXZpc2lvbk5vZGUuYXBwZW5kQ2hpbGQocmV2ZXJ0VG9SZXZpc2lvbkxpbmspO1xuXHRcdFx0cmV0dXJuIHJldmVydFRvUmV2aXNpb25Ob2RlO1xuXHRcdH0sXG5cdH07XG5cdFR3aW5rbGUuZmx1ZmYuYWRkTGlua3MgPSB7XG5cdFx0Y29udHJpYnV0aW9uczogKCkgPT4ge1xuXHRcdFx0Ly8gJCgnc3AtY29udHJpYnV0aW9ucy1mb290ZXItYW5vbi1yYW5nZScpIHJlbGllcyBvbiB0aGUgZm1ib3hcblx0XHRcdC8vIGlkIGluIFtbTWVkaWFXaWtpOlNwLWNvbnRyaWJ1dGlvbnMtZm9vdGVyLWFub24tcmFuZ2VdXSBhbmRcblx0XHRcdC8vIGlzIHVzZWQgdG8gc2hvdyByb2xsYmFjay92YW5kYWxpc20gbGlua3MgZm9yIElQIHJhbmdlc1xuXHRcdFx0Y29uc3QgaXNSYW5nZSA9ICEhJGJvZHkuZmluZCgnI3NwLWNvbnRyaWJ1dGlvbnMtZm9vdGVyLWFub24tcmFuZ2UnKVswXTtcblx0XHRcdGlmIChtdy5jb25maWcuZXhpc3RzKCd3Z1JlbGV2YW50VXNlck5hbWUnKSB8fCBpc1JhbmdlKSB7XG5cdFx0XHRcdC8vIEdldCB0aGUgdXNlcm5hbWUgdGhlc2UgY29udHJpYnV0aW9ucyBhcmUgZm9yXG5cdFx0XHRcdGxldCB1c2VybmFtZSA9IG13LmNvbmZpZy5nZXQoJ3dnUmVsZXZhbnRVc2VyTmFtZScpO1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0VHdpbmtsZS5nZXRQcmVmKCdzaG93Um9sbGJhY2tMaW5rcycpLmluY2x1ZGVzKCdjb250cmlicycpIHx8XG5cdFx0XHRcdFx0KG13LmNvbmZpZy5nZXQoJ3dnVXNlck5hbWUnKSAhPT0gdXNlcm5hbWUgJiZcblx0XHRcdFx0XHRcdFR3aW5rbGUuZ2V0UHJlZignc2hvd1JvbGxiYWNrTGlua3MnKS5pbmNsdWRlcygnb3RoZXJzJykpIHx8XG5cdFx0XHRcdFx0KG13LmNvbmZpZy5nZXQoJ3dnVXNlck5hbWUnKSA9PT0gdXNlcm5hbWUgJiYgVHdpbmtsZS5nZXRQcmVmKCdzaG93Um9sbGJhY2tMaW5rcycpLmluY2x1ZGVzKCdtaW5lJykpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGNvbnN0ICRsaXN0ID0gJGJvZHlcblx0XHRcdFx0XHRcdC5maW5kKCcjbXctY29udGVudC10ZXh0Jylcblx0XHRcdFx0XHRcdC5maW5kKCd1bCBsaTpoYXMoc3Bhbi5tdy11Y3RvcCk6aGFzKC5tdy1jaGFuZ2VzbGlzdC1kaWZmKScpO1xuXHRcdFx0XHRcdCRsaXN0LmVhY2goKF9rZXksIGN1cnJlbnQpID0+IHtcblx0XHRcdFx0XHRcdC8vIHJldmlkIGlzIGFsc28gYXZhaWxhYmxlIGluIHRoZSBocmVmIG9mIGJvdGhcblx0XHRcdFx0XHRcdC8vIC5tdy1jaGFuZ2VzbGlzdC1kYXRlIG9yIC5tdy1jaGFuZ2VzbGlzdC1kaWZmXG5cdFx0XHRcdFx0XHRjb25zdCBwYWdlID0gJChjdXJyZW50KS5maW5kKCcubXctY29udHJpYnV0aW9ucy10aXRsZScpLnRleHQoKTtcblx0XHRcdFx0XHRcdC8vIEdldCB1c2VybmFtZSBmb3IgSVAgcmFuZ2VzICh3Z1JlbGV2YW50VXNlck5hbWUgaXMgbnVsbClcblx0XHRcdFx0XHRcdGlmIChpc1JhbmdlKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFRoZSA6bm90IGlzIHBvc3NpYmx5IHVubmVjZXNzYXJ5LCBhcyBpdCBhcHBlYXJzIHRoYXRcblx0XHRcdFx0XHRcdFx0Ly8gLm13LXVzZXJsaW5rIGlzIHNpbXBseSBub3QgcHJlc2VudCBpZiB0aGUgdXNlcm5hbWUgaXMgaGlkZGVuXG5cdFx0XHRcdFx0XHRcdHVzZXJuYW1lID0gJChjdXJyZW50KS5maW5kKCcubXctdXNlcmxpbms6bm90KC5oaXN0b3J5LWRlbGV0ZWQpJykudGV4dCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gSXQncyB1bmxpa2VseSwgYnV0IHdlIGNhbid0IGVhc2lseSBjaGVjayBmb3IgcmV2ZGVsJ2QgdXNlcm5hbWVzXG5cdFx0XHRcdFx0XHQvLyBzaW5jZSBvbmx5IGEgc3Ryb25nIGVsZW1lbnQgaXMgcHJvdmlkZWQsIHdpdGggbm8gZWFzeSBzZWxlY3RvclxuXHRcdFx0XHRcdFx0Y3VycmVudC5hcHBlbmRDaGlsZChcblx0XHRcdFx0XHRcdFx0VHdpbmtsZS5mbHVmZi5saW5rQnVpbGRlci5yb2xsYmFja0xpbmtzKHVzZXJuYW1lLCB0cnVlLCBjdXJyZW50LmRhdGFzZXQubXdSZXZpZCwgcGFnZSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdHJlY2VudGNoYW5nZXM6ICgpID0+IHtcblx0XHRcdGlmIChcblx0XHRcdFx0KG13LmNvbmZpZy5nZXQoJ3dnQ2Fub25pY2FsU3BlY2lhbFBhZ2VOYW1lJykgPT09ICdSZWNlbnRjaGFuZ2VzJyAmJlxuXHRcdFx0XHRcdFR3aW5rbGUuZ2V0UHJlZignc2hvd1JvbGxiYWNrTGlua3MnKS5pbmNsdWRlcygncmVjZW50Y2hhbmdlcycpKSB8fFxuXHRcdFx0XHQobXcuY29uZmlnLmdldCgnd2dDYW5vbmljYWxTcGVjaWFsUGFnZU5hbWUnKSA9PT0gJ1JlY2VudGNoYW5nZXNsaW5rZWQnICYmXG5cdFx0XHRcdFx0VHdpbmtsZS5nZXRQcmVmKCdzaG93Um9sbGJhY2tMaW5rcycpLmluY2x1ZGVzKCdyZWNlbnRjaGFuZ2VzbGlua2VkJykpXG5cdFx0XHQpIHtcblx0XHRcdFx0Ly8gTGF0ZXN0IGFuZCByZXZlcnRhYmxlIChub3QgcGFnZSBjcmVhdGlvbnMsIGxvZ3MsIGNhdGVnb3JpemF0aW9ucywgZXRjLilcblx0XHRcdFx0bGV0ICRsaXN0ID0gJGJvZHkuZmluZCgnLm13LWNoYW5nZXNsaXN0IC5tdy1jaGFuZ2VzbGlzdC1sYXN0Lm13LWNoYW5nZXNsaXN0LXNyYy1tdy1lZGl0Jyk7XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgdG9wLWxldmVsIGhlYWRlciBpZiBcImdyb3VwIGNoYW5nZXNcIiBwcmVmZXJlbmNlIGlzIHVzZWRcblx0XHRcdFx0Ly8gYW5kIGZpbmQgb25seSBpbmRpdmlkdWFsIGxpbmVzIG9yIG5lc3RlZCBsaW5lc1xuXHRcdFx0XHQkbGlzdCA9ICRsaXN0XG5cdFx0XHRcdFx0Lm5vdCgnLm13LXJjZmlsdGVycy11aS1oaWdobGlnaHRzLWVuaGFuY2VkLXRvcGxldmVsJylcblx0XHRcdFx0XHQuZmluZCgnLm13LWNoYW5nZXNsaXN0LWxpbmUtaW5uZXIsIHRkLm13LWVuaGFuY2VkLXJjLW5lc3RlZCcpO1xuXHRcdFx0XHQkbGlzdC5lYWNoKChfa2V5LCBjdXJyZW50KSA9PiB7XG5cdFx0XHRcdFx0Ly8gVGhlIDpub3QgaXMgcG9zc2libHkgdW5uZWNlc3NhcnksIGFzIGl0IGFwcGVhcnMgdGhhdFxuXHRcdFx0XHRcdC8vIC5tdy11c2VybGluayBpcyBzaW1wbHkgbm90IHByZXNlbnQgaWYgdGhlIHVzZXJuYW1lIGlzIGhpZGRlblxuXHRcdFx0XHRcdGNvbnN0IHZhbmRhbCA9ICQoY3VycmVudCkuZmluZCgnLm13LXVzZXJsaW5rOm5vdCguaGlzdG9yeS1kZWxldGVkKScpLnRleHQoKTtcblx0XHRcdFx0XHRjb25zdCBocmVmID0gJChjdXJyZW50KS5maW5kKCcubXctY2hhbmdlc2xpc3QtZGlmZicpLmF0dHIoJ2hyZWYnKTtcblx0XHRcdFx0XHRjb25zdCByZXYgPSBtdy51dGlsLmdldFBhcmFtVmFsdWUoJ2RpZmYnLCBocmVmKTtcblx0XHRcdFx0XHRjb25zdCBwYWdlID0gY3VycmVudC5kYXRhc2V0LnRhcmdldFBhZ2U7XG5cdFx0XHRcdFx0Y3VycmVudC5hcHBlbmRDaGlsZChUd2lua2xlLmZsdWZmLmxpbmtCdWlsZGVyLnJvbGxiYWNrTGlua3ModmFuZGFsLCB0cnVlLCByZXYsIHBhZ2UpKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRoaXN0b3J5OiAoKSA9PiB7XG5cdFx0XHRpZiAoVHdpbmtsZS5nZXRQcmVmKCdzaG93Um9sbGJhY2tMaW5rcycpLmluY2x1ZGVzKCdoaXN0b3J5JykpIHtcblx0XHRcdFx0Ly8gQWxsIHJldnNcblx0XHRcdFx0Y29uc3QgaGlzdExpc3QgPSAkYm9keS5maW5kKCcjcGFnZWhpc3RvcnkgbGknKS50b0FycmF5KCk7XG5cdFx0XHRcdC8vIE9uIGZpcnN0IHBhZ2Ugb2YgcmVzdWx0cywgc28gYWRkIHJldmVydC9yb2xsYmFja1xuXHRcdFx0XHQvLyBsaW5rcyB0byB0aGUgdG9wIHJldmlzaW9uXG5cdFx0XHRcdGlmICghJGJvZHkuZmluZCgnYS5tdy1maXJzdGxpbmsnKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRjb25zdCBmaXJzdCA9IGhpc3RMaXN0LnNoaWZ0KCk7XG5cdFx0XHRcdFx0Y29uc3QgdmFuZGFsID0gJChmaXJzdCkuZmluZCgnLm13LXVzZXJsaW5rOm5vdCguaGlzdG9yeS1kZWxldGVkKScpLnRleHQoKTtcblx0XHRcdFx0XHQvLyBDaGVjayBmb3IgZmlyc3QgdXNlcm5hbWUgZGlmZmVyZW50IHRoYW4gdGhlIHRvcCB1c2VyLFxuXHRcdFx0XHRcdC8vIG9ubHkgYXBwbHkgcm9sbGJhY2sgbGlua3MgaWYvd2hlbiBmb3VuZFxuXHRcdFx0XHRcdC8vIGZvciBmYXN0ZXIgdGhhbiBldmVyeVxuXHRcdFx0XHRcdGZvciAoY29uc3QgaXRlbSBvZiBoaXN0TGlzdCkge1xuXHRcdFx0XHRcdFx0aWYgKCQoaXRlbSkuZmluZCgnLm13LXVzZXJsaW5rJykudGV4dCgpICE9PSB2YW5kYWwpIHtcblx0XHRcdFx0XHRcdFx0Zmlyc3QuYXBwZW5kQ2hpbGQoVHdpbmtsZS5mbHVmZi5saW5rQnVpbGRlci5yb2xsYmFja0xpbmtzKHZhbmRhbCwgdHJ1ZSkpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gb2xkaWRcblx0XHRcdFx0Zm9yIChjb25zdCByZXYgb2YgaGlzdExpc3QpIHtcblx0XHRcdFx0XHQvLyBGcm9tIHJlc3RvcmVUaGlzUmV2aXNpb24sIG5vbi10cmFuc2ZlcmFibGVcblx0XHRcdFx0XHQvLyBJZiB0aGUgdGV4dCBoYXMgYmVlbiByZXZkZWwnZCwgaXQgZ2V0cyB3cmFwcGVkIGluIGEgc3BhbiB3aXRoIC5oaXN0b3J5LWRlbGV0ZWQsXG5cdFx0XHRcdFx0Ly8gYW5kIGhyZWYgd2lsbCBiZSB1bmRlZmluZWQgKGFuZCB0aHVzIG9sZGlkIGlzIE5hTilcblx0XHRcdFx0XHRjb25zdCB7aHJlZn0gPSByZXYucXVlcnlTZWxlY3RvcignLm13LWNoYW5nZXNsaXN0LWRhdGUnKTtcblx0XHRcdFx0XHRjb25zdCBvbGRpZCA9IE51bWJlci5wYXJzZUludChtdy51dGlsLmdldFBhcmFtVmFsdWUoJ29sZGlkJywgaHJlZiksIDEwKTtcblx0XHRcdFx0XHRpZiAoIU51bWJlci5pc05hTihvbGRpZCkpIHtcblx0XHRcdFx0XHRcdHJldi5hcHBlbmRDaGlsZChUd2lua2xlLmZsdWZmLmxpbmtCdWlsZGVyLnJlc3RvcmVUaGlzUmV2aXNpb25MaW5rKG9sZGlkLCB0cnVlKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRkaWZmOiAoKSA9PiB7XG5cdFx0XHQvLyBBdXRvZmlsbCB1c2VyIHRhbGsgbGlua3Mgb24gZGlmZnMgd2l0aCB2YW5hcnRpY2xlIGZvciBlYXN5IHdhcm5pbmcsIGJ1dCBkb24ndCBhdXRvd2FyblxuXHRcdFx0Y29uc3Qgd2FybkZyb21UYWxrID0gKHh0aXRsZSkgPT4ge1xuXHRcdFx0XHRjb25zdCB0YWxrTGluayA9ICQoYCNtdy1kaWZmLSR7eHRpdGxlfTIgLm13LXVzZXJ0b29sbGlua3MgYWApLmZpcnN0KCk7XG5cdFx0XHRcdGlmICh0YWxrTGluay5sZW5ndGgpIHtcblx0XHRcdFx0XHRsZXQgZXh0cmFQYXJhbXMgPSBgdmFuYXJ0aWNsZT0ke213LnV0aWwucmF3dXJsZW5jb2RlKE1vcmViaXRzLnBhZ2VOYW1lTm9ybSl9Jm5vYXV0b3dhcm49dHJ1ZWA7XG5cdFx0XHRcdFx0Ly8gZGlmZklEcyBmb3IgdmFuYXJ0aWNsZXJldmlkXG5cdFx0XHRcdFx0ZXh0cmFQYXJhbXMgKz0gJyZ2YW5hcnRpY2xlcmV2aWQ9Jztcblx0XHRcdFx0XHRleHRyYVBhcmFtcyArPSB4dGl0bGUgPT09ICdvdGl0bGUnID8gbXcuY29uZmlnLmdldCgnd2dEaWZmT2xkSWQnKSA6IG13LmNvbmZpZy5nZXQoJ3dnRGlmZk5ld0lkJyk7XG5cdFx0XHRcdFx0Y29uc3QgaHJlZiA9IHRhbGtMaW5rLmF0dHIoJ2hyZWYnKTtcblx0XHRcdFx0XHRpZiAoaHJlZi5pbmNsdWRlcygnPycpKSB7XG5cdFx0XHRcdFx0XHR0YWxrTGluay5hdHRyKCdocmVmJywgYCR7aHJlZn0mJHtleHRyYVBhcmFtc31gKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGFsa0xpbmsuYXR0cignaHJlZicsIGAke2hyZWZ9PyR7ZXh0cmFQYXJhbXN9YCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0Ly8gT2xkZXIgcmV2aXNpb25cblx0XHRcdHdhcm5Gcm9tVGFsaygnb3RpdGxlJyk7IC8vIEFkZCBxdWljay13YXJuIGxpbmsgdG8gdXNlciB0YWxrIGxpbmtcblx0XHRcdC8vIERvbid0IGxvYWQgaWYgdGhlcmUncyBhIHNpbmdsZSByZXZpc2lvbiBvciB3ZWlyZCBkaWZmIChjdXIgb24gbGF0ZXN0KVxuXHRcdFx0aWYgKG13LmNvbmZpZy5nZXQoJ3dnRGlmZk9sZElkJykgJiYgbXcuY29uZmlnLmdldCgnd2dEaWZmT2xkSWQnKSAhPT0gbXcuY29uZmlnLmdldCgnd2dEaWZmTmV3SWQnKSkge1xuXHRcdFx0XHQvLyBBZGQgYSBbcmVzdG9yZSB0aGlzIHJldmlzaW9uXSBsaW5rIHRvIHRoZSBvbGRlciByZXZpc2lvblxuXHRcdFx0XHRjb25zdCBvbGRUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtdy1kaWZmLW90aXRsZTEnKS5wYXJlbnROb2RlO1xuXHRcdFx0XHRjb25zdCByZXZlcnRUb1JldmlzaW9uID0gVHdpbmtsZS5mbHVmZi5saW5rQnVpbGRlci5yZXN0b3JlVGhpc1JldmlzaW9uTGluaygnd2dEaWZmT2xkSWQnKTtcblx0XHRcdFx0b2xkVGl0bGUuaW5zZXJ0QmVmb3JlKHJldmVydFRvUmV2aXNpb24sIG9sZFRpdGxlLmZpcnN0Q2hpbGQpO1xuXHRcdFx0XHRpZiAoVHdpbmtsZS5nZXRQcmVmKCdjdXN0b21SZXZlcnRTdW1tYXJ5JykubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdHJldmVydFRvUmV2aXNpb24uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJyB8fCAnKSk7XG5cdFx0XHRcdFx0Y29uc3QgcmV2ZXJ0c3VtbWFyeSA9IG5ldyBNb3JlYml0cy5xdWlja0Zvcm0uZWxlbWVudCh7XG5cdFx0XHRcdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdFx0XHRcdG5hbWU6ICdyZXZlcnRzdW1tYXJ5Jyxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRyZXZlcnRzdW1tYXJ5LmFwcGVuZCh7XG5cdFx0XHRcdFx0XHR0eXBlOiAnb3B0aW9uJyxcblx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+mAieaLqeWbnumAgOeQhueUsScsICfpgbjmk4flm57pgIDnkIbnlLEnKSxcblx0XHRcdFx0XHRcdHZhbHVlOiAnJyxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHQkKFR3aW5rbGUuZ2V0UHJlZignY3VzdG9tUmV2ZXJ0U3VtbWFyeScpKS5lYWNoKChfLCBlKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXZlcnRzdW1tYXJ5LmFwcGVuZCh7XG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdvcHRpb24nLFxuXHRcdFx0XHRcdFx0XHRsYWJlbDogZS5sYWJlbCxcblx0XHRcdFx0XHRcdFx0dmFsdWU6IGUudmFsdWUsXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRyZXZlcnRUb1JldmlzaW9uLmFwcGVuZENoaWxkKHJldmVydHN1bW1hcnkucmVuZGVyKCkuY2hpbGROb2Rlc1swXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIE5ld2VyIHJldmlzaW9uXG5cdFx0XHR3YXJuRnJvbVRhbGsoJ250aXRsZScpOyAvLyBBZGQgcXVpY2std2FybiBsaW5rIHRvIHVzZXIgdGFsayBsaW5rXG5cdFx0XHQvLyBBZGQgZWl0aGVyIHJlc3RvcmUgb3Igcm9sbGJhY2sgbGlua3MgdG8gdGhlIG5ld2VyIHJldmlzaW9uXG5cdFx0XHQvLyBEb24ndCBzaG93IGlmIHRoZXJlJ3MgYSBzaW5nbGUgcmV2aXNpb24gb3Igd2VpcmQgZGlmZiAocHJldiBvbiBmaXJzdClcblx0XHRcdGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGlmZmVyZW5jZXMtbmV4dGxpbmsnKSkge1xuXHRcdFx0XHQvLyBOb3QgbGF0ZXN0IHJldmlzaW9uLCBhZGQgW3Jlc3RvcmUgdGhpcyByZXZpc2lvbl0gbGluayB0byBuZXdlciByZXZpc2lvblxuXHRcdFx0XHRjb25zdCBuZXdUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtdy1kaWZmLW50aXRsZTEnKS5wYXJlbnROb2RlO1xuXHRcdFx0XHRuZXdUaXRsZS5pbnNlcnRCZWZvcmUoXG5cdFx0XHRcdFx0VHdpbmtsZS5mbHVmZi5saW5rQnVpbGRlci5yZXN0b3JlVGhpc1JldmlzaW9uTGluaygnd2dEaWZmTmV3SWQnKSxcblx0XHRcdFx0XHRuZXdUaXRsZS5maXJzdENoaWxkXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0XHRUd2lua2xlLmdldFByZWYoJ3Nob3dSb2xsYmFja0xpbmtzJykuaW5jbHVkZXMoJ2RpZmYnKSAmJlxuXHRcdFx0XHRtdy5jb25maWcuZ2V0KCd3Z0RpZmZPbGRJZCcpICYmXG5cdFx0XHRcdChtdy5jb25maWcuZ2V0KCd3Z0RpZmZPbGRJZCcpICE9PSBtdy5jb25maWcuZ2V0KCd3Z0RpZmZOZXdJZCcpIHx8XG5cdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2RpZmZlcmVuY2VzLXByZXZsaW5rJykpXG5cdFx0XHQpIHtcblx0XHRcdFx0Ly8gTm9ybWFsbHkgLm13LXVzZXJsaW5rIGlzIGEgbGluaywgYnV0IGlmIHRoZVxuXHRcdFx0XHQvLyB1c2VybmFtZSBpcyBoaWRkZW4sIGl0IHdpbGwgYmUgYSBzcGFuIHdpdGhcblx0XHRcdFx0Ly8gLmhpc3RvcnktZGVsZXRlZCBhcyB3ZWxsLiBXaGVuIGEgc3lzb3Agdmlld3MgdGhlXG5cdFx0XHRcdC8vIGhpZGRlbiBjb250ZW50LCB0aGUgc3BhbiBjb250YWlucyB0aGUgdXNlcm5hbWUgaW4gYVxuXHRcdFx0XHQvLyBsaW5rIGVsZW1lbnQsIHdoaWNoIHdpbGwgKmp1c3QqIGhhdmVcblx0XHRcdFx0Ly8gLm13LXVzZXJsaW5rLiBUaGUgYmVsb3cgdGh1cyBmaW5kcyB0aGUgZmlyc3Rcblx0XHRcdFx0Ly8gaW5zdGFuY2Ugb2YgdGhlIGNsYXNzLCB3aGljaCBpZiBoaWRkZW4gaXMgdGhlIHNwYW5cblx0XHRcdFx0Ly8gYW5kIHRodXMgdGV4dCByZXR1cm5zIHVuZGVmaW5lZC4gVGVjaG5pY2FsbHksIHRoaXNcblx0XHRcdFx0Ly8gaXMgYSBwbGFjZSB3aGVyZSBzeXNvcHMgKmNvdWxkKiBoYXZlIG1vcmVcblx0XHRcdFx0Ly8gaW5mb3JtYXRpb24gYXZhaWxhYmxlIHRvIHRoZW0gKGFzIGFib3ZlLCB2aWFcblx0XHRcdFx0Ly8gJnVuaGlkZT0xKSwgc2luY2UgdGhlIHVzZXJuYW1lIHdpbGwgYmUgYXZhaWxhYmxlIGJ5XG5cdFx0XHRcdC8vIGNoZWNraW5nIGEubXctdXNlcmxpbmsgaW5zdGVhZCwgYnV0IHJldmVydCgpIHdpbGxcblx0XHRcdFx0Ly8gbmVlZCByZXdvcmtpbmcgYXJvdW5kIHVzZXJIaWRkZW5cblx0XHRcdFx0Y29uc3QgdmFuZGFsID0gJGJvZHkuZmluZCgnI213LWRpZmYtbnRpdGxlMicpLmZpbmQoJy5tdy11c2VybGluaycpWzBdLnRleHQ7XG5cdFx0XHRcdGNvbnN0IG50aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtdy1kaWZmLW50aXRsZTEnKS5wYXJlbnROb2RlO1xuXHRcdFx0XHRudGl0bGUuaW5zZXJ0QmVmb3JlKFR3aW5rbGUuZmx1ZmYubGlua0J1aWxkZXIucm9sbGJhY2tMaW5rcyh2YW5kYWwpLCBudGl0bGUuZmlyc3RDaGlsZCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvbGRpZDogKCkgPT4ge1xuXHRcdFx0Ly8gQWRkIGEgW3Jlc3RvcmUgdGhpcyByZXZpc2lvbl0gbGluayBvbiBvbGQgcmV2aXNpb25zXG5cdFx0XHRjb25zdCB0aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtdy1yZXZpc2lvbi1pbmZvJykucGFyZW50Tm9kZTtcblx0XHRcdHRpdGxlLmluc2VydEJlZm9yZShUd2lua2xlLmZsdWZmLmxpbmtCdWlsZGVyLnJlc3RvcmVUaGlzUmV2aXNpb25MaW5rKCd3Z1JldmlzaW9uSWQnKSwgdGl0bGUuZmlyc3RDaGlsZCk7XG5cdFx0fSxcblx0fTtcblx0VHdpbmtsZS5mbHVmZi5kaXNhYmxlTGlua3MgPSAocGFyZW50Tm9kZSkgPT4ge1xuXHRcdC8vIEFycmF5LmZyb20gbm90IGF2YWlsYWJsZSBpbiBJRTExIDooXG5cdFx0JChwYXJlbnROb2RlKVxuXHRcdFx0LmNoaWxkcmVuKClcblx0XHRcdC5lYWNoKChfaSwgbm9kZSkgPT4ge1xuXHRcdFx0XHRub2RlLmlubmVySFRNTCA9IG5vZGUudGV4dENvbnRlbnQ7IC8vIEZlZWxzIGxpa2UgY2hlYXRpbmdcblx0XHRcdFx0JChub2RlKS5jc3MoJ2ZvbnQtd2VpZ2h0JywgJ25vcm1hbCcpLmNzcygnY29sb3InLCAnZGFya2dyYXknKTtcblx0XHRcdH0pO1xuXHR9O1xuXHRUd2lua2xlLmZsdWZmLnJldmVydCA9ICh0eXBlLCB2YW5kYWwsIHJldiwgcGFnZSkgPT4ge1xuXHRcdGlmIChtdy51dGlsLmlzSVB2NkFkZHJlc3ModmFuZGFsKSkge1xuXHRcdFx0dmFuZGFsID0gTW9yZWJpdHMuaXAuc2FuaXRpemVJUHY2KHZhbmRhbCk7XG5cdFx0fVxuXHRcdGNvbnN0IHBhZ2VuYW1lID0gcGFnZSB8fCBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyk7XG5cdFx0Y29uc3QgcmV2aWQgPSByZXYgfHwgbXcuY29uZmlnLmdldCgnd2dDdXJSZXZpc2lvbklkJyk7XG5cdFx0bGV0IHN1bW1hcnkgPSAnJztcblx0XHRpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW25hbWU9XCJyZXZlcnRzdW1tYXJ5XCJdJylbMF0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0c3VtbWFyeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tuYW1lPVwicmV2ZXJ0c3VtbWFyeVwiXScpWzBdLnZhbHVlO1xuXHRcdH1cblx0XHRpZiAoVHdpbmtsZS5mbHVmZi5yb2xsYmFja0luUGxhY2UpIHtcblx0XHRcdGNvbnN0IG5vdGlmeVN0YXR1cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblx0XHRcdHZvaWQgbXcubm90aWZ5KG5vdGlmeVN0YXR1cywge1xuXHRcdFx0XHRhdXRvSGlkZTogZmFsc2UsXG5cdFx0XHRcdHRpdGxlOiBg5Zue6YCAJHtwYWdlfWAsXG5cdFx0XHRcdHRhZzogYHR3aW5rbGVmbHVmZl8ke3Jldn1gLCAvLyBTaG91bGRuJ3QgYmUgbmVjZXNzYXJ5IGdpdmVuIGRpc2FibGVMaW5rXG5cdFx0XHR9KTtcblxuXHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQobm90aWZ5U3RhdHVzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI213LWNvbnRlbnQtdGV4dCcpKTtcblx0XHRcdCRib2R5LmZpbmQoJyNjYXRsaW5rcycpLnJlbW92ZSgpO1xuXHRcdH1cblx0XHRjb25zdCBwYXJhbXMgPSB7XG5cdFx0XHR0eXBlLFxuXHRcdFx0dXNlcjogdmFuZGFsLFxuXHRcdFx0dXNlckhpZGRlbjogIXZhbmRhbCxcblx0XHRcdHBhZ2VuYW1lLFxuXHRcdFx0cmV2aWQsXG5cdFx0XHRzdW1tYXJ5LFxuXHRcdH07XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRhY3Rpb246ICdxdWVyeScsXG5cdFx0XHRwcm9wOiBbJ2luZm8nLCAncmV2aXNpb25zJ10sXG5cdFx0XHR0aXRsZXM6IHBhZ2VuYW1lLFxuXHRcdFx0aW50ZXN0YWN0aW9uczogJ2VkaXQnLFxuXHRcdFx0cnZsaW1pdDogVHdpbmtsZS5nZXRQcmVmKCdyZXZlcnRNYXhSZXZpc2lvbnMnKSxcblx0XHRcdHJ2cHJvcDogWydpZHMnLCAndGltZXN0YW1wJywgJ3VzZXInXSxcblx0XHRcdGN1cnRpbWVzdGFtcDogJycsXG5cdFx0XHRtZXRhOiAndG9rZW5zJyxcblx0XHRcdHR5cGU6ICdjc3JmJyxcblx0XHR9O1xuXHRcdGNvbnN0IHlzYXJjaGl2ZXNfYXBpID0gbmV3IE1vcmViaXRzLndpa2kuYXBpKFxuXHRcdFx0d2luZG93LndnVUxTKCfmipPlj5bovoPml6nkv67orqLniYjmnKzkv6Hmga8nLCAn5oqT5Y+W6LyD5pep5L+u6KiC54mI5pys6LOH6KiKJyksXG5cdFx0XHRxdWVyeSxcblx0XHRcdFR3aW5rbGUuZmx1ZmYuY2FsbGJhY2tzLm1haW5cblx0XHQpO1xuXHRcdHlzYXJjaGl2ZXNfYXBpLnBhcmFtcyA9IHBhcmFtcztcblx0XHR5c2FyY2hpdmVzX2FwaS5wb3N0KCk7XG5cdH07XG5cdFR3aW5rbGUuZmx1ZmYucmV2ZXJ0VG9SZXZpc2lvbiA9IChvbGRyZXYpID0+IHtcblx0XHRsZXQgc3VtbWFyeSA9ICcnO1xuXHRcdGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbbmFtZT1cInJldmVydHN1bW1hcnlcIl0nKVswXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRzdW1tYXJ5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW25hbWU9XCJyZXZlcnRzdW1tYXJ5XCJdJylbMF0udmFsdWU7XG5cdFx0fVxuXHRcdE1vcmViaXRzLnN0YXR1cy5pbml0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtdy1jb250ZW50LXRleHQnKSk7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRhY3Rpb246ICdxdWVyeScsXG5cdFx0XHRwcm9wOiBbJ2luZm8nLCAncmV2aXNpb25zJ10sXG5cdFx0XHR0aXRsZXM6IG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSxcblx0XHRcdHJ2bGltaXQ6IDEsXG5cdFx0XHRydnN0YXJ0aWQ6IG9sZHJldixcblx0XHRcdHJ2cHJvcDogWydpZHMnLCAndXNlciddLFxuXHRcdFx0Zm9ybWF0OiAneG1sJyxcblx0XHRcdGN1cnRpbWVzdGFtcDogJycsXG5cdFx0XHRtZXRhOiAndG9rZW5zJyxcblx0XHRcdHR5cGU6ICdjc3JmJyxcblx0XHR9O1xuXHRcdGNvbnN0IHlzYXJjaGl2ZXNfYXBpID0gbmV3IE1vcmViaXRzLndpa2kuYXBpKFxuXHRcdFx0d2luZG93LndnVUxTKCfmipPlj5bovoPml6nkv67orqLniYjmnKzkv6Hmga8nLCAn5oqT5Y+W6LyD5pep5L+u6KiC54mI5pys6LOH6KiKJyksXG5cdFx0XHRxdWVyeSxcblx0XHRcdFR3aW5rbGUuZmx1ZmYuY2FsbGJhY2tzLnRvUmV2aXNpb25cblx0XHQpO1xuXHRcdHlzYXJjaGl2ZXNfYXBpLnBhcmFtcyA9IHtcblx0XHRcdHJldjogb2xkcmV2LFxuXHRcdFx0c3VtbWFyeSxcblx0XHR9O1xuXHRcdHlzYXJjaGl2ZXNfYXBpLnBvc3QoKTtcblx0fTtcblx0VHdpbmtsZS5mbHVmZi5jYWxsYmFja3MgPSB7XG5cdFx0dG9SZXZpc2lvbjogKGFwaW9iaikgPT4ge1xuXHRcdFx0Y29uc3QgeG1sRG9jID0gYXBpb2JqLnJlc3BvbnNlWE1MO1xuXHRcdFx0Y29uc3QgbGFzdHJldmlkID0gTnVtYmVyLnBhcnNlSW50KCQoeG1sRG9jKS5maW5kKCdwYWdlJykuYXR0cignbGFzdHJldmlkJyksIDEwKTtcblx0XHRcdGNvbnN0IHRvdWNoZWQgPSAkKHhtbERvYykuZmluZCgncGFnZScpLmF0dHIoJ3RvdWNoZWQnKTtcblx0XHRcdGNvbnN0IGxvYWR0aW1lc3RhbXAgPSAkKHhtbERvYykuZmluZCgnYXBpJykuYXR0cignY3VydGltZXN0YW1wJyk7XG5cdFx0XHRjb25zdCBjc3JmdG9rZW4gPSAkKHhtbERvYykuZmluZCgndG9rZW5zJykuYXR0cignY3NyZnRva2VuJyk7XG5cdFx0XHRjb25zdCByZXZlcnRUb1JldklEID0gTnVtYmVyLnBhcnNlSW50KCQoeG1sRG9jKS5maW5kKCdyZXYnKS5hdHRyKCdyZXZpZCcpLCAxMCk7XG5cdFx0XHRjb25zdCByZXZlcnRUb1VzZXIgPSAkKHhtbERvYykuZmluZCgncmV2JykuYXR0cigndXNlcicpO1xuXHRcdFx0Y29uc3QgcmV2ZXJ0VG9Vc2VySGlkZGVuID0gdHlwZW9mICQoeG1sRG9jKS5maW5kKCdyZXYnKS5hdHRyKCd1c2VyaGlkZGVuJykgPT09ICdzdHJpbmcnO1xuXHRcdFx0aWYgKHJldmVydFRvUmV2SUQgIT09IGFwaW9iai5wYXJhbXMucmV2KSB7XG5cdFx0XHRcdGFwaW9iai5zdGF0ZWxlbS5lcnJvcihcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5oqT5Y+W5Yiw55qE5L+u6K6i54mI5pys5LiO6K+35rGC55qE5L+u6K6i54mI5pys5LiN56ym77yM5Y+W5raI44CCJyxcblx0XHRcdFx0XHRcdCfmipPlj5bliLDnmoTkv67oqILniYjmnKzoiIfoq4vmsYLnmoTkv67oqILniYjmnKzkuI3nrKbvvIzlj5bmtojjgIInXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBvcHRpb25hbF9zdW1tYXJ5ID0gcHJvbXB0KFxuXHRcdFx0XHRgJHt3aW5kb3cud2dVTFMoJ+ivt+i+k+WFpeWbnumAgOeQhueUse+8micsICfoq4vovLjlhaXlm57pgIDnkIbnlLHvvJonKX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAsXG5cdFx0XHRcdGFwaW9iai5wYXJhbXMuc3VtbWFyeVxuXHRcdFx0KTsgLy8gcGFkZGVkIG91dCB0byB3aWRlbiBwcm9tcHQgaW4gRmlyZWZveFxuXHRcdFx0aWYgKG9wdGlvbmFsX3N1bW1hcnkgPT09IG51bGwpIHtcblx0XHRcdFx0YXBpb2JqLnN0YXRlbGVtLmVycm9yKHdpbmRvdy53Z1VMUygn55Sx55So5oi35Y+W5raI44CCJywgJ+eUseS9v+eUqOiAheWPlua2iOOAgicpKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3Qgc3VtbWFyeSA9IFR3aW5rbGUuZmx1ZmYuZm9ybWF0U3VtbWFyeShcblx0XHRcdFx0d2luZG93LndnVUxTKCflm57pgIDliLDnlLEkVVNFUuWBmuWHuueahOS/ruiuoueJiOacrCcsICflm57pgIDliLDnlLEkVVNFUuWBmuWHuueahOS/ruiogueJiOacrCcpICsgcmV2ZXJ0VG9SZXZJRCxcblx0XHRcdFx0cmV2ZXJ0VG9Vc2VySGlkZGVuID8gbnVsbCA6IHJldmVydFRvVXNlcixcblx0XHRcdFx0b3B0aW9uYWxfc3VtbWFyeVxuXHRcdFx0KTtcblx0XHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0XHRhY3Rpb246ICdlZGl0Jyxcblx0XHRcdFx0dGl0bGU6IG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKSxcblx0XHRcdFx0c3VtbWFyeSxcblx0XHRcdFx0dGFnczogVHdpbmtsZS5jaGFuZ2VUYWdzLFxuXHRcdFx0XHR0b2tlbjogY3NyZnRva2VuLFxuXHRcdFx0XHR1bmRvOiBsYXN0cmV2aWQsXG5cdFx0XHRcdHVuZG9hZnRlcjogcmV2ZXJ0VG9SZXZJRCxcblx0XHRcdFx0YmFzZXRpbWVzdGFtcDogdG91Y2hlZCxcblx0XHRcdFx0c3RhcnR0aW1lc3RhbXA6IGxvYWR0aW1lc3RhbXAsXG5cdFx0XHRcdG1pbm9yOiBUd2lua2xlLmdldFByZWYoJ21hcmtSZXZlcnRlZFBhZ2VzQXNNaW5vcicpLmluY2x1ZGVzKCd0b3JldicpID8gdHJ1ZSA6IHVuZGVmaW5lZCxcblx0XHRcdFx0Ym90OiB0cnVlLFxuXHRcdFx0fTtcblx0XHRcdC8vIEhhbmRsZSB3YXRjaGluZywgcG9zc2libGUgZXhwaXJ5XG5cdFx0XHRpZiAoVHdpbmtsZS5nZXRQcmVmKCd3YXRjaFJldmVydGVkUGFnZXMnKS5pbmNsdWRlcygndG9yZXYnKSkge1xuXHRcdFx0XHRjb25zdCB3YXRjaE9yRXhwaXJ5ID0gVHdpbmtsZS5nZXRQcmVmKCd3YXRjaFJldmVydGVkRXhwaXJ5Jyk7XG5cdFx0XHRcdGlmICghd2F0Y2hPckV4cGlyeSB8fCB3YXRjaE9yRXhwaXJ5ID09PSAnbm8nKSB7XG5cdFx0XHRcdFx0cXVlcnkud2F0Y2hsaXN0ID0gJ25vY2hhbmdlJztcblx0XHRcdFx0fSBlbHNlIGlmICh3YXRjaE9yRXhwaXJ5ID09PSAnZGVmYXVsdCcgfHwgd2F0Y2hPckV4cGlyeSA9PT0gJ3ByZWZlcmVuY2VzJykge1xuXHRcdFx0XHRcdHF1ZXJ5LndhdGNobGlzdCA9ICdwcmVmZXJlbmNlcyc7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVlcnkud2F0Y2hsaXN0ID0gJ3dhdGNoJztcblx0XHRcdFx0XHQvLyBudW1iZXIgYWxsb3dlZCBidXQgbm90IHVzZWQgaW4gVHdpbmtsZS5jb25maWcud2F0Y2hsaXN0RW51bXNcblx0XHRcdFx0XHRpZiAodHlwZW9mIHdhdGNoT3JFeHBpcnkgPT09ICdzdHJpbmcnICYmIHdhdGNoT3JFeHBpcnkgIT09ICd5ZXMnKSB7XG5cdFx0XHRcdFx0XHRxdWVyeS53YXRjaGxpc3RleHBpcnkgPSB3YXRjaE9yRXhwaXJ5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQucmVkaXJlY3QgPSBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyk7XG5cdFx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5ub3RpY2UgPSAn5Zue6YCA5a6M5oiQJztcblx0XHRcdGNvbnN0IHlzYXJjaGl2ZXNfYXBpID0gbmV3IE1vcmViaXRzLndpa2kuYXBpKFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+S/neWtmOWbnumAgOWGheWuuScsICflhLLlrZjlm57pgIDlhaflrrknKSxcblx0XHRcdFx0cXVlcnksXG5cdFx0XHRcdFR3aW5rbGUuZmx1ZmYuY2FsbGJhY2tzLmNvbXBsZXRlLFxuXHRcdFx0XHRhcGlvYmouc3RhdGVsZW1cblx0XHRcdCk7XG5cdFx0XHR5c2FyY2hpdmVzX2FwaS5wYXJhbXMgPSBhcGlvYmoucGFyYW1zO1xuXHRcdFx0eXNhcmNoaXZlc19hcGkucG9zdCgpO1xuXHRcdH0sXG5cdFx0bWFpbjogKGFwaW9iaikgPT4ge1xuXHRcdFx0Y29uc3QgeG1sRG9jID0gYXBpb2JqLnJlc3BvbnNlWE1MO1xuXHRcdFx0aWYgKCQoeG1sRG9jKS5maW5kKCdhY3Rpb25zJykuYXR0cignZWRpdCcpID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0YXBpb2JqLnN0YXRlbGVtLmVycm9yKFwiVW5hYmxlIHRvIGVkaXQgdGhlIHBhZ2UsIGl0J3MgcHJvYmFibHkgcHJvdGVjdGVkLlwiKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgbGFzdHJldmlkID0gTnVtYmVyLnBhcnNlSW50KCQoeG1sRG9jKS5maW5kKCdwYWdlJykuYXR0cignbGFzdHJldmlkJyksIDEwKTtcblx0XHRcdGNvbnN0IHRvdWNoZWQgPSAkKHhtbERvYykuZmluZCgncGFnZScpLmF0dHIoJ3RvdWNoZWQnKTtcblx0XHRcdGNvbnN0IGxvYWR0aW1lc3RhbXAgPSAkKHhtbERvYykuZmluZCgnYXBpJykuYXR0cignY3VydGltZXN0YW1wJyk7XG5cdFx0XHRjb25zdCBjc3JmdG9rZW4gPSAkKHhtbERvYykuZmluZCgndG9rZW5zJykuYXR0cignY3NyZnRva2VuJyk7XG5cdFx0XHRjb25zdCByZXZzID0gJCh4bWxEb2MpLmZpbmQoJ3JldicpO1xuXHRcdFx0Y29uc3Qge3N0YXRlbGVtfSA9IGFwaW9iajtcblx0XHRcdGNvbnN0IHtwYXJhbXN9ID0gYXBpb2JqO1xuXHRcdFx0aWYgKHJldnMubGVuZ3RoIDwgMSkge1xuXHRcdFx0XHRzdGF0ZWxlbS5lcnJvcih3aW5kb3cud2dVTFMoJ+ayoeacieWFtuWug+S/ruiuoueJiOacrO+8jOaXoOazleWbnumAgCcsICfmspLmnInlhbblroPkv67oqILniYjmnKzvvIznhKHms5Xlm57pgIAnKSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGNvbnN0IFt0b3BdID0gcmV2cztcblx0XHRcdGNvbnN0IGxhc3R1c2VyID0gdG9wLmdldEF0dHJpYnV0ZSgndXNlcicpO1xuXHRcdFx0aWYgKGxhc3RyZXZpZCA8IHBhcmFtcy5yZXZpZCkge1xuXHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuZXJyb3IoXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfplJnor68nLCAn6Yyv6KqkJyksXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0XHQn5LuO5pyN5Yqh5Zmo6I635Y+W55qE5pyA5paw5L+u6K6i54mI5pysSUQgJyxcblx0XHRcdFx0XHRcdFx0TW9yZWJpdHMuaHRtbE5vZGUoJ3N0cm9uZycsIGxhc3RyZXZpZCksXG5cdFx0XHRcdFx0XHRcdCcg5bCP5LqO55uu5YmN5omA5pi+56S655qE5L+u6K6i54mI5pysSUTjgILov5nlj6/og73mhI/lkbPnnYDlvZPliY3kv67orqLniYjmnKzlt7LooqvliKDpmaTjgIHmnI3liqHlmajlu7bov5/jgIHmiJbmipPlj5bliLDkuoblnY/mjonnmoTkv6Hmga/jgILlj5bmtojjgIInLFxuXHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0J+W+nuS8uuacjeWZqOWPluW+l+eahOacgOaWsOS/ruiogueJiOacrElEICcsXG5cdFx0XHRcdFx0XHRcdE1vcmViaXRzLmh0bWxOb2RlKCdzdHJvbmcnLCBsYXN0cmV2aWQpLFxuXHRcdFx0XHRcdFx0XHQnIOWwj+aWvOebruWJjeaJgOmhr+ekuueahOS/ruiogueJiOacrElE44CC6YCZ5Y+v6IO95oSP5ZGz6JGX55W25YmN5L+u6KiC54mI5pys5bey6KKr5Yiq6Zmk44CB5Ly65pyN5Zmo5bu26YGy44CB5oiW5pO35Y+W5Yiw5LqG5aOe5o6J55qE6LOH6KiK44CC5Y+W5raI44CCJyxcblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHQpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdC8vIFVzZWQgZm9yIHVzZXItZmFjaW5nIGFsZXJ0cywgbWVzc2FnZXMsIGV0Yy4sIG5vdCBlZGl0cyBvciBzdW1tYXJpZXNcblx0XHRcdGxldCB1c2VyTm9ybSA9IHBhcmFtcy51c2VyIHx8IFR3aW5rbGUuZmx1ZmYuaGlkZGVuTmFtZTtcblx0XHRcdGxldCBpbmRleCA9IDE7XG5cdFx0XHRpZiAocGFyYW1zLnJldmlkID09PSBsYXN0cmV2aWQpIHtcblx0XHRcdFx0Ly8gRXhwZWN0ZWQgcmV2aXNpb24gaXMgdGhlIHNhbWUsIHNvIHRoZSB1c2VycyBtdXN0IG1hdGNoO1xuXHRcdFx0XHQvLyB0aGlzIGFsbG93cyBzeXNvcHMgdG8ga25vdyB3aGV0aGVyIHRoZSB1c2VycyBhcmUgdGhlIHNhbWVcblx0XHRcdFx0cGFyYW1zLnVzZXIgPSBsYXN0dXNlcjtcblx0XHRcdFx0dXNlck5vcm0gPSBwYXJhbXMudXNlciB8fCBUd2lua2xlLmZsdWZmLmhpZGRlbk5hbWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRNb3JlYml0cy5zdGF0dXMud2Fybihcblx0XHRcdFx0XHQn6K2m5ZGKJyxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdCfmnIDmlrDkv67orqLniYjmnKwgJyxcblx0XHRcdFx0XHRcdFx0TW9yZWJpdHMuaHRtbE5vZGUoJ3N0cm9uZycsIGxhc3RyZXZpZCksXG5cdFx0XHRcdFx0XHRcdCcg5LiO5oiR5Lus55qE5L+u6K6i54mI5pysICcsXG5cdFx0XHRcdFx0XHRcdE1vcmViaXRzLmh0bWxOb2RlKCdzdHJvbmcnLCBwYXJhbXMucmV2aWQpLFxuXHRcdFx0XHRcdFx0XHQn5LiN5ZCMJyxcblx0XHRcdFx0XHRcdF0sXG5cdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdCfmnIDmlrDkv67oqILniYjmnKwgJyxcblx0XHRcdFx0XHRcdFx0TW9yZWJpdHMuaHRtbE5vZGUoJ3N0cm9uZycsIGxhc3RyZXZpZCksXG5cdFx0XHRcdFx0XHRcdCcg6IiH5oiR5YCR55qE5L+u6KiC54mI5pysICcsXG5cdFx0XHRcdFx0XHRcdE1vcmViaXRzLmh0bWxOb2RlKCdzdHJvbmcnLCBwYXJhbXMucmV2aWQpLFxuXHRcdFx0XHRcdFx0XHQnIOS4jeWQjCcsXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRpZiAobGFzdHVzZXIgPT09IHBhcmFtcy51c2VyKSB7XG5cdFx0XHRcdFx0c3dpdGNoIChwYXJhbXMudHlwZSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAndmFuZCc6XG5cdFx0XHRcdFx0XHRcdE1vcmViaXRzLnN0YXR1cy5pbmZvKHdpbmRvdy53Z1VMUygn5L+h5oGvJywgJ+izh+ioiicpLCBbXG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfmnIDmlrDkv67orqLniYjmnKznlLEgJywgJ+acgOaWsOS/ruiogueJiOacrOeUsSAnKSxcblx0XHRcdFx0XHRcdFx0XHRNb3JlYml0cy5odG1sTm9kZSgnc3Ryb25nJywgdXNlck5vcm0pLFxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHRcdCcg5YGa5Ye677yM5Zug5oiR5Lus5YGH5a6a56C05Z2P77yM57un57ut5Zue6YCA5pON5L2c44CCJyxcblx0XHRcdFx0XHRcdFx0XHRcdCcg5YGa5Ye677yM5Zug5oiR5YCR5YGH5a6a56C05aOe77yM57m857qM5Zue6YCA5pON5L2c44CCJ1xuXHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdF0pO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdE1vcmViaXRzLnN0YXR1cy53YXJuKCfmj5DnpLonLCBbXG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfmnIDmlrDkv67orqLniYjmnKznlLEgJywgJ+acgOaWsOS/ruiogueJiOacrOeUsSAnKSxcblx0XHRcdFx0XHRcdFx0XHRNb3JlYml0cy5odG1sTm9kZSgnc3Ryb25nJywgdXNlck5vcm0pLFxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygnIOWBmuWHuu+8jOS9huaIkeS7rOi/mOaYr+S4jeWbnumAgOS6huOAgicsICcg5YGa5Ye677yM5L2G5oiR5YCR6YKE5piv5LiN5Zue6YCA5LqG44CCJyksXG5cdFx0XHRcdFx0XHRcdF0pO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0XHRcdHBhcmFtcy50eXBlID09PSAndmFuZCcgJiYgLy8gT2theSB0byB0ZXN0IG9uIHVzZXIgc2luY2UgaXQgd2lsbCBlaXRoZXIgZmFpbCBvciBzeXNvcCB3aWxsIGNvcnJlY3RseSBhY2Nlc3MgaXRcblx0XHRcdFx0XHQvLyBCZXNpZGVzLCBub25lIG9mIHRoZSB0cnVzdGVkIGJvdHMgYXJlIGdvaW5nIHRvIGJlIHJldmRlbCdkXG5cdFx0XHRcdFx0VHdpbmtsZS5mbHVmZi50cnVzdGVkQm90cy5pbmNsdWRlcyh0b3AuZ2V0QXR0cmlidXRlKCd1c2VyJykpICYmXG5cdFx0XHRcdFx0cmV2cy5sZW5ndGggPiAxICYmXG5cdFx0XHRcdFx0cmV2c1sxXS5nZXRBdHRyaWJ1dGUoJ3JldmlkJykgPT09IHBhcmFtcy5yZXZpZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5mbyhcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5L+h5oGvJywgJ+izh+ioiicpLFxuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0J+acgOaWsOS/ruiuoueJiOacrOeUsSAnLFxuXHRcdFx0XHRcdFx0XHRcdE1vcmViaXRzLmh0bWxOb2RlKCdzdHJvbmcnLCBsYXN0dXNlciksXG5cdFx0XHRcdFx0XHRcdFx0J++8jOS4gOS4quWPr+S/oeeahOacuuWZqOS6uuWBmuWHuu+8jOS9huS5i+WJjeeahOeJiOacrOiiq+iupOS4uuaYr+egtOWdj++8jOe7p+e7reWbnumAgOaTjeS9nOOAgicsXG5cdFx0XHRcdFx0XHRcdF0sXG5cdFx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0XHQn5pyA5paw5L+u6KiC54mI5pys55SxICcsXG5cdFx0XHRcdFx0XHRcdFx0TW9yZWJpdHMuaHRtbE5vZGUoJ3N0cm9uZycsIGxhc3R1c2VyKSxcblx0XHRcdFx0XHRcdFx0XHQn77yM5LiA5YCL5Y+v5L+h55qE5qmf5Zmo5Lq65YGa5Ye677yM5L2G5LmL5YmN55qE54mI5pys6KKr6KqN54K65piv56C05aOe77yM57m857qM5Zue6YCA5pON5L2c44CCJyxcblx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0aW5kZXggPSAyO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE1vcmViaXRzLnN0YXR1cy5lcnJvcihcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn6ZSZ6K+vJywgJ+mMr+iqpCcpLFxuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0J+acgOaWsOS/ruiuoueJiOacrOeUsSAnLFxuXHRcdFx0XHRcdFx0XHRcdE1vcmViaXRzLmh0bWxOb2RlKCdzdHJvbmcnLCBsYXN0dXNlciksXG5cdFx0XHRcdFx0XHRcdFx0JyDlgZrlh7rvvIzmiYDku6Xov5nkuKrkv67orqLniYjmnKzlj6/og73lt7Lnu4/ooqvlm57pgIDkuobvvIzlj5bmtojlm57pgIDmk43kvZzjgIInLFxuXHRcdFx0XHRcdFx0XHRdLFxuXHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0J+acgOaWsOS/ruiogueJiOacrOeUsSAnLFxuXHRcdFx0XHRcdFx0XHRcdE1vcmViaXRzLmh0bWxOb2RlKCdzdHJvbmcnLCBsYXN0dXNlciksXG5cdFx0XHRcdFx0XHRcdFx0JyDlgZrlh7rvvIzmiYDku6XpgJnlgIvkv67oqILniYjmnKzlj6/og73lt7LntpPooqvlm57pgIDkuobvvIzlj5bmtojlm57pgIDmk43kvZzjgIInLFxuXHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChUd2lua2xlLmZsdWZmLnRydXN0ZWRCb3RzLmluY2x1ZGVzKHBhcmFtcy51c2VyKSkge1xuXHRcdFx0XHRzd2l0Y2ggKHBhcmFtcy50eXBlKSB7XG5cdFx0XHRcdFx0Y2FzZSAndmFuZCc6XG5cdFx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5mbyh3aW5kb3cud2dVTFMoJ+S/oeaBrycsICfos4foqIonKSwgW1xuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WwhuWvuSAnLCAn5bCH5bCNICcpLFxuXHRcdFx0XHRcdFx0XHRNb3JlYml0cy5odG1sTm9kZSgnc3Ryb25nJywgdXNlck5vcm0pLFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0JyDmiafooYznoLTlnY/lm57pgIDvvIzov5nmmK/kuIDkuKrlj6/kv6HnmoTmnLrlmajkurrvvIzmiJHku6zlgYflrprmgqjopoHlm57pgIDliY3kuIDkuKrkv67orqLniYjmnKzjgIInLFxuXHRcdFx0XHRcdFx0XHRcdCcg5Z+36KGM56C05aOe5Zue6YCA77yM6YCZ5piv5LiA5YCL5Y+v5L+h55qE5qmf5Zmo5Lq677yM5oiR5YCR5YGH5a6a5oKo6KaB5Zue6YCA5YmN5LiA5YCL5L+u6KiC54mI5pys44CCJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XSk7XG5cdFx0XHRcdFx0XHRpbmRleCA9IDI7XG5cdFx0XHRcdFx0XHRwYXJhbXMudXNlciA9IHJldnNbMV0uZ2V0QXR0cmlidXRlKCd1c2VyJyk7XG5cdFx0XHRcdFx0XHRwYXJhbXMudXNlckhpZGRlbiA9IHJldnNbMV0uZ2V0QXR0cmlidXRlKCd1c2VyaGlkZGVuJykgPT09ICcnO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0LyogY2FzZSAnbm9ybSc6ICovXG5cdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0XHRcdGNvbnN0IGNvbnQgPSBjb25maXJtKFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+mAieaLqeS6huW4uOinhOWbnumAgO+8jOS9huacgOaWsOS/ruaUueaYr+eUseS4gOS4quWPr+S/oeeahOacuuWZqOS6uu+8iCcsXG5cdFx0XHRcdFx0XHRcdFx0J+mBuOaTh+S6huW4uOimj+WbnumAgO+8jOS9huacgOaWsOS/ruaUueaYr+eUseS4gOWAi+WPr+S/oeeahOapn+WZqOS6uu+8iCdcblx0XHRcdFx0XHRcdFx0KSArXG5cdFx0XHRcdFx0XHRcdFx0dXNlck5vcm0gK1xuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHRcdCfvvInlgZrlh7rnmoTjgILnoa7lrprku6Xlm57pgIDliY3kuIDkuKrkv67orqLniYjmnKzvvIzlj5bmtojku6Xlm57pgIDmnLrlmajkurrnmoTkv67mlLknLFxuXHRcdFx0XHRcdFx0XHRcdFx0J++8ieWBmuWHuueahOOAgueiuuWumuS7peWbnumAgOWJjeS4gOWAi+S/ruiogueJiOacrO+8jOWPlua2iOS7peWbnumAgOapn+WZqOS6uueahOS/ruaUuSdcblx0XHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0aWYgKGNvbnQpIHtcblx0XHRcdFx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluZm8od2luZG93LndnVUxTKCfkv6Hmga8nLCAn6LOH6KiKJyksIFtcblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WwhuWvuSAnLCAn5bCH5bCNICcpLFxuXHRcdFx0XHRcdFx0XHRcdE1vcmViaXRzLmh0bWxOb2RlKCdzdHJvbmcnLCB1c2VyTm9ybSksXG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdFx0JyDmiafooYzluLjop4Tlm57pgIDvvIzov5nmmK/kuIDkuKrlj6/kv6HnmoTmnLrlmajkurrvvIzln7rkuo7noa7orqTvvIzmiJHku6zlsIblm57pgIDliY3kuIDkuKrkv67orqLniYjmnKzjgIInLFxuXHRcdFx0XHRcdFx0XHRcdFx0JyDln7fooYzluLjopo/lm57pgIDvvIzpgJnmmK/kuIDlgIvlj6/kv6HnmoTmqZ/lmajkurrvvIzln7rmlrznorroqo3vvIzmiJHlgJHlsIflm57pgIDliY3kuIDlgIvkv67oqILniYjmnKzjgIInXG5cdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XSk7XG5cdFx0XHRcdFx0XHRcdGluZGV4ID0gMjtcblx0XHRcdFx0XHRcdFx0cGFyYW1zLnVzZXIgPSByZXZzWzFdLmdldEF0dHJpYnV0ZSgndXNlcicpO1xuXHRcdFx0XHRcdFx0XHRwYXJhbXMudXNlckhpZGRlbiA9IHJldnNbMV0uZ2V0QXR0cmlidXRlKCd1c2VyaGlkZGVuJykgPT09ICcnO1xuXHRcdFx0XHRcdFx0XHR1c2VyTm9ybSA9IHBhcmFtcy51c2VyIHx8IFR3aW5rbGUuZmx1ZmYuaGlkZGVuTmFtZTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdE1vcmViaXRzLnN0YXR1cy53YXJuKCfmj5DnpLonLCBbXG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCflsIblr7kgJywgJ+Wwh+WwjSAnKSxcblx0XHRcdFx0XHRcdFx0XHRNb3JlYml0cy5odG1sTm9kZSgnc3Ryb25nJywgdXNlck5vcm0pLFxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdFx0XHRcdCcg5omn6KGM5bi46KeE5Zue6YCA77yM6L+Z5piv5LiA5Liq5Y+v5L+h55qE5py65Zmo5Lq677yM5Z+65LqO56Gu6K6k77yM5oiR5Lus5LuN5bCG5Zue6YCA6L+Z5Liq5L+u6K6i54mI5pys44CCJyxcblx0XHRcdFx0XHRcdFx0XHRcdCcg5Z+36KGM5bi46KaP5Zue6YCA77yM6YCZ5piv5LiA5YCL5Y+v5L+h55qE5qmf5Zmo5Lq677yM5Z+65pa856K66KqN77yM5oiR5YCR5LuN5bCH5Zue6YCA6YCZ5YCL5L+u6KiC54mI5pys44CCJ1xuXHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdF0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRsZXQgZm91bmQgPSBmYWxzZTtcblx0XHRcdGxldCBjb3VudCA9IDA7XG5cdFx0XHRmb3IgKGxldCBpID0gaW5kZXg7IGkgPCByZXZzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdCsrY291bnQ7XG5cdFx0XHRcdGlmIChyZXZzW2ldLmdldEF0dHJpYnV0ZSgndXNlcicpICE9PSBwYXJhbXMudXNlcikge1xuXHRcdFx0XHRcdGZvdW5kID0gaTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRzdGF0ZWxlbS5lcnJvcihbXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfmnKrmib7liLDkuYvliY3nmoTkv67orqLniYjmnKzvvIzlj6/og70gJywgJ+acquaJvuWIsOS5i+WJjeeahOS/ruiogueJiOacrO+8jOWPr+iDvSAnKSxcblx0XHRcdFx0XHRNb3JlYml0cy5odG1sTm9kZSgnc3Ryb25nJywgdXNlck5vcm0pLFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCcg5piv5ZSv5LiA6LSh54yu6ICF77yM5oiW6L+Z5Liq55So5oi36L+e57ut5YGa5Ye65LqG6LaF6L+HICcsXG5cdFx0XHRcdFx0XHQnIOaYr+WUr+S4gOiyoueNu+iAhe+8jOaIlumAmeWAi+eUqOaItumAo+e6jOWBmuWHuuS6hui2hemBjiAnXG5cdFx0XHRcdFx0KSArXG5cdFx0XHRcdFx0XHRtdy5sYW5ndWFnZS5jb252ZXJ0TnVtYmVyKFR3aW5rbGUuZ2V0UHJlZigncmV2ZXJ0TWF4UmV2aXNpb25zJykpICtcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygnIOasoee8lui+keOAgicsICcg5qyh57eo6Lyv44CCJyksXG5cdFx0XHRcdF0pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWNvdW50KSB7XG5cdFx0XHRcdE1vcmViaXRzLnN0YXR1cy5lcnJvcihcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+mUmeivrycsICfpjK/oqqQnKSxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5oiR5Lus5bCG6KaB5Zue6YCAMOS4quS/ruiuoueJiOacrO+8jOi/meayoeacieaEj+S5ie+8jOaJgOS7peWPlua2iOWbnumAgOaTjeS9nOOAguWPr+iDveaYr+WboOS4uui/meS4quS/ruiuoueJiOacrOW3sue7j+iiq+WbnumAgO+8jOS9huS/ruiuoueJiOacrElE5LuN5piv5LiA5qC355qE44CCJyxcblx0XHRcdFx0XHRcdCfmiJHlgJHlsIfopoHlm57pgIAw5YCL5L+u6KiC54mI5pys77yM6YCZ5rKS5pyJ5oSP576p77yM5omA5Lul5Y+W5raI5Zue6YCA5pON5L2c44CC5Y+v6IO95piv5Zug54K66YCZ5YCL5L+u6KiC54mI5pys5bey57aT6KKr5Zue6YCA77yM5L2G5L+u6KiC54mI5pysSUTku43mmK/kuIDmqKPnmoTjgIInXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBnb29kX3JldmlzaW9uID0gcmV2c1tmb3VuZF07XG5cdFx0XHRsZXQgdXNlckhhc0FscmVhZHlDb25maXJtZWRBY3Rpb24gPSBmYWxzZTtcblx0XHRcdGlmIChwYXJhbXMudHlwZSAhPT0gJ3ZhbmQnICYmIGNvdW50ID4gMSkge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0IWNvbmZpcm0oXG5cdFx0XHRcdFx0XHR1c2VyTm9ybSArXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygnIOi/nue7reWBmuWHuuS6hiAnLCAnIOmAo+e6jOWBmuWHuuS6hiAnKSArXG5cdFx0XHRcdFx0XHRcdG13Lmxhbmd1YWdlLmNvbnZlcnROdW1iZXIoY291bnQpICtcblx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCcg5qyh57yW6L6R77yM5piv5ZCm6KaB5YWo6YOo5Zue6YCA77yfJywgJyDmrKHnt6jovK/vvIzmmK/lkKbopoHlhajpg6jlm57pgIDvvJ8nKVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLmluZm8oJ+aPkOekuicsIHdpbmRvdy53Z1VMUygn55So5oi35Y+W5raI5pON5L2cJywgJ+S9v+eUqOiAheWPlua2iOaTjeS9nCcpKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dXNlckhhc0FscmVhZHlDb25maXJtZWRBY3Rpb24gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cGFyYW1zLmNvdW50ID0gY291bnQ7XG5cdFx0XHRwYXJhbXMuZ29vZGlkID0gZ29vZF9yZXZpc2lvbi5nZXRBdHRyaWJ1dGUoJ3JldmlkJyk7XG5cdFx0XHRwYXJhbXMuZ29vZHVzZXIgPSBnb29kX3JldmlzaW9uLmdldEF0dHJpYnV0ZSgndXNlcicpO1xuXHRcdFx0cGFyYW1zLmdvb2R1c2VySGlkZGVuID0gZ29vZF9yZXZpc2lvbi5nZXRBdHRyaWJ1dGUoJ3VzZXJoaWRkZW4nKSA9PT0gJyc7XG5cdFx0XHRzdGF0ZWxlbS5zdGF0dXMoW1xuXHRcdFx0XHRNb3JlYml0cy5odG1sTm9kZSgnc3Ryb25nJywgbXcubGFuZ3VhZ2UuY29udmVydE51bWJlcihjb3VudCkpLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJyDkuKrkv67orqLniYjmnKzkuYvliY3nlLEgJywgJyDlgIvkv67oqILniYjmnKzkuYvliY3nlLEgJyksXG5cdFx0XHRcdE1vcmViaXRzLmh0bWxOb2RlKCdzdHJvbmcnLCBwYXJhbXMuZ29vZHVzZXJIaWRkZW4gPyBUd2lua2xlLmZsdWZmLmhpZGRlbk5hbWUgOiBwYXJhbXMuZ29vZHVzZXIpLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJyDlgZrlh7rnmoTkv67orqLniYjmnKwgJywgJyDlgZrlh7rnmoTkv67oqILniYjmnKwgJyksXG5cdFx0XHRcdE1vcmViaXRzLmh0bWxOb2RlKCdzdHJvbmcnLCBwYXJhbXMuZ29vZGlkKSxcblx0XHRcdF0pO1xuXHRcdFx0bGV0IHN1bW1hcnk7XG5cdFx0XHRsZXQgZXh0cmFfc3VtbWFyeTtcblx0XHRcdHN3aXRjaCAocGFyYW1zLnR5cGUpIHtcblx0XHRcdFx0Y2FzZSAndmFuZCc6XG5cdFx0XHRcdFx0c3VtbWFyeSA9IFR3aW5rbGUuZmx1ZmYuZm9ybWF0U3VtbWFyeShcblx0XHRcdFx0XHRcdGDlm57pgIAkVVNFUuWBmuWHuueahCR7cGFyYW1zLmNvdW50fSR7d2luZG93LndnVUxTKCfmrKHnvJbovpHvvIzliLDnlLEnLCAn5qyh57eo6Lyv77yM5Yiw55SxJyl9JHtcblx0XHRcdFx0XHRcdFx0cGFyYW1zLmdvb2R1c2VySGlkZGVuID8gVHdpbmtsZS5mbHVmZi5oaWRkZW5OYW1lIDogcGFyYW1zLmdvb2R1c2VyXG5cdFx0XHRcdFx0XHR9JHt3aW5kb3cud2dVTFMoJ+WBmuWHuueahOacgOWQjuS/ruiuoueJiOacrCAnLCAn5YGa5Ye655qE5pyA5b6M5L+u6KiC54mI5pysICcpfWAsXG5cdFx0XHRcdFx0XHRwYXJhbXMudXNlckhpZGRlbiA/IG51bGwgOiBwYXJhbXMudXNlclxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdC8qIGNhc2UgJ25vcm0nOiAqL1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0aWYgKFR3aW5rbGUuZ2V0UHJlZignb2ZmZXJSZWFzb25Pbk5vcm1hbFJldmVydCcpKSB7XG5cdFx0XHRcdFx0XHRleHRyYV9zdW1tYXJ5ID0gcHJvbXB0KFxuXHRcdFx0XHRcdFx0XHRgJHt3aW5kb3cud2dVTFMoJ+WPr+mAieeahOe8lui+keaRmOimge+8micsICflj6/pgbjnmoTnt6jovK/mkZjopoHvvJonKX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgLFxuXHRcdFx0XHRcdFx0XHRwYXJhbXMuc3VtbWFyeVxuXHRcdFx0XHRcdFx0KTsgLy8gcGFkZGVkIG91dCB0byB3aWRlbiBwcm9tcHQgaW4gRmlyZWZveFxuXHRcdFx0XHRcdFx0aWYgKGV4dHJhX3N1bW1hcnkgPT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0c3RhdGVsZW0uZXJyb3Iod2luZG93LndnVUxTKCfnlKjmiLflj5bmtojmk43kvZzjgIInLCAn5L2/55So6ICF5Y+W5raI5pON5L2c44CCJykpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR1c2VySGFzQWxyZWFkeUNvbmZpcm1lZEFjdGlvbiA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHN1bW1hcnkgPSBUd2lua2xlLmZsdWZmLmZvcm1hdFN1bW1hcnkoXG5cdFx0XHRcdFx0XHRg5Zue6YCAJFVTRVLlgZrlh7rnmoQke3BhcmFtcy5jb3VudH0ke3dpbmRvdy53Z1VMUygn5qyh57yW6L6RJywgJ+asoee3qOi8rycpfWAsXG5cdFx0XHRcdFx0XHRwYXJhbXMudXNlckhpZGRlbiA/IG51bGwgOiBwYXJhbXMudXNlcixcblx0XHRcdFx0XHRcdGV4dHJhX3N1bW1hcnlcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKFxuXHRcdFx0XHRUd2lua2xlLmdldFByZWYoJ2NvbmZpcm1PbkZsdWZmJykgJiZcblx0XHRcdFx0IXVzZXJIYXNBbHJlYWR5Q29uZmlybWVkQWN0aW9uICYmXG5cdFx0XHRcdCFjb25maXJtKHdpbmRvdy53Z1VMUygn5Zue6YCA6aG16Z2i77ya5oKo56Gu5a6a5ZCX77yfJywgJ+WbnumAgOmggemdou+8muaCqOeiuuWumuWXju+8nycpKVxuXHRcdFx0KSB7XG5cdFx0XHRcdHN0YXRlbGVtLmVycm9yKHdpbmRvdy53Z1VMUygn55So5oi35Y+W5raI5pON5L2c44CCJywgJ+S9v+eUqOiAheWPlua2iOaTjeS9nOOAgicpKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Ly8gRGVjaWRlIHdoZXRoZXIgdG8gbm90aWZ5IHRoZSB1c2VyIG9uIHN1Y2Nlc3Ncblx0XHRcdGlmIChcblx0XHRcdFx0IVR3aW5rbGUuZmx1ZmYuc2tpcFRhbGsgJiZcblx0XHRcdFx0VHdpbmtsZS5nZXRQcmVmKCdvcGVuVGFsa1BhZ2UnKS5pbmNsdWRlcyhwYXJhbXMudHlwZSkgJiZcblx0XHRcdFx0IXBhcmFtcy51c2VySGlkZGVuICYmXG5cdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnVXNlck5hbWUnKSAhPT0gcGFyYW1zLnVzZXJcblx0XHRcdCkge1xuXHRcdFx0XHRwYXJhbXMubm90aWZ5VXNlciA9IHRydWU7XG5cdFx0XHRcdC8vIFBhc3MgYWxvbmcgdG8gdGhlIHdhcm4gbW9kdWxlXG5cdFx0XHRcdHBhcmFtcy52YW50aW1lc3RhbXAgPSB0b3AuZ2V0QXR0cmlidXRlKCd0aW1lc3RhbXAnKTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0XHRhY3Rpb246ICdlZGl0Jyxcblx0XHRcdFx0dGl0bGU6IHBhcmFtcy5wYWdlbmFtZSxcblx0XHRcdFx0c3VtbWFyeSxcblx0XHRcdFx0dGFnczogVHdpbmtsZS5jaGFuZ2VUYWdzLFxuXHRcdFx0XHR0b2tlbjogY3NyZnRva2VuLFxuXHRcdFx0XHR1bmRvOiBsYXN0cmV2aWQsXG5cdFx0XHRcdHVuZG9hZnRlcjogcGFyYW1zLmdvb2RpZCxcblx0XHRcdFx0YmFzZXRpbWVzdGFtcDogdG91Y2hlZCxcblx0XHRcdFx0c3RhcnR0aW1lc3RhbXA6IGxvYWR0aW1lc3RhbXAsXG5cdFx0XHRcdG1pbm9yOiBUd2lua2xlLmdldFByZWYoJ21hcmtSZXZlcnRlZFBhZ2VzQXNNaW5vcicpLmluY2x1ZGVzKHBhcmFtcy50eXBlKSA/IHRydWUgOiB1bmRlZmluZWQsXG5cdFx0XHRcdGJvdDogdHJ1ZSxcblx0XHRcdH07XG5cdFx0XHQvLyBIYW5kbGUgd2F0Y2hpbmcsIHBvc3NpYmxlIGV4cGlyeVxuXHRcdFx0aWYgKFR3aW5rbGUuZ2V0UHJlZignd2F0Y2hSZXZlcnRlZFBhZ2VzJykuaW5jbHVkZXMocGFyYW1zLnR5cGUpKSB7XG5cdFx0XHRcdGNvbnN0IHdhdGNoT3JFeHBpcnkgPSBUd2lua2xlLmdldFByZWYoJ3dhdGNoUmV2ZXJ0ZWRFeHBpcnknKTtcblx0XHRcdFx0aWYgKCF3YXRjaE9yRXhwaXJ5IHx8IHdhdGNoT3JFeHBpcnkgPT09ICdubycpIHtcblx0XHRcdFx0XHRxdWVyeS53YXRjaGxpc3QgPSAnbm9jaGFuZ2UnO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHdhdGNoT3JFeHBpcnkgPT09ICdkZWZhdWx0JyB8fCB3YXRjaE9yRXhwaXJ5ID09PSAncHJlZmVyZW5jZXMnKSB7XG5cdFx0XHRcdFx0cXVlcnkud2F0Y2hsaXN0ID0gJ3ByZWZlcmVuY2VzJztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWVyeS53YXRjaGxpc3QgPSAnd2F0Y2gnO1xuXHRcdFx0XHRcdC8vIG51bWJlciBhbGxvd2VkIGJ1dCBub3QgdXNlZCBpbiBUd2lua2xlLmNvbmZpZy53YXRjaGxpc3RFbnVtc1xuXHRcdFx0XHRcdGlmICh0eXBlb2Ygd2F0Y2hPckV4cGlyeSA9PT0gJ3N0cmluZycgJiYgd2F0Y2hPckV4cGlyeSAhPT0gJ3llcycpIHtcblx0XHRcdFx0XHRcdHF1ZXJ5LndhdGNobGlzdGV4cGlyeSA9IHdhdGNoT3JFeHBpcnk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIVR3aW5rbGUuZmx1ZmYucm9sbGJhY2tJblBsYWNlKSB7XG5cdFx0XHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLnJlZGlyZWN0ID0gcGFyYW1zLnBhZ2VuYW1lO1xuXHRcdFx0fVxuXHRcdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQubm90aWNlID0gJ+WbnumAgOWujOaIkCc7XG5cdFx0XHRjb25zdCB5c2FyY2hpdmVzX2FwaSA9IG5ldyBNb3JlYml0cy53aWtpLmFwaShcblx0XHRcdFx0d2luZG93LndnVUxTKCfkv53lrZjlm57pgIDlhoXlrrknLCAn5YSy5a2Y5Zue6YCA5YWn5a65JyksXG5cdFx0XHRcdHF1ZXJ5LFxuXHRcdFx0XHRUd2lua2xlLmZsdWZmLmNhbGxiYWNrcy5jb21wbGV0ZSxcblx0XHRcdFx0c3RhdGVsZW1cblx0XHRcdCk7XG5cdFx0XHR5c2FyY2hpdmVzX2FwaS5wYXJhbXMgPSBwYXJhbXM7XG5cdFx0XHR5c2FyY2hpdmVzX2FwaS5wb3N0KCk7XG5cdFx0fSxcblx0XHRjb21wbGV0ZTogKGFwaW9iaikgPT4ge1xuXHRcdFx0Ly8gVE9ETyBNb3N0IG9mIHRoaXMgaXMgY29weS1wYXN0ZWQgZnJvbSBNb3JlYml0cy53aWtpLnBhZ2UjZm5TYXZlU3VjY2Vzcy4gVW5pZnkgaXRcblx0XHRcdGNvbnN0IHhtbCA9IGFwaW9iai5nZXRYTUwoKTtcblx0XHRcdGNvbnN0ICRlZGl0ID0gJCh4bWwpLmZpbmQoJ2VkaXQnKTtcblx0XHRcdGlmICgkKHhtbCkuZmluZCgnY2FwdGNoYScpLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0YXBpb2JqLnN0YXRlbGVtLmVycm9yKFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5LiN6IO95Zue6YCA77yM5Zug5pyN5Yqh5Zmo6KaB5rGC5oKo6L6T5YWl6aqM6K+B56CB44CCJywgJ+S4jeiDveWbnumAgO+8jOWboOS8uuacjeWZqOimgeaxguaCqOi8uOWFpempl+itieeivOOAgicpXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2UgaWYgKCRlZGl0LmF0dHIoJ25vY2hhbmdlJykgPT09ICcnKSB7XG5cdFx0XHRcdGFwaW9iai5zdGF0ZWxlbS5lcnJvcihcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn6KaB5Zue6YCA5Yiw55qE54mI5pys5LiO5b2T5YmN54mI5pys55u45ZCM77yM5rKh5LuA5LmI6KaB5YGa55qEJyxcblx0XHRcdFx0XHRcdCfopoHlm57pgIDliLDnmoTniYjmnKzoiIfnm67liY3niYjmnKznm7jlkIzvvIzmspLku4DpurzopoHlgZrnmoQnXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YXBpb2JqLnN0YXRlbGVtLmluZm8oJ+WujOaIkCcpO1xuXHRcdFx0XHRjb25zdCB7cGFyYW1zfSA9IGFwaW9iajtcblx0XHRcdFx0aWYgKHBhcmFtcy5ub3RpZnlVc2VyICYmICFwYXJhbXMudXNlckhpZGRlbikge1xuXHRcdFx0XHRcdC8vIG5vdGlmeVVzZXIgb25seSBmcm9tIG1haW4sIG5vdCBmcm9tIHRvUmV2aXNpb25cblx0XHRcdFx0XHRNb3JlYml0cy5zdGF0dXMuaW5mbyh3aW5kb3cud2dVTFMoJ+S/oeaBrycsICfos4foqIonKSwgW1xuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCflvIDlkK/nlKjmiLcgJywgJ+mWi+WVn+S9v+eUqOiAhSAnKSxcblx0XHRcdFx0XHRcdE1vcmViaXRzLmh0bWxOb2RlKCdzdHJvbmcnLCBwYXJhbXMudXNlciksXG5cdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJyDnmoTorqjorrrpobUnLCAnIOeahOiojuirlumggScpLFxuXHRcdFx0XHRcdF0pO1xuXHRcdFx0XHRcdGNvbnN0IHdpbmRvd1F1ZXJ5ID0ge1xuXHRcdFx0XHRcdFx0dGl0bGU6IGBVc2VyIHRhbGs6JHtwYXJhbXMudXNlcn1gLFxuXHRcdFx0XHRcdFx0YWN0aW9uOiAnZWRpdCcsXG5cdFx0XHRcdFx0XHRwcmV2aWV3OiAneWVzJyxcblx0XHRcdFx0XHRcdHZhbmFydGljbGU6IHBhcmFtcy5wYWdlbmFtZS5yZXBsYWNlKC9fL2csICcgJyksXG5cdFx0XHRcdFx0XHR2YW5hcnRpY2xlcmV2aWQ6IHBhcmFtcy5yZXZpZCxcblx0XHRcdFx0XHRcdHZhbnRpbWVzdGFtcDogcGFyYW1zLnZhbnRpbWVzdGFtcCxcblx0XHRcdFx0XHRcdHZhbmFydGljbGVnb29kcmV2aWQ6IHBhcmFtcy5nb29kaWQsXG5cdFx0XHRcdFx0XHR0eXBlOiBwYXJhbXMudHlwZSxcblx0XHRcdFx0XHRcdGNvdW50OiBwYXJhbXMuY291bnQsXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRzd2l0Y2ggKFR3aW5rbGUuZ2V0UHJlZigndXNlclRhbGtQYWdlTW9kZScpKSB7XG5cdFx0XHRcdFx0XHRjYXNlICd0YWInOlxuXHRcdFx0XHRcdFx0XHR3aW5kb3cub3Blbihtdy51dGlsLmdldFVybCgnJywgd2luZG93UXVlcnkpLCAnX2JsYW5rJywgJ25vb3BlbmVyLG5vcmVmZXJyZXInKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdibGFuayc6XG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5vcGVuKFxuXHRcdFx0XHRcdFx0XHRcdG13LnV0aWwuZ2V0VXJsKCcnLCB3aW5kb3dRdWVyeSksXG5cdFx0XHRcdFx0XHRcdFx0J19ibGFuaycsXG5cdFx0XHRcdFx0XHRcdFx0J25vb3BlbmVyLG5vcmVmZXJyZXIsbG9jYXRpb249bm8sdG9vbGJhcj1ubyxzdGF0dXM9bm8sZGlyZWN0b3JpZXM9bm8sc2Nyb2xsYmFycz15ZXMsd2lkdGg9MTIwMCxoZWlnaHQ9ODAwJ1xuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdC8qIGNhc2UgJ3dpbmRvdyc6ICovXG5cdFx0XHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHR3aW5kb3cub3Blbihcblx0XHRcdFx0XHRcdFx0XHRtdy51dGlsLmdldFVybCgnJywgd2luZG93UXVlcnkpLFxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5uYW1lID09PSAndHdpbmtsZXdhcm53aW5kb3cnID8gJ19ibGFuaycgOiAndHdpbmtsZXdhcm53aW5kb3cnLFxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5uYW1lID09PSAndHdpbmtsZXdhcm53aW5kb3cnXG5cdFx0XHRcdFx0XHRcdFx0XHQ/ICdub29wZW5lcixub3JlZmVycmVyLCdcblx0XHRcdFx0XHRcdFx0XHRcdDogJycgK1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCdsb2NhdGlvbj1ubyx0b29sYmFyPW5vLHN0YXR1cz1ubyxkaXJlY3Rvcmllcz1ubyxzY3JvbGxiYXJzPXllcyx3aWR0aD0xMjAwLGhlaWdodD04MDAnXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdH07XG5cdC8vIElmIGJ1aWx0SW5TdHJpbmcgY29udGFpbnMgdGhlIHN0cmluZyBcIiRVU0VSXCIsIGl0IHdpbGwgYmUgcmVwbGFjZWRcblx0Ly8gYnkgYW4gYXBwcm9wcmlhdGUgdXNlciBsaW5rIGlmIGEgdXNlciBuYW1lIGlzIHByb3ZpZGVkXG5cdFR3aW5rbGUuZmx1ZmYuZm9ybWF0U3VtbWFyeSA9IChidWlsdEluU3RyaW5nLCB1c2VyTmFtZSwgY3VzdG9tU3RyaW5nKSA9PiB7XG5cdFx0bGV0IHJlc3VsdCA9IGJ1aWx0SW5TdHJpbmc7XG5cdFx0Ly8gYXBwZW5kIHVzZXIncyBjdXN0b20gcmVhc29uXG5cdFx0aWYgKGN1c3RvbVN0cmluZykge1xuXHRcdFx0cmVzdWx0ICs9IGDvvJoke01vcmViaXRzLnN0cmluZy50b1VwcGVyQ2FzZUZpcnN0Q2hhcihjdXN0b21TdHJpbmcpfWA7XG5cdFx0fVxuXHRcdC8vIGZpbmQgbnVtYmVyIG9mIFVURi04IGJ5dGVzIHRoZSByZXN1bHRpbmcgc3RyaW5nIHRha2VzIHVwLCBhbmQgcG9zc2libHkgYWRkXG5cdFx0Ly8gYSBjb250cmlidXRpb25zIG9yIGNvbnRyaWJ1dGlvbnMrdGFsayBsaW5rIGlmIGl0IGRvZXNuJ3QgcHVzaCB0aGUgZWRpdCBzdW1tYXJ5XG5cdFx0Ly8gb3ZlciB0aGUgNDk5LWJ5dGUgbGltaXRcblx0XHRpZiAoL1xcJFVTRVIvLnRlc3QoYnVpbHRJblN0cmluZykpIHtcblx0XHRcdGlmICh1c2VyTmFtZSkge1xuXHRcdFx0XHRjb25zdCByZXN1bHRMZW4gPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQocmVzdWx0LnJlcGxhY2UoJyRVU0VSJywgJycpKSkubGVuZ3RoO1xuXHRcdFx0XHRjb25zdCBjb250cmlic0xpbmsgPSBgW1tTcGVjaWFsOkNvbnRyaWJ1dGlvbnMvJHt1c2VyTmFtZX18JHt1c2VyTmFtZX1dXWA7XG5cdFx0XHRcdGNvbnN0IGNvbnRyaWJzTGVuID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRyaWJzTGluaykpLmxlbmd0aDtcblx0XHRcdFx0aWYgKHJlc3VsdExlbiArIGNvbnRyaWJzTGVuIDw9IDQ5OSkge1xuXHRcdFx0XHRcdGNvbnN0IHRhbGtMaW5rID0gYO+8iFtbVXNlciB0YWxrOiR7dXNlck5hbWV9JHt3aW5kb3cud2dVTFMoJ3zorqjorrpdXe+8iScsICd86KiO6KuWXV3vvIknKX1gO1xuXHRcdFx0XHRcdGlmIChyZXN1bHRMZW4gKyBjb250cmlic0xlbiArIHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudCh0YWxrTGluaykpLmxlbmd0aCA8PSA0OTkpIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IE1vcmViaXRzLnN0cmluZy5zYWZlUmVwbGFjZShyZXN1bHQsICckVVNFUicsIGNvbnRyaWJzTGluayArIHRhbGtMaW5rKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0gTW9yZWJpdHMuc3RyaW5nLnNhZmVSZXBsYWNlKHJlc3VsdCwgJyRVU0VSJywgY29udHJpYnNMaW5rKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmVzdWx0ID0gTW9yZWJpdHMuc3RyaW5nLnNhZmVSZXBsYWNlKHJlc3VsdCwgJyRVU0VSJywgdXNlck5hbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQgPSBNb3JlYml0cy5zdHJpbmcuc2FmZVJlcGxhY2UocmVzdWx0LCAnJFVTRVInLCBUd2lua2xlLmZsdWZmLmhpZGRlbk5hbWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXHRUd2lua2xlLmFkZEluaXRDYWxsYmFjayhUd2lua2xlLmZsdWZmLCAnZmx1ZmYnKTtcbn0pKGpRdWVyeSk7XG5cbmV4cG9ydCB7fTtcbiIsICIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4vLyBAdHMtbm9jaGVja1xuXG4vKiEgVHdpbmtsZS5qcyAtIHR3aW5rbGViYXRjaGRlbGV0ZS5qcyAqL1xuKGZ1bmN0aW9uIHR3aW5rbGViYXRjaGRlbGV0ZSgkKSB7XG5cdGNvbnN0ICRib2R5ID0gJCgnYm9keScpO1xuXHQvKipcblx0ICogdHdpbmtsZWJhdGNoZGVsZXRlLmpzOiBCYXRjaCBkZWxldGUgbW9kdWxlIChzeXNvcHMgb25seSlcblx0ICogTW9kZSBvZiBpbnZvY2F0aW9uOiBUYWIgKFwiRC1iYXRjaFwiKVxuXHQgKiBBY3RpdmUgb246IEV4aXN0aW5nIG5vbi1hcnRpY2xlcywgYW5kIFNwZWNpYWw6UHJlZml4SW5kZXhcblx0ICovXG5cdFR3aW5rbGUuYmF0Y2hkZWxldGUgPSAoKSA9PiB7XG5cdFx0aWYgKFxuXHRcdFx0TW9yZWJpdHMudXNlcklzU3lzb3AgJiZcblx0XHRcdCgobXcuY29uZmlnLmdldCgnd2dDdXJSZXZpc2lvbklkJykgJiYgbXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSA+IDApIHx8XG5cdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnQ2Fub25pY2FsU3BlY2lhbFBhZ2VOYW1lJykgPT09ICdQcmVmaXhpbmRleCcgfHxcblx0XHRcdFx0bXcuY29uZmlnLmdldCgnd2dDYW5vbmljYWxTcGVjaWFsUGFnZU5hbWUnKSA9PT0gJ0Jyb2tlblJlZGlyZWN0cycpXG5cdFx0KSB7XG5cdFx0XHRUd2lua2xlLmFkZFBvcnRsZXRMaW5rKFxuXHRcdFx0XHRUd2lua2xlLmJhdGNoZGVsZXRlLmNhbGxiYWNrLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+aJueWIoCcsICfmibnliKonKSxcblx0XHRcdFx0J3R3LWJhdGNoJyxcblx0XHRcdFx0d2luZG93LndnVUxTKCfliKDpmaTmraTliIbnsbvmiJbpobXpnaLkuK3nmoTmiYDmnInpk77mjqUnLCAn5Yiq6Zmk5q2k5YiG6aGe5oiW6aCB6Z2i5Lit55qE5omA5pyJ6YCj57WQJylcblx0XHRcdCk7XG5cdFx0fVxuXHR9O1xuXHRUd2lua2xlLmJhdGNoZGVsZXRlLnVubGlua0NhY2hlID0ge307XG5cdC8vIEhhcyB0aGUgc3VicGFnZXMgbGlzdCBiZWVuIGxvYWRlZD9cblx0bGV0IHN1YnBhZ2VzTG9hZGVkO1xuXHRUd2lua2xlLmJhdGNoZGVsZXRlLmNhbGxiYWNrID0gKCkgPT4ge1xuXHRcdHN1YnBhZ2VzTG9hZGVkID0gZmFsc2U7XG5cdFx0Y29uc3QgV2luZG93ID0gbmV3IE1vcmViaXRzLnNpbXBsZVdpbmRvdyg2MDAsIDQwMCk7XG5cdFx0V2luZG93LnNldFRpdGxlKHdpbmRvdy53Z1VMUygn5om56YeP5Yig6ZmkJywgJ+aJueasoeWIqumZpCcpKTtcblx0XHRXaW5kb3cuc2V0U2NyaXB0TmFtZSgnVHdpbmtsZScpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygnVHdpbmtsZeW4ruWKqScsICdUd2lua2xl6Kqq5piOJyksICdIOlRXL0RPQyNiYXRjaGRlbGV0ZScpO1xuXHRcdGNvbnN0IGZvcm0gPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtKFR3aW5rbGUuYmF0Y2hkZWxldGUuY2FsbGJhY2suZXZhbHVhdGUpO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRsaXN0OiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliKDpmaTpobXpnaInLCAn5Yiq6Zmk6aCB6Z2iJyksXG5cdFx0XHRcdFx0bmFtZTogJ2RlbGV0ZV9wYWdlJyxcblx0XHRcdFx0XHR2YWx1ZTogJ2RlbGV0ZScsXG5cdFx0XHRcdFx0Y2hlY2tlZDogdHJ1ZSxcblx0XHRcdFx0XHRzdWJncm91cDoge1xuXHRcdFx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0XHQn5Yig6Zmk5YWz6IGU55qE6K6o6K666aG177yI55So5oi36K6o6K666aG16Zmk5aSW77yJJyxcblx0XHRcdFx0XHRcdFx0XHRcdCfliKrpmaTpl5zoga/nmoToqI7oq5bpoIHvvIjkvb/nlKjogIXoqI7oq5bpoIHpmaTlpJbvvIknXG5cdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRuYW1lOiAnZGVsZXRlX3RhbGsnLFxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiAnZGVsZXRlX3RhbGsnLFxuXHRcdFx0XHRcdFx0XHRcdGNoZWNrZWQ6IHRydWUsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliKDpmaTliLDlt7LliKDpobXpnaLnmoTph43lrprlkJHpobUnLCAn5Yiq6Zmk5Yiw5bey5Yiq6aCB6Z2i55qE6YeN5paw5bCO5ZCR6aCB6Z2iJyksXG5cdFx0XHRcdFx0XHRcdFx0bmFtZTogJ2RlbGV0ZV9yZWRpcmVjdHMnLFxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiAnZGVsZXRlX3JlZGlyZWN0cycsXG5cdFx0XHRcdFx0XHRcdFx0Y2hlY2tlZDogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WIoOmZpOW3suWIoOmhtemdoueahOWtkOmhtemdoicsICfliKrpmaTlt7LliKrpoIHpnaLnmoTlrZDpoIHpnaInKSxcblx0XHRcdFx0XHRcdFx0XHRuYW1lOiAnZGVsZXRlX3N1YnBhZ2VzJyxcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogJ2RlbGV0ZV9zdWJwYWdlcycsXG5cdFx0XHRcdFx0XHRcdFx0Y2hlY2tlZDogZmFsc2UsXG5cdFx0XHRcdFx0XHRcdFx0ZXZlbnQ6IFR3aW5rbGUuYmF0Y2hkZWxldGUuY2FsbGJhY2sudG9nZ2xlU3VicGFnZXMsXG5cdFx0XHRcdFx0XHRcdFx0c3ViZ3JvdXA6IHtcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0OiBbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliKDpmaTlt7LliKDlrZDpobXpnaLnmoTorqjorrrpobUnLCAn5Yiq6Zmk5bey5Yiq5a2Q6aCB6Z2i55qE6KiO6KuW6aCBJyksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bmFtZTogJ2RlbGV0ZV9zdWJwYWdlX3RhbGtzJyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogJ2RlbGV0ZV9zdWJwYWdlX3RhbGtzJyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQn5Yig6Zmk5Yiw5bey5Yig5a2Q6aG16Z2i55qE6YeN5a6a5ZCR6aG1Jyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCfliKrpmaTliLDlt7LliKrlrZDpoIHpnaLnmoTph43mlrDlsI7lkJHpoIHpnaInXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRuYW1lOiAnZGVsZXRlX3N1YnBhZ2VfcmVkaXJlY3RzJyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogJ2RlbGV0ZV9zdWJwYWdlX3JlZGlyZWN0cycsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0J+WPlua2iOaJgOacieW3suWIoOmhtemdoueahOmTvuWFpe+8iOS7heWkhOeQhuadoeebruWRveWQjeepuumXtO+8iScsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQn5Y+W5raI5omA5pyJ5bey5Yiq6aCB6Z2i55qE6YCj5YWl77yI5YOF6JmV55CG5qKd55uu5ZG95ZCN56m66ZaT77yJJ1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bmFtZTogJ3VubGlua19zdWJwYWdlcycsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsdWU6ICd1bmxpbmtfc3VicGFnZXMnLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Y+W5raI6ZO+5YWl77yI5LuF5aSE55CG5p2h55uu5ZG95ZCN56m66Ze077yJJywgJ+WPlua2iOmAo+WFpe+8iOWDheiZleeQhuaineebruWRveWQjeepuumWk++8iScpLFxuXHRcdFx0XHRcdG5hbWU6ICd1bmxpbmtfcGFnZScsXG5cdFx0XHRcdFx0dmFsdWU6ICd1bmxpbmsnLFxuXHRcdFx0XHRcdGNoZWNrZWQ6IGZhbHNlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn56e76Zmk5paH5Lu25L2/55So77yI5omA5pyJ5ZG95ZCN56m66Ze077yJJywgJ+enu+mZpOaqlOahiOS9v+eUqO+8iOaJgOacieWRveWQjeepuumWk++8iScpLFxuXHRcdFx0XHRcdG5hbWU6ICd1bmxpbmtfZmlsZScsXG5cdFx0XHRcdFx0dmFsdWU6ICd1bmxpbmtfZmlsZScsXG5cdFx0XHRcdFx0Y2hlY2tlZDogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHRuYW1lOiAnY29tbW9uX3JlYXNvbicsXG5cdFx0XHRsYWJlbDogJ+W4uOeUqOeQhueUse+8micsXG5cdFx0XHRzdHlsZTogJ3dpZHRoOiA4NSU7Jyxcblx0XHRcdGxpc3Q6IFR3aW5rbGUuYmF0Y2hkZWxldGUuZGVsZXRlcmVhc29ubGlzdCxcblx0XHRcdGV2ZW50OiBUd2lua2xlLmJhdGNoZGVsZXRlLmNhbGxiYWNrLmNoYW5nZV9jb21tb25fcmVhc29uLFxuXHRcdH0pO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdG5hbWU6ICdyZWFzb24nLFxuXHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdGxhYmVsOiAn55CG55Sx77yaJyxcblx0XHRcdHNpemU6IDc1LFxuXHRcdH0pO1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0YWN0aW9uOiAncXVlcnknLFxuXHRcdFx0cHJvcDogJ3JldmlzaW9uc3xpbmZvfGltYWdlaW5mbycsXG5cdFx0XHRpbnByb3A6ICdwcm90ZWN0aW9uJyxcblx0XHRcdHJ2cHJvcDogJ3NpemV8dXNlcicsXG5cdFx0fTtcblx0XHQvLyBPbiBjYXRlZ29yaWVzXG5cdFx0aWYgKG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPT09IDE0KSB7XG5cdFx0XHRxdWVyeS5nZW5lcmF0b3IgPSAnY2F0ZWdvcnltZW1iZXJzJztcblx0XHRcdHF1ZXJ5LmdjbXRpdGxlID0gbXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpO1xuXHRcdFx0cXVlcnkuZ2NtbGltaXQgPSBUd2lua2xlLmdldFByZWYoJ2JhdGNoTWF4Jyk7XG5cdFx0XHQvLyBPbiBTcGVjaWFsOlByZWZpeEluZGV4XG5cdFx0fSBlbHNlIGlmIChtdy5jb25maWcuZ2V0KCd3Z0Nhbm9uaWNhbFNwZWNpYWxQYWdlTmFtZScpID09PSAnUHJlZml4aW5kZXgnKSB7XG5cdFx0XHRxdWVyeS5nZW5lcmF0b3IgPSAnYWxscGFnZXMnO1xuXHRcdFx0cXVlcnkuZ2FwbGltaXQgPSBUd2lua2xlLmdldFByZWYoJ2JhdGNoTWF4Jyk7XG5cdFx0XHRpZiAobXcudXRpbC5nZXRQYXJhbVZhbHVlKCdwcmVmaXgnKSkge1xuXHRcdFx0XHRxdWVyeS5nYXBuYW1lc3BhY2UgPSBtdy51dGlsLmdldFBhcmFtVmFsdWUoJ25hbWVzcGFjZScpO1xuXHRcdFx0XHRxdWVyeS5nYXBwcmVmaXggPSBtdy51dGlsLmdldFBhcmFtVmFsdWUoJ3ByZWZpeCcpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bGV0IHBhdGhTcGxpdCA9IGRlY29kZVVSSUNvbXBvbmVudChsb2NhdGlvbi5wYXRobmFtZSkuc3BsaXQoJy8nKTtcblx0XHRcdFx0aWYgKHBhdGhTcGxpdC5sZW5ndGggPCAzIHx8IHBhdGhTcGxpdFsyXSAhPT0gJ1NwZWNpYWw65YmN57yA57Si5byVJykge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCB0aXRsZVNwbGl0ID0gcGF0aFNwbGl0WzNdLnNwbGl0KCc6Jyk7XG5cdFx0XHRcdHF1ZXJ5LmdhcG5hbWVzcGFjZSA9IG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlSWRzJylbdGl0bGVTcGxpdFswXS50b0xvd2VyQ2FzZSgpXTtcblx0XHRcdFx0aWYgKHRpdGxlU3BsaXQubGVuZ3RoIDwgMiB8fCBxdWVyeS5nYXBuYW1lc3BhY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHF1ZXJ5LmdhcG5hbWVzcGFjZSA9IDA7IC8vIGFydGljbGUgbmFtZXNwYWNlXG5cdFx0XHRcdFx0cXVlcnkuZ2FwcHJlZml4ID0gcGF0aFNwbGl0LnNwbGljZSgzKS5qb2luKCcvJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cGF0aFNwbGl0ID0gcGF0aFNwbGl0LnNwbGljZSg0KTtcblx0XHRcdFx0XHRwYXRoU3BsaXQuc3BsaWNlKDAsIDAsIHRpdGxlU3BsaXQuc3BsaWNlKDEpLmpvaW4oJzonKSk7XG5cdFx0XHRcdFx0cXVlcnkuZ2FwcHJlZml4ID0gcGF0aFNwbGl0LmpvaW4oJy8nKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gT24gU3BlY2lhbDpCcm9rZW5SZWRpcmVjdHNcblx0XHR9IGVsc2UgaWYgKG13LmNvbmZpZy5nZXQoJ3dnQ2Fub25pY2FsU3BlY2lhbFBhZ2VOYW1lJykgPT09ICdCcm9rZW5SZWRpcmVjdHMnKSB7XG5cdFx0XHRxdWVyeS5nZW5lcmF0b3IgPSAncXVlcnlwYWdlJztcblx0XHRcdHF1ZXJ5LmdxcHBhZ2UgPSAnQnJva2VuUmVkaXJlY3RzJztcblx0XHRcdHF1ZXJ5LmdxcGxpbWl0ID0gVHdpbmtsZS5nZXRQcmVmKCdiYXRjaE1heCcpO1xuXHRcdFx0Ly8gT24gbm9ybWFsIHBhZ2VzXG5cdFx0fSBlbHNlIHtcblx0XHRcdHF1ZXJ5LmdlbmVyYXRvciA9ICdsaW5rcyc7XG5cdFx0XHRxdWVyeS50aXRsZXMgPSBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyk7XG5cdFx0XHRxdWVyeS5ncGxsaW1pdCA9IFR3aW5rbGUuZ2V0UHJlZignYmF0Y2hNYXgnKTtcblx0XHR9XG5cdFx0Y29uc3Qgc3RhdHVzZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0c3RhdHVzZGl2LnN0eWxlLnBhZGRpbmcgPSAnMTVweCc7IC8vIGp1c3Qgc28gaXQgZG9lc24ndCBsb29rIGJyb2tlblxuXHRcdFdpbmRvdy5zZXRDb250ZW50KHN0YXR1c2Rpdik7XG5cdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoc3RhdHVzZGl2KTtcblx0XHRXaW5kb3cuZGlzcGxheSgpO1xuXHRcdFR3aW5rbGUuYmF0Y2hkZWxldGUucGFnZXMgPSB7fTtcblx0XHRjb25zdCBzdGF0ZWxlbSA9IG5ldyBNb3JlYml0cy5zdGF0dXMod2luZG93LndnVUxTKCfmipPlj5bpobXpnaLliJfooagnLCAn5oqT5Y+W6aCB6Z2i5YiX6KGoJykpO1xuXHRcdGNvbnN0IHlzYXJjaGl2ZXNfYXBpID0gbmV3IE1vcmViaXRzLndpa2kuYXBpKFxuXHRcdFx0d2luZG93LndnVUxTKCfliqDovb3kuK3igKYnLCAn6LyJ5YWl5Lit4oCmJyksXG5cdFx0XHRxdWVyeSxcblx0XHRcdChhcGlvYmopID0+IHtcblx0XHRcdFx0Y29uc3QgeG1sID0gYXBpb2JqLnJlc3BvbnNlWE1MO1xuXHRcdFx0XHRjb25zdCAkcGFnZXMgPSAkKHhtbCkuZmluZCgncGFnZScpLmZpbHRlcignOm5vdChbbWlzc2luZ10pJyk7IC8vIDpub3QoW2ltYWdlcmVwb3NpdG9yeT1cInNoYXJlZFwiXSlcblx0XHRcdFx0JHBhZ2VzLmVhY2goKF9pbmRleCwgcGFnZSkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0ICRwYWdlID0gJChwYWdlKTtcblx0XHRcdFx0XHRjb25zdCBucyA9ICRwYWdlLmF0dHIoJ25zJyk7XG5cdFx0XHRcdFx0Y29uc3QgdGl0bGUgPSAkcGFnZS5hdHRyKCd0aXRsZScpO1xuXHRcdFx0XHRcdGNvbnN0IGlzUmVkaXIgPSAkcGFnZS5hdHRyKCdyZWRpcmVjdCcpID09PSAnJztcblx0XHRcdFx0XHRjb25zdCAkZWRpdHByb3QgPSAkcGFnZS5maW5kKCdwclt0eXBlPVwiZWRpdFwiXVtsZXZlbD1cInN5c29wXCJdJyk7XG5cdFx0XHRcdFx0Y29uc3QgaXNQcm90ZWN0ZWQgPSAkZWRpdHByb3QubGVuZ3RoID4gMDtcblx0XHRcdFx0XHRjb25zdCBzaXplID0gJHBhZ2UuZmluZCgncmV2JykuYXR0cignc2l6ZScpO1xuXHRcdFx0XHRcdGNvbnN0IG1ldGFkYXRhID0gW107XG5cdFx0XHRcdFx0aWYgKGlzUmVkaXIpIHtcblx0XHRcdFx0XHRcdG1ldGFkYXRhW21ldGFkYXRhLmxlbmd0aF0gPSB3aW5kb3cud2dVTFMoJ+mHjeWumuWQkScsICfph43mlrDlsI7lkJEnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGlzUHJvdGVjdGVkKSB7XG5cdFx0XHRcdFx0XHRtZXRhZGF0YVttZXRhZGF0YS5sZW5ndGhdID1cblx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCflhajkv53miqTvvIwnLCAn5YWo5L+d6K2377yMJykgK1xuXHRcdFx0XHRcdFx0XHQoJGVkaXRwcm90LmF0dHIoJ2V4cGlyeScpID09PSAnaW5maW5pdHknXG5cdFx0XHRcdFx0XHRcdFx0PyB3aW5kb3cud2dVTFMoJ+aXoOmZkOacnycsICfnhKHpmZDmnJ8nKVxuXHRcdFx0XHRcdFx0XHRcdDogYCR7bmV3IE1vcmViaXRzLmRhdGUoJGVkaXRwcm90LmF0dHIoJ2V4cGlyeScpKS5jYWxlbmRhcigndXRjJyl9IChVVEMpYCkgK1xuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+i/h+acnycsICfpgY7mnJ8nKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKG5zID09PSAnNicpIHtcblx0XHRcdFx0XHRcdC8vIG1pbWljIHdoYXQgZGVsaW1hZ2VzIHVzZWQgdG8gc2hvdyBmb3IgZmlsZXNcblx0XHRcdFx0XHRcdG1ldGFkYXRhW21ldGFkYXRhLmxlbmd0aF0gPVxuXHRcdFx0XHRcdFx0XHQod2luZG93LndnVUxTKCfkuIrkvKDogIXvvJonLCAn5LiK5YKz6ICF77yaJykgKyAkcGFnZS5maW5kKCdpaScpLmF0dHIoJ3VzZXInKSxcblx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfmnIDlkI7nvJbovpHvvJonLCAn5pyA5b6M57eo6Lyv77yaJykgKyAkcGFnZS5maW5kKCdyZXYnKS5hdHRyKCd1c2VyJykpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRtZXRhZGF0YVttZXRhZGF0YS5sZW5ndGhdID0gbXcubGFuZ3VhZ2UuY29udmVydE51bWJlcihzaXplKSArIHdpbmRvdy53Z1VMUygn5a2X6IqCJywgJ+S9jeWFg+e1hCcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRUd2lua2xlLmJhdGNoZGVsZXRlLnBhZ2VzW3RpdGxlXSA9IHtcblx0XHRcdFx0XHRcdGxhYmVsOiB0aXRsZSArIChtZXRhZGF0YS5sZW5ndGggPyBg77yIJHttZXRhZGF0YS5qb2luKCfvvIwnKX3vvIlgIDogJycpLFxuXHRcdFx0XHRcdFx0dmFsdWU6IHRpdGxlLFxuXHRcdFx0XHRcdFx0Y2hlY2tlZDogdHJ1ZSxcblx0XHRcdFx0XHRcdHN0eWxlOiBpc1Byb3RlY3RlZCA/ICdjb2xvcjogI2YwMCcgOiAnJyxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0Y29uc3QgZm9ybV8gPSBhcGlvYmoucGFyYW1zLmZvcm07XG5cdFx0XHRcdGZvcm1fLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2hlYWRlcicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5b6F5Yig6Zmk6aG16Z2iJywgJ+W+heWIqumZpOmggemdoicpLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0Zm9ybV8uYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnYnV0dG9uJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflhajpgIknLCAn5YWo6YG4JyksXG5cdFx0XHRcdFx0ZXZlbnQ6ICgpID0+IHtcblx0XHRcdFx0XHRcdCQocmVzdWx0KVxuXHRcdFx0XHRcdFx0XHQuZmluZCgnaW5wdXRbbmFtZT1wYWdlc106bm90KDpjaGVja2VkKScpXG5cdFx0XHRcdFx0XHRcdC5lYWNoKChfLCBlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0ZS5jbGljaygpOyAvLyBjaGVjayBpdCwgYW5kIGludm9rZSBjbGljayBldmVudCBzbyB0aGF0IHN1Ymdyb3VwIGNhbiBiZSBzaG93blxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdC8vIENoZWNrIGFueSB1bmNoZWNrZWQgc3VicGFnZXMgdG9vXG5cdFx0XHRcdFx0XHQkYm9keS5maW5kKCdpbnB1dFtuYW1lPVwicGFnZXMuc3VicGFnZXNcIl0nKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZvcm1fLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2J1dHRvbicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5YWo5LiN6YCJJywgJ+WFqOS4jemBuCcpLFxuXHRcdFx0XHRcdGV2ZW50OiAoKSA9PiB7XG5cdFx0XHRcdFx0XHQkKHJlc3VsdClcblx0XHRcdFx0XHRcdFx0LmZpbmQoJ2lucHV0W25hbWU9cGFnZXNdOmNoZWNrZWQnKVxuXHRcdFx0XHRcdFx0XHQuZWFjaCgoXywgZSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGUuY2xpY2soKTsgLy8gdW5jaGVjayBpdCwgYW5kIGludm9rZSBjbGljayBldmVudCBzbyB0aGF0IHN1Ymdyb3VwIGNhbiBiZSBoaWRkZW5cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0Zm9ybV8uYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRcdG5hbWU6ICdwYWdlcycsXG5cdFx0XHRcdFx0aWQ6ICd0dy1kYmF0Y2gtcGFnZXMnLFxuXHRcdFx0XHRcdHNoaWZ0Q2xpY2tTdXBwb3J0OiB0cnVlLFxuXHRcdFx0XHRcdGxpc3Q6IE9iamVjdC52YWx1ZXMoVHdpbmtsZS5iYXRjaGRlbGV0ZS5wYWdlcykubWFwKChlKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZTtcblx0XHRcdFx0XHR9KSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZvcm1fLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ3N1Ym1pdCcsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRjb25zdCByZXN1bHQgPSBmb3JtXy5yZW5kZXIoKTtcblx0XHRcdFx0YXBpb2JqLnBhcmFtcy5XaW5kb3cuc2V0Q29udGVudChyZXN1bHQpO1xuXHRcdFx0XHRmb3IgKGNvbnN0IGNoZWNrYm94IG9mIE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhyZXN1bHQsICdwYWdlcycpKSB7XG5cdFx0XHRcdFx0Z2VuZXJhdGVBcnJvd0xpbmtzKGNoZWNrYm94KTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdHN0YXRlbGVtXG5cdFx0KTtcblx0XHR5c2FyY2hpdmVzX2FwaS5wYXJhbXMgPSB7XG5cdFx0XHRmb3JtLFxuXHRcdFx0V2luZG93LFxuXHRcdH07XG5cdFx0eXNhcmNoaXZlc19hcGkucG9zdCgpO1xuXHR9O1xuXHRjb25zdCBnZW5lcmF0ZUFycm93TGlua3MgPSAoY2hlY2tib3gpID0+IHtcblx0XHRjb25zdCBsaW5rID0gTW9yZWJpdHMuaHRtbE5vZGUoJ2EnLCAnID4nKTtcblx0XHRsaW5rLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAndHctZGJhdGNoLXBhZ2UtbGluaycpO1xuXHRcdGxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgbXcudXRpbC5nZXRVcmwoY2hlY2tib3gudmFsdWUpKTtcblx0XHRsaW5rLnNldEF0dHJpYnV0ZSgndGFyZ2V0JywgJ19ibGFuaycpO1xuXHRcdGxpbmsuc2V0QXR0cmlidXRlKCdyZWwnLCAnbm9vcGVuZXIgbm9yZWZlcnJlcicpO1xuXHRcdGNoZWNrYm94Lm5leHRFbGVtZW50U2libGluZy5hcHBlbmQobGluayk7XG5cdH07XG5cdFR3aW5rbGUuYmF0Y2hkZWxldGUuZ2VuZXJhdGVOZXdQYWdlTGlzdCA9IChmb3JtKSA9PiB7XG5cdFx0Ly8gVXBkYXRlIHRoZSBsaXN0IG9mIGNoZWNrZWQgcGFnZXMgaW4gVHdpbmtsZS5iYXRjaGRlbGV0ZS5wYWdlcyBvYmplY3Rcblx0XHRjb25zdCBlbGVtZW50cyA9IGZvcm0uZWxlbWVudHMucGFnZXM7XG5cdFx0aWYgKGVsZW1lbnRzIGluc3RhbmNlb2YgTm9kZUxpc3QpIHtcblx0XHRcdC8vIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBwYWdlc1xuXHRcdFx0Zm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XG5cdFx0XHRcdFR3aW5rbGUuYmF0Y2hkZWxldGUucGFnZXNbZWxlbWVudC52YWx1ZV0uY2hlY2tlZCA9IGVsZW1lbnQuY2hlY2tlZDtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGVsZW1lbnRzIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuXHRcdFx0Ly8gaWYgdGhlcmUgaXMganVzdCBvbmUgcGFnZVxuXHRcdFx0VHdpbmtsZS5iYXRjaGRlbGV0ZS5wYWdlc1tlbGVtZW50cy52YWx1ZV0uY2hlY2tlZCA9IGVsZW1lbnRzLmNoZWNrZWQ7XG5cdFx0fVxuXHRcdHJldHVybiBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdG5hbWU6ICdwYWdlcycsXG5cdFx0XHRpZDogJ3R3LWRiYXRjaC1wYWdlcycsXG5cdFx0XHRzaGlmdENsaWNrU3VwcG9ydDogdHJ1ZSxcblx0XHRcdGxpc3Q6IE9iamVjdC52YWx1ZXMoVHdpbmtsZS5iYXRjaGRlbGV0ZS5wYWdlcykubWFwKChlKSA9PiB7XG5cdFx0XHRcdHJldHVybiBlO1xuXHRcdFx0fSksXG5cdFx0fSkucmVuZGVyKCk7XG5cdH07XG5cdFR3aW5rbGUuYmF0Y2hkZWxldGUuZGVsZXRlcmVhc29ubGlzdCA9IFtcblx0XHR7XG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfor7fpgInmi6knLCAn6KuL6YG45pOHJyksXG5cdFx0XHR2YWx1ZTogJycsXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKFxuXHRcdFx0XHQnRzbvvJrljp/kvZzogIXmj5Dor7fliKDpmaTmiJbmuIXnqbrpobXpnaLvvIzkuJTpobXpnaLljp/kvZzogIXku4XmnInkuIDkuronLFxuXHRcdFx0XHQnRzbvvJrljp/kvZzogIXmj5Doq4vliKrpmaTmiJbmuIXnqbrpoIHpnaLvvIzkuJTpoIHpnaLljp/kvZzogIXlg4XmnInkuIDkuronXG5cdFx0XHQpLFxuXHRcdFx0dmFsdWU6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0J1tbTElCOkNTRCNHNnxHNl1d77ya5Y6f5L2c6ICF5o+Q6K+35Yig6Zmk5oiW5riF56m66aG16Z2i77yM5LiU6aG16Z2i5Y6f5L2c6ICF5LuF5pyJ5LiA5Lq6Jyxcblx0XHRcdFx0J1tbTElCOkNTRCNHNnxHNl1d77ya5Y6f5L2c6ICF5o+Q6KuL5Yiq6Zmk5oiW5riF56m66aCB6Z2i77yM5LiU6aCB6Z2i5Y6f5L2c6ICF5YOF5pyJ5LiA5Lq6J1xuXHRcdFx0KSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCdHOe+8muWtpOeri+mhtemdou+8jOavlOWmguayoeacieS4u+mhtemdoueahOiuqOiuuumhteOAgeaMh+WQkeepuumhtemdoueahOmHjeWumuWQkeetiScsXG5cdFx0XHRcdCdHOe+8muWtpOeri+mggemdou+8jOavlOWmguaykuacieS4u+mggemdoueahOiojuirlumggeOAgeaMh+WQkeepuumggemdoueahOmHjeaWsOWwjuWQkeetiSdcblx0XHRcdCksXG5cdFx0XHR2YWx1ZTogd2luZG93LndnVUxTKCdbW0xJQjpDU0QjRzl8RzldXe+8muWtpOeri+mhtemdoicsICdbW0xJQjpDU0QjRzl8RzldXe+8muWtpOeri+mggemdoicpLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygnUjHvvJrkuI3og73lj5HmjKXlrp7pmYXkvZznlKjnmoTph43lrprlkJHjgIInLCAnUjHvvJrkuI3og73nmbzmj67lr6bpmpvkvZznlKjnmoTph43lrprlkJHjgIInKSxcblx0XHRcdHZhbHVlOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCdbW0xJQjpDU0QjUjF8UjFdXe+8muS4jeiDveWPkeaMpeWunumZheS9nOeUqOeahOmHjeWumuWQkeOAgicsXG5cdFx0XHRcdCdbW0xJQjpDU0QjUjF8UjFdXe+8muS4jeiDveeZvOaPruWvpumam+S9nOeUqOeahOmHjeWumuWQkeOAgidcblx0XHRcdCksXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKFxuXHRcdFx0XHQnUjLvvJrlkI3np7DkuI7lr7zlkJHnm67moIfku6PooajkuovniankuI3kuIDoh7TmiJbkuI3lrozlhajkuIDoh7TnmoTph43lrprlkJHjgIInLFxuXHRcdFx0XHQnUjLvvJrlkI3nqLHoiIflsI7lkJHnm67mqJnku6PooajkuovniankuI3kuIDoh7TmiJbkuI3lrozlhajkuIDoh7TnmoTph43lrprlkJHjgIInXG5cdFx0XHQpLFxuXHRcdFx0dmFsdWU6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0J1tbTElCOkNTRCNSMnxSMl1d77ya5ZCN56ew5LiO5a+85ZCR55uu5qCH5Luj6KGo5LqL54mp5LiN5LiA6Ie05oiW5LiN5a6M5YWo5LiA6Ie055qE6YeN5a6a5ZCR44CCJyxcblx0XHRcdFx0J1tbTElCOkNTRCNSMnxSMl1d77ya5ZCN56ix6IiH5bCO5ZCR55uu5qiZ5Luj6KGo5LqL54mp5LiN5LiA6Ie05oiW5LiN5a6M5YWo5LiA6Ie055qE6YeN5a6a5ZCR44CCJ1xuXHRcdFx0KSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ0Y077ya5Y+v6KKr5pu/5Luj55qE5ZCI55CG5L2/55So5paH5Lu2JywgJ0Y077ya5Y+v6KKr5pu/5Luj55qE5ZCI55CG5L2/55So5qqU5qGIJyksXG5cdFx0XHR2YWx1ZTogd2luZG93LndnVUxTKFxuXHRcdFx0XHQnW1tMSUI6Q1NEI0Y0fEY0XV3vvJrlj6/ooqvmm7/ku6PnmoTlkIjnkIbkvb/nlKjmlofku7YnLFxuXHRcdFx0XHQnW1tMSUI6Q1NEI0Y0fEY0XV3vvJrlj6/ooqvmm7/ku6PnmoTlkIjnkIbkvb/nlKjmqpTmoYgnXG5cdFx0XHQpLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0J0Y177ya5rKh5pyJ6KKr5p2h55uu5L2/55So55qE6Z2e6Ieq55Sx6JGX5L2c5p2D5paH5Lu244CB5rKh5pyJ5aGr5YaZ5Lu75L2V5ZCI55CG5L2/55So5L6d5o2u55qE6Z2e6Ieq55Sx6JGX5L2c5p2D5paH5Lu2Jyxcblx0XHRcdFx0J0Y177ya5rKS5pyJ6KKr5qKd55uu5L2/55So55qE6Z2e6Ieq55Sx54mI5qyK5qqU5qGI44CB5rKS5pyJ5aGr5a+r5Lu75L2V5ZCI55CG5L2/55So5L6d5pOa55qE6Z2e6Ieq55Sx54mI5qyK5qqU5qGIJ1xuXHRcdFx0KSxcblx0XHRcdHZhbHVlOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCdbW0xJQjpDU0QjRjV8RjVdXe+8muayoeacieiiq+adoeebruS9v+eUqOeahOmdnuiHqueUseiRl+S9nOadg+aWh+S7tuOAgeayoeacieWhq+WGmeS7u+S9leWQiOeQhuS9v+eUqOS+neaNrueahOmdnuiHqueUseiRl+S9nOadg+aWh+S7ticsXG5cdFx0XHRcdCdbW0xJQjpDU0QjRjV8RjVdXe+8muaykuacieiiq+aineebruS9v+eUqOeahOmdnuiHqueUseeJiOasiuaqlOahiOOAgeaykuacieWhq+Wvq+S7u+S9leWQiOeQhuS9v+eUqOS+neaTmueahOmdnuiHqueUseeJiOasiuaqlOahiCdcblx0XHRcdCksXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKFxuXHRcdFx0XHQnTzHvvJrnlKjmiLfor7fmsYLliKDpmaToh6rlt7HnmoTnlKjmiLfpobXmiJblhbblrZDpobXpnaInLFxuXHRcdFx0XHQnTzHvvJrkvb/nlKjogIXoq4vmsYLliKrpmaToh6rlt7HnmoTkvb/nlKjogIXpoIHpnaLmiJblhbblrZDpoIHpnaInXG5cdFx0XHQpLFxuXHRcdFx0dmFsdWU6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0J1tbTElCOkNTRCNPMXxPMV1d77ya55So5oi36K+35rGC5Yig6Zmk6Ieq5bex55qEW1tIZWxwOueUqOaIt+mhtXznlKjmiLfpobVdXeaIluWFtuWtkOmhtemdouOAgicsXG5cdFx0XHRcdCdbW0xJQjpDU0QjTzF8TzFdXe+8muS9v+eUqOiAheiri+axguWIqumZpOiHquW3seeahFtbSGVscDrnlKjmiLfpobV85L2/55So6ICF6aCB6Z2iXV3miJblhbblrZDpoIHpnaLjgIInXG5cdFx0XHQpLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygnTzLvvJrnqbrnmoTliIbnsbvvvIjmsqHmnInmnaHnm67kuZ/msqHmnInlrZDliIbnsbvvvIknLCAnTzLvvJrnqbrnmoTliIbpoZ7vvIjmspLmnInmop3nm67kuZ/mspLmnInlrZDliIbpoZ7vvIknKSxcblx0XHRcdHZhbHVlOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdCdbW0xJQjpDU0QjTzJ8TzJdXe+8muepuueahOWIhuexu++8iOayoeacieadoeebruS5n+ayoeacieWtkOWIhuexu++8ieOAgicsXG5cdFx0XHRcdCdbW0xJQjpDU0QjTzJ8TzJdXe+8muepuueahOWIhumhnu+8iOaykuacieaineebruS5n+aykuacieWtkOWIhumhnu+8ieOAgidcblx0XHRcdCksXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCdPM++8muW6n+W8g+iNieeovycsICdPM++8muW7ouajhOiNieeovycpLFxuXHRcdFx0dmFsdWU6IHdpbmRvdy53Z1VMUygnW1tMSUI6Q1NEI08zfE8zXV3vvJrlup/lvIPojYnnqL/jgIInLCAnW1tMSUI6Q1NEI08zfE8zXV3vvJrlu6Lmo4TojYnnqL/jgIInKSxcblx0XHR9LFxuXHRdO1xuXHRUd2lua2xlLmJhdGNoZGVsZXRlLmNhbGxiYWNrLmNoYW5nZV9jb21tb25fcmVhc29uID0gKGUpID0+IHtcblx0XHRpZiAoZS50YXJnZXQuZm9ybS5yZWFzb24udmFsdWUgIT09ICcnKSB7XG5cdFx0XHRlLnRhcmdldC5mb3JtLnJlYXNvbi52YWx1ZSA9IE1vcmViaXRzLnN0cmluZy5hcHBlbmRQdW5jdHVhdGlvbihlLnRhcmdldC5mb3JtLnJlYXNvbi52YWx1ZSk7XG5cdFx0fVxuXHRcdGUudGFyZ2V0LmZvcm0ucmVhc29uLnZhbHVlICs9IGUudGFyZ2V0LnZhbHVlO1xuXHRcdGUudGFyZ2V0LnZhbHVlID0gJyc7XG5cdH07XG5cdFR3aW5rbGUuYmF0Y2hkZWxldGUuY2FsbGJhY2sudG9nZ2xlU3VicGFnZXMgPSAoZSkgPT4ge1xuXHRcdGNvbnN0IHtmb3JtfSA9IGUudGFyZ2V0O1xuXHRcdGxldCBuZXdQYWdlTGlzdDtcblx0XHRpZiAoZS50YXJnZXQuY2hlY2tlZCkge1xuXHRcdFx0Zm9ybS5kZWxldGVfc3VicGFnZV9yZWRpcmVjdHMuY2hlY2tlZCA9IGZvcm0uZGVsZXRlX3JlZGlyZWN0cy5jaGVja2VkO1xuXHRcdFx0Zm9ybS5kZWxldGVfc3VicGFnZV90YWxrcy5jaGVja2VkID0gZm9ybS5kZWxldGVfdGFsay5jaGVja2VkO1xuXHRcdFx0Zm9ybS51bmxpbmtfc3VicGFnZXMuY2hlY2tlZCA9IGZvcm0udW5saW5rX3BhZ2UuY2hlY2tlZDtcblx0XHRcdC8vIElmIGxpc3RzIG9mIHN1YnBhZ2VzIHdlcmUgYWxyZWFkeSBsb2FkZWQgb25jZSwgdGhleSBhcmVcblx0XHRcdC8vIGF2YWlsYWJsZSB3aXRob3V0IHVzZSBvZiBhbnkgQVBJIGNhbGxzXG5cdFx0XHRpZiAoc3VicGFnZXNMb2FkZWQpIHtcblx0XHRcdFx0Zm9yIChjb25zdCBlbCBvZiBUd2lua2xlLmJhdGNoZGVsZXRlLnBhZ2VzKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IGJhY2sgdGhlIHN1Ymdyb3VwIGZyb20gc3ViZ3JvdXBfLCB3aGVyZSB3ZSBzYXZlZCBpdFxuXHRcdFx0XHRcdGlmIChlbC5zdWJncm91cCA9PT0gbnVsbCAmJiBlbC5zdWJncm91cF8pIHtcblx0XHRcdFx0XHRcdGVsLnN1Ymdyb3VwID0gZWwuc3ViZ3JvdXBfO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRuZXdQYWdlTGlzdCA9IFR3aW5rbGUuYmF0Y2hkZWxldGUuZ2VuZXJhdGVOZXdQYWdlTGlzdChmb3JtKTtcblx0XHRcdFx0JGJvZHkuZmluZCgnI3R3LWRiYXRjaC1wYWdlcycpLnJlcGxhY2VXaXRoKG5ld1BhZ2VMaXN0KTtcblx0XHRcdFx0Zm9yIChjb25zdCBjaGVja2JveCBvZiBNb3JlYml0cy5xdWlja0Zvcm0uZ2V0RWxlbWVudHMobmV3UGFnZUxpc3QsICdwYWdlcycpKSB7XG5cdFx0XHRcdFx0Z2VuZXJhdGVBcnJvd0xpbmtzKGNoZWNrYm94KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKGNvbnN0IGNoZWNrYm94IG9mIE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhuZXdQYWdlTGlzdCwgJ3BhZ2VzLnN1YnBhZ2VzJykpIHtcblx0XHRcdFx0XHRnZW5lcmF0ZUFycm93TGlua3MoY2hlY2tib3gpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdC8vIFByb2NlZWQgd2l0aCBBUEkgY2FsbHMgdG8gZ2V0IGxpc3Qgb2Ygc3VicGFnZXNcblx0XHRcdGNvbnN0IGxvYWRpbmdUZXh0ID0gYDxzdHJvbmcgaWQ9XCJkYmF0Y2gtc3VicGFnZS1sb2FkaW5nXCI+JHt3aW5kb3cud2dVTFMoJ+WKoOi9veS4rS4uLicsICfovInlhaXkuK0uLi4nKX08L3N0cm9uZz5gO1xuXHRcdFx0JChlLnRhcmdldCkuYWZ0ZXIobG9hZGluZ1RleHQpO1xuXHRcdFx0Y29uc3QgcGFnZXMgPSAkKGZvcm0ucGFnZXMpXG5cdFx0XHRcdC5tYXAoKF9pLCBlbCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBlbC52YWx1ZTtcblx0XHRcdFx0fSlcblx0XHRcdFx0LmdldCgpO1xuXHRcdFx0Y29uc3Qgc3VicGFnZUxpc3RlciA9IG5ldyBNb3JlYml0cy5iYXRjaE9wZXJhdGlvbigpO1xuXHRcdFx0c3VicGFnZUxpc3Rlci5zZXRPcHRpb24oJ2NodW5rU2l6ZScsIFR3aW5rbGUuZ2V0UHJlZignYmF0Y2hDaHVua3MnKSk7XG5cdFx0XHRzdWJwYWdlTGlzdGVyLnNldFBhZ2VMaXN0KHBhZ2VzKTtcblx0XHRcdHN1YnBhZ2VMaXN0ZXIucnVuKFxuXHRcdFx0XHQocGFnZU5hbWUpID0+IHtcblx0XHRcdFx0XHRjb25zdCBwYWdlVGl0bGUgPSBtdy5UaXRsZS5uZXdGcm9tVGV4dChwYWdlTmFtZSk7XG5cdFx0XHRcdFx0Ly8gTm8gbmVlZCB0byBsb29rIGZvciBzdWJwYWdlcyBpbiBtYWluL2ZpbGUvbWVkaWF3aWtpIHNwYWNlXG5cdFx0XHRcdFx0aWYgKFswLCA2LCA4XS5pbmNsdWRlcyhwYWdlVGl0bGUubmFtZXNwYWNlKSkge1xuXHRcdFx0XHRcdFx0c3VicGFnZUxpc3Rlci53b3JrZXJTdWNjZXNzKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvbnN0IHlzYXJjaGl2ZXNfYXBpID0gbmV3IE1vcmViaXRzLndpa2kuYXBpKFxuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfmraPlnKjojrflj5YgJywgJ+ato+WcqOWPluW+lyAnKSArIHBhZ2VOYW1lICsgd2luZG93LndnVUxTKCcg55qE5a2Q6aG16Z2iJywgJyDnmoTlrZDpoIHpnaInKSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0YWN0aW9uOiAncXVlcnknLFxuXHRcdFx0XHRcdFx0XHRwcm9wOiAncmV2aXNpb25zfGluZm98aW1hZ2VpbmZvJyxcblx0XHRcdFx0XHRcdFx0Z2VuZXJhdG9yOiAnYWxscGFnZXMnLFxuXHRcdFx0XHRcdFx0XHRydnByb3A6ICdzaXplJyxcblx0XHRcdFx0XHRcdFx0aW5wcm9wOiAncHJvdGVjdGlvbicsXG5cdFx0XHRcdFx0XHRcdGdhcHByZWZpeDogYCR7cGFnZVRpdGxlLnRpdGxlfS9gLFxuXHRcdFx0XHRcdFx0XHRnYXBuYW1lc3BhY2U6IHBhZ2VUaXRsZS5uYW1lc3BhY2UsXG5cdFx0XHRcdFx0XHRcdGdhcGxpbWl0OiAnbWF4Jyxcblx0XHRcdFx0XHRcdFx0cGFnZU5hbWVGdWxsOiBwYWdlTmFtZSwgLy8gTm90IHVzZWQgYnkgQVBJLCBidXQgYWRkZWQgZm9yIGFjY2VzcyBpbiBvblN1Y2Nlc3MoKVxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdChhcGlvYmopID0+IHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgeG1sID0gYXBpb2JqLnJlc3BvbnNlWE1MO1xuXHRcdFx0XHRcdFx0XHRjb25zdCAkcGFnZXMgPSAkKHhtbCkuZmluZCgncGFnZScpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBzdWJwYWdlTGlzdCA9IFtdO1xuXHRcdFx0XHRcdFx0XHQkcGFnZXMuZWFjaCgoX2luZGV4LCBwYWdlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgJHBhZ2UgPSAkKHBhZ2UpO1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IG5zID0gJHBhZ2UuYXR0cignbnMnKTtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCB0aXRsZSA9ICRwYWdlLmF0dHIoJ3RpdGxlJyk7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgaXNSZWRpciA9ICRwYWdlLmF0dHIoJ3JlZGlyZWN0JykgPT09ICcnO1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0ICRlZGl0cHJvdCA9ICRwYWdlLmZpbmQoJ3ByW3R5cGU9XCJlZGl0XCJdW2xldmVsPVwic3lzb3BcIl0nKTtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBpc1Byb3RlY3RlZCA9ICRlZGl0cHJvdC5sZW5ndGggPiAwO1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IHNpemUgPSAkcGFnZS5maW5kKCdyZXYnKS5hdHRyKCdzaXplJyk7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgbWV0YWRhdGEgPSBbXTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoaXNSZWRpcikge1xuXHRcdFx0XHRcdFx0XHRcdFx0bWV0YWRhdGFbbWV0YWRhdGEubGVuZ3RoXSA9ICdyZWRpcmVjdCc7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmIChpc1Byb3RlY3RlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bWV0YWRhdGFbbWV0YWRhdGEubGVuZ3RoXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5YWo5L+d5oqk77yMJywgJ+WFqOS/neitt++8jCcpICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCRlZGl0cHJvdC5hdHRyKCdleHBpcnknKSA9PT0gJ2luZmluaXR5J1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdD8gd2luZG93LndnVUxTKCfml6DpmZDmnJ8nLCAn54Sh6ZmQ5pyfJylcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ6IGAke25ldyBNb3JlYml0cy5kYXRlKCRlZGl0cHJvdC5hdHRyKCdleHBpcnknKSkuY2FsZW5kYXIoJ3V0YycpfSAoVVRDKWApICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfov4fmnJ8nLCAn6YGO5pyfJyk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmIChucyA9PT0gJzYnKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBtaW1pYyB3aGF0IGRlbGltYWdlcyB1c2VkIHRvIHNob3cgZm9yIGZpbGVzXG5cdFx0XHRcdFx0XHRcdFx0XHRtZXRhZGF0YVttZXRhZGF0YS5sZW5ndGhdID1cblx0XHRcdFx0XHRcdFx0XHRcdFx0KHdpbmRvdy53Z1VMUygn5LiK5Lyg6ICF77yaJywgJ+S4iuWCs+iAhe+8micpICsgJHBhZ2UuZmluZCgnaWknKS5hdHRyKCd1c2VyJyksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5pyA5ZCO57yW6L6R77yaJywgJ+acgOW+jOe3qOi8r++8micpICsgJHBhZ2UuZmluZCgncmV2JykuYXR0cigndXNlcicpKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bWV0YWRhdGFbbWV0YWRhdGEubGVuZ3RoXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG13Lmxhbmd1YWdlLmNvbnZlcnROdW1iZXIoc2l6ZSkgKyB3aW5kb3cud2dVTFMoJ+Wtl+iKgicsICfkvY3lhYPntYQnKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0c3VicGFnZUxpc3Rbc3VicGFnZUxpc3QubGVuZ3RoXSA9IHtcblx0XHRcdFx0XHRcdFx0XHRcdGxhYmVsOiB0aXRsZSArIChtZXRhZGF0YS5sZW5ndGggPyBgICgke21ldGFkYXRhLmpvaW4oJzsgJyl9KWAgOiAnJyksXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogdGl0bGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRjaGVja2VkOiB0cnVlLFxuXHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU6IGlzUHJvdGVjdGVkID8gJ2NvbG9yOiAjZjAwJyA6ICcnLFxuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRpZiAoc3VicGFnZUxpc3QubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgcGFnZU5hbWVfID0gYXBpb2JqLnF1ZXJ5LnBhZ2VOYW1lRnVsbDtcblx0XHRcdFx0XHRcdFx0XHRUd2lua2xlLmJhdGNoZGVsZXRlLnBhZ2VzW3BhZ2VOYW1lX10uc3ViZ3JvdXAgPSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0XHRcdFx0XHRcdFx0bmFtZTogJ3N1YnBhZ2VzJyxcblx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzTmFtZTogJ2RiYXRjaC1zdWJwYWdlcycsXG5cdFx0XHRcdFx0XHRcdFx0XHRzaGlmdENsaWNrU3VwcG9ydDogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3Q6IHN1YnBhZ2VMaXN0LFxuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0c3VicGFnZUxpc3Rlci53b3JrZXJTdWNjZXNzKCk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0bnVsbCAvKiBzdGF0dXNFbGVtZW50ICovLFxuXHRcdFx0XHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRzdWJwYWdlTGlzdGVyLndvcmtlckZhaWx1cmUoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHlzYXJjaGl2ZXNfYXBpLnBvc3QoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRcdC8vIExpc3QgJ2VtIG9uIHRoZSBpbnRlcmZhY2Vcblx0XHRcdFx0XHRuZXdQYWdlTGlzdCA9IFR3aW5rbGUuYmF0Y2hkZWxldGUuZ2VuZXJhdGVOZXdQYWdlTGlzdChmb3JtKTtcblx0XHRcdFx0XHQkYm9keS5maW5kKCcjdHctZGJhdGNoLXBhZ2VzJykucmVwbGFjZVdpdGgobmV3UGFnZUxpc3QpO1xuXHRcdFx0XHRcdGZvciAoY29uc3QgY2hlY2tib3ggb2YgTW9yZWJpdHMucXVpY2tGb3JtLmdldEVsZW1lbnRzKG5ld1BhZ2VMaXN0LCAncGFnZXMnKSkge1xuXHRcdFx0XHRcdFx0Z2VuZXJhdGVBcnJvd0xpbmtzKGNoZWNrYm94KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Zm9yIChjb25zdCBjaGVja2JveCBvZiBNb3JlYml0cy5xdWlja0Zvcm0uZ2V0RWxlbWVudHMobmV3UGFnZUxpc3QsICdwYWdlcy5zdWJwYWdlcycpKSB7XG5cdFx0XHRcdFx0XHRnZW5lcmF0ZUFycm93TGlua3MoY2hlY2tib3gpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzdWJwYWdlc0xvYWRlZCA9IHRydWU7XG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIFwiTG9hZGluZy4uLiBcIiB0ZXh0XG5cdFx0XHRcdFx0JGJvZHkuZmluZCgnI2RiYXRjaC1zdWJwYWdlLWxvYWRpbmcnKS5yZW1vdmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0KTtcblx0XHR9IGVsc2UgaWYgKCFlLnRhcmdldC5jaGVja2VkKSB7XG5cdFx0XHRmb3IgKGNvbnN0IGVsIG9mIFR3aW5rbGUuYmF0Y2hkZWxldGUucGFnZXMpIHtcblx0XHRcdFx0aWYgKGVsLnN1Ymdyb3VwKSB7XG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIHN1Ymdyb3VwIGFmdGVyIHNhdmluZyBpdHMgY29udGVudHMgaW4gc3ViZ3JvdXBfXG5cdFx0XHRcdFx0Ly8gc28gdGhhdCBpdCBjYW4gYmUgcmV0cmlldmVkIGVhc2lseSBpZiB1c2VyIGRlY2lkZXMgdG9cblx0XHRcdFx0XHQvLyBkZWxldGUgdGhlIHN1YnBhZ2VzIGFnYWluXG5cdFx0XHRcdFx0ZWwuc3ViZ3JvdXBfID0gZWwuc3ViZ3JvdXA7XG5cdFx0XHRcdFx0ZWwuc3ViZ3JvdXAgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRuZXdQYWdlTGlzdCA9IFR3aW5rbGUuYmF0Y2hkZWxldGUuZ2VuZXJhdGVOZXdQYWdlTGlzdChmb3JtKTtcblx0XHRcdCRib2R5LmZpbmQoJyN0dy1kYmF0Y2gtcGFnZXMnKS5yZXBsYWNlV2l0aChuZXdQYWdlTGlzdCk7XG5cdFx0XHRmb3IgKGNvbnN0IGNoZWNrYm94IG9mIE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhuZXdQYWdlTGlzdCwgJ3BhZ2VzJykpIHtcblx0XHRcdFx0Z2VuZXJhdGVBcnJvd0xpbmtzKGNoZWNrYm94KTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdFR3aW5rbGUuYmF0Y2hkZWxldGUuY2FsbGJhY2suZXZhbHVhdGUgPSAoZXZlbnQpID0+IHtcblx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5ub3RpY2UgPSB3aW5kb3cud2dVTFMoJ+aJuemHj+WIoOmZpOW3suWujOaIkCcsICfmibnmrKHliKrpmaTlt7LlrozmiJAnKTtcblx0XHRjb25zdCBmb3JtID0gZXZlbnQudGFyZ2V0O1xuXHRcdGNvbnN0IG51bVByb3RlY3RlZCA9ICQoTW9yZWJpdHMucXVpY2tGb3JtLmdldEVsZW1lbnRzKGZvcm0sICdwYWdlcycpKS5maWx0ZXIoKF9pbmRleCwgZWxlbWVudCkgPT4ge1xuXHRcdFx0cmV0dXJuIGVsZW1lbnQuY2hlY2tlZCAmJiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZy5zdHlsZS5jb2xvciA9PT0gJ3JlZCc7XG5cdFx0fSkubGVuZ3RoO1xuXHRcdGlmIChcblx0XHRcdG51bVByb3RlY3RlZCA+IDAgJiZcblx0XHRcdCFjb25maXJtKFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+aCqOato+imgeWIoOmZpCAnLCAn5oKo5q2j6KaB5Yiq6ZmkICcpICtcblx0XHRcdFx0XHRtdy5sYW5ndWFnZS5jb252ZXJ0TnVtYmVyKG51bVByb3RlY3RlZCkgK1xuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygnIOS4quWFqOS/neaKpOmhtemdou+8jOaCqOehruWumuWQl++8nycsICcg5YCL5YWo5L+d6K236aCB6Z2i77yM5oKo56K65a6a5ZeO77yfJylcblx0XHRcdClcblx0XHQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgcGFnZXMgPSBmb3JtLmdldENoZWNrZWQoJ3BhZ2VzJyk7XG5cdFx0Y29uc3Qgc3VicGFnZXMgPSBmb3JtLmdldENoZWNrZWQoJ3BhZ2VzLnN1YnBhZ2VzJyk7XG5cdFx0Y29uc3QgcmVhc29uID0gZm9ybS5yZWFzb24udmFsdWU7XG5cdFx0Y29uc3QgZGVsZXRlX3BhZ2UgPSBmb3JtLmRlbGV0ZV9wYWdlLmNoZWNrZWQ7XG5cdFx0bGV0IGRlbGV0ZV90YWxrO1xuXHRcdGxldCBkZWxldGVfcmVkaXJlY3RzO1xuXHRcdGxldCBkZWxldGVfc3VicGFnZXM7XG5cdFx0bGV0IGRlbGV0ZV9zdWJwYWdlX3JlZGlyZWN0cztcblx0XHRsZXQgZGVsZXRlX3N1YnBhZ2VfdGFsa3M7XG5cdFx0bGV0IHVubGlua19zdWJwYWdlcztcblx0XHRpZiAoZGVsZXRlX3BhZ2UpIHtcblx0XHRcdGRlbGV0ZV90YWxrID0gZm9ybS5kZWxldGVfdGFsay5jaGVja2VkO1xuXHRcdFx0ZGVsZXRlX3JlZGlyZWN0cyA9IGZvcm0uZGVsZXRlX3JlZGlyZWN0cy5jaGVja2VkO1xuXHRcdFx0ZGVsZXRlX3N1YnBhZ2VzID0gZm9ybS5kZWxldGVfc3VicGFnZXMuY2hlY2tlZDtcblx0XHRcdGlmIChkZWxldGVfc3VicGFnZXMpIHtcblx0XHRcdFx0ZGVsZXRlX3N1YnBhZ2VfcmVkaXJlY3RzID0gZm9ybS5kZWxldGVfc3VicGFnZV9yZWRpcmVjdHMuY2hlY2tlZDtcblx0XHRcdFx0ZGVsZXRlX3N1YnBhZ2VfdGFsa3MgPSBmb3JtLmRlbGV0ZV9zdWJwYWdlX3RhbGtzLmNoZWNrZWQ7XG5cdFx0XHRcdHVubGlua19zdWJwYWdlcyA9IGZvcm0udW5saW5rX3N1YnBhZ2VzLmNoZWNrZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNvbnN0IHVubGlua19wYWdlID0gZm9ybS51bmxpbmtfcGFnZS5jaGVja2VkO1xuXHRcdGNvbnN0IHVubGlua19maWxlID0gZm9ybS51bmxpbmtfZmlsZS5jaGVja2VkO1xuXHRcdGlmICghcmVhc29uKSB7XG5cdFx0XHR2b2lkIG13Lm5vdGlmeSh3aW5kb3cud2dVTFMoJ+aCqOmcgOimgee7meWHuuS4gOS4queQhueUsScsICfmgqjpnIDopoHntablh7rkuIDlgIvnkIbnlLEnKSwge1xuXHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdHRhZzogJ3R3aW5rbGViYXRjaGRlbGV0ZScsXG5cdFx0XHR9KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0TW9yZWJpdHMuc2ltcGxlV2luZG93LnNldEJ1dHRvbnNFbmFibGVkKGZhbHNlKTtcblx0XHRNb3JlYml0cy5zdGF0dXMuaW5pdChmb3JtKTtcblx0XHRpZiAoIXBhZ2VzKSB7XG5cdFx0XHRNb3JlYml0cy5zdGF0dXMuZXJyb3IoXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn6ZSZ6K+vJywgJ+mMr+iqpCcpLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+ayoeacieimgeWIoOmZpOeahOWGheWuue+8jOS4reatoicsICfmspLmnInopoHliKrpmaTnmoTlhaflrrnvvIzkuK3mraInKVxuXHRcdFx0KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgcGFnZURlbGV0ZXIgPSBuZXcgTW9yZWJpdHMuYmF0Y2hPcGVyYXRpb24oXG5cdFx0XHRkZWxldGVfcGFnZVxuXHRcdFx0XHQ/IHdpbmRvdy53Z1VMUygn5q2j5Zyo5Yig6Zmk6aG16Z2iJywgJ+ato+WcqOWIqumZpOmggemdoicpXG5cdFx0XHRcdDogd2luZG93LndnVUxTKCfmraPlnKjlkK/liqjopoHmsYLnmoTku7vliqEnLCAn5q2j5Zyo5ZWf5YuV6KaB5rGC55qE5Lu75YuZJylcblx0XHQpO1xuXHRcdHBhZ2VEZWxldGVyLnNldE9wdGlvbignY2h1bmtTaXplJywgVHdpbmtsZS5nZXRQcmVmKCdiYXRjaENodW5rcycpKTtcblx0XHQvLyB3ZSBvbmx5IG5lZWQgdGhlIGluaXRpYWwgc3RhdHVzIGxpbmVzIGlmIHdlJ3JlIGRlbGV0aW5nIHRoZSBwYWdlcyBpbiB0aGUgcGFnZXMgYXJyYXlcblx0XHRwYWdlRGVsZXRlci5zZXRPcHRpb24oJ3ByZXNlcnZlSW5kaXZpZHVhbFN0YXR1c0xpbmVzJywgZGVsZXRlX3BhZ2UpO1xuXHRcdHBhZ2VEZWxldGVyLnNldFBhZ2VMaXN0KHBhZ2VzKTtcblx0XHRwYWdlRGVsZXRlci5ydW4oXG5cdFx0XHQocGFnZU5hbWUpID0+IHtcblx0XHRcdFx0Y29uc3QgcGFyYW1zID0ge1xuXHRcdFx0XHRcdHBhZ2U6IHBhZ2VOYW1lLFxuXHRcdFx0XHRcdGRlbGV0ZV9wYWdlLFxuXHRcdFx0XHRcdGRlbGV0ZV90YWxrLFxuXHRcdFx0XHRcdGRlbGV0ZV9yZWRpcmVjdHMsXG5cdFx0XHRcdFx0dW5saW5rX3BhZ2UsXG5cdFx0XHRcdFx0dW5saW5rX2ZpbGU6IHVubGlua19maWxlICYmIG5ldyBSZWdFeHAoYF4ke01vcmViaXRzLm5hbWVzcGFjZVJlZ2V4KDYpfTpgLCAnaScpLnRlc3QocGFnZU5hbWUpLFxuXHRcdFx0XHRcdHJlYXNvbixcblx0XHRcdFx0XHRwYWdlRGVsZXRlcixcblx0XHRcdFx0fTtcblx0XHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRwYWdlTmFtZSxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+ato+WcqOWIoOmZpOmhtemdoiAnLCAn5q2j5Zyo5Yiq6Zmk6aCB6Z2iICcpICsgcGFnZU5hbWVcblx0XHRcdFx0KTtcblx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYXJhbXMpO1xuXHRcdFx0XHRpZiAoZGVsZXRlX3BhZ2UpIHtcblx0XHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2Uuc2V0RWRpdFN1bW1hcnkoYCR7cmVhc29ufe+8iOaJuemHj++8iWApO1xuXHRcdFx0XHRcdHlzYXJjaGl2ZXNfcGFnZS5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLnN1cHByZXNzUHJvdGVjdFdhcm5pbmcoKTtcblx0XHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2UuZGVsZXRlUGFnZShUd2lua2xlLmJhdGNoZGVsZXRlLmNhbGxiYWNrcy5kb0V4dHJhcywgcGFnZURlbGV0ZXIud29ya2VyRmFpbHVyZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0VHdpbmtsZS5iYXRjaGRlbGV0ZS5jYWxsYmFja3MuZG9FeHRyYXMoeXNhcmNoaXZlc19wYWdlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdCgpID0+IHtcblx0XHRcdFx0aWYgKGRlbGV0ZV9zdWJwYWdlcykge1xuXHRcdFx0XHRcdGNvbnN0IHN1YnBhZ2VEZWxldGVyID0gbmV3IE1vcmViaXRzLmJhdGNoT3BlcmF0aW9uKFxuXHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfmraPlnKjliKDpmaTlrZDpobXpnaInLCAn5q2j5Zyo5Yiq6Zmk5a2Q6aCB6Z2iJylcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHN1YnBhZ2VEZWxldGVyLnNldE9wdGlvbignY2h1bmtTaXplJywgVHdpbmtsZS5nZXRQcmVmKCdiYXRjaENodW5rcycpKTtcblx0XHRcdFx0XHRzdWJwYWdlRGVsZXRlci5zZXRPcHRpb24oJ3ByZXNlcnZlSW5kaXZpZHVhbFN0YXR1c0xpbmVzJywgdHJ1ZSk7XG5cdFx0XHRcdFx0c3VicGFnZURlbGV0ZXIuc2V0UGFnZUxpc3Qoc3VicGFnZXMpO1xuXHRcdFx0XHRcdHN1YnBhZ2VEZWxldGVyLnJ1bigocGFnZU5hbWUpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IHBhcmFtcyA9IHtcblx0XHRcdFx0XHRcdFx0cGFnZTogcGFnZU5hbWUsXG5cdFx0XHRcdFx0XHRcdGRlbGV0ZV9wYWdlOiB0cnVlLFxuXHRcdFx0XHRcdFx0XHRkZWxldGVfdGFsazogZGVsZXRlX3N1YnBhZ2VfdGFsa3MsXG5cdFx0XHRcdFx0XHRcdGRlbGV0ZV9yZWRpcmVjdHM6IGRlbGV0ZV9zdWJwYWdlX3JlZGlyZWN0cyxcblx0XHRcdFx0XHRcdFx0dW5saW5rX3BhZ2U6IHVubGlua19zdWJwYWdlcyxcblx0XHRcdFx0XHRcdFx0dW5saW5rX2ZpbGU6IGZhbHNlLFxuXHRcdFx0XHRcdFx0XHRyZWFzb24sXG5cdFx0XHRcdFx0XHRcdHBhZ2VEZWxldGVyOiBzdWJwYWdlRGVsZXRlcixcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRjb25zdCB5c2FyY2hpdmVzX3BhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0XHRcdFx0XHRwYWdlTmFtZSxcblx0XHRcdFx0XHRcdFx0d2luZG93LndnVUxTKCfmraPlnKjliKDpmaTlrZDpobXpnaIgJywgJ+ato+WcqOWIqumZpOWtkOmggemdoiAnKSArIHBhZ2VOYW1lXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYXJhbXMpO1xuXHRcdFx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldEVkaXRTdW1tYXJ5KGAke3JlYXNvbn3vvIjmibnph4/vvIlgKTtcblx0XHRcdFx0XHRcdHlzYXJjaGl2ZXNfcGFnZS5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2Uuc3VwcHJlc3NQcm90ZWN0V2FybmluZygpO1xuXHRcdFx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLmRlbGV0ZVBhZ2UoVHdpbmtsZS5iYXRjaGRlbGV0ZS5jYWxsYmFja3MuZG9FeHRyYXMsIHBhZ2VEZWxldGVyLndvcmtlckZhaWx1cmUpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0KTtcblx0fTtcblx0VHdpbmtsZS5iYXRjaGRlbGV0ZS5jYWxsYmFja3MgPSB7XG5cdFx0Ly8gdGhpcyBzdHVwaWQgcGFyYW1ldGVyIG5hbWUgaXMgYSB0ZW1wb3JhcnkgdGhpbmcgdW50aWwgSSBpbXBsZW1lbnQgYW4gb3ZlcmhhdWxcblx0XHQvLyBvZiBNb3JlYml0cy53aWtpLiogY2FsbGJhY2sgcGFyYW1ldGVyc1xuXHRcdGRvRXh0cmFzOiAodGhpbmdXaXRoUGFyYW1ldGVycykgPT4ge1xuXHRcdFx0Y29uc3QgcGFyYW1zID0gdGhpbmdXaXRoUGFyYW1ldGVycy5wYXJlbnRcblx0XHRcdFx0PyB0aGluZ1dpdGhQYXJhbWV0ZXJzLnBhcmVudC5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKVxuXHRcdFx0XHQ6IHRoaW5nV2l0aFBhcmFtZXRlcnMuZ2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKCk7XG5cdFx0XHQvLyB0aGUgaW5pdGlhbCBiYXRjaCBvcGVyYXRpb24ncyBqb2IgaXMgdG8gZGVsZXRlIHRoZSBwYWdlLCBhbmQgdGhhdCBoYXNcblx0XHRcdC8vIHN1Y2NlZWRlZCBieSBub3dcblx0XHRcdHBhcmFtcy5wYWdlRGVsZXRlci53b3JrZXJTdWNjZXNzKHRoaW5nV2l0aFBhcmFtZXRlcnMpO1xuXHRcdFx0bGV0IHF1ZXJ5O1xuXHRcdFx0bGV0IHlzYXJjaGl2ZXNfYXBpO1xuXHRcdFx0aWYgKHBhcmFtcy51bmxpbmtfcGFnZSkge1xuXHRcdFx0XHRUd2lua2xlLmJhdGNoZGVsZXRlLnVubGlua0NhY2hlID0ge307XG5cdFx0XHRcdHF1ZXJ5ID0ge1xuXHRcdFx0XHRcdGFjdGlvbjogJ3F1ZXJ5Jyxcblx0XHRcdFx0XHRsaXN0OiAnYmFja2xpbmtzJyxcblx0XHRcdFx0XHRibGZpbHRlcnJlZGlyOiAnbm9ucmVkaXJlY3RzJyxcblx0XHRcdFx0XHRibG5hbWVzcGFjZTogWzBdLFxuXHRcdFx0XHRcdGJsdGl0bGU6IHBhcmFtcy5wYWdlLFxuXHRcdFx0XHRcdGJsbGltaXQ6ICdtYXgnLCAvLyA1MDAgaXMgbWF4IGZvciBub3JtYWwgdXNlcnMsIDUwMDAgZm9yIGJvdHMgYW5kIHN5c29wc1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHlzYXJjaGl2ZXNfYXBpID0gbmV3IE1vcmViaXRzLndpa2kuYXBpKFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5q2j5Zyo6I635Y+W6ZO+5YWlJywgJ+ato+WcqOWPluW+l+mAo+WFpScpLFxuXHRcdFx0XHRcdHF1ZXJ5LFxuXHRcdFx0XHRcdFR3aW5rbGUuYmF0Y2hkZWxldGUuY2FsbGJhY2tzLnVubGlua0JhY2tsaW5rc01haW5cblx0XHRcdFx0KTtcblx0XHRcdFx0eXNhcmNoaXZlc19hcGkucGFyYW1zID0gcGFyYW1zO1xuXHRcdFx0XHR5c2FyY2hpdmVzX2FwaS5wb3N0KCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocGFyYW1zLnVubGlua19maWxlKSB7XG5cdFx0XHRcdHF1ZXJ5ID0ge1xuXHRcdFx0XHRcdGFjdGlvbjogJ3F1ZXJ5Jyxcblx0XHRcdFx0XHRsaXN0OiAnaW1hZ2V1c2FnZScsXG5cdFx0XHRcdFx0aXV0aXRsZTogcGFyYW1zLnBhZ2UsXG5cdFx0XHRcdFx0aXVsaW1pdDogJ21heCcsIC8vIDUwMCBpcyBtYXggZm9yIG5vcm1hbCB1c2VycywgNTAwMCBmb3IgYm90cyBhbmQgc3lzb3BzXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0eXNhcmNoaXZlc19hcGkgPSBuZXcgTW9yZWJpdHMud2lraS5hcGkoXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCfmraPlnKjojrflj5bmlofku7bpk77lhaUnLCAn5q2j5Zyo5Y+W5b6X5qqU5qGI6YCj5YWlJyksXG5cdFx0XHRcdFx0cXVlcnksXG5cdFx0XHRcdFx0VHdpbmtsZS5iYXRjaGRlbGV0ZS5jYWxsYmFja3MudW5saW5rSW1hZ2VJbnN0YW5jZXNNYWluXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHlzYXJjaGl2ZXNfYXBpLnBhcmFtcyA9IHBhcmFtcztcblx0XHRcdFx0eXNhcmNoaXZlc19hcGkucG9zdCgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHBhcmFtcy5kZWxldGVfcGFnZSkge1xuXHRcdFx0XHRpZiAocGFyYW1zLmRlbGV0ZV9yZWRpcmVjdHMpIHtcblx0XHRcdFx0XHRxdWVyeSA9IHtcblx0XHRcdFx0XHRcdGFjdGlvbjogJ3F1ZXJ5Jyxcblx0XHRcdFx0XHRcdHRpdGxlczogcGFyYW1zLnBhZ2UsXG5cdFx0XHRcdFx0XHRwcm9wOiAncmVkaXJlY3RzJyxcblx0XHRcdFx0XHRcdHJkbGltaXQ6ICdtYXgnLCAvLyA1MDAgaXMgbWF4IGZvciBub3JtYWwgdXNlcnMsIDUwMDAgZm9yIGJvdHMgYW5kIHN5c29wc1xuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHR5c2FyY2hpdmVzX2FwaSA9IG5ldyBNb3JlYml0cy53aWtpLmFwaShcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5q2j5Zyo6I635Y+W6YeN5a6a5ZCRJywgJ+ato+WcqOWPluW+l+mHjeaWsOWwjuWQkScpLFxuXHRcdFx0XHRcdFx0cXVlcnksXG5cdFx0XHRcdFx0XHRUd2lua2xlLmJhdGNoZGVsZXRlLmNhbGxiYWNrcy5kZWxldGVSZWRpcmVjdHNNYWluXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR5c2FyY2hpdmVzX2FwaS5wYXJhbXMgPSBwYXJhbXM7XG5cdFx0XHRcdFx0eXNhcmNoaXZlc19hcGkucG9zdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwYXJhbXMuZGVsZXRlX3RhbGspIHtcblx0XHRcdFx0XHRjb25zdCBwYWdlVGl0bGUgPSBtdy5UaXRsZS5uZXdGcm9tVGV4dChwYXJhbXMucGFnZSk7XG5cdFx0XHRcdFx0aWYgKHBhZ2VUaXRsZSAmJiBwYWdlVGl0bGUubmFtZXNwYWNlICUgMiA9PT0gMCAmJiBwYWdlVGl0bGUubmFtZXNwYWNlICE9PSAyKSB7XG5cdFx0XHRcdFx0XHRwYWdlVGl0bGUubmFtZXNwYWNlKys7IC8vIG5vdyBwYWdlVGl0bGUgaXMgdGhlIHRhbGsgcGFnZSB0aXRsZSFcblx0XHRcdFx0XHRcdHF1ZXJ5ID0ge1xuXHRcdFx0XHRcdFx0XHRhY3Rpb246ICdxdWVyeScsXG5cdFx0XHRcdFx0XHRcdHRpdGxlczogcGFnZVRpdGxlLnRvVGV4dCgpLFxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdHlzYXJjaGl2ZXNfYXBpID0gbmV3IE1vcmViaXRzLndpa2kuYXBpKFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+ato+WcqOajgOafpeiuqOiuuumhtemdouaYr+WQpuWtmOWcqCcsICfmraPlnKjmqqLmn6XoqI7oq5bpoIHpnaLmmK/lkKblrZjlnKgnKSxcblx0XHRcdFx0XHRcdFx0cXVlcnksXG5cdFx0XHRcdFx0XHRcdFR3aW5rbGUuYmF0Y2hkZWxldGUuY2FsbGJhY2tzLmRlbGV0ZVRhbGtcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR5c2FyY2hpdmVzX2FwaS5wYXJhbXMgPSBwYXJhbXM7XG5cdFx0XHRcdFx0XHR5c2FyY2hpdmVzX2FwaS5wYXJhbXMudGFsa1BhZ2UgPSBwYWdlVGl0bGUudG9UZXh0KCk7XG5cdFx0XHRcdFx0XHR5c2FyY2hpdmVzX2FwaS5wb3N0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRkZWxldGVSZWRpcmVjdHNNYWluOiAoYXBpb2JqKSA9PiB7XG5cdFx0XHRjb25zdCB4bWwgPSBhcGlvYmoucmVzcG9uc2VYTUw7XG5cdFx0XHRjb25zdCBwYWdlcyA9ICQoeG1sKVxuXHRcdFx0XHQuZmluZCgncmQnKVxuXHRcdFx0XHQubWFwKChfaW5kZXgsIGVsZW1lbnQpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gJChlbGVtZW50KS5hdHRyKCd0aXRsZScpO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQuZ2V0KCk7XG5cdFx0XHRpZiAoIXBhZ2VzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCByZWRpcmVjdERlbGV0ZXIgPSBuZXcgTW9yZWJpdHMuYmF0Y2hPcGVyYXRpb24oXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn5q2j5Zyo5Yig6Zmk5YiwICcsICfmraPlnKjliKrpmaTliLAgJykgK1xuXHRcdFx0XHRcdGFwaW9iai5wYXJhbXMucGFnZSArXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCcg55qE6YeN5a6a5ZCRJywgJyDnmoTph43mlrDlsI7lkJEnKVxuXHRcdFx0KTtcblx0XHRcdHJlZGlyZWN0RGVsZXRlci5zZXRPcHRpb24oJ2NodW5rU2l6ZScsIFR3aW5rbGUuZ2V0UHJlZignYmF0Y2hDaHVua3MnKSk7XG5cdFx0XHRyZWRpcmVjdERlbGV0ZXIuc2V0UGFnZUxpc3QocGFnZXMpO1xuXHRcdFx0cmVkaXJlY3REZWxldGVyLnJ1bigocGFnZU5hbWUpID0+IHtcblx0XHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRwYWdlTmFtZSxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+ato+WcqOWIoOmZpCAnLCAn5q2j5Zyo5Yiq6ZmkICcpICsgcGFnZU5hbWVcblx0XHRcdFx0KTtcblx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldEVkaXRTdW1tYXJ5KFxuXHRcdFx0XHRcdGBbW0xJQjpDU0QjRzl8RzldXTogJHt3aW5kb3cud2dVTFMoJ+aMh+WQkeW3suWIoOmhtemdouKAnCcsICfmjIflkJHlt7LliKrpoIHpnaLjgIwnKX0ke2FwaW9iai5wYXJhbXMucGFnZX0ke3dpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfigJ3nmoTph43lrprlkJEnLFxuXHRcdFx0XHRcdFx0J+OAjeeahOmHjeaWsOWwjuWQkSdcblx0XHRcdFx0XHQpfWBcblx0XHRcdFx0KTtcblx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLmRlbGV0ZVBhZ2UocmVkaXJlY3REZWxldGVyLndvcmtlclN1Y2Nlc3MsIHJlZGlyZWN0RGVsZXRlci53b3JrZXJGYWlsdXJlKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0ZGVsZXRlVGFsazogKGFwaW9iaikgPT4ge1xuXHRcdFx0Y29uc3QgeG1sID0gYXBpb2JqLnJlc3BvbnNlWE1MO1xuXHRcdFx0Y29uc3QgZXhpc3RzID0gJCh4bWwpLmZpbmQoJ3BhZ2U6bm90KFttaXNzaW5nXSknKS5sZW5ndGggPiAwO1xuXHRcdFx0aWYgKCFleGlzdHMpIHtcblx0XHRcdFx0Ly8gbm8gdGFsayBwYWdlOyBmb3JnZXQgYWJvdXQgaXRcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHRcdGFwaW9iai5wYXJhbXMudGFsa1BhZ2UsXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn5q2j5Zyo5Yig6Zmk6aG16Z2iICcsICfmraPlnKjliKrpmaTpoIHpnaIgJykgK1xuXHRcdFx0XHRcdGFwaW9iai5wYXJhbXMucGFnZSArXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCcg55qE6K6o6K666aG1JywgJyDnmoToqI7oq5bpoIEnKVxuXHRcdFx0KTtcblx0XHRcdHBhZ2Uuc2V0RWRpdFN1bW1hcnkoXG5cdFx0XHRcdGBbW0xJQjpDU0QjRzl8RzldXTogJHt3aW5kb3cud2dVTFMoJ+W3suWIoOmhtemdouKAnCcsICflt7LliKrpoIHpnaLjgIwnKX0ke2FwaW9iai5wYXJhbXMucGFnZX0ke3dpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHQn4oCd55qEW1tIZWxwOuiuqOiuuumhtXzorqjorrrpobVdXScsXG5cdFx0XHRcdFx0J+OAjeeahFtbSGVscDroqI7oq5bpoIF86KiO6KuW6aCBXV0nXG5cdFx0XHRcdCl9YFxuXHRcdFx0KTtcblx0XHRcdHBhZ2Uuc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0cGFnZS5kZWxldGVQYWdlKCk7XG5cdFx0fSxcblx0XHR1bmxpbmtCYWNrbGlua3NNYWluOiAoYXBpb2JqKSA9PiB7XG5cdFx0XHRjb25zdCB4bWwgPSBhcGlvYmoucmVzcG9uc2VYTUw7XG5cdFx0XHRjb25zdCBwYWdlcyA9ICQoeG1sKVxuXHRcdFx0XHQuZmluZCgnYmwnKVxuXHRcdFx0XHQubWFwKChfaW5kZXgsIGVsZW1lbnQpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gJChlbGVtZW50KS5hdHRyKCd0aXRsZScpO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQuZ2V0KCk7XG5cdFx0XHRpZiAoIXBhZ2VzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCB1bmxpbmtlciA9IG5ldyBNb3JlYml0cy5iYXRjaE9wZXJhdGlvbihcblx0XHRcdFx0YOato+WcqOWPlua2iOWIsCAke2FwaW9iai5wYXJhbXMucGFnZX0ke3dpbmRvdy53Z1VMUygnIOeahOmTvuWFpScsICcg55qE6YCj5YWlJyl9YFxuXHRcdFx0KTtcblx0XHRcdHVubGlua2VyLnNldE9wdGlvbignY2h1bmtTaXplJywgVHdpbmtsZS5nZXRQcmVmKCdiYXRjaENodW5rcycpKTtcblx0XHRcdHVubGlua2VyLnNldFBhZ2VMaXN0KHBhZ2VzKTtcblx0XHRcdHVubGlua2VyLnJ1bigocGFnZU5hbWUpID0+IHtcblx0XHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRwYWdlTmFtZSxcblx0XHRcdFx0XHRg5q2j5Zyo5Y+W5raIICR7cGFnZU5hbWV9JHt3aW5kb3cud2dVTFMoJyDkuIrnmoTpk77lhaUnLCAnIOS4iueahOmAo+WFpScpfWBcblx0XHRcdFx0KTtcblx0XHRcdFx0Y29uc3QgcGFyYW1zID0ge1xuXHRcdFx0XHRcdC4uLmFwaW9iai5wYXJhbXMsXG5cdFx0XHRcdH07XG5cdFx0XHRcdHBhcmFtcy50aXRsZSA9IHBhZ2VOYW1lO1xuXHRcdFx0XHRwYXJhbXMudW5saW5rZXIgPSB1bmxpbmtlcjtcblx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYXJhbXMpO1xuXHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2UubG9hZChUd2lua2xlLmJhdGNoZGVsZXRlLmNhbGxiYWNrcy51bmxpbmtCYWNrbGlua3MpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHR1bmxpbmtCYWNrbGlua3M6IChwYWdlb2JqKSA9PiB7XG5cdFx0XHRjb25zdCBwYXJhbXMgPSBwYWdlb2JqLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0aWYgKCFwYWdlb2JqLmV4aXN0cygpKSB7XG5cdFx0XHRcdC8vIHdlIHByb2JhYmx5IGp1c3QgZGVsZXRlZCBpdCwgYXMgYSByZWN1cnNpdmUgYmFja2xpbmtcblx0XHRcdFx0cGFyYW1zLnVubGlua2VyLndvcmtlclN1Y2Nlc3MocGFnZW9iaik7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGxldCB0ZXh0O1xuXHRcdFx0aWYgKHBhcmFtcy50aXRsZSBpbiBUd2lua2xlLmJhdGNoZGVsZXRlLnVubGlua0NhY2hlKSB7XG5cdFx0XHRcdHRleHQgPSBUd2lua2xlLmJhdGNoZGVsZXRlLnVubGlua0NhY2hlW3BhcmFtcy50aXRsZV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0ZXh0ID0gcGFnZW9iai5nZXRQYWdlVGV4dCgpO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3Qgb2xkX3RleHQgPSB0ZXh0O1xuXHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2l0ZXh0LnBhZ2UodGV4dCk7XG5cdFx0XHR0ZXh0ID0geXNhcmNoaXZlc19wYWdlLnJlbW92ZUxpbmsocGFyYW1zLnBhZ2UpLmdldFRleHQoKTtcblx0XHRcdFR3aW5rbGUuYmF0Y2hkZWxldGUudW5saW5rQ2FjaGVbcGFyYW1zLnRpdGxlXSA9IHRleHQ7XG5cdFx0XHRpZiAodGV4dCA9PT0gb2xkX3RleHQpIHtcblx0XHRcdFx0Ly8gTm90aGluZyB0byBkbywgcmV0dXJuXG5cdFx0XHRcdHBhcmFtcy51bmxpbmtlci53b3JrZXJTdWNjZXNzKHBhZ2VvYmopO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRwYWdlb2JqLnNldEVkaXRTdW1tYXJ5KFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WPlua2iOWIsOW3suWIoOmhtemdoicsICflj5bmtojliLDlt7LliKrpoIHpnaInKSArIHBhcmFtcy5wYWdlICsgd2luZG93LndnVUxTKCfnmoTpk77lhaUnLCAn55qE6YCj5YWlJylcblx0XHRcdCk7XG5cdFx0XHRwYWdlb2JqLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdHBhZ2VvYmouc2V0UGFnZVRleHQodGV4dCk7XG5cdFx0XHRwYWdlb2JqLnNldENyZWF0ZU9wdGlvbignbm9jcmVhdGUnKTtcblx0XHRcdHBhZ2VvYmouc2V0TWF4Q29uZmxpY3RSZXRyaWVzKDEwKTtcblx0XHRcdHBhZ2VvYmouc2F2ZShwYXJhbXMudW5saW5rZXIud29ya2VyU3VjY2VzcywgcGFyYW1zLnVubGlua2VyLndvcmtlckZhaWx1cmUpO1xuXHRcdH0sXG5cdFx0dW5saW5rSW1hZ2VJbnN0YW5jZXNNYWluOiAoYXBpb2JqKSA9PiB7XG5cdFx0XHRjb25zdCB4bWwgPSBhcGlvYmoucmVzcG9uc2VYTUw7XG5cdFx0XHRjb25zdCBwYWdlcyA9ICQoeG1sKVxuXHRcdFx0XHQuZmluZCgnaXUnKVxuXHRcdFx0XHQubWFwKChfaW5kZXgsIGVsZW1lbnQpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gJChlbGVtZW50KS5hdHRyKCd0aXRsZScpO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQuZ2V0KCk7XG5cdFx0XHRpZiAoIXBhZ2VzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCB1bmxpbmtlciA9IG5ldyBNb3JlYml0cy5iYXRjaE9wZXJhdGlvbihcblx0XHRcdFx0YOato+WcqOWPlua2iOWIsCAke2FwaW9iai5wYXJhbXMucGFnZX0ke3dpbmRvdy53Z1VMUygnIOeahOmTvuWFpScsICcg55qE6YCj5YWlJyl9YFxuXHRcdFx0KTtcblx0XHRcdHVubGlua2VyLnNldE9wdGlvbignY2h1bmtTaXplJywgVHdpbmtsZS5nZXRQcmVmKCdiYXRjaENodW5rcycpKTtcblx0XHRcdHVubGlua2VyLnNldFBhZ2VMaXN0KHBhZ2VzKTtcblx0XHRcdHVubGlua2VyLnJ1bigocGFnZU5hbWUpID0+IHtcblx0XHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRwYWdlTmFtZSxcblx0XHRcdFx0XHRg5Y+W5raIICR7cGFnZU5hbWV9JHt3aW5kb3cud2dVTFMoJyDnmoTmlofku7bkvb/nlKgnLCAnIOeahOaqlOahiOS9v+eUqCcpfWBcblx0XHRcdFx0KTtcblx0XHRcdFx0Y29uc3QgcGFyYW1zID0ge1xuXHRcdFx0XHRcdC4uLmFwaW9iai5wYXJhbXMsXG5cdFx0XHRcdH07XG5cdFx0XHRcdHBhcmFtcy50aXRsZSA9IHBhZ2VOYW1lO1xuXHRcdFx0XHRwYXJhbXMudW5saW5rZXIgPSB1bmxpbmtlcjtcblx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYXJhbXMpO1xuXHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2UubG9hZChUd2lua2xlLmJhdGNoZGVsZXRlLmNhbGxiYWNrcy51bmxpbmtJbWFnZUluc3RhbmNlcyk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHVubGlua0ltYWdlSW5zdGFuY2VzOiAocGFnZW9iaikgPT4ge1xuXHRcdFx0Y29uc3QgcGFyYW1zID0gcGFnZW9iai5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHRcdGlmICghcGFnZW9iai5leGlzdHMoKSkge1xuXHRcdFx0XHQvLyB3ZSBwcm9iYWJseSBqdXN0IGRlbGV0ZWQgaXQsIGFzIGEgcmVjdXJzaXZlIGJhY2tsaW5rXG5cdFx0XHRcdHBhcmFtcy51bmxpbmtlci53b3JrZXJTdWNjZXNzKHBhZ2VvYmopO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBpbWFnZSA9IHBhcmFtcy5wYWdlLnJlcGxhY2UobmV3IFJlZ0V4cChgXiR7TW9yZWJpdHMubmFtZXNwYWNlUmVnZXgoNil9OmApLCAnJyk7XG5cdFx0XHRsZXQgdGV4dDtcblx0XHRcdGlmIChwYXJhbXMudGl0bGUgaW4gVHdpbmtsZS5iYXRjaGRlbGV0ZS51bmxpbmtDYWNoZSkge1xuXHRcdFx0XHR0ZXh0ID0gVHdpbmtsZS5iYXRjaGRlbGV0ZS51bmxpbmtDYWNoZVtwYXJhbXMudGl0bGVdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGV4dCA9IHBhZ2VvYmouZ2V0UGFnZVRleHQoKTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IG9sZF90ZXh0ID0gdGV4dDtcblx0XHRcdGNvbnN0IHlzYXJjaGl2ZXNfcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpdGV4dC5wYWdlKHRleHQpO1xuXHRcdFx0dGV4dCA9IHlzYXJjaGl2ZXNfcGFnZVxuXHRcdFx0XHQuY29tbWVudE91dEltYWdlKGltYWdlLCB3aW5kb3cud2dVTFMoJ+WboOaWh+S7tuW3suWIoO+8jOaVheazqOinoycsICflm6DmqpTmoYjlt7LliKrvvIzmlYXoqLvop6MnKSlcblx0XHRcdFx0LmdldFRleHQoKTtcblx0XHRcdFR3aW5rbGUuYmF0Y2hkZWxldGUudW5saW5rQ2FjaGVbcGFyYW1zLnRpdGxlXSA9IHRleHQ7XG5cdFx0XHRpZiAodGV4dCA9PT0gb2xkX3RleHQpIHtcblx0XHRcdFx0cGFnZW9ialxuXHRcdFx0XHRcdC5nZXRTdGF0dXNFbGVtZW50KClcblx0XHRcdFx0XHQuZXJyb3IoXG5cdFx0XHRcdFx0XHRg5ZyoICR7cGFnZW9iai5nZXRQYWdlTmFtZSgpfSDkuIrlj5bmtoggJHtpbWFnZX0ke3dpbmRvdy53Z1VMUygnIOeahOaWh+S7tuS9v+eUqOWksei0pScsICcg55qE5qqU5qGI5L2/55So5aSx5pWXJyl9YFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdHBhcmFtcy51bmxpbmtlci53b3JrZXJGYWlsdXJlKHBhZ2VvYmopO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRwYWdlb2JqLnNldEVkaXRTdW1tYXJ5KFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WPlua2iOS9v+eUqOW3suiiq+WIoOmZpOaWh+S7ticsICflj5bmtojkvb/nlKjlt7LooqvliKrpmaTmqpTmoYgnKSArXG5cdFx0XHRcdFx0aW1hZ2UgK1xuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn77yM5Zug5Li677yaJywgJ++8jOWboOeCuu+8micpICtcblx0XHRcdFx0XHRwYXJhbXMucmVhc29uXG5cdFx0XHQpO1xuXHRcdFx0cGFnZW9iai5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRwYWdlb2JqLnNldFBhZ2VUZXh0KHRleHQpO1xuXHRcdFx0cGFnZW9iai5zZXRDcmVhdGVPcHRpb24oJ25vY3JlYXRlJyk7XG5cdFx0XHRwYWdlb2JqLnNldE1heENvbmZsaWN0UmV0cmllcygxMCk7XG5cdFx0XHRwYWdlb2JqLnNhdmUocGFyYW1zLnVubGlua2VyLndvcmtlclN1Y2Nlc3MsIHBhcmFtcy51bmxpbmtlci53b3JrZXJGYWlsdXJlKTtcblx0XHR9LFxuXHR9O1xuXHRUd2lua2xlLmFkZEluaXRDYWxsYmFjayhUd2lua2xlLmJhdGNoZGVsZXRlLCAnYmF0Y2hkZWxldGUnKTtcbn0pKGpRdWVyeSk7XG5cbmV4cG9ydCB7fTtcbiIsICIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4vLyBAdHMtbm9jaGVja1xuLyohIFR3aW5rbGUuanMgLSB0d2lua2xlYmF0Y2h1bmRlbGV0ZS5qcyAqL1xuKGZ1bmN0aW9uIHR3aW5rbGViYXRjaHVuZGVsZXRlKCQpIHtcblx0LyoqXG5cdCAqIHR3aW5rbGViYXRjaHVuZGVsZXRlLmpzOiBCYXRjaCB1bmRlbGV0ZSBtb2R1bGVcblx0ICogTW9kZSBvZiBpbnZvY2F0aW9uOiBUYWIgKFwiVW5kLWJhdGNoXCIpXG5cdCAqIEFjdGl2ZSBvbjogRXhpc3RpbmcgdXNlciBhbmQgcHJvamVjdCBwYWdlc1xuXHQgKi9cblx0VHdpbmtsZS5iYXRjaHVuZGVsZXRlID0gKCkgPT4ge1xuXHRcdGlmIChcblx0XHRcdCFNb3JlYml0cy51c2VySXNTeXNvcCB8fFxuXHRcdFx0IW13LmNvbmZpZy5nZXQoJ3dnQXJ0aWNsZUlkJykgfHxcblx0XHRcdChtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZU51bWJlcicpICE9PSBtdy5jb25maWcuZ2V0KCd3Z05hbWVzcGFjZUlkcycpLnVzZXIgJiZcblx0XHRcdFx0bXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSAhPT0gbXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VJZHMnKS5wcm9qZWN0KVxuXHRcdCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRUd2lua2xlLmFkZFBvcnRsZXRMaW5rKFxuXHRcdFx0VHdpbmtsZS5iYXRjaHVuZGVsZXRlLmNhbGxiYWNrLFxuXHRcdFx0d2luZG93LndnVUxTKCfmibnlpI0nLCAn5om55b6pJyksXG5cdFx0XHQndHctYmF0Y2gtdW5kZWwnLFxuXHRcdFx0d2luZG93LndnVUxTKCflj43liKDpmaTpobXpnaInLCAn5Y+N5Yiq6Zmk6aCB6Z2iJylcblx0XHQpO1xuXHR9O1xuXHRUd2lua2xlLmJhdGNodW5kZWxldGUuY2FsbGJhY2sgPSAoKSA9PiB7XG5cdFx0Y29uc3QgV2luZG93ID0gbmV3IE1vcmViaXRzLnNpbXBsZVdpbmRvdyg2MDAsIDQwMCk7XG5cdFx0V2luZG93LnNldFNjcmlwdE5hbWUoJ1R3aW5rbGUnKTtcblx0XHRXaW5kb3cuc2V0VGl0bGUod2luZG93LndnVUxTKCfmibnph4/lj43liKDpmaQnLCAn5om55qyh5Y+N5Yiq6ZmkJykpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKHdpbmRvdy53Z1VMUygnVHdpbmtsZeW4ruWKqScsICdUd2lua2xl6Kqq5piOJyksICdIOlRXL0RPQyNiYXRjaHVuZGVsZXRlJyk7XG5cdFx0Y29uc3QgZm9ybSA9IG5ldyBNb3JlYml0cy5xdWlja0Zvcm0oVHdpbmtsZS5iYXRjaHVuZGVsZXRlLmNhbGxiYWNrLmV2YWx1YXRlKTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0bGlzdDogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6Iul5a2Y5Zyo5bey5Yig6Zmk55qE6K6o6K666aG177yM5Lmf5oGi5aSNJywgJ+iLpeWtmOWcqOW3suWIqumZpOeahOiojuirlumgge+8jOS5n+aBouW+qScpLFxuXHRcdFx0XHRcdG5hbWU6ICd1bmRlbF90YWxrJyxcblx0XHRcdFx0XHR2YWx1ZTogJ3VuZGVsX3RhbGsnLFxuXHRcdFx0XHRcdGNoZWNrZWQ6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0pO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdpbnB1dCcsXG5cdFx0XHRuYW1lOiAncmVhc29uJyxcblx0XHRcdGxhYmVsOiAn55CG55Sx77yaJyxcblx0XHRcdHNpemU6IDYwLFxuXHRcdH0pO1xuXHRcdGNvbnN0IHN0YXR1c2RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdHN0YXR1c2Rpdi5zdHlsZS5wYWRkaW5nID0gJzE1cHgnOyAvLyBqdXN0IHNvIGl0IGRvZXNuJ3QgbG9vayBicm9rZW5cblx0XHRXaW5kb3cuc2V0Q29udGVudChzdGF0dXNkaXYpO1xuXHRcdE1vcmViaXRzLnN0YXR1cy5pbml0KHN0YXR1c2Rpdik7XG5cdFx0V2luZG93LmRpc3BsYXkoKTtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdGFjdGlvbjogJ3F1ZXJ5Jyxcblx0XHRcdGdlbmVyYXRvcjogJ2xpbmtzJyxcblx0XHRcdHByb3A6ICdpbmZvJyxcblx0XHRcdGlucHJvcDogJ3Byb3RlY3Rpb24nLFxuXHRcdFx0dGl0bGVzOiBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyksXG5cdFx0XHRncGxsaW1pdDogVHdpbmtsZS5nZXRQcmVmKCdiYXRjaE1heCcpLFxuXHRcdH07XG5cdFx0Y29uc3Qgc3RhdGVsZW0gPSBuZXcgTW9yZWJpdHMuc3RhdHVzKHdpbmRvdy53Z1VMUygn5oqT5Y+W6aG16Z2i5YiX6KGoJywgJ+aKk+WPlumggemdouWIl+ihqCcpKTtcblx0XHRjb25zdCB5c2FyY2hpdmVzX2FwaSA9IG5ldyBNb3JlYml0cy53aWtpLmFwaShcblx0XHRcdHdpbmRvdy53Z1VMUygn5Yqg6L295Lit4oCmJywgJ+i8ieWFpeS4reKApicpLFxuXHRcdFx0cXVlcnksXG5cdFx0XHQoYXBpb2JqKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHhtbCA9IGFwaW9iai5yZXNwb25zZVhNTDtcblx0XHRcdFx0Y29uc3QgJHBhZ2VzID0gJCh4bWwpLmZpbmQoJ3BhZ2VbbWlzc2luZ10nKTtcblx0XHRcdFx0Y29uc3QgbGlzdCA9IFtdO1xuXHRcdFx0XHQkcGFnZXMuZWFjaCgoX2luZGV4LCBwYWdlKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgJHBhZ2UgPSAkKHBhZ2UpO1xuXHRcdFx0XHRcdGNvbnN0IHRpdGxlID0gJHBhZ2UuYXR0cigndGl0bGUnKTtcblx0XHRcdFx0XHRjb25zdCAkZWRpdHByb3QgPSAkcGFnZS5maW5kKCdwclt0eXBlPVwiY3JlYXRlXCJdW2xldmVsPVwic3lzb3BcIl0nKTtcblx0XHRcdFx0XHRjb25zdCBpc1Byb3RlY3RlZCA9ICRlZGl0cHJvdC5sZW5ndGggPiAwO1xuXHRcdFx0XHRcdGxpc3RbbGlzdC5sZW5ndGhdID0ge1xuXHRcdFx0XHRcdFx0bGFiZWw6XG5cdFx0XHRcdFx0XHRcdHRpdGxlICtcblx0XHRcdFx0XHRcdFx0KGlzUHJvdGVjdGVkXG5cdFx0XHRcdFx0XHRcdFx0PyBg77yIJHt3aW5kb3cud2dVTFMoJ+WFqOS/neaKpO+8jCcsICflhajkv53orbfvvIwnKX0ke1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQkZWRpdHByb3QuYXR0cignZXhwaXJ5JykgPT09ICdpbmZpbml0eSdcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ/IHdpbmRvdy53Z1VMUygn5peg6ZmQ5pyfJywgJ+eEoemZkOacnycpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0OiBgJHtuZXcgTW9yZWJpdHMuZGF0ZSgkZWRpdHByb3QuYXR0cignZXhwaXJ5JykpLmNhbGVuZGFyKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQndXRjJ1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KX0gKFVUQykke3dpbmRvdy53Z1VMUygn6L+H5pyfJywgJ+mBjuacnycpfWBcblx0XHRcdFx0XHRcdFx0XHRcdH3vvIlgXG5cdFx0XHRcdFx0XHRcdFx0OiAnJyksXG5cdFx0XHRcdFx0XHR2YWx1ZTogdGl0bGUsXG5cdFx0XHRcdFx0XHRjaGVja2VkOiB0cnVlLFxuXHRcdFx0XHRcdFx0c3R5bGU6IGlzUHJvdGVjdGVkID8gJ2NvbG9yOiAjZjAwJyA6ICcnLFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRhcGlvYmoucGFyYW1zLmZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnaGVhZGVyJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflvoXmgaLlpI3pobXpnaInLCAn5b6F5oGi5b6p6aCB6Z2iJyksXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRhcGlvYmoucGFyYW1zLmZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnYnV0dG9uJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflhajpgIknLCAn5YWo6YG4JyksXG5cdFx0XHRcdFx0ZXZlbnQ6IChlKSA9PiB7XG5cdFx0XHRcdFx0XHQkKE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhlLnRhcmdldC5mb3JtLCAncGFnZXMnKSkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRhcGlvYmoucGFyYW1zLmZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnYnV0dG9uJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflhajkuI3pgIknLCAn5YWo5LiN6YG4JyksXG5cdFx0XHRcdFx0ZXZlbnQ6IChlKSA9PiB7XG5cdFx0XHRcdFx0XHQkKE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhlLnRhcmdldC5mb3JtLCAncGFnZXMnKSkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YXBpb2JqLnBhcmFtcy5mb3JtLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0XHRuYW1lOiAncGFnZXMnLFxuXHRcdFx0XHRcdHNoaWZ0Q2xpY2tTdXBwb3J0OiB0cnVlLFxuXHRcdFx0XHRcdGxpc3QsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRhcGlvYmoucGFyYW1zLmZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnc3VibWl0Jyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGNvbnN0IHJlc3VsdCA9IGFwaW9iai5wYXJhbXMuZm9ybS5yZW5kZXIoKTtcblx0XHRcdFx0YXBpb2JqLnBhcmFtcy5XaW5kb3cuc2V0Q29udGVudChyZXN1bHQpO1xuXHRcdFx0fSxcblx0XHRcdHN0YXRlbGVtXG5cdFx0KTtcblx0XHR5c2FyY2hpdmVzX2FwaS5wYXJhbXMgPSB7XG5cdFx0XHRmb3JtLFxuXHRcdFx0V2luZG93LFxuXHRcdH07XG5cdFx0eXNhcmNoaXZlc19hcGkucG9zdCgpO1xuXHR9O1xuXHRUd2lua2xlLmJhdGNodW5kZWxldGUuY2FsbGJhY2suZXZhbHVhdGUgPSAoZXZlbnQpID0+IHtcblx0XHRNb3JlYml0cy53aWtpLmFjdGlvbkNvbXBsZXRlZC5ub3RpY2UgPSB3aW5kb3cud2dVTFMoJ+WPjeWIoOmZpOW3suWujOaIkCcsICflj43liKrpmaTlt7LlrozmiJAnKTtcblx0XHRjb25zdCBudW1Qcm90ZWN0ZWQgPSAkKE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhldmVudC50YXJnZXQsICdwYWdlcycpKS5maWx0ZXIoKF9pbmRleCwgZWxlbWVudCkgPT4ge1xuXHRcdFx0cmV0dXJuIGVsZW1lbnQuY2hlY2tlZCAmJiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZy5zdHlsZS5jb2xvciA9PT0gJ3JlZCc7XG5cdFx0fSkubGVuZ3RoO1xuXHRcdGlmIChcblx0XHRcdG51bVByb3RlY3RlZCA+IDAgJiZcblx0XHRcdCFjb25maXJtKFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+aCqOato+imgeWPjeWIoOmZpCAnLCAn5oKo5q2j6KaB5Y+N5Yiq6ZmkICcpICtcblx0XHRcdFx0XHRudW1Qcm90ZWN0ZWQgK1xuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygnIOS4quWFqOS/neaKpOmhtemdou+8jOaCqOehruWumuWQl++8nycsICcg5YCL5YWo5L+d6K236aCB6Z2i77yM5oKo56K65a6a5ZeO77yfJylcblx0XHRcdClcblx0XHQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgcGFnZXMgPSBldmVudC50YXJnZXQuZ2V0Q2hlY2tlZCgncGFnZXMnKTtcblx0XHRjb25zdCByZWFzb24gPSBldmVudC50YXJnZXQucmVhc29uLnZhbHVlO1xuXHRcdGNvbnN0IHVuZGVsX3RhbGsgPSBldmVudC50YXJnZXQucmVhc29uLnZhbHVlO1xuXHRcdGlmICghcmVhc29uKSB7XG5cdFx0XHR2b2lkIG13Lm5vdGlmeSgn5oKo6ZyA6KaB5oyH5a6a55CG55Sx44CCJywge1xuXHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdHRhZzogJ3R3aW5rbGViYXRjaHVuZGVsZXRlJyxcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRNb3JlYml0cy5zaW1wbGVXaW5kb3cuc2V0QnV0dG9uc0VuYWJsZWQoZmFsc2UpO1xuXHRcdE1vcmViaXRzLnN0YXR1cy5pbml0KGV2ZW50LnRhcmdldCk7XG5cdFx0aWYgKCFwYWdlcykge1xuXHRcdFx0TW9yZWJpdHMuc3RhdHVzLmVycm9yKFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+mUmeivrycsICfpjK/oqqQnKSxcblx0XHRcdFx0d2luZG93LndnVUxTKCfmsqHku4DkuYjopoHlj43liKDpmaTnmoTvvIzlj5bmtojmk43kvZwnLCAn5rKS5LuA6bq86KaB5Y+N5Yiq6Zmk55qE77yM5Y+W5raI5pON5L2cJylcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnN0IHBhZ2VVbmRlbGV0ZXIgPSBuZXcgTW9yZWJpdHMuYmF0Y2hPcGVyYXRpb24od2luZG93LndnVUxTKCflj43liKDpmaTpobXpnaInLCAn5Y+N5Yiq6Zmk6aCB6Z2iJykpO1xuXHRcdHBhZ2VVbmRlbGV0ZXIuc2V0T3B0aW9uKCdjaHVua1NpemUnLCBUd2lua2xlLmdldFByZWYoJ2JhdGNoQ2h1bmtzJykpO1xuXHRcdHBhZ2VVbmRlbGV0ZXIuc2V0T3B0aW9uKCdwcmVzZXJ2ZUluZGl2aWR1YWxTdGF0dXNMaW5lcycsIHRydWUpO1xuXHRcdHBhZ2VVbmRlbGV0ZXIuc2V0UGFnZUxpc3QocGFnZXMpO1xuXHRcdHBhZ2VVbmRlbGV0ZXIucnVuKChwYWdlTmFtZSkgPT4ge1xuXHRcdFx0Y29uc3QgcGFyYW1zID0ge1xuXHRcdFx0XHRwYWdlOiBwYWdlTmFtZSxcblx0XHRcdFx0dW5kZWxfdGFsayxcblx0XHRcdFx0cmVhc29uLFxuXHRcdFx0XHRwYWdlVW5kZWxldGVyLFxuXHRcdFx0fTtcblx0XHRcdGNvbnN0IHlzYXJjaGl2ZXNfcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHRcdHBhZ2VOYW1lLFxuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ+WPjeWIoOmZpOmhtemdoicsICflj43liKrpmaTpoIHpnaInKSArIHBhZ2VOYW1lXG5cdFx0XHQpO1xuXHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhwYXJhbXMpO1xuXHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldEVkaXRTdW1tYXJ5KGAke3JlYXNvbn0gKOaJuemHjylgKTtcblx0XHRcdHlzYXJjaGl2ZXNfcGFnZS5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHR5c2FyY2hpdmVzX3BhZ2Uuc3VwcHJlc3NQcm90ZWN0V2FybmluZygpO1xuXHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldE1heFJldHJpZXMoMyk7IC8vIHRlbXBvcmFyeSBpbmNyZWFzZSBmcm9tIDIgdG8gbWFrZSBiYXRjaHVuZGVsZXRlIG1vcmUgbGlrZWx5IHRvIHN1Y2NlZWRcblx0XHRcdHlzYXJjaGl2ZXNfcGFnZS51bmRlbGV0ZVBhZ2UoVHdpbmtsZS5iYXRjaHVuZGVsZXRlLmNhbGxiYWNrcy5kb0V4dHJhcywgcGFnZVVuZGVsZXRlci53b3JrZXJGYWlsdXJlKTtcblx0XHR9KTtcblx0fTtcblx0VHdpbmtsZS5iYXRjaHVuZGVsZXRlLmNhbGxiYWNrcyA9IHtcblx0XHQvLyB0aGlzIHN0dXBpZCBwYXJhbWV0ZXIgbmFtZSBpcyBhIHRlbXBvcmFyeSB0aGluZyB1bnRpbCBJIGltcGxlbWVudCBhbiBvdmVyaGF1bFxuXHRcdC8vIG9mIE1vcmViaXRzLndpa2kuKiBjYWxsYmFjayBwYXJhbWV0ZXJzXG5cdFx0ZG9FeHRyYXM6ICh0aGluZ1dpdGhQYXJhbWV0ZXJzKSA9PiB7XG5cdFx0XHRjb25zdCBwYXJhbXMgPSB0aGluZ1dpdGhQYXJhbWV0ZXJzLnBhcmVudFxuXHRcdFx0XHQ/IHRoaW5nV2l0aFBhcmFtZXRlcnMucGFyZW50LmdldENhbGxiYWNrUGFyYW1ldGVycygpXG5cdFx0XHRcdDogdGhpbmdXaXRoUGFyYW1ldGVycy5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHRcdC8vIHRoZSBpbml0aWFsIGJhdGNoIG9wZXJhdGlvbidzIGpvYiBpcyB0byBkZWxldGUgdGhlIHBhZ2UsIGFuZCB0aGF0IGhhc1xuXHRcdFx0Ly8gc3VjY2VlZGVkIGJ5IG5vd1xuXHRcdFx0cGFyYW1zLnBhZ2VVbmRlbGV0ZXIud29ya2VyU3VjY2Vzcyh0aGluZ1dpdGhQYXJhbWV0ZXJzKTtcblx0XHRcdGxldCBxdWVyeTtcblx0XHRcdGxldCB5c2FyY2hpdmVzX2FwaTtcblx0XHRcdGlmIChwYXJhbXMudW5kZWxfdGFsaykge1xuXHRcdFx0XHRjb25zdCB0YWxrcGFnZW5hbWUgPSBuZXcgbXcuVGl0bGUocGFyYW1zLnBhZ2UpLmdldFRhbGtQYWdlKCkuZ2V0UHJlZml4ZWRUZXh0KCk7XG5cdFx0XHRcdGlmICh0YWxrcGFnZW5hbWUgIT09IHBhcmFtcy5wYWdlKSB7XG5cdFx0XHRcdFx0cXVlcnkgPSB7XG5cdFx0XHRcdFx0XHRhY3Rpb246ICdxdWVyeScsXG5cdFx0XHRcdFx0XHRwcm9wOiAnZGVsZXRlZHJldmlzaW9ucycsXG5cdFx0XHRcdFx0XHRkcnZwcm9wOiAnaWRzJyxcblx0XHRcdFx0XHRcdGRydmxpbWl0OiAxLFxuXHRcdFx0XHRcdFx0dGl0bGVzOiB0YWxrcGFnZW5hbWUsXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR5c2FyY2hpdmVzX2FwaSA9IG5ldyBNb3JlYml0cy53aWtpLmFwaShcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5qOA5p+l6K6o6K666aG155qE5bey5Yig54mI5pysJywgJ+aqouafpeiojuirlumggeeahOW3suWIqueJiOacrCcpLFxuXHRcdFx0XHRcdFx0cXVlcnksXG5cdFx0XHRcdFx0XHRUd2lua2xlLmJhdGNodW5kZWxldGUuY2FsbGJhY2tzLnVuZGVsZXRlVGFsa1xuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0eXNhcmNoaXZlc19hcGkucGFyYW1zID0gcGFyYW1zO1xuXHRcdFx0XHRcdHlzYXJjaGl2ZXNfYXBpLnBhcmFtcy50YWxrUGFnZSA9IHRhbGtwYWdlbmFtZTtcblx0XHRcdFx0XHR5c2FyY2hpdmVzX2FwaS5wb3N0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdHVuZGVsZXRlVGFsazogKGFwaW9iaikgPT4ge1xuXHRcdFx0Y29uc3QgeG1sID0gYXBpb2JqLnJlc3BvbnNlWE1MO1xuXHRcdFx0Y29uc3QgZXhpc3RzID0gJCh4bWwpLmZpbmQoJ3BhZ2U6bm90KFttaXNzaW5nXSknKS5sZW5ndGggPiAwO1xuXHRcdFx0Y29uc3QgZGVscmV2cyA9ICQoeG1sKS5maW5kKCdyZXYnKS5hdHRyKCdyZXZpZCcpO1xuXHRcdFx0aWYgKGV4aXN0cyB8fCAhZGVscmV2cykge1xuXHRcdFx0XHQvLyBwYWdlIGV4aXN0cyBvciBoYXMgbm8gZGVsZXRlZCByZXZpc2lvbnM7IGZvcmdldCBhYm91dCBpdFxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBwYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0YXBpb2JqLnBhcmFtcy50YWxrUGFnZSxcblx0XHRcdFx0d2luZG93LndnVUxTKCfmraPlnKjlj43liKDpmaQnLCAn5q2j5Zyo5Y+N5Yiq6ZmkJykgKyBhcGlvYmoucGFyYW1zLnBhZ2UgKyB3aW5kb3cud2dVTFMoJ+eahOiuqOiuuumhtScsICfnmoToqI7oq5bpoIEnKVxuXHRcdFx0KTtcblx0XHRcdHBhZ2Uuc2V0RWRpdFN1bW1hcnkoXG5cdFx0XHRcdHdpbmRvdy53Z1VMUygn5Y+N5Yig6Zmk4oCcJywgJ+WPjeWIqumZpOOAjCcpICtcblx0XHRcdFx0XHRhcGlvYmoucGFyYW1zLnBhZ2UgK1xuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn4oCd55qEW1tIZWxwOuiuqOiuuumhtXzorqjorrrpobVdXScsICfjgI3nmoRbW0hlbHA66KiO6KuW6aCBfOiojuirlumggV1dJylcblx0XHRcdCk7XG5cdFx0XHRwYWdlLnNldENoYW5nZVRhZ3MoVHdpbmtsZS5jaGFuZ2VUYWdzKTtcblx0XHRcdHBhZ2UudW5kZWxldGVQYWdlKCk7XG5cdFx0fSxcblx0fTtcblx0VHdpbmtsZS5hZGRJbml0Q2FsbGJhY2soVHdpbmtsZS5iYXRjaHVuZGVsZXRlLCAnYmF0Y2h1bmRlbGV0ZScpO1xufSkoalF1ZXJ5KTtcblxuZXhwb3J0IHt9O1xuIiwgIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1ub2NoZWNrXG5cbi8qISBUd2lua2xlLmpzIC0gdHdpbmtsZWJhdGNocHJvdGVjdC5qcyAqL1xuKGZ1bmN0aW9uIHR3aW5rbGViYXRjaHByb3RlY3QoJCkge1xuXHQvKipcblx0ICogdHdpbmtsZWJhdGNocHJvdGVjdC5qczogQmF0Y2ggcHJvdGVjdCBtb2R1bGUgKHN5c29wcyBvbmx5KVxuXHQgKiBNb2RlIG9mIGludm9jYXRpb246IFRhYiAoXCJQLWJhdGNoXCIpXG5cdCAqIEFjdGl2ZSBvbjogRXhpc3RpbmcgcHJvamVjdCBwYWdlcyBhbmQgdXNlciBwYWdlcztcblx0ICogZXhpc3RpbmcgYW5kIG5vbi1leGlzdGluZyBjYXRlZ29yaWVzOyBTcGVjaWFsOlByZWZpeEluZGV4XG5cdCAqL1xuXHRUd2lua2xlLmJhdGNocHJvdGVjdCA9ICgpID0+IHtcblx0XHRpZiAoXG5cdFx0XHRNb3JlYml0cy51c2VySXNTeXNvcCAmJlxuXHRcdFx0KChtdy5jb25maWcuZ2V0KCd3Z0FydGljbGVJZCcpID4gMCAmJiBbMiwgNF0uaW5jbHVkZXMobXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSkpIHx8XG5cdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPT09IDE0IHx8XG5cdFx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnQ2Fub25pY2FsU3BlY2lhbFBhZ2VOYW1lJykgPT09ICdQcmVmaXhpbmRleCcpXG5cdFx0KSB7XG5cdFx0XHRUd2lua2xlLmFkZFBvcnRsZXRMaW5rKFR3aW5rbGUuYmF0Y2hwcm90ZWN0LmNhbGxiYWNrLCAn5om55L+dJywgJ3R3LXBiYXRjaCcsICfmibnph4/kv53miqTpk77lh7rpobXpnaInKTtcblx0XHR9XG5cdH07XG5cdFR3aW5rbGUuYmF0Y2hwcm90ZWN0LnVubGlua0NhY2hlID0ge307XG5cdFR3aW5rbGUuYmF0Y2hwcm90ZWN0LmNhbGxiYWNrID0gKCkgPT4ge1xuXHRcdGNvbnN0IFdpbmRvdyA9IG5ldyBNb3JlYml0cy5zaW1wbGVXaW5kb3coNjAwLCA0MDApO1xuXHRcdFdpbmRvdy5zZXRUaXRsZSgn5om55L+dJyk7XG5cdFx0V2luZG93LnNldFNjcmlwdE5hbWUoJ1R3aW5rbGUnKTtcblx0XHRXaW5kb3cuYWRkRm9vdGVyTGluaygn5L+d5oqk5p2h5L6LJywgJ0xJQjpQUk9UJyk7XG5cdFx0V2luZG93LmFkZEZvb3Rlckxpbmsod2luZG93LndnVUxTKCfluK7liqnmlofmoaMnLCAn5bmr5Yqp5paH5qqUJyksICdIOlRXL0RPQyPkv53miqQnKTtcblx0XHRXaW5kb3cuYWRkRm9vdGVyTGluayh3aW5kb3cud2dVTFMoJ+mXrumimOWPjemmiCcsICfllY/poYzlj43ppYsnKSwgJ0hUOlRXJyk7XG5cdFx0Y29uc3QgZm9ybSA9IG5ldyBNb3JlYml0cy5xdWlja0Zvcm0oVHdpbmtsZS5iYXRjaHByb3RlY3QuY2FsbGJhY2suZXZhbHVhdGUpO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRldmVudDogVHdpbmtsZS5wcm90ZWN0LmZvcm1ldmVudHMuZWRpdG1vZGlmeSxcblx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiAn5L+u5pS557yW6L6R5L+d5oqkJyxcblx0XHRcdFx0XHR2YWx1ZTogJ2VkaXRtb2RpZnknLFxuXHRcdFx0XHRcdG5hbWU6ICdlZGl0bW9kaWZ5Jyxcblx0XHRcdFx0XHR0b29sdGlwOiAn5LuF6ZmQ546w5pyJ6aG16Z2i44CCJyxcblx0XHRcdFx0XHRjaGVja2VkOiB0cnVlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9KTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdG5hbWU6ICdlZGl0bGV2ZWwnLFxuXHRcdFx0bGFiZWw6ICfnvJbovpHmnYPpmZDvvJonLFxuXHRcdFx0ZXZlbnQ6IFR3aW5rbGUucHJvdGVjdC5mb3JtZXZlbnRzLmVkaXRsZXZlbCxcblx0XHRcdGxpc3Q6IFR3aW5rbGUucHJvdGVjdC5wcm90ZWN0aW9uTGV2ZWxzLFxuXHRcdH0pO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0bmFtZTogJ2VkaXRleHBpcnknLFxuXHRcdFx0bGFiZWw6ICfnu4jmraLml7bpl7TvvJonLFxuXHRcdFx0ZXZlbnQ6IChldmVudCkgPT4ge1xuXHRcdFx0XHRpZiAoZXZlbnQudGFyZ2V0LnZhbHVlID09PSAnY3VzdG9tJykge1xuXHRcdFx0XHRcdFR3aW5rbGUucHJvdGVjdC5kb0N1c3RvbUV4cGlyeShldmVudC50YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0bGlzdDogVHdpbmtsZS5wcm90ZWN0LnByb3RlY3Rpb25MZW5ndGhzLCAvLyBEZWZhdWx0ICgyIGRheXMpIHNldCBhZnRlciByZW5kZXJcblx0XHR9KTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0ZXZlbnQ6IFR3aW5rbGUucHJvdGVjdC5mb3JtZXZlbnRzLm1vdmVtb2RpZnksXG5cdFx0XHRsaXN0OiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogJ+S/ruaUueenu+WKqOS/neaKpCcsXG5cdFx0XHRcdFx0dmFsdWU6ICdtb3ZlbW9kaWZ5Jyxcblx0XHRcdFx0XHRuYW1lOiAnbW92ZW1vZGlmeScsXG5cdFx0XHRcdFx0dG9vbHRpcDogJ+S7hemZkOeOsOaciemhtemdouOAgicsXG5cdFx0XHRcdFx0Y2hlY2tlZDogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHRuYW1lOiAnbW92ZWxldmVsJyxcblx0XHRcdGxhYmVsOiAn56e75Yqo5p2D6ZmQ77yaJyxcblx0XHRcdGV2ZW50OiBUd2lua2xlLnByb3RlY3QuZm9ybWV2ZW50cy5tb3ZlbGV2ZWwsXG5cdFx0XHRsaXN0OiBUd2lua2xlLnByb3RlY3QucHJvdGVjdGlvbkxldmVscy5maWx0ZXIoXG5cdFx0XHRcdC8vIEF1dG9jb25maXJtZWQgaXMgcmVxdWlyZWQgZm9yIGEgbW92ZSwgcmVkdW5kYW50XG5cdFx0XHRcdChwcm90TGV2ZWwpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvdExldmVsLnZhbHVlICE9PSAnYXV0b2NvbmZpcm1lZCc7XG5cdFx0XHRcdH1cblx0XHRcdCksXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHRuYW1lOiAnbW92ZWV4cGlyeScsXG5cdFx0XHRsYWJlbDogJ+e7iOatouaXtumXtO+8micsXG5cdFx0XHRldmVudDogKGV2ZW50KSA9PiB7XG5cdFx0XHRcdGlmIChldmVudC50YXJnZXQudmFsdWUgPT09ICdjdXN0b20nKSB7XG5cdFx0XHRcdFx0VHdpbmtsZS5wcm90ZWN0LmRvQ3VzdG9tRXhwaXJ5KGV2ZW50LnRhcmdldCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRsaXN0OiBUd2lua2xlLnByb3RlY3QucHJvdGVjdGlvbkxlbmd0aHMsIC8vIERlZmF1bHQgKDIgZGF5cykgc2V0IGFmdGVyIHJlbmRlclxuXHRcdH0pO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRldmVudDogKGV2ZW50KSA9PiB7XG5cdFx0XHRcdGV2ZW50LnRhcmdldC5mb3JtLmNyZWF0ZWxldmVsLmRpc2FibGVkID0gIWV2ZW50LnRhcmdldC5jaGVja2VkO1xuXHRcdFx0XHRldmVudC50YXJnZXQuZm9ybS5jcmVhdGVleHBpcnkuZGlzYWJsZWQgPVxuXHRcdFx0XHRcdCFldmVudC50YXJnZXQuY2hlY2tlZCB8fCBldmVudC50YXJnZXQuZm9ybS5jcmVhdGVsZXZlbC52YWx1ZSA9PT0gJ2FsbCc7XG5cdFx0XHRcdGV2ZW50LnRhcmdldC5mb3JtLmNyZWF0ZWxldmVsLnN0eWxlLmNvbG9yID0gZXZlbnQudGFyZ2V0LmNoZWNrZWQgPyAnJyA6ICd0cmFuc3BhcmVudCc7XG5cdFx0XHRcdGV2ZW50LnRhcmdldC5mb3JtLmNyZWF0ZWV4cGlyeS5zdHlsZS5jb2xvciA9IGV2ZW50LnRhcmdldC5jaGVja2VkID8gJycgOiAndHJhbnNwYXJlbnQnO1xuXHRcdFx0fSxcblx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiAn5L+u5pS55Yib5bu65L+d5oqkJyxcblx0XHRcdFx0XHR2YWx1ZTogJ2NyZWF0ZW1vZGlmeScsXG5cdFx0XHRcdFx0bmFtZTogJ2NyZWF0ZW1vZGlmeScsXG5cdFx0XHRcdFx0dG9vbHRpcDogJ+S7hemZkOS4jeWtmOWcqOeahOmhtemdouOAgicsXG5cdFx0XHRcdFx0Y2hlY2tlZDogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHRuYW1lOiAnY3JlYXRlbGV2ZWwnLFxuXHRcdFx0bGFiZWw6ICfliJvlu7rmnYPpmZDvvJonLFxuXHRcdFx0ZXZlbnQ6IFR3aW5rbGUucHJvdGVjdC5mb3JtZXZlbnRzLmNyZWF0ZWxldmVsLFxuXHRcdFx0bGlzdDogVHdpbmtsZS5wcm90ZWN0LnByb3RlY3Rpb25MZXZlbHMsXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHRuYW1lOiAnY3JlYXRlZXhwaXJ5Jyxcblx0XHRcdGxhYmVsOiAn57uI5q2i5pe26Ze077yaJyxcblx0XHRcdGV2ZW50OiAoZXZlbnQpID0+IHtcblx0XHRcdFx0aWYgKGV2ZW50LnRhcmdldC52YWx1ZSA9PT0gJ2N1c3RvbScpIHtcblx0XHRcdFx0XHRUd2lua2xlLnByb3RlY3QuZG9DdXN0b21FeHBpcnkoZXZlbnQudGFyZ2V0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGxpc3Q6IFR3aW5rbGUucHJvdGVjdC5wcm90ZWN0aW9uTGVuZ3RocywgLy8gRGVmYXVsdCAoaW5kZWZpbml0ZSkgc2V0IGFmdGVyIHJlbmRlclxuXHRcdH0pO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdoZWFkZXInLFxuXHRcdFx0bGFiZWw6ICcnLCAvLyBob3Jpem9udGFsIHJ1bGVcblx0XHR9KTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0bmFtZTogJ3JlYXNvbicsXG5cdFx0XHRsYWJlbDogJ+eQhueUse+8iOS/neaKpOaXpeW/l++8iScsXG5cdFx0XHRzaXplOiA2MCxcblx0XHR9KTtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdGFjdGlvbjogJ3F1ZXJ5Jyxcblx0XHRcdHByb3A6ICdyZXZpc2lvbnN8aW5mb3xpbWFnZWluZm8nLFxuXHRcdFx0cnZwcm9wOiAnc2l6ZXx1c2VyJyxcblx0XHRcdGlucHJvcDogJ3Byb3RlY3Rpb24nLFxuXHRcdFx0Zm9ybWF0OiAnanNvbicsXG5cdFx0fTtcblx0XHRpZiAobXcuY29uZmlnLmdldCgnd2dOYW1lc3BhY2VOdW1iZXInKSA9PT0gMTQpIHtcblx0XHRcdC8vIGNhdGVnb3JpZXNcblx0XHRcdHF1ZXJ5LmdlbmVyYXRvciA9ICdjYXRlZ29yeW1lbWJlcnMnO1xuXHRcdFx0cXVlcnkuZ2NtdGl0bGUgPSBtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyk7XG5cdFx0XHRxdWVyeS5nY21saW1pdCA9IFR3aW5rbGUuZ2V0UHJlZignYmF0Y2hNYXgnKTtcblx0XHR9IGVsc2UgaWYgKG13LmNvbmZpZy5nZXQoJ3dnQ2Fub25pY2FsU3BlY2lhbFBhZ2VOYW1lJykgPT09ICdQcmVmaXhpbmRleCcpIHtcblx0XHRcdHF1ZXJ5LmdlbmVyYXRvciA9ICdhbGxwYWdlcyc7XG5cdFx0XHRxdWVyeS5nYXBuYW1lc3BhY2UgPVxuXHRcdFx0XHRtdy51dGlsLmdldFBhcmFtVmFsdWUoJ25hbWVzcGFjZScpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdFtuYW1lPW5hbWVzcGFjZV0nKVswXS52YWx1ZTtcblx0XHRcdHF1ZXJ5LmdhcHByZWZpeCA9XG5cdFx0XHRcdG13LnV0aWwuZ2V0UGFyYW1WYWx1ZSgncHJlZml4JykgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbbmFtZT1wcmVmaXhdJylbMF0udmFsdWU7XG5cdFx0XHRxdWVyeS5nYXBsaW1pdCA9IFR3aW5rbGUuZ2V0UHJlZignYmF0Y2hNYXgnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cXVlcnkuZ2VuZXJhdG9yID0gJ2xpbmtzJztcblx0XHRcdHF1ZXJ5LnRpdGxlcyA9IG13LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKTtcblx0XHRcdHF1ZXJ5LmdwbGxpbWl0ID0gVHdpbmtsZS5nZXRQcmVmKCdiYXRjaE1heCcpO1xuXHRcdH1cblx0XHRjb25zdCBzdGF0dXNkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRzdGF0dXNkaXYuc3R5bGUucGFkZGluZyA9ICcxNXB4JzsgLy8ganVzdCBzbyBpdCBkb2Vzbid0IGxvb2sgYnJva2VuXG5cdFx0V2luZG93LnNldENvbnRlbnQoc3RhdHVzZGl2KTtcblx0XHRNb3JlYml0cy5zdGF0dXMuaW5pdChzdGF0dXNkaXYpO1xuXHRcdFdpbmRvdy5kaXNwbGF5KCk7XG5cdFx0Y29uc3Qgc3RhdGVsZW0gPSBuZXcgTW9yZWJpdHMuc3RhdHVzKCfmipPlj5bpobXpnaLliJfooagnKTtcblx0XHRjb25zdCB5c2FyY2hpdmVzX2FwaSA9IG5ldyBNb3JlYml0cy53aWtpLmFwaShcblx0XHRcdCfliqDovb3kuK3igKbigKYnLFxuXHRcdFx0cXVlcnksXG5cdFx0XHQoYXBpb2JqKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHJlc3BvbnNlID0gYXBpb2JqLmdldFJlc3BvbnNlKCk7XG5cdFx0XHRcdGNvbnN0IHBhZ2VzID0gKHJlc3BvbnNlLnF1ZXJ5ICYmIHJlc3BvbnNlLnF1ZXJ5LnBhZ2VzKSB8fCBbXTtcblx0XHRcdFx0Y29uc3QgbGlzdCA9IFtdO1xuXHRcdFx0XHRwYWdlcy5zb3J0KFR3aW5rbGUuc29ydEJ5TmFtZXNwYWNlKTtcblx0XHRcdFx0Zm9yIChjb25zdCBwYWdlIG9mIHBhZ2VzKSB7XG5cdFx0XHRcdFx0Y29uc3QgbWV0YWRhdGEgPSBbXTtcblx0XHRcdFx0XHRjb25zdCBtaXNzaW5nID0gISFwYWdlLm1pc3Npbmc7XG5cdFx0XHRcdFx0bGV0IGVkaXRQcm90O1xuXHRcdFx0XHRcdGlmIChtaXNzaW5nKSB7XG5cdFx0XHRcdFx0XHRtZXRhZGF0YVttZXRhZGF0YS5sZW5ndGhdID0gJ+mhtemdouS4jeWtmOWcqCc7XG5cdFx0XHRcdFx0XHRlZGl0UHJvdCA9IHBhZ2UucHJvdGVjdGlvbi5maW5kTGFzdCgocHJvdGVjdGlvbikgPT4ge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcHJvdGVjdGlvbi50eXBlID09PSAnY3JlYXRlJyAmJiBwcm90ZWN0aW9uLmxldmVsID09PSAnc3lzb3AnO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChwYWdlLnJlZGlyZWN0KSB7XG5cdFx0XHRcdFx0XHRcdG1ldGFkYXRhW21ldGFkYXRhLmxlbmd0aF0gPSAn6YeN5a6a5ZCRJztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChwYWdlLm5zID09PSA2KSB7XG5cdFx0XHRcdFx0XHRcdG1ldGFkYXRhW21ldGFkYXRhLmxlbmd0aF0gPVxuXHRcdFx0XHRcdFx0XHRcdChg5LiK5Lyg6ICF77yaJHtwYWdlLmltYWdlaW5mb1swXS51c2VyfWAsIGDmnIDlkI7nvJbovpHogIXvvJoke3BhZ2UucmV2aXNpb25zWzBdLnVzZXJ9YCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRtZXRhZGF0YVttZXRhZGF0YS5sZW5ndGhdID0gYCR7bXcubGFuZ3VhZ2UuY29udmVydE51bWJlcihwYWdlLnJldmlzaW9uc1swXS5zaXplKX3lrZfoioJgO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWRpdFByb3QgPSBwYWdlLnByb3RlY3Rpb24uZmluZExhc3QoKHByb3RlY3Rpb24pID0+IHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHByb3RlY3Rpb24udHlwZSA9PT0gJ2VkaXQnICYmIHByb3RlY3Rpb24ubGV2ZWwgPT09ICdzeXNvcCc7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGVkaXRQcm90KSB7XG5cdFx0XHRcdFx0XHRtZXRhZGF0YVttZXRhZGF0YS5sZW5ndGhdID0gYCR7bWlzc2luZyA/ICfnmb3nurgnIDogJyd95YWo5L+d5oqkJHtcblx0XHRcdFx0XHRcdFx0ZWRpdFByb3QuZXhwaXJ5ID09PSAnaW5maW5pdHknXG5cdFx0XHRcdFx0XHRcdFx0PyAn77yI5rC45LmF77yJJ1xuXHRcdFx0XHRcdFx0XHRcdDogYO+8iCR7bmV3IE1vcmViaXRzLmRhdGUoZWRpdFByb3QuZXhwaXJ5KS5jYWxlbmRhcigndXRjJyl9IChVVEMp6L+H5pyf77yJYFxuXHRcdFx0XHRcdFx0fWA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvbnN0IHt0aXRsZX0gPSBwYWdlO1xuXHRcdFx0XHRcdGxpc3RbbGlzdC5sZW5ndGhdID0ge1xuXHRcdFx0XHRcdFx0bGFiZWw6IHRpdGxlICsgKG1ldGFkYXRhLmxlbmd0aCA+IDAgPyBgICgke21ldGFkYXRhLmpvaW4oJzsgJyl9KWAgOiAnJyksXG5cdFx0XHRcdFx0XHR2YWx1ZTogdGl0bGUsXG5cdFx0XHRcdFx0XHRjaGVja2VkOiB0cnVlLFxuXHRcdFx0XHRcdFx0c3R5bGU6IGVkaXRQcm90ID8gJ2NvbG9yOiAjZjAwJyA6ICcnLFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0XHRcdHR5cGU6ICdoZWFkZXInLFxuXHRcdFx0XHRcdGxhYmVsOiAn5b6F5L+d5oqk6aG16Z2iJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnYnV0dG9uJyxcblx0XHRcdFx0XHRsYWJlbDogJ+WFqOmAiScsXG5cdFx0XHRcdFx0ZXZlbnQ6IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0JChNb3JlYml0cy5xdWlja0Zvcm0uZ2V0RWxlbWVudHMoZXZlbnQudGFyZ2V0LmZvcm0sICdwYWdlcycpKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdFx0XHR0eXBlOiAnYnV0dG9uJyxcblx0XHRcdFx0XHRsYWJlbDogJ+WFqOS4jemAiScsXG5cdFx0XHRcdFx0ZXZlbnQ6IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0JChNb3JlYml0cy5xdWlja0Zvcm0uZ2V0RWxlbWVudHMoZXZlbnQudGFyZ2V0LmZvcm0sICdwYWdlcycpKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ2NoZWNrYm94Jyxcblx0XHRcdFx0XHRuYW1lOiAncGFnZXMnLFxuXHRcdFx0XHRcdHNoaWZ0Q2xpY2tTdXBwb3J0OiB0cnVlLFxuXHRcdFx0XHRcdGxpc3QsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogJ3N1Ym1pdCcsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRjb25zdCByZXN1bHQgPSBmb3JtLnJlbmRlcigpO1xuXHRcdFx0XHRXaW5kb3cuc2V0Q29udGVudChyZXN1bHQpO1xuXHRcdFx0XHQvLyBTZXQgZGVmYXVsdHNcblx0XHRcdFx0cmVzdWx0LmVkaXRleHBpcnkudmFsdWUgPSAnMiBkYXlzJztcblx0XHRcdFx0cmVzdWx0Lm1vdmVleHBpcnkudmFsdWUgPSAnMiBkYXlzJztcblx0XHRcdFx0cmVzdWx0LmNyZWF0ZWV4cGlyeS52YWx1ZSA9ICdpbmZpbml0eSc7XG5cdFx0XHRcdGZvciAoY29uc3QgbGlua3Mgb2YgTW9yZWJpdHMucXVpY2tGb3JtLmdldEVsZW1lbnRzKHJlc3VsdCwgJ+S4qumhtemdoicpKSB7XG5cdFx0XHRcdFx0VHdpbmtsZS5nZW5lcmF0ZUFycm93TGlua3MobGlua3MpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0c3RhdGVsZW1cblx0XHQpO1xuXHRcdHlzYXJjaGl2ZXNfYXBpLnBvc3QoKTtcblx0fTtcblx0VHdpbmtsZS5iYXRjaHByb3RlY3QuY3VycmVudFByb3RlY3RDb3VudGVyID0gMDtcblx0VHdpbmtsZS5iYXRjaHByb3RlY3QuY3VycmVudHByb3RlY3RvciA9IDA7XG5cdFR3aW5rbGUuYmF0Y2hwcm90ZWN0LmNhbGxiYWNrLmV2YWx1YXRlID0gKGV2ZW50KSA9PiB7XG5cdFx0TW9yZWJpdHMud2lraS5hY3Rpb25Db21wbGV0ZWQubm90aWNlID0gJ+aJuemHj+S/neaKpOWujOaIkCc7XG5cdFx0Y29uc3QgZm9ybSA9IGV2ZW50LnRhcmdldDtcblx0XHRjb25zdCBudW1Qcm90ZWN0ZWQgPSAkKE1vcmViaXRzLnF1aWNrRm9ybS5nZXRFbGVtZW50cyhmb3JtLCAn5Liq6aG16Z2iJykpLmZpbHRlcigoX2luZGV4LCBlbGVtZW50KSA9PiB7XG5cdFx0XHRyZXR1cm4gZWxlbWVudC5jaGVja2VkICYmIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nLnN0eWxlLmNvbG9yID09PSAnI2YwMCc7XG5cdFx0fSkubGVuZ3RoO1xuXHRcdGlmIChcblx0XHRcdG51bVByb3RlY3RlZCA+IDAgJiZcblx0XHRcdCFjb25maXJtKGDmgqjljbPlsIblr7kke213Lmxhbmd1YWdlLmNvbnZlcnROdW1iZXIobnVtUHJvdGVjdGVkKX3kuKrlhajkv53miqTpobXpnaLov5vooYzmk43kvZzjgILmgqjnoa7lrprlkJfvvJ9gKVxuXHRcdCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBpbnB1dCA9IE1vcmViaXRzLnF1aWNrRm9ybS5nZXRJbnB1dERhdGEoZm9ybSk7XG5cdFx0aWYgKCFpbnB1dC5yZWFzb24pIHtcblx0XHRcdHZvaWQgbXcubm90aWZ5KCfmgqjlv4Xpobvnu5nlh7rkuIDkuKrnkIbnlLHjgIInLCB7XG5cdFx0XHRcdHR5cGU6ICd3YXJuJyxcblx0XHRcdFx0dGFnOiAndHdpbmtsZWJhdGNocHJvdGVjdCcsXG5cdFx0XHR9KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0TW9yZWJpdHMuc2ltcGxlV2luZG93LnNldEJ1dHRvbnNFbmFibGVkKGZhbHNlKTtcblx0XHRNb3JlYml0cy5zdGF0dXMuaW5pdChmb3JtKTtcblx0XHRpZiAoaW5wdXQucGFnZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRNb3JlYml0cy5zdGF0dXMuZXJyb3IoJ0Vycm9yJywgJ+W+heS/neaKpOmhtemdouS4jeWtmOWcqO+8jOeoi+W6j+e7iOatoicpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBiYXRjaE9wZXJhdGlvbiA9IG5ldyBNb3JlYml0cy5iYXRjaE9wZXJhdGlvbign5bqU55So5L+d5oqk6K6+572uJyk7XG5cdFx0YmF0Y2hPcGVyYXRpb24uc2V0T3B0aW9uKCdjaHVua1NpemUnLCBUd2lua2xlLmdldFByZWYoJ2JhdGNoQ2h1bmtzJykpO1xuXHRcdGJhdGNoT3BlcmF0aW9uLnNldE9wdGlvbigncHJlc2VydmVJbmRpdmlkdWFsU3RhdHVzTGluZXMnLCB0cnVlKTtcblx0XHRiYXRjaE9wZXJhdGlvbi5zZXRQYWdlTGlzdChpbnB1dC5wYWdlcyk7XG5cdFx0YmF0Y2hPcGVyYXRpb24ucnVuKChwYWdlTmFtZSkgPT4ge1xuXHRcdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRcdGFjdGlvbjogJ3F1ZXJ5Jyxcblx0XHRcdFx0dGl0bGVzOiBwYWdlTmFtZSxcblx0XHRcdFx0Zm9ybWF0OiAnanNvbicsXG5cdFx0XHR9O1xuXHRcdFx0Y29uc3QgeXNhcmNoaXZlc19hcGkgPSBuZXcgTW9yZWJpdHMud2lraS5hcGkoXG5cdFx0XHRcdGDmraPlnKjmo4Dmn6XpobXpnaLigJwke3BhZ2VOYW1lfeKAneaYr+WQpuWtmOWcqGAsXG5cdFx0XHRcdHF1ZXJ5LFxuXHRcdFx0XHRUd2lua2xlLmJhdGNocHJvdGVjdC5jYWxsYmFja3MubWFpbixcblx0XHRcdFx0bnVsbCxcblx0XHRcdFx0YmF0Y2hPcGVyYXRpb24ud29ya2VyRmFpbHVyZVxuXHRcdFx0KTtcblx0XHRcdHlzYXJjaGl2ZXNfYXBpLnBhcmFtcyA9IHtcblx0XHRcdFx0cGFnZTogcGFnZU5hbWUsXG5cdFx0XHRcdGJhdGNoT3BlcmF0aW9uLFxuXHRcdFx0XHQuLi5pbnB1dCxcblx0XHRcdH07XG5cdFx0XHR5c2FyY2hpdmVzX2FwaS5wb3N0KCk7XG5cdFx0fSk7XG5cdH07XG5cdFR3aW5rbGUuYmF0Y2hwcm90ZWN0LmNhbGxiYWNrcyA9IHtcblx0XHRtYWluOiAoYXBpb2JqKSA9PiB7XG5cdFx0XHRjb25zdCByZXNwb25zZSA9IGFwaW9iai5nZXRSZXNwb25zZSgpO1xuXHRcdFx0aWYgKHJlc3BvbnNlLnF1ZXJ5Lm5vcm1hbGl6ZWQpIHtcblx0XHRcdFx0YXBpb2JqLnBhcmFtcy5wYWdlID0gcmVzcG9uc2UucXVlcnkubm9ybWFsaXplZFswXS50bztcblx0XHRcdH1cblx0XHRcdGNvbnN0IGV4aXN0cyA9ICFyZXNwb25zZS5xdWVyeS5wYWdlc1swXS5taXNzaW5nO1xuXHRcdFx0Y29uc3QgcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoYXBpb2JqLnBhcmFtcy5wYWdlLCBg5q2j5Zyo5L+d5oqkJHthcGlvYmoucGFyYW1zLnBhZ2V9YCk7XG5cdFx0XHRsZXQgdGFrZW5BY3Rpb24gPSBmYWxzZTtcblx0XHRcdGlmIChleGlzdHMgJiYgYXBpb2JqLnBhcmFtcy5lZGl0bW9kaWZ5KSB7XG5cdFx0XHRcdHBhZ2Uuc2V0RWRpdFByb3RlY3Rpb24oYXBpb2JqLnBhcmFtcy5lZGl0bGV2ZWwsIGFwaW9iai5wYXJhbXMuZWRpdGV4cGlyeSk7XG5cdFx0XHRcdHRha2VuQWN0aW9uID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGlmIChleGlzdHMgJiYgYXBpb2JqLnBhcmFtcy5tb3ZlbW9kaWZ5KSB7XG5cdFx0XHRcdHBhZ2Uuc2V0TW92ZVByb3RlY3Rpb24oYXBpb2JqLnBhcmFtcy5tb3ZlbGV2ZWwsIGFwaW9iai5wYXJhbXMubW92ZWV4cGlyeSk7XG5cdFx0XHRcdHRha2VuQWN0aW9uID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGlmICghZXhpc3RzICYmIGFwaW9iai5wYXJhbXMuY3JlYXRlbW9kaWZ5KSB7XG5cdFx0XHRcdHBhZ2Uuc2V0Q3JlYXRlUHJvdGVjdGlvbihhcGlvYmoucGFyYW1zLmNyZWF0ZWxldmVsLCBhcGlvYmoucGFyYW1zLmNyZWF0ZWV4cGlyeSk7XG5cdFx0XHRcdHRha2VuQWN0aW9uID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGlmICghdGFrZW5BY3Rpb24pIHtcblx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLndhcm4oXG5cdFx0XHRcdFx0YOato+WcqOS/neaKpOKAnCR7YXBpb2JqLnBhcmFtcy5wYWdlfWAsXG5cdFx0XHRcdFx0YOKAnemhtemdoiR7ZXhpc3RzID8gJ+WtmOWcqCcgOiAn5LiN5a2Y5ZyoJ33vvJvml6Dkuovlj6/lgZrvvIzot7Pov4dgXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGFwaW9iai5wYXJhbXMuYmF0Y2hPcGVyYXRpb24ud29ya2VyRmFpbHVyZShhcGlvYmopO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRwYWdlLnNldEVkaXRTdW1tYXJ5KGFwaW9iai5wYXJhbXMucmVhc29uKTtcblx0XHRcdHBhZ2Uuc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0cGFnZS5wcm90ZWN0KGFwaW9iai5wYXJhbXMuYmF0Y2hPcGVyYXRpb24ud29ya2VyU3VjY2VzcywgYXBpb2JqLnBhcmFtcy5iYXRjaE9wZXJhdGlvbi53b3JrZXJGYWlsdXJlKTtcblx0XHR9LFxuXHR9O1xuXHRUd2lua2xlLmFkZEluaXRDYWxsYmFjayhUd2lua2xlLmJhdGNocHJvdGVjdCwgJ2JhdGNocHJvdGVjdCcpO1xufSkoalF1ZXJ5KTtcblxuZXhwb3J0IHt9O1xuIiwgIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1ub2NoZWNrXG5cbi8qISBUd2lua2xlLmpzIC0gdHdpbmtsZWNsb3NlLmpzICovXG4oZnVuY3Rpb24gdHdpbmtsZWNsb3NlKCQpIHtcblx0Y29uc3QgJGJvZHkgPSAkKCdib2R5Jyk7XG5cdC8qKlxuXHQgKiB0d2lua2xlY2xvc2UuanM6IFhGRCBjbG9zaW5nIG1vZHVsZVxuXHQgKiBNb2RlIG9mIGludm9jYXRpb246IExpbmtzIGFmdGVyIHNlY3Rpb24gaGVhZGluZ1xuXHQgKiBBY3RpdmUgb246IEFmRCBkYXRlZCBhcmNoaXZlIHBhZ2VzXG5cdCAqIENvbmZpZyBkaXJlY3RpdmVzIGluOiBUd2lua2xlQ29uZmlnXG5cdCAqL1xuXHRUd2lua2xlLmNsb3NlID0gKCkgPT4ge1xuXHRcdGlmIChcblx0XHRcdFR3aW5rbGUuZ2V0UHJlZignWGZkQ2xvc2UnKSA9PT0gJ2hpZGUnIHx8XG5cdFx0XHQhL17mnInlhb3moaPmoYjppoYoW18gXXRhbGspPzrlrZjlup/orqjorrpcXC/orrDlvZUoPzpcXC9cXGQrKXszfSQvLnRlc3QobXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpKVxuXHRcdCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRtdy5ob29rKCd3aWtpcGFnZS5jb250ZW50JykuYWRkKChpdGVtKSA9PiB7XG5cdFx0XHRpZiAoaXRlbS5hdHRyKCdpZCcpID09PSAnbXctY29udGVudC10ZXh0Jykge1xuXHRcdFx0XHRUd2lua2xlLmNsb3NlLmFkZExpbmtzKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cdFR3aW5rbGUuY2xvc2UuYWRkTGlua3MgPSAoKSA9PiB7XG5cdFx0Y29uc3Qgc3BhblRhZyA9IChjb2xvciwgY29udGVudCkgPT4ge1xuXHRcdFx0Y29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblx0XHRcdHNwYW4uc3R5bGUuY29sb3IgPSBjb2xvcjtcblx0XHRcdHNwYW4uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29udGVudCkpO1xuXHRcdFx0cmV0dXJuIHNwYW47XG5cdFx0fTtcblx0XHQkYm9keVxuXHRcdFx0LmZpbmQoXG5cdFx0XHRcdCdoMTpoYXMoLm13LWhlYWRsaW5lKSxoMjpoYXMoLm13LWhlYWRsaW5lKSxoMzpoYXMoLm13LWhlYWRsaW5lKSxoNDpoYXMoLm13LWhlYWRsaW5lKSxoNTpoYXMoLm13LWhlYWRsaW5lKSxoNjpoYXMoLm13LWhlYWRsaW5lKScsXG5cdFx0XHRcdCcjYm9keUNvbnRlbnQnXG5cdFx0XHQpXG5cdFx0XHQuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcblx0XHRcdFx0ZWxlbWVudC5kYXRhc2V0LnNlY3Rpb24gPSBpbmRleCArIDE7XG5cdFx0XHR9KTtcblx0XHRjb25zdCBzZWxlY3RvciA9ICc6aGFzKC5tdy1oZWFkbGluZSBhOm9ubHktb2YtdHlwZSk6bm90KDpoYXMoKyBkaXYuTmF2RnJhbWUpKSc7XG5cdFx0Y29uc3QgdGl0bGVzID0gJGJvZHkuZmluZCgnI2JvZHlDb250ZW50JykuZmluZChgaDIke3NlbGVjdG9yfTpub3QoOmhhcygrIHAgKyBoMykpLCBoMyR7c2VsZWN0b3J9YCk7IC8vIHJlYWxseSBuZWVkcyB0byB3b3JrIG9uXG5cdFx0Y29uc3QgZGVsTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0cm9uZycpO1xuXHRcdGNvbnN0IGRlbExpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cdFx0ZGVsTGluay5hcHBlbmRDaGlsZChzcGFuVGFnKCdCbGFjaycsICdbJykpO1xuXHRcdGRlbExpbmsuYXBwZW5kQ2hpbGQoc3BhblRhZygnUmVkJywgd2luZG93LndnVUxTKCflhbPpl63orqjorronLCAn6Zec6ZaJ6KiO6KuWJykpKTtcblx0XHRkZWxMaW5rLmFwcGVuZENoaWxkKHNwYW5UYWcoJ0JsYWNrJywgJ10nKSk7XG5cdFx0ZGVsTm9kZS5hcHBlbmRDaGlsZChkZWxMaW5rKTtcblx0XHRmb3IgKGNvbnN0IGN1cnJlbnQgb2YgdGl0bGVzKSB7XG5cdFx0XHRjb25zdCBoZWFkbGluZWhyZWYgPSAkKGN1cnJlbnQpXG5cdFx0XHRcdC5maW5kKCcubXctaGVhZGxpbmUgYTpub3QoLmV4dC1kaXNjdXNzaW9udG9vbHMtaW5pdC1zZWN0aW9uLXN1YnNjcmliZS1saW5rKScpXG5cdFx0XHRcdC5hdHRyKCdocmVmJyk7XG5cdFx0XHRpZiAoaGVhZGxpbmVocmVmICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0bGV0IHRpdGxlID0gbnVsbDtcblx0XHRcdFx0aWYgKGhlYWRsaW5laHJlZi5pbmNsdWRlcygncmVkbGluaz0xJykpIHtcblx0XHRcdFx0XHR0aXRsZSA9IGhlYWRsaW5laHJlZi5zbGljZSgxOSwgLTIyKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zdCBtID0gaGVhZGxpbmVocmVmLm1hdGNoKC9cXC93aWtpXFwvKFteP10rKS8sICckMScpO1xuXHRcdFx0XHRcdGlmIChtICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRbLCB0aXRsZV0gPSBtO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGl0bGUgIT09IG51bGwpIHtcblx0XHRcdFx0XHR0aXRsZSA9IGRlY29kZVVSSUNvbXBvbmVudCh0aXRsZSk7XG5cdFx0XHRcdFx0dGl0bGUgPSB0aXRsZS5yZXBsYWNlKC9fL2csICcgJyk7IC8vIE5vcm1hbGl6ZSBmb3IgdXNpbmcgaW4gaW50ZXJmYWNlIGFuZCBzdW1tYXJ5XG5cdFx0XHRcdFx0Y29uc3QgcGFnZW5vdGV4aXN0ID0gJChjdXJyZW50KS5maW5kKCcubXctaGVhZGxpbmUgYScpLmhhc0NsYXNzKCduZXcnKTtcblx0XHRcdFx0XHRjb25zdCB7c2VjdGlvbn0gPSBjdXJyZW50LmRhdGFzZXQ7XG5cdFx0XHRcdFx0Y29uc3QgW25vZGVdID0gY3VycmVudC5xdWVyeVNlbGVjdG9yQWxsKCcubXctaGVhZGxpbmUnKTtcblx0XHRcdFx0XHRub2RlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcgJykpO1xuXHRcdFx0XHRcdGNvbnN0IHRtcE5vZGUgPSBkZWxOb2RlLmNsb25lTm9kZSh0cnVlKTtcblx0XHRcdFx0XHR0bXBOb2RlLmZpcnN0Q2hpbGQuaHJlZiA9IGAjJHtzZWN0aW9ufWA7XG5cdFx0XHRcdFx0JCh0bXBOb2RlLmZpcnN0Q2hpbGQpLm9uKCdjbGljaycsICgpID0+IHtcblx0XHRcdFx0XHRcdFR3aW5rbGUuY2xvc2UuY2FsbGJhY2sodGl0bGUsIHNlY3Rpb24sIHBhZ2Vub3RleGlzdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0bm9kZS5hcHBlbmRDaGlsZCh0bXBOb2RlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0Ly8gS2VlcCB0aGlzIHN5bmNocm9uaXplZCB3aXRoIHt7ZGVsaH19XG5cdFR3aW5rbGUuY2xvc2UuY29kZXMgPSBbXG5cdFx0e1xuXHRcdFx0a2V5OiB3aW5kb3cud2dVTFMoJ+ivt+axguaXoOaViCcsICfoq4vmsYLnhKHmlYgnKSxcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGlyOiB7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6K+35rGC5peg5pWIJywgJ+iri+axgueEoeaViCcpLFxuXHRcdFx0XHRcdGFjdGlvbjogJ2tlZXAnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRyZXA6IHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfph43lpI3mj5Dlh7rvvIzml6DmlYgnLCAn6YeN6KSH5o+Q5Ye677yM54Sh5pWIJyksXG5cdFx0XHRcdFx0YWN0aW9uOiAna2VlcCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdG5lOiB7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn55uu5qCH6aG16Z2i5oiW5paH5Lu25LiN5a2Y5Zyo77yM5peg5pWIJywgJ+ebruaomemggemdouaIluaqlOahiOS4jeWtmOWcqO+8jOeEoeaViCcpLFxuXHRcdFx0XHRcdGFjdGlvbjogJ2tlZXAnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRucToge1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aPkOWIoOiAheacquiOt+WPluaPkOWIoOi1hOagvO+8jOaXoOaViCcsICfmj5DliKrogIXmnKrlj5blvpfmj5DliKros4fmoLzvvIznhKHmlYgnKSxcblx0XHRcdFx0XHRhY3Rpb246ICdrZWVwJyxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRrZXk6ICfkv53nlZknLFxuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0azoge1xuXHRcdFx0XHRcdGxhYmVsOiAn5L+d55WZJyxcblx0XHRcdFx0XHRhY3Rpb246ICdrZWVwJyxcblx0XHRcdFx0XHRhZG1pbm9ubHk6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNrOiB7XG5cdFx0XHRcdFx0bGFiZWw6ICflv6vpgJ/kv53nlZknLFxuXHRcdFx0XHRcdGFjdGlvbjogJ2tlZXAnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR0azoge1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aaguaXtuS/neeVme+8jOaUueaMgue7tOaKpOaooeadv++8iOWFs+azqOW6puetie+8iScsICfmmqvmmYLkv53nlZnvvIzmlLnmjpvntq3orbfmqKHmnb/vvIjpl5zms6jluqbnrYnvvIknKSxcblx0XHRcdFx0XHR2YWx1ZTogd2luZG93LndnVUxTKCfmmoLml7bkv53nlZknLCAn5pqr5pmC5L+d55WZJyksXG5cdFx0XHRcdFx0YWN0aW9uOiAna2VlcCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHJyOiB7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6K+35rGC55CG55Sx5raI5aSxJywgJ+iri+axgueQhueUsea2iOWksScpLFxuXHRcdFx0XHRcdGFjdGlvbjogJ2tlZXAnLFxuXHRcdFx0XHRcdHNlbGVjdGVkOiBUd2lua2xlLmdldFByZWYoJ1hmZENsb3NlJykgPT09ICdub25hZG1pbm9ubHknLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRkYW46IHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliKDlkI7ph43lu7onLCAn5Yiq5b6M6YeN5bu6JyksXG5cdFx0XHRcdFx0YWN0aW9uOiAna2VlcCcsXG5cdFx0XHRcdFx0YWRtaW5vbmx5OiB0cnVlLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGtleTogd2luZG93LndnVUxTKCfliKDpmaQnLCAn5Yiq6ZmkJyksXG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRkOiB7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Yig6ZmkJywgJ+WIqumZpCcpLFxuXHRcdFx0XHRcdGFjdGlvbjogJ2RlbCcsXG5cdFx0XHRcdFx0YWRtaW5vbmx5OiB0cnVlLFxuXHRcdFx0XHRcdHNlbGVjdGVkOiBUd2lua2xlLmdldFByZWYoJ1hmZENsb3NlJykgPT09ICdhbGwnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRpYzoge1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WbvuWDj+WboOS+teadg+iiq+WIoCcsICflnJblg4/lm6DkvrXmrIrooqvliKonKSxcblx0XHRcdFx0XHRhY3Rpb246ICdkZWwnLFxuXHRcdFx0XHRcdGFkbWlub25seTogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRrZXk6IHdpbmRvdy53Z1VMUygn5b+r6YCf5Yig6ZmkJywgJ+W/q+mAn+WIqumZpCcpLFxuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0c2Q6IHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflv6vpgJ/liKDpmaQnLCAn5b+r6YCf5Yiq6ZmkJyksXG5cdFx0XHRcdFx0YWN0aW9uOiAnZGVsJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0bHNzZDoge1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aXoOadpea6kOaIluiRl+S9nOadg+S/oeaBr++8jOW/q+mAn+WIoOmZpCcsICfnhKHkvobmupDmiJbniYjmrIros4foqIrvvIzlv6vpgJ/liKrpmaQnKSxcblx0XHRcdFx0XHRhY3Rpb246ICdkZWwnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRzdmc6IHtcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflt7LmlLnnlKhTVkflm77lvaLvvIzlv6vpgJ/liKDpmaQnLCAn5bey5pS555SoU1ZH5ZyW5b2i77yM5b+r6YCf5Yiq6ZmkJyksXG5cdFx0XHRcdFx0YWN0aW9uOiAnZGVsJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0ZHJlcDoge1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+Wkmuasoeiiq+WIoOmZpO+8jOadoeebrumUgeWumicsICflpJrmrKHooqvliKrpmaTvvIzmop3nm67pjpblrponKSxcblx0XHRcdFx0XHRhY3Rpb246ICdkZWwnLFxuXHRcdFx0XHRcdGFkbWlub25seTogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRrZXk6IHdpbmRvdy53Z1VMUygn5YW25LuW5aSE55CG5pa55rOVJywgJ+WFtuS7luiZleeQhuaWueazlScpLFxuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0Yzoge1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+i9rOS6pOS+teadgycsICfovYnkuqTkvrXmrIonKSxcblx0XHRcdFx0XHRhY3Rpb246ICdub29wJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0cjoge1xuXHRcdFx0XHRcdGxhYmVsOiAn6YeN5a6a5ZCRJyxcblx0XHRcdFx0XHRhY3Rpb246ICdrZWVwJyxcblx0XHRcdFx0XHRhZG1pbm9ubHk6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNyOiB7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5YiG57G76YeN5a6a5ZCRJywgJ+WIhumhnumHjeWumuWQkScpLFxuXHRcdFx0XHRcdGFjdGlvbjogJ2tlZXAnLFxuXHRcdFx0XHRcdGFkbWlub25seTogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0bToge1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+enu+WKqCcsICfnp7vli5UnKSxcblx0XHRcdFx0XHRhY3Rpb246ICdrZWVwJyxcblx0XHRcdFx0XHRhZG1pbm9ubHk6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdG1lcmdlOiB7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bm25YWlJywgJ+S9teWFpScpLFxuXHRcdFx0XHRcdGFjdGlvbjogJ2tlZXAnLFxuXHRcdFx0XHRcdGFkbWlub25seTogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0bWVyZ2VhcHByb3ZlZDoge1xuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WFgeiuuOW5tuWFpScsICflhYHoqLHkvbXlhaUnKSxcblx0XHRcdFx0XHRhY3Rpb246ICdrZWVwJyxcblx0XHRcdFx0XHRhZG1pbm9ubHk6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdG5jOiB7XG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5peg5YWx6K+G5pqC5pe25L+d55WZJywgJ+eEoeWFseitmOaaq+aZguS/neeVmScpLFxuXHRcdFx0XHRcdHZhbHVlOiB3aW5kb3cud2dVTFMoJ+aXoOWFseivhicsICfnhKHlhbHorZgnKSxcblx0XHRcdFx0XHRhY3Rpb246ICdrZWVwJyxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0fSxcblx0XTtcblx0VHdpbmtsZS5jbG9zZS5jYWxsYmFjayA9ICh0aXRsZSwgc2VjdGlvbiwgbm9vcCkgPT4ge1xuXHRcdGNvbnN0IFdpbmRvdyA9IG5ldyBNb3JlYml0cy5zaW1wbGVXaW5kb3coNDEwLCAyMDApO1xuXHRcdFdpbmRvdy5zZXRUaXRsZShg5YWz6Zet5a2Y5bqf6K6o6K66IFxcdTAwQjcgJHt0aXRsZX1gKTtcblx0XHRXaW5kb3cuc2V0U2NyaXB0TmFtZSgnVHdpbmtsZScpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKCflrZjlup/orqjorrrorr7nva4nLCAnSDpUVy9QUkVGI+WFs+mXreWtmOW6n+iuqOiuuicpO1xuXHRcdFdpbmRvdy5hZGRGb290ZXJMaW5rKCdUd2lua2xl5biu5YqpJywgJ0g6VFcvRE9DI+WFs+mXreWtmOW6n+iuqOiuuicpO1xuXHRcdGNvbnN0IGZvcm0gPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtKFR3aW5rbGUuY2xvc2UuY2FsbGJhY2suZXZhbHVhdGUpO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0bGFiZWw6ICflpITnkIbnu5PmnpzvvJonLFxuXHRcdFx0bmFtZTogJ3N1Yl9ncm91cCcsXG5cdFx0XHRldmVudDogVHdpbmtsZS5jbG9zZS5jYWxsYmFjay5jaGFuZ2VfY29kZSxcblx0XHR9KTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnaW5wdXQnLFxuXHRcdFx0bmFtZTogJ3NkcmVhc29uJyxcblx0XHRcdGxhYmVsOiAn6YCf5Yig55CG55Sx77yaJyxcblx0XHRcdHRvb2x0aXA6ICfnlKjkuo7liKDpmaTml6Xlv5fvvIzkvb/nlKh7e2RlbGV0ZX1955qE5Y+C5pWw5qC85byP77yM5L6L5aaCIEExIOaIliBBMXxHMScsXG5cdFx0XHRoaWRkZW46IHRydWUsXG5cdFx0fSk7XG5cdFx0Zm9ybS5hcHBlbmQoe1xuXHRcdFx0dHlwZTogJ2lucHV0Jyxcblx0XHRcdG5hbWU6ICdyZW1hcmsnLFxuXHRcdFx0bGFiZWw6ICfooaXlhYXor7TmmI7vvJonLFxuXHRcdH0pO1xuXHRcdGZvcm0uYXBwZW5kKHtcblx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRsaXN0OiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogJ+WPquWFs+mXreiuqOiuuu+8jOS4jei/m+ihjOWFtuS7luaTjeS9nCcsXG5cdFx0XHRcdFx0dmFsdWU6ICdub29wJyxcblx0XHRcdFx0XHRuYW1lOiAnbm9vcCcsXG5cdFx0XHRcdFx0ZXZlbnQ6IFR3aW5rbGUuY2xvc2UuY2FsbGJhY2suY2hhbmdlX29wZXJhdGlvbixcblx0XHRcdFx0XHRjaGVja2VkOiBub29wLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9KTtcblx0XHRpZiAobmV3IG13LlRpdGxlKHRpdGxlKS5uYW1lc3BhY2UgJSAyID09PSAwICYmIG5ldyBtdy5UaXRsZSh0aXRsZSkubmFtZXNwYWNlICE9PSAyKSB7XG5cdFx0XHQvLyBoaWRlIG9wdGlvbiBmb3IgdXNlciBwYWdlcywgdG8gYXZvaWQgYWNjaWRlbnRhbGx5IGRlbGV0aW5nIHVzZXIgdGFsayBwYWdlXG5cdFx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdGxpc3Q6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ+WIoOmZpOWFs+iBlOeahOiuqOiuuumhtScsXG5cdFx0XHRcdFx0XHR2YWx1ZTogJ3RhbGtwYWdlJyxcblx0XHRcdFx0XHRcdG5hbWU6ICd0YWxrcGFnZScsXG5cdFx0XHRcdFx0XHR0b29sdGlwOiAn5Yig6Zmk5pe26ZmE5bim5Yig6Zmk5q2k6aG16Z2i55qE6K6o6K666aG144CCJyxcblx0XHRcdFx0XHRcdGNoZWNrZWQ6IHRydWUsXG5cdFx0XHRcdFx0XHRldmVudDogKGUpID0+IHtcblx0XHRcdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnY2hlY2tib3gnLFxuXHRcdFx0bGlzdDogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6ICfliKDpmaTph43lrprlkJHpobUnLFxuXHRcdFx0XHRcdHZhbHVlOiAncmVkaXJlY3RzJyxcblx0XHRcdFx0XHRuYW1lOiAncmVkaXJlY3RzJyxcblx0XHRcdFx0XHR0b29sdGlwOiAn5Yig6Zmk5Yiw5q2k6aG155qE6YeN5a6a5ZCR44CCJyxcblx0XHRcdFx0XHRjaGVja2VkOiB0cnVlLFxuXHRcdFx0XHRcdGV2ZW50OiAoZSkgPT4ge1xuXHRcdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9KTtcblx0XHRmb3JtLmFwcGVuZCh7XG5cdFx0XHR0eXBlOiAnc3VibWl0Jyxcblx0XHR9KTtcblx0XHRjb25zdCByZXN1bHQgPSBmb3JtLnJlbmRlcigpO1xuXHRcdFdpbmRvdy5zZXRDb250ZW50KHJlc3VsdCk7XG5cdFx0V2luZG93LmRpc3BsYXkoKTtcblx0XHRjb25zdCBbc3ViX2dyb3VwXSA9IHJlc3VsdC5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3QnKTsgLy8gaGFja1xuXHRcdGNvbnN0IHJlc3VsdERhdGEgPSB7XG5cdFx0XHR0aXRsZSxcblx0XHRcdHNlY3Rpb246IE51bWJlci5wYXJzZUludChzZWN0aW9uLCAxMCksXG5cdFx0XHRub29wLFxuXHRcdH07XG5cdFx0JChyZXN1bHQpLmRhdGEoJ3Jlc3VsdERhdGEnLCByZXN1bHREYXRhKTtcblx0XHQvLyB3b3JrZXIgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBjb21ibyBib3ggZW50cmllc1xuXHRcdGNvbnN0IGNyZWF0ZUVudHJpZXMgPSAoY29udGVudHMsIGNvbnRhaW5lcikgPT4ge1xuXHRcdFx0Zm9yIChjb25zdCBbaXRlbUtleSwgaXRlbVByb3BlcnRpZXNdIG9mIE9iamVjdC5lbnRyaWVzKGNvbnRlbnRzKSkge1xuXHRcdFx0XHRjb25zdCBrZXkgPSB0eXBlb2YgaXRlbUtleSA9PT0gJ3N0cmluZycgPyBpdGVtS2V5IDogaXRlbVByb3BlcnRpZXMudmFsdWU7XG5cdFx0XHRcdGNvbnN0IGVsZW0gPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0XHRcdHR5cGU6ICdvcHRpb24nLFxuXHRcdFx0XHRcdGxhYmVsOiBgJHtrZXl977yaJHtpdGVtUHJvcGVydGllcy5sYWJlbH1gLFxuXHRcdFx0XHRcdHZhbHVlOiBrZXksXG5cdFx0XHRcdFx0c2VsZWN0ZWQ6IGl0ZW1Qcm9wZXJ0aWVzLnNlbGVjdGVkLFxuXHRcdFx0XHRcdGRpc2FibGVkOlxuXHRcdFx0XHRcdFx0KFR3aW5rbGUuZ2V0UHJlZignWGZkQ2xvc2UnKSAhPT0gJ2FsbCcgJiYgaXRlbVByb3BlcnRpZXMuYWRtaW5vbmx5KSB8fCBpdGVtUHJvcGVydGllcy5kaXNhYmxlZCxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGNvbnN0IGVsZW1SZW5kZXJlZCA9IGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtLnJlbmRlcigpKTtcblx0XHRcdFx0JChlbGVtUmVuZGVyZWQpLmRhdGEoJ21lc3NhZ2VEYXRhJywgaXRlbVByb3BlcnRpZXMpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0Zm9yIChjb25zdCBncm91cCBvZiBUd2lua2xlLmNsb3NlLmNvZGVzKSB7XG5cdFx0XHRsZXQgb3B0Z3JvdXAgPSBuZXcgTW9yZWJpdHMucXVpY2tGb3JtLmVsZW1lbnQoe1xuXHRcdFx0XHR0eXBlOiAnb3B0Z3JvdXAnLFxuXHRcdFx0XHRsYWJlbDogZ3JvdXAua2V5LFxuXHRcdFx0fSk7XG5cdFx0XHRvcHRncm91cCA9IG9wdGdyb3VwLnJlbmRlcigpO1xuXHRcdFx0c3ViX2dyb3VwLmFwcGVuZENoaWxkKG9wdGdyb3VwKTtcblx0XHRcdC8vIGNyZWF0ZSB0aGUgb3B0aW9uc1xuXHRcdFx0Y3JlYXRlRW50cmllcyhncm91cC52YWx1ZSwgb3B0Z3JvdXApO1xuXHRcdH1cblx0XHRjb25zdCBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuXHRcdGV2ZW50LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG5cdFx0cmVzdWx0LnN1Yl9ncm91cC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblx0fTtcblx0VHdpbmtsZS5jbG9zZS5jYWxsYmFjay5jaGFuZ2Vfb3BlcmF0aW9uID0gKGUpID0+IHtcblx0XHRjb25zdCBub29wID0gZS50YXJnZXQuY2hlY2tlZDtcblx0XHRjb25zdCBjb2RlID0gZS50YXJnZXQuZm9ybS5zdWJfZ3JvdXAudmFsdWU7XG5cdFx0Y29uc3QgbWVzc2FnZURhdGEgPSAkKGUudGFyZ2V0LmZvcm0uc3ViX2dyb3VwKS5maW5kKGBvcHRpb25bdmFsdWU9XCIke2NvZGV9XCJdYCkuZGF0YSgnbWVzc2FnZURhdGEnKTtcblx0XHRjb25zdCB7dGFsa3BhZ2V9ID0gZS50YXJnZXQuZm9ybTtcblx0XHRjb25zdCB7cmVkaXJlY3RzfSA9IGUudGFyZ2V0LmZvcm07XG5cdFx0aWYgKG5vb3AgfHwgbWVzc2FnZURhdGEuYWN0aW9uID09PSAna2VlcCcpIHtcblx0XHRcdGlmICh0YWxrcGFnZSkge1xuXHRcdFx0XHR0YWxrcGFnZS5jaGVja2VkID0gZmFsc2U7XG5cdFx0XHRcdHRhbGtwYWdlLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJlZGlyZWN0cy5jaGVja2VkID0gZmFsc2U7XG5cdFx0XHRyZWRpcmVjdHMuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAodGFsa3BhZ2UpIHtcblx0XHRcdFx0dGFsa3BhZ2UuY2hlY2tlZCA9IHRydWU7XG5cdFx0XHRcdHRhbGtwYWdlLmRpc2FibGVkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZWRpcmVjdHMuY2hlY2tlZCA9IHRydWU7XG5cdFx0XHRyZWRpcmVjdHMuZGlzYWJsZWQgPSBmYWxzZTtcblx0XHR9XG5cdH07XG5cdFR3aW5rbGUuY2xvc2UuY2FsbGJhY2suY2hhbmdlX2NvZGUgPSAoZSkgPT4ge1xuXHRcdGNvbnN0IHJlc3VsdERhdGEgPSAkKGUudGFyZ2V0LmZvcm0pLmRhdGEoJ3Jlc3VsdERhdGEnKTtcblx0XHRjb25zdCBtZXNzYWdlRGF0YSA9ICQoZS50YXJnZXQpLmZpbmQoYG9wdGlvblt2YWx1ZT1cIiR7ZS50YXJnZXQudmFsdWV9XCJdYCkuZGF0YSgnbWVzc2FnZURhdGEnKTtcblx0XHRjb25zdCB7bm9vcH0gPSBlLnRhcmdldC5mb3JtO1xuXHRcdGNvbnN0IHt0YWxrcGFnZX0gPSBlLnRhcmdldC5mb3JtO1xuXHRcdGNvbnN0IHtyZWRpcmVjdHN9ID0gZS50YXJnZXQuZm9ybTtcblx0XHRpZiAocmVzdWx0RGF0YS5ub29wIHx8IG1lc3NhZ2VEYXRhLmFjdGlvbiA9PT0gJ25vb3AnKSB7XG5cdFx0XHRub29wLmNoZWNrZWQgPSB0cnVlO1xuXHRcdFx0bm9vcC5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAodGFsa3BhZ2UpIHtcblx0XHRcdFx0dGFsa3BhZ2UuY2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHR0YWxrcGFnZS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZWRpcmVjdHMuY2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0cmVkaXJlY3RzLmRpc2FibGVkID0gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bm9vcC5jaGVja2VkID0gZmFsc2U7XG5cdFx0XHRub29wLmRpc2FibGVkID0gZmFsc2U7XG5cdFx0XHRpZiAobWVzc2FnZURhdGEuYWN0aW9uID09PSAna2VlcCcpIHtcblx0XHRcdFx0aWYgKHRhbGtwYWdlKSB7XG5cdFx0XHRcdFx0dGFsa3BhZ2UuY2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdHRhbGtwYWdlLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZWRpcmVjdHMuY2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHRyZWRpcmVjdHMuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKHRhbGtwYWdlKSB7XG5cdFx0XHRcdFx0dGFsa3BhZ2UuY2hlY2tlZCA9IHRydWU7XG5cdFx0XHRcdFx0dGFsa3BhZ2UuZGlzYWJsZWQgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZWRpcmVjdHMuY2hlY2tlZCA9IHRydWU7XG5cdFx0XHRcdHJlZGlyZWN0cy5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGUudGFyZ2V0LnZhbHVlID09PSAnc2QnKSB7XG5cdFx0XHRcdGUudGFyZ2V0LmZvcm0uc2RyZWFzb24ucGFyZW50RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2hpZGRlbicpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZS50YXJnZXQuZm9ybS5zZHJlYXNvbi5wYXJlbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJycpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0VHdpbmtsZS5jbG9zZS5jYWxsYmFjay5ldmFsdWF0ZSA9IChlKSA9PiB7XG5cdFx0Y29uc3QgY29kZSA9IGUudGFyZ2V0LnN1Yl9ncm91cC52YWx1ZTtcblx0XHRjb25zdCByZXN1bHREYXRhID0gJChlLnRhcmdldCkuZGF0YSgncmVzdWx0RGF0YScpO1xuXHRcdGNvbnN0IG1lc3NhZ2VEYXRhID0gJChlLnRhcmdldC5zdWJfZ3JvdXApLmZpbmQoYG9wdGlvblt2YWx1ZT1cIiR7Y29kZX1cIl1gKS5kYXRhKCdtZXNzYWdlRGF0YScpO1xuXHRcdGNvbnN0IG5vb3AgPSBlLnRhcmdldC5ub29wLmNoZWNrZWQ7XG5cdFx0Y29uc3QgdGFsa3BhZ2UgPSBlLnRhcmdldC50YWxrcGFnZSAmJiBlLnRhcmdldC50YWxrcGFnZS5jaGVja2VkO1xuXHRcdGNvbnN0IHJlZGlyZWN0cyA9IGUudGFyZ2V0LnJlZGlyZWN0cy5jaGVja2VkO1xuXHRcdGNvbnN0IHBhcmFtcyA9IHtcblx0XHRcdHRpdGxlOiByZXN1bHREYXRhLnRpdGxlLFxuXHRcdFx0Y29kZSxcblx0XHRcdHJlbWFyazogZS50YXJnZXQucmVtYXJrLnZhbHVlLFxuXHRcdFx0c2RyZWFzb246IGUudGFyZ2V0LnNkcmVhc29uLnZhbHVlLFxuXHRcdFx0c2VjdGlvbjogcmVzdWx0RGF0YS5zZWN0aW9uLFxuXHRcdFx0cGFyZW50U2VjdGlvbjogcmVzdWx0RGF0YS5wYXJlbnRTZWN0aW9uLFxuXHRcdFx0bWVzc2FnZURhdGEsXG5cdFx0XHR0YWxrcGFnZSxcblx0XHRcdHJlZGlyZWN0cyxcblx0XHR9O1xuXHRcdE1vcmViaXRzLnNpbXBsZVdpbmRvdy5zZXRCdXR0b25zRW5hYmxlZChmYWxzZSk7XG5cdFx0TW9yZWJpdHMuc3RhdHVzLmluaXQoZS50YXJnZXQpO1xuXHRcdE1vcmViaXRzLndpa2kuYWN0aW9uQ29tcGxldGVkLm5vdGljZSA9ICfmk43kvZzlrozmiJAnO1xuXHRcdGlmIChub29wIHx8IG1lc3NhZ2VEYXRhLmFjdGlvbiA9PT0gJ25vb3AnKSB7XG5cdFx0XHRUd2lua2xlLmNsb3NlLmNhbGxiYWNrcy50YWxrZW5kKHBhcmFtcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN3aXRjaCAobWVzc2FnZURhdGEuYWN0aW9uKSB7XG5cdFx0XHRcdGNhc2UgJ2RlbCc6XG5cdFx0XHRcdFx0VHdpbmtsZS5jbG9zZS5jYWxsYmFja3MuZGVsKHBhcmFtcyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2tlZXAnOiB7XG5cdFx0XHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShwYXJhbXMudGl0bGUsICfnp7vpmaTlrZjlup/orqjorrrmqKHmnb8nKTtcblx0XHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2Uuc2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKHBhcmFtcyk7XG5cdFx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLmxvYWQoVHdpbmtsZS5jbG9zZS5jYWxsYmFja3Mua2VlcCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR2b2lkIG13Lm5vdGlmeShg5YWz6Zet5a2Y5bqf6K6o6K6677ya5pyq5a6a5LmJICR7Y29kZX1gLCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0XHR0YWc6ICd0d2lua2xlY2xvc2UnLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0VHdpbmtsZS5jbG9zZS5jYWxsYmFja3MgPSB7XG5cdFx0ZGVsOiAocGFyYW1zKSA9PiB7XG5cdFx0XHRsZXQgcXVlcnk7XG5cdFx0XHRsZXQgeXNhcmNoaXZlc19hcGk7XG5cdFx0XHRNb3JlYml0cy53aWtpLmFkZENoZWNrcG9pbnQoKTtcblx0XHRcdGNvbnN0IHBhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKHBhcmFtcy50aXRsZSwgJ+WIoOmZpOmhtemdoicpO1xuXHRcdFx0aWYgKHBhcmFtcy5jb2RlID09PSAnc2QnKSB7XG5cdFx0XHRcdFR3aW5rbGUuc3BlZWR5LmNhbGxiYWNrcy5wYXJzZVdpa2l0ZXh0KHBhcmFtcy50aXRsZSwgYHt7ZGVsZXRlfCR7cGFyYW1zLnNkcmVhc29ufX19YCwgKHJlYXNvbikgPT4ge1xuXHRcdFx0XHRcdHJlYXNvbiA9IHByb21wdCgn6L6T5YWl5Yig6Zmk55CG55Sx77yM5oiW54K55Ye756Gu5a6a5Lul5o6l5Y+X6Ieq5Yqo55Sf5oiQ55qE77yaJywgcmVhc29uKTtcblx0XHRcdFx0XHRpZiAocmVhc29uID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRwYWdlLmdldFN0YXR1c0VsZW1lbnQoKS53YXJuKCfmsqHmnInmiafooYzliKDpmaQnKTtcblx0XHRcdFx0XHRcdFR3aW5rbGUuY2xvc2UuY2FsbGJhY2tzLnRhbGtlbmQocGFyYW1zKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cGFnZS5zZXRFZGl0U3VtbWFyeShyZWFzb24pO1xuXHRcdFx0XHRcdFx0cGFnZS5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRcdFx0XHRwYWdlLmRlbGV0ZVBhZ2UoKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRwYWdlLmdldFN0YXR1c0VsZW1lbnQoKS5pbmZvKCflrozmiJAnKTtcblx0XHRcdFx0XHRcdFx0VHdpbmtsZS5jbG9zZS5jYWxsYmFja3MudGFsa2VuZChwYXJhbXMpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHBhZ2Uuc2V0RWRpdFN1bW1hcnkoYOWtmOW6n+iuqOiuuumAmui/h++8mltbJHttdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJyl9IyR7cGFyYW1zLnRpdGxlfV1dYCk7XG5cdFx0XHRcdHBhZ2Uuc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0XHRwYWdlLmRlbGV0ZVBhZ2UoKCkgPT4ge1xuXHRcdFx0XHRcdHBhZ2UuZ2V0U3RhdHVzRWxlbWVudCgpLmluZm8oJ+WujOaIkCcpO1xuXHRcdFx0XHRcdFR3aW5rbGUuY2xvc2UuY2FsbGJhY2tzLnRhbGtlbmQocGFyYW1zKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocGFyYW1zLnJlZGlyZWN0cykge1xuXHRcdFx0XHRxdWVyeSA9IHtcblx0XHRcdFx0XHRhY3Rpb246ICdxdWVyeScsXG5cdFx0XHRcdFx0dGl0bGVzOiBwYXJhbXMudGl0bGUsXG5cdFx0XHRcdFx0cHJvcDogJ3JlZGlyZWN0cycsXG5cdFx0XHRcdFx0cmRsaW1pdDogJ21heCcsIC8vIDUwMCBpcyBtYXggZm9yIG5vcm1hbCB1c2VycywgNTAwMCBmb3IgYm90cyBhbmQgc3lzb3BzXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0eXNhcmNoaXZlc19hcGkgPSBuZXcgTW9yZWJpdHMud2lraS5hcGkoXG5cdFx0XHRcdFx0J+ato+WcqOiOt+WPlumHjeWumuWQkScsXG5cdFx0XHRcdFx0cXVlcnksXG5cdFx0XHRcdFx0VHdpbmtsZS5jbG9zZS5jYWxsYmFja3MuZGVsZXRlUmVkaXJlY3RzTWFpblxuXHRcdFx0XHQpO1xuXHRcdFx0XHR5c2FyY2hpdmVzX2FwaS5wYXJhbXMgPSBwYXJhbXM7XG5cdFx0XHRcdHlzYXJjaGl2ZXNfYXBpLnBvc3QoKTtcblx0XHRcdH1cblx0XHRcdGlmIChwYXJhbXMudGFsa1BhZ2UpIHtcblx0XHRcdFx0Y29uc3QgcGFnZVRpdGxlID0gbXcuVGl0bGUubmV3RnJvbVRleHQocGFyYW1zLnRpdGxlKTtcblx0XHRcdFx0aWYgKHBhZ2VUaXRsZSAmJiBwYWdlVGl0bGUubmFtZXNwYWNlICUgMiA9PT0gMCAmJiBwYWdlVGl0bGUubmFtZXNwYWNlICE9PSAyKSB7XG5cdFx0XHRcdFx0cGFnZVRpdGxlLm5hbWVzcGFjZSsrOyAvLyBub3cgcGFnZVRpdGxlIGlzIHRoZSB0YWxrIHBhZ2UgdGl0bGUhXG5cdFx0XHRcdFx0cXVlcnkgPSB7XG5cdFx0XHRcdFx0XHRhY3Rpb246ICdxdWVyeScsXG5cdFx0XHRcdFx0XHR0aXRsZXM6IHBhZ2VUaXRsZS50b1RleHQoKSxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdHlzYXJjaGl2ZXNfYXBpID0gbmV3IE1vcmViaXRzLndpa2kuYXBpKFxuXHRcdFx0XHRcdFx0J+ato+WcqOajgOafpeiuqOiuuumhtemdouaYr+WQpuWtmOWcqCcsXG5cdFx0XHRcdFx0XHRxdWVyeSxcblx0XHRcdFx0XHRcdFR3aW5rbGUuY2xvc2UuY2FsbGJhY2tzLmRlbGV0ZVRhbGtcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHlzYXJjaGl2ZXNfYXBpLnBhcmFtcyA9IHBhcmFtcztcblx0XHRcdFx0XHR5c2FyY2hpdmVzX2FwaS5hcGlvYmoucGFyYW1zLnRhbGtQYWdlID0gcGFnZVRpdGxlLnRvVGV4dCgpO1xuXHRcdFx0XHRcdHlzYXJjaGl2ZXNfYXBpLnBvc3QoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0TW9yZWJpdHMud2lraS5yZW1vdmVDaGVja3BvaW50KCk7XG5cdFx0fSxcblx0XHRkZWxldGVSZWRpcmVjdHNNYWluOiAoYXBpb2JqKSA9PiB7XG5cdFx0XHRjb25zdCB4bWwgPSBhcGlvYmoucmVzcG9uc2VYTUw7XG5cdFx0XHRjb25zdCBwYWdlcyA9ICQoeG1sKVxuXHRcdFx0XHQuZmluZCgncmQnKVxuXHRcdFx0XHQubWFwKChfaW5kZXgsIGVsZW1lbnQpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gJChlbGVtZW50KS5hdHRyKCd0aXRsZScpO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQuZ2V0KCk7XG5cdFx0XHRpZiAocGFnZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGNvbnN0IHJlZGlyZWN0RGVsZXRlciA9IG5ldyBNb3JlYml0cy5iYXRjaE9wZXJhdGlvbihcblx0XHRcdFx0d2luZG93LndnVUxTKCfmraPlnKjliKDpmaTliLAgJywgJ+ato+WcqOWIqumZpOWIsCAnKSArXG5cdFx0XHRcdFx0YXBpb2JqLnBhcmFtcy50aXRsZSArXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCcg55qE6YeN5a6a5ZCRJywgJyDnmoTph43mlrDlsI7lkJEnKVxuXHRcdFx0KTtcblx0XHRcdHJlZGlyZWN0RGVsZXRlci5zZXRPcHRpb24oJ2NodW5rU2l6ZScsIFR3aW5rbGUuZ2V0UHJlZignYmF0Y2hkZWxldGVDaHVua3MnKSk7XG5cdFx0XHRyZWRpcmVjdERlbGV0ZXIuc2V0UGFnZUxpc3QocGFnZXMpO1xuXHRcdFx0cmVkaXJlY3REZWxldGVyLnJ1bigocGFnZU5hbWUpID0+IHtcblx0XHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0XHRwYWdlTmFtZSxcblx0XHRcdFx0XHR3aW5kb3cud2dVTFMoJ+ato+WcqOWIoOmZpCAnLCAn5q2j5Zyo5Yiq6ZmkICcpICsgcGFnZU5hbWVcblx0XHRcdFx0KTtcblx0XHRcdFx0eXNhcmNoaXZlc19wYWdlLnNldEVkaXRTdW1tYXJ5KFxuXHRcdFx0XHRcdGBbW0xJQjpDU0QjRzV8RzVdXe+8miR7d2luZG93LndnVUxTKCfmjIflkJHlt7LliKDpobXpnaLigJwnLCAn5oyH5ZCR5bey5Yiq6aCB6Z2i44CMJyl9JHthcGlvYmoucGFyYW1zLnRpdGxlfSR7d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+KAneeahOmHjeWumuWQkScsXG5cdFx0XHRcdFx0XHQn44CN55qE6YeN5paw5bCO5ZCRJ1xuXHRcdFx0XHRcdCl9YFxuXHRcdFx0XHQpO1xuXHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2Uuc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0XHR5c2FyY2hpdmVzX3BhZ2UuZGVsZXRlUGFnZShyZWRpcmVjdERlbGV0ZXIud29ya2VyU3VjY2VzcywgcmVkaXJlY3REZWxldGVyLndvcmtlckZhaWx1cmUpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRkZWxldGVUYWxrOiAoYXBpb2JqKSA9PiB7XG5cdFx0XHRjb25zdCB4bWwgPSBhcGlvYmoucmVzcG9uc2VYTUw7XG5cdFx0XHRjb25zdCBleGlzdHMgPSAkKHhtbCkuZmluZCgncGFnZTpub3QoW21pc3NpbmddKScpLmxlbmd0aCA+IDA7XG5cdFx0XHRpZiAoIWV4aXN0cykge1xuXHRcdFx0XHQvLyBubyB0YWxrIHBhZ2U7IGZvcmdldCBhYm91dCBpdFxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBwYWdlID0gbmV3IE1vcmViaXRzLndpa2kucGFnZShcblx0XHRcdFx0YXBpb2JqLnBhcmFtcy50YWxrUGFnZSxcblx0XHRcdFx0d2luZG93LndnVUxTKCfmraPlnKjliKDpmaTpobXpnaIgJywgJ+ato+WcqOWIqumZpOmggemdoiAnKSArXG5cdFx0XHRcdFx0YXBpb2JqLnBhcmFtcy50aXRsZSArXG5cdFx0XHRcdFx0d2luZG93LndnVUxTKCcg55qE6K6o6K666aG1JywgJyDnmoToqI7oq5bpoIEnKVxuXHRcdFx0KTtcblx0XHRcdHBhZ2Uuc2V0RWRpdFN1bW1hcnkoXG5cdFx0XHRcdGBbW0xJQjpDU0QjRzV8RzVdXe+8miR7d2luZG93LndnVUxTKCflt7LliKDpobXpnaLigJwnLCAn5bey5Yiq6aCB6Z2i44CMJyl9JHthcGlvYmoucGFyYW1zLnRpdGxlfSR7d2luZG93LndnVUxTKFxuXHRcdFx0XHRcdCfigJ3nmoRbW0hlbHA66K6o6K666aG1fOiuqOiuuumhtV1dJyxcblx0XHRcdFx0XHQn44CN55qEW1tIZWxwOuiojuirlumggXzoqI7oq5bpoIFdXSdcblx0XHRcdFx0KX1gXG5cdFx0XHQpO1xuXHRcdFx0cGFnZS5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRwYWdlLmRlbGV0ZVBhZ2UoKTtcblx0XHR9LFxuXHRcdGtlZXA6IChwYWdlb2JqKSA9PiB7XG5cdFx0XHRjb25zdCBzdGF0ZWxlbSA9IHBhZ2VvYmouZ2V0U3RhdHVzRWxlbWVudCgpO1xuXHRcdFx0aWYgKCFwYWdlb2JqLmV4aXN0cygpKSB7XG5cdFx0XHRcdHN0YXRlbGVtLmVycm9yKCfpobXpnaLkuI3lrZjlnKjvvIzlj6/og73lt7LooqvliKDpmaQnKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgdGV4dCA9IHBhZ2VvYmouZ2V0UGFnZVRleHQoKTtcblx0XHRcdGNvbnN0IHBhcmFtcyA9IHBhZ2VvYmouZ2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKCk7XG5cdFx0XHRjb25zdCBwYWdldGl0bGUgPSBtdy5UaXRsZS5uZXdGcm9tVGV4dChwYXJhbXMudGl0bGUpO1xuXHRcdFx0aWYgKHBhZ2V0aXRsZS5nZXROYW1lc3BhY2VJZCgpICUgMiA9PT0gMCkge1xuXHRcdFx0XHRjb25zdCB0YWxrcGFnZXRpdGxlID0gbmV3IG13LlRpdGxlKHBhZ2V0aXRsZS5nZXRNYWluVGV4dCgpLCBwYWdldGl0bGUuZ2V0TmFtZXNwYWNlSWQoKSArIDEpO1xuXHRcdFx0XHRjb25zdCB0YWxrcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UoXG5cdFx0XHRcdFx0dGFsa3BhZ2V0aXRsZS50b1N0cmluZygpLFxuXHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5qCH6K6w6K6o6K666aG1JywgJ+aomeiomOiojuirlumggScpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGNvbnN0IHJlYXNvbiA9IHBhcmFtcy5tZXNzYWdlRGF0YS52YWx1ZSB8fCBwYXJhbXMubWVzc2FnZURhdGEubGFiZWw7XG5cdFx0XHRcdGNvbnN0IHZmZGtlcHQgPSBge3tPbGQgdmZkIG11bHRpfCR7bXcuY29uZmlnXG5cdFx0XHRcdFx0LmdldCgnd2dQYWdlTmFtZScpXG5cdFx0XHRcdFx0LnNwbGl0KCcvJylcblx0XHRcdFx0XHQuc2xpY2UoMilcblx0XHRcdFx0XHQuam9pbignLycpfXwke3JlYXNvbn19fVxcbmA7XG5cdFx0XHRcdHRhbGtwYWdlLnNldFByZXBlbmRUZXh0KHZmZGtlcHQpO1xuXHRcdFx0XHR0YWxrcGFnZS5zZXRFZGl0U3VtbWFyeShgW1ske213LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKX0jJHtwYXJhbXMudGl0bGV9XV3vvJoke3JlYXNvbn1gKTtcblx0XHRcdFx0dGFsa3BhZ2Uuc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0XHR0YWxrcGFnZS5zZXRDcmVhdGVPcHRpb24oJ3JlY3JlYXRlJyk7XG5cdFx0XHRcdHRhbGtwYWdlLnByZXBlbmQoKTtcblx0XHRcdH1cblx0XHRcdGxldCBuZXd0ZXh0ID0gdGV4dC5yZXBsYWNlKFxuXHRcdFx0XHQvPG5vaW5jbHVkZT5cXHMqXFx7XFx7KFtyc2FpZnRjbXZdZmQpKFxcfCg/Olxce1xce1tee31dKlxcfVxcfXxbXnt9XSkqKT9cXH1cXH1cXHMqPFxcL25vaW5jbHVkZT5cXHMqL2dpLFxuXHRcdFx0XHQnJ1xuXHRcdFx0KTtcblx0XHRcdG5ld3RleHQgPSBuZXd0ZXh0LnJlcGxhY2UoL1xce1xceyhbcnNhaWZ0Y212XWZkKShcXHwoPzpcXHtcXHtbXnt9XSpcXH1cXH18W157fV0pKik/XFx9XFx9XFxzKi9naSwgJycpO1xuXHRcdFx0aWYgKHBhcmFtcy5jb2RlICE9PSAndGsnKSB7XG5cdFx0XHRcdG5ld3RleHQgPSBuZXd0ZXh0LnJlcGxhY2UoXG5cdFx0XHRcdFx0L3t7KG5vdGFiaWxpdHl8ZmFtZXxtYWlyfOefpeWQjeW6pnzph43opoHmgKd85pi+6JGX5oCnfOmhr+iRl+aAp3znn6XlkI3luqbkuI3otrN85Lq654mp6YeN6KaB5oCnfOmHjeimgeaAp+S4jei2s3xub3RhYmxlfOWFs+azqOW6pnzlhbPms6jluqbkuI3otrN86Zec5rOo5bqmfOmXnOazqOW6puS4jei2s3zph43opoF86YeN6KaB5bqmKShcXHwoPzp7e1tee31dKn19fFtee31dKSopP319XFxuKi9naSxcblx0XHRcdFx0XHQnJ1xuXHRcdFx0XHQpO1xuXHRcdFx0XHRuZXd0ZXh0ID0gbmV3dGV4dC5yZXBsYWNlKFxuXHRcdFx0XHRcdC97eyhzdWJzdHVifOWwj+Wwj+S9nOWTgXxjb2R85bCP5bCP5qKd55uufOWwj+Wwj+adoeebrikoXFx8KD86e3tbXnt9XSp9fXxbXnt9XSkqKT99fVxcbiovZ2ksXG5cdFx0XHRcdFx0Jydcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdGlmIChwYXJhbXMuY29kZSA9PT0gJ21lcmdlYXBwcm92ZWQnKSB7XG5cdFx0XHRcdGNvbnN0IHRhZyA9ICd7eydcblx0XHRcdFx0XHQuY29uY2F0KCdzdWJzdDonKVxuXHRcdFx0XHRcdC5jb25jYXQoYE1lcmdlIGFwcHJvdmVkL2F1dG98ZGlzY3Vzcz0ke213LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKX0jJHtwYXJhbXMudGl0bGV9fX1cXG5gKTtcblx0XHRcdFx0Ly8gSW5zZXJ0IHRhZyBhZnRlciBzaG9ydCBkZXNjcmlwdGlvbiBvciBhbnkgaGF0bm90ZXNcblx0XHRcdFx0Y29uc3QgeXNhcmNoaXZlc19wYWdlID0gbmV3IE1vcmViaXRzLndpa2l0ZXh0LnBhZ2UobmV3dGV4dCk7XG5cdFx0XHRcdG5ld3RleHQgPSB5c2FyY2hpdmVzX3BhZ2UuaW5zZXJ0QWZ0ZXJUZW1wbGF0ZXModGFnLCBUd2lua2xlLmhhdG5vdGVSZWdleCkuZ2V0VGV4dCgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG5ld3RleHQgPT09IHRleHQpIHtcblx0XHRcdFx0c3RhdGVsZW0ud2Fybign5pyq5om+5Yiw5a2Y5bqf6K6o6K665qih5p2/77yM5Y+v6IO95bey6KKr56e76ZmkJyk7XG5cdFx0XHRcdFR3aW5rbGUuY2xvc2UuY2FsbGJhY2tzLnRhbGtlbmQocGFyYW1zKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgZWRpdHN1bW1hcnkgPSBg5a2Y5bqf6K6o6K665YWz6Zet77yaW1ske213LmNvbmZpZy5nZXQoJ3dnUGFnZU5hbWUnKX0jJHtwYXJhbXMudGl0bGV9XV1gO1xuXHRcdFx0cGFnZW9iai5zZXRQYWdlVGV4dChuZXd0ZXh0KTtcblx0XHRcdHBhZ2VvYmouc2V0RWRpdFN1bW1hcnkoZWRpdHN1bW1hcnkpO1xuXHRcdFx0cGFnZW9iai5zZXRDaGFuZ2VUYWdzKFR3aW5rbGUuY2hhbmdlVGFncyk7XG5cdFx0XHRwYWdlb2JqLnNldENyZWF0ZU9wdGlvbignbm9jcmVhdGUnKTtcblx0XHRcdHBhZ2VvYmouc2F2ZShUd2lua2xlLmNsb3NlLmNhbGxiYWNrcy5rZWVwQ29tcGxldGUpO1xuXHRcdH0sXG5cdFx0a2VlcENvbXBsZXRlOiAocGFnZW9iaikgPT4ge1xuXHRcdFx0Y29uc3QgcGFyYW1zID0gcGFnZW9iai5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHRcdFR3aW5rbGUuY2xvc2UuY2FsbGJhY2tzLnRhbGtlbmQocGFyYW1zKTtcblx0XHR9LFxuXHRcdHRhbGtlbmQ6IChwYXJhbXMpID0+IHtcblx0XHRcdGNvbnN0IHlzYXJjaGl2ZXNfcGFnZSA9IG5ldyBNb3JlYml0cy53aWtpLnBhZ2UobXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLCAn5YWz6Zet6K6o6K66Jyk7XG5cdFx0XHR5c2FyY2hpdmVzX3BhZ2Uuc2V0Q2FsbGJhY2tQYXJhbWV0ZXJzKHBhcmFtcyk7XG5cdFx0XHR5c2FyY2hpdmVzX3BhZ2Uuc2V0UGFnZVNlY3Rpb24ocGFyYW1zLnNlY3Rpb24pO1xuXHRcdFx0eXNhcmNoaXZlc19wYWdlLmxvYWQoVHdpbmtsZS5jbG9zZS5jYWxsYmFja3Muc2F2ZVRhbGspO1xuXHRcdH0sXG5cdFx0c2F2ZVRhbGs6IChwYWdlb2JqKSA9PiB7XG5cdFx0XHRjb25zdCBzdGF0ZWxlbSA9IHBhZ2VvYmouZ2V0U3RhdHVzRWxlbWVudCgpO1xuXHRcdFx0bGV0IHRleHQgPSBwYWdlb2JqLmdldFBhZ2VUZXh0KCk7XG5cdFx0XHRjb25zdCBwYXJhbXMgPSBwYWdlb2JqLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0aWYgKHRleHQuaW5jbHVkZXMoJ3t7ZGVsaCcpKSB7XG5cdFx0XHRcdHN0YXRlbGVtLmVycm9yKCforqjorrrlt7LooqvlhbPpl60nKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3Qgc2JlZ2luID0gdGV4dC5pbmNsdWRlcygnPHNlY3Rpb24gYmVnaW49YmFja2xvZyAvPicpO1xuXHRcdFx0Y29uc3Qgc2VuZCA9IHRleHQuaW5jbHVkZXMoJzxzZWN0aW9uIGVuZD1iYWNrbG9nIC8+Jyk7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCdcXG48c2VjdGlvbiBiZWdpbj1iYWNrbG9nIC8+JywgJycpO1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSgnXFxuPHNlY3Rpb24gZW5kPWJhY2tsb2cgLz4nLCAnJyk7XG5cdFx0XHRjb25zdCBiYXIgPSB0ZXh0LnNwbGl0KCdcXG4tLS0tXFxuJyk7XG5cdFx0XHRjb25zdCBzcGxpdCA9IGJhclswXS5zcGxpdCgnXFxuJyk7XG5cdFx0XHR0ZXh0ID0gYCR7c3BsaXRbMF19XFxue3tkZWxofCR7cGFyYW1zLmNvZGV9fX1cXG5gO1xuXHRcdFx0dGV4dCArPSBzcGxpdC5zbGljZSgxKS5qb2luKCdcXG4nKTtcblx0XHRcdGNvbnN0IHJlYXNvbiA9IHBhcmFtcy5tZXNzYWdlRGF0YS52YWx1ZSB8fCBwYXJhbXMubWVzc2FnZURhdGEubGFiZWw7XG5cdFx0XHR0ZXh0ICs9IGBcXG48aHI+XFxuOiAke3JlYXNvbn1gO1xuXHRcdFx0aWYgKHBhcmFtcy5yZW1hcmspIHtcblx0XHRcdFx0dGV4dCArPSBg77yaJHtNb3JlYml0cy5zdHJpbmcuYXBwZW5kUHVuY3R1YXRpb24ocGFyYW1zLnJlbWFyayl9YDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRleHQgKz0gJ+OAgic7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIU1vcmViaXRzLnVzZXJJc1N5c29wKSB7XG5cdFx0XHRcdHRleHQgKz0gJ3t7Jy5jb25jYXQoJ3N1YnN0OicpLmNvbmNhdCgnTkFDfX0nKTtcblx0XHRcdH1cblx0XHRcdHRleHQgKz0gJy0tfn4nLmNvbmNhdCgnfn4nLCAnXFxue3tkZWxmfX0nKTtcblx0XHRcdGlmIChiYXJbMV0pIHtcblx0XHRcdFx0dGV4dCArPSBgXFxuLS0tLVxcbiR7YmFyLnNsaWNlKDEpLmpvaW4oJ1xcbi0tLS1cXG4nKX1gO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNlbmQpIHtcblx0XHRcdFx0dGV4dCArPSAnXFxuPHNlY3Rpb24gZW5kPWJhY2tsb2cgLz4nO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNiZWdpbikge1xuXHRcdFx0XHQvLyBndWFyYW50ZWVkIHRvIGJlIGF0IHRuZSBlbmQ/XG5cdFx0XHRcdHRleHQgKz0gJ1xcbjxzZWN0aW9uIGJlZ2luPWJhY2tsb2cgLz4nO1xuXHRcdFx0fVxuXHRcdFx0cGFnZW9iai5zZXRQYWdlVGV4dCh0ZXh0KTtcblx0XHRcdHBhZ2VvYmouc2V0RWRpdFN1bW1hcnkoYC8qICR7cGFyYW1zLnRpdGxlfSAqLyAke3JlYXNvbn1gKTtcblx0XHRcdHBhZ2VvYmouc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdFx0cGFnZW9iai5zZXRDcmVhdGVPcHRpb24oJ25vY3JlYXRlJyk7XG5cdFx0XHRwYWdlb2JqLnNhdmUoVHdpbmtsZS5jbG9zZS5jYWxsYmFja3MuZGlzYWJsZUxpbmspO1xuXHRcdH0sXG5cdFx0ZGlzYWJsZUxpbms6IChwYWdlb2JqKSA9PiB7XG5cdFx0XHRjb25zdCBwYXJhbXMgPSBwYWdlb2JqLmdldENhbGxiYWNrUGFyYW1ldGVycygpO1xuXHRcdFx0JChgc3Ryb25nIGFbaHJlZj0jJHtwYXJhbXMuc2VjdGlvbn1dIHNwYW5gKS5jc3MoJ2NvbG9yJywgJyM4MDgwODAnKTtcblx0XHR9LFxuXHR9O1xuXHRUd2lua2xlLmFkZEluaXRDYWxsYmFjayhUd2lua2xlLmNsb3NlLCAnY2xvc2UnKTtcbn0pKGpRdWVyeSk7XG5cbmV4cG9ydCB7fTtcbiIsICIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4vLyBAdHMtbm9jaGVja1xuXG4vKiEgVHdpbmtsZS5qcyAtIHR3aW5rbGVjb25maWcuanMgKi9cbihmdW5jdGlvbiB0d2lua2xlY29uZmlnKCQpIHtcblx0Y29uc3QgJGJvZHkgPSAkKCdib2R5Jyk7XG5cdC8qKlxuXHQgKiB0d2lua2xlY29uZmlnLmpzOiBQcmVmZXJlbmNlcyBtb2R1bGVcblx0ICogTW9kZSBvZiBpbnZvY2F0aW9uOiBBZGRzIGNvbmZpZ3VyYXRpb24gZm9ybSB0byBIZWxwOlR3aW5rbGUv5Y+C5pWw6K6+572uLFxuXHQgKiBhbmQgYWRkcyBhbiBhZCBib3ggdG8gdGhlIHRvcCBvZiB1c2VyIHN1YnBhZ2VzIGJlbG9uZ2luZyB0byB0aGVcblx0ICogY3VycmVudGx5IGxvZ2dlZC1pbiB1c2VyIHdoaWNoIGVuZCBpbiAnLmpzJ1xuXHQgKiBBY3RpdmUgb246IFdoYXQgSSBqdXN0IHNhaWQuIFllYWguXG5cdCAqL1xuXHRUd2lua2xlLmNvbmZpZyA9IHt9O1xuXHRUd2lua2xlLmNvbmZpZy53YXRjaGxpc3RFbnVtcyA9IHtcblx0XHR5ZXM6IHdpbmRvdy53Z1VMUygn5rC45LmF5Yqg5YWl5Yiw55uR6KeG5YiX6KGoJywgJ+awuOS5heWKoOWFpeWIsOebo+imlua4heWWricpLFxuXHRcdG5vOiB3aW5kb3cud2dVTFMoJ+S4jeWKoOWFpeWIsOebkeinhuWIl+ihqCcsICfkuI3liqDlhaXliLDnm6PoppbmuIXllq4nKSxcblx0XHRkZWZhdWx0OiB3aW5kb3cud2dVTFMoJ+mBteWuiOermeeCueiuvue9ricsICfpgbXlrojnq5npu57oqK3lrponKSxcblx0XHQnMSB3ZWVrJzogd2luZG93LndnVUxTKCfliqDlhaXliLDnm5Hop4bliJfooagx5ZGoJywgJ+WKoOWFpeWIsOebo+imlua4heWWrjHpgLEnKSxcblx0XHQnMSBtb250aCc6IHdpbmRvdy53Z1VMUygn5Yqg5YWl5Yiw55uR6KeG5YiX6KGoMeS4quaciCcsICfliqDlhaXliLDnm6PoppbmuIXllq4x5YCL5pyIJyksXG5cdFx0JzMgbW9udGhzJzogd2luZG93LndnVUxTKCfliqDlhaXliLDnm5Hop4bliJfooagz5Liq5pyIJywgJ+WKoOWFpeWIsOebo+imlua4heWWrjPlgIvmnIgnKSxcblx0XHQnNiBtb250aHMnOiB3aW5kb3cud2dVTFMoJ+WKoOWFpeWIsOebkeinhuWIl+ihqDbkuKrmnIgnLCAn5Yqg5YWl5Yiw55uj6KaW5riF5ZauNuWAi+aciCcpLFxuXHR9O1xuXHRUd2lua2xlLmNvbmZpZy5jb21tb25TZXRzID0ge1xuXHRcdGNzZENyaXRlcmlhOiB7XG5cdFx0XHRkYjogd2luZG93LndnVUxTKCfoh6rlrprkuYnnkIbnlLEnLCAn6Ieq6KiC55CG55SxJyksXG5cdFx0XHRnMTogJ0cxJyxcblx0XHRcdGcyOiAnRzInLFxuXHRcdFx0ZzM6ICdHMycsXG5cdFx0XHRnNDogJ0c0Jyxcblx0XHRcdGc1OiAnRzUnLFxuXHRcdFx0ZzY6ICdHNicsXG5cdFx0XHRnNzogJ0c3Jyxcblx0XHRcdGc4OiAnRzgnLFxuXHRcdFx0Zzk6ICdHOScsXG5cdFx0XHRhMTogJ0ExJyxcblx0XHRcdGEyOiAnQTInLFxuXHRcdFx0YTM6ICdBMycsXG5cdFx0XHRvMTogJ08xJyxcblx0XHRcdG8yOiAnTzInLFxuXHRcdFx0bzM6ICdPMycsXG5cdFx0XHRmMTogJ0YxJyxcblx0XHRcdGYyOiAnRjInLFxuXHRcdFx0ZjM6ICdGMycsXG5cdFx0XHRmNDogJ0Y0Jyxcblx0XHRcdGY1OiAnRjUnLFxuXHRcdFx0cjE6ICdSMScsXG5cdFx0XHRyMjogJ1IyJyxcblx0XHR9LFxuXHRcdGNzZENyaXRlcmlhRGlzcGxheU9yZGVyOiBbXG5cdFx0XHQnZGInLFxuXHRcdFx0J2cxJyxcblx0XHRcdCdnMicsXG5cdFx0XHQnZzMnLFxuXHRcdFx0J2c0Jyxcblx0XHRcdCdnNScsXG5cdFx0XHQnZzYnLFxuXHRcdFx0J2c3Jyxcblx0XHRcdCdnOCcsXG5cdFx0XHQnZzknLFxuXHRcdFx0J2ExJyxcblx0XHRcdCdhMicsXG5cdFx0XHQnYTMnLFxuXHRcdFx0J28xJyxcblx0XHRcdCdvMicsXG5cdFx0XHQnbzMnLFxuXHRcdFx0J2YxJyxcblx0XHRcdCdmMicsXG5cdFx0XHQnZjMnLFxuXHRcdFx0J2Y0Jyxcblx0XHRcdCdmNScsXG5cdFx0XHQncjEnLFxuXHRcdFx0J3IyJyxcblx0XHRdLFxuXHRcdGNzZENyaXRlcmlhTm90aWZpY2F0aW9uOiB7XG5cdFx0XHRkYjogd2luZG93LndnVUxTKCfoh6rlrprkuYnnkIbnlLEnLCAn6Ieq6KiC55CG55SxJyksXG5cdFx0XHRnMTogJ0cxJyxcblx0XHRcdGcyOiAnRzInLFxuXHRcdFx0ZzM6ICdHMycsXG5cdFx0XHRnNDogJ0c0Jyxcblx0XHRcdGc1OiAnRzUnLFxuXHRcdFx0ZzY6ICdHNicsXG5cdFx0XHRnNzogJ0c3Jyxcblx0XHRcdGc4OiAnRzgnLFxuXHRcdFx0Zzk6ICdHOScsXG5cdFx0XHRhMTogJ0ExJyxcblx0XHRcdGEyOiAnQTInLFxuXHRcdFx0YTM6ICdBMycsXG5cdFx0XHRvMTogJ08xJyxcblx0XHRcdG8yOiAnTzInLFxuXHRcdFx0bzM6ICdPMycsXG5cdFx0XHRmMTogJ0YxJyxcblx0XHRcdGYyOiAnRjInLFxuXHRcdFx0ZjM6ICdGMycsXG5cdFx0XHRmNDogJ0Y0Jyxcblx0XHRcdGY1OiAnRjUnLFxuXHRcdFx0cjE6ICdSMScsXG5cdFx0XHRyMjogJ1IyJyxcblx0XHR9LFxuXHRcdGNzZENyaXRlcmlhTm90aWZpY2F0aW9uRGlzcGxheU9yZGVyOiBbXG5cdFx0XHQnZGInLFxuXHRcdFx0J2cxJyxcblx0XHRcdCdnMicsXG5cdFx0XHQnZzMnLFxuXHRcdFx0J2c0Jyxcblx0XHRcdCdnNScsXG5cdFx0XHQnZzYnLFxuXHRcdFx0J2c3Jyxcblx0XHRcdCdnOCcsXG5cdFx0XHQnZzknLFxuXHRcdFx0J2ExJyxcblx0XHRcdCdhMicsXG5cdFx0XHQnYTMnLFxuXHRcdFx0J28xJyxcblx0XHRcdCdvMicsXG5cdFx0XHQnbzMnLFxuXHRcdFx0J2YxJyxcblx0XHRcdCdmMicsXG5cdFx0XHQnZjMnLFxuXHRcdFx0J2Y0Jyxcblx0XHRcdCdmNScsXG5cdFx0XHQncjEnLFxuXHRcdFx0J3IyJyxcblx0XHRdLFxuXHRcdGNzZEFuZERJQ3JpdGVyaWE6IHtcblx0XHRcdGRiOiB3aW5kb3cud2dVTFMoJ+iHquWumuS5ieeQhueUsScsICfoh6roqILnkIbnlLEnKSxcblx0XHRcdGcxOiAnRzEnLFxuXHRcdFx0ZzI6ICdHMicsXG5cdFx0XHRnMzogJ0czJyxcblx0XHRcdGc0OiAnRzQnLFxuXHRcdFx0ZzU6ICdHNScsXG5cdFx0XHRnNjogJ0c2Jyxcblx0XHRcdGc3OiAnRzcnLFxuXHRcdFx0Zzg6ICdHOCcsXG5cdFx0XHRnOTogJ0c5Jyxcblx0XHRcdGExOiAnQTEnLFxuXHRcdFx0YTI6ICdBMicsXG5cdFx0XHRhMzogJ0EzJyxcblx0XHRcdG8xOiAnTzEnLFxuXHRcdFx0bzI6ICdPMicsXG5cdFx0XHRvMzogJ08zJyxcblx0XHRcdGYxOiAnRjEnLFxuXHRcdFx0ZjI6ICdGMicsXG5cdFx0XHRmMzogJ0YzJyxcblx0XHRcdGY0OiAnRjQnLFxuXHRcdFx0ZjU6ICdGNScsXG5cdFx0XHRyMTogJ1IxJyxcblx0XHRcdHIyOiAnUjInLFxuXHRcdH0sXG5cdFx0Y3NkQW5kRElDcml0ZXJpYURpc3BsYXlPcmRlcjogW1xuXHRcdFx0J2RiJyxcblx0XHRcdCdnMScsXG5cdFx0XHQnZzInLFxuXHRcdFx0J2czJyxcblx0XHRcdCdnNCcsXG5cdFx0XHQnZzUnLFxuXHRcdFx0J2c2Jyxcblx0XHRcdCdnNycsXG5cdFx0XHQnZzgnLFxuXHRcdFx0J2c5Jyxcblx0XHRcdCdhMScsXG5cdFx0XHQnYTInLFxuXHRcdFx0J2EzJyxcblx0XHRcdCdvMScsXG5cdFx0XHQnbzInLFxuXHRcdFx0J28zJyxcblx0XHRcdCdmMScsXG5cdFx0XHQnZjInLFxuXHRcdFx0J2YzJyxcblx0XHRcdCdmNCcsXG5cdFx0XHQnZjUnLFxuXHRcdFx0J3IxJyxcblx0XHRcdCdyMicsXG5cdFx0XSxcblx0XHR4ZmRDcml0ZXJpYToge1xuXHRcdFx0ZGVsZXRlOiB3aW5kb3cud2dVTFMoJ+WIoOmZpCcsICfliKrpmaQnKSxcblx0XHRcdG1lcmdlOiB3aW5kb3cud2dVTFMoJ+WQiOW5ticsICflkIjkvbUnKSxcblx0XHRcdGZ3ZGNzZDogd2luZG93LndnVUxTKCfovazkuqToh6rlv6vpgJ/liKDpmaTlgJnpgIknLCAn6L2J5Lqk6Ieq5b+r6YCf5Yiq6Zmk5YCZ6YG4JyksXG5cdFx0XHRmYW1lOiB3aW5kb3cud2dVTFMoJ+aJuemHj+WFs+azqOW6puaPkOWIoCcsICfmibnmrKHpl5zms6jluqbmj5DliKonKSxcblx0XHRcdHN1YnN0dWI6IHdpbmRvdy53Z1VMUygn5om56YeP5bCP5bCP5L2c5ZOB5o+Q5YigJywgJ+aJueasoeWwj+Wwj+S9nOWTgeaPkOWIqicpLFxuXHRcdFx0YmF0Y2g6IHdpbmRvdy53Z1VMUygn5om56YeP5YW25LuW5o+Q5YigJywgJ+aJueasoeWFtuS7luaPkOWIqicpLFxuXHRcdH0sXG5cdFx0eGZkQ3JpdGVyaWFEaXNwbGF5T3JkZXI6IFsnZGVsZXRlJywgJ21lcmdlJywgJ2Z3ZGNzZCcsICdmYW1lJywgJ3N1YnN0dWInLCAnYmF0Y2gnXSxcblx0XHRuYW1lc3BhY2VzTm9TcGVjaWFsOiB7XG5cdFx0XHQwOiB3aW5kb3cud2dVTFMoJ++8iOadoeebru+8iScsICfvvIjmop3nm67vvIknKSxcblx0XHRcdDE6ICdUYWxrJyxcblx0XHRcdDI6ICdVc2VyJyxcblx0XHRcdDM6ICdVc2VyIHRhbGsnLFxuXHRcdFx0NDogJ0xJQicsXG5cdFx0XHQ1OiAnTElCIHRhbGsnLFxuXHRcdFx0NjogJ0ZpbGUnLFxuXHRcdFx0NzogJ0ZpbGUgdGFsaycsXG5cdFx0XHQ4OiAnTWVkaWFXaWtpJyxcblx0XHRcdDk6ICdNZWRpYVdpa2kgdGFsaycsXG5cdFx0XHQxMDogJ1RlbXBsYXRlJyxcblx0XHRcdDExOiAnVGVtcGxhdGUgdGFsaycsXG5cdFx0XHQxMjogJ0hlbHAnLFxuXHRcdFx0MTM6ICdIZWxwIHRhbGsnLFxuXHRcdFx0MTQ6ICdDYXRlZ29yeScsXG5cdFx0XHQxNTogJ0NhdGVnb3J5IHRhbGsnLFxuXHRcdFx0Mjc0OiAnV2lkZ2V0Jyxcblx0XHRcdDI3NTogJ1dpZGdldCB0YWxrJyxcblx0XHRcdDMwMDogJ0Zhbm1hZGUnLFxuXHRcdFx0MzAxOiAnRmFubWFkZSB0YWxrJyxcblx0XHRcdDMwMjogJ0RyYWZ0Jyxcblx0XHRcdDMwMzogJ0RyYWZ0IHRhbGsnLFxuXHRcdFx0MzA0OiAnU01XRGF0YScsXG5cdFx0XHQzMDU6ICdTTVdEYXRhIHRhbGsnLFxuXHRcdFx0ODI4OiAnTW9kdWxlJyxcblx0XHRcdDgyOTogJ01vZHVsZSB0YWxrJyxcblx0XHR9LFxuXHR9O1xuXHQvKipcblx0ICogU2VjdGlvbiBlbnRyeSBmb3JtYXQ6XG5cdCAqXG5cdCAqIHtcblx0ICogICB0aXRsZTogPGh1bWFuLXJlYWRhYmxlIHNlY3Rpb24gdGl0bGU+LFxuXHQgKiAgIG1vZHVsZTogPG5hbWUgb2YgdGhlIGFzc29jaWF0ZWQgbW9kdWxlLCB1c2VkIHRvIGxpbmsgdG8gc2VjdGlvbnM+LFxuXHQgKiAgIGFkbWluT25seTogPHRydWUgZm9yIGFkbWluLW9ubHkgc2VjdGlvbnM+LFxuXHQgKiAgIGhpZGRlbjogPHRydWUgZm9yIGFkdmFuY2VkIHByZWZlcmVuY2VzIHRoYXQgcmFyZWx5IG5lZWQgdG8gYmUgY2hhbmdlZCAtIHRoZXkgY2FuIHN0aWxsIGJlIG1vZGlmaWVkIGJ5IG1hbnVhbGx5IGVkaXRpbmcgdHdpbmtsZW9wdGlvbnMuanM+LFxuXHQgKiAgIHByZWZlcmVuY2VzOiBbXG5cdCAqICAgICB7XG5cdCAqICAgICAgIG5hbWU6IDxUd2lua2xlQ29uZmlnIHByb3BlcnR5IG5hbWU+LFxuXHQgKiAgICAgICBsYWJlbDogPGh1bWFuLXJlYWRhYmxlIHNob3J0IGRlc2NyaXB0aW9uIC0gdXNlZCBhcyBhIGZvcm0gbGFiZWw+LFxuXHQgKiAgICAgICBoZWxwdGlwOiA8KG9wdGlvbmFsKSBodW1hbi1yZWFkYWJsZSB0ZXh0ICh1c2luZyB2YWxpZCBIVE1MKSB0aGF0IGNvbXBsZW1lbnRzIHRoZSBkZXNjcmlwdGlvbiwgbGlrZSBsaW1pdHMsIHdhcm5pbmdzLCBldGMuPlxuXHQgKiAgICAgICBhZG1pbk9ubHk6IDx0cnVlIGZvciBhZG1pbi1vbmx5IHByZWZlcmVuY2VzPixcblx0ICogICAgICAgdHlwZTogPHN0cmluZ3xib29sZWFufGludGVnZXJ8ZW51bXxzZXR8Y3VzdG9tTGlzdD4gKGN1c3RvbUxpc3Qgc3RvcmVzIGFuIGFycmF5IG9mIEpTT04gb2JqZWN0cyB7IHZhbHVlLCBsYWJlbCB9KSxcblx0ICogICAgICAgZW51bVZhbHVlczogPGZvciB0eXBlID0gXCJlbnVtXCI6IGEgSlNPTiBvYmplY3Qgd2hlcmUgdGhlIGtleXMgYXJlIHRoZSBpbnRlcm5hbCBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgaHVtYW4tcmVhZGFibGUgc3RyaW5ncz4sXG5cdCAqICAgICAgIHNldFZhbHVlczogPGZvciB0eXBlID0gXCJzZXRcIjogYSBKU09OIG9iamVjdCB3aGVyZSB0aGUga2V5cyBhcmUgdGhlIGludGVybmFsIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSBodW1hbi1yZWFkYWJsZSBzdHJpbmdzPixcblx0ICogICAgICAgc2V0RGlzcGxheU9yZGVyOiA8KG9wdGlvbmFsKSBmb3IgdHlwZSA9IFwic2V0XCI6IGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGtleXMgb2Ygc2V0VmFsdWVzIChhcyBzdHJpbmdzKSBpbiB0aGUgb3JkZXIgdGhhdCB0aGV5IGFyZSBkaXNwbGF5ZWQ+LFxuXHQgKiAgICAgICBjdXN0b21MaXN0VmFsdWVUaXRsZTogPGZvciB0eXBlID0gXCJjdXN0b21MaXN0XCI6IHRoZSBoZWFkaW5nIGZvciB0aGUgbGVmdCBcInZhbHVlXCIgY29sdW1uIGluIHRoZSBjdXN0b20gbGlzdCBlZGl0b3I+LFxuXHQgKiAgICAgICBjdXN0b21MaXN0TGFiZWxUaXRsZTogPGZvciB0eXBlID0gXCJjdXN0b21MaXN0XCI6IHRoZSBoZWFkaW5nIGZvciB0aGUgcmlnaHQgXCJsYWJlbFwiIGNvbHVtbiBpbiB0aGUgY3VzdG9tIGxpc3QgZWRpdG9yPlxuXHQgKiAgICAgfSxcblx0ICogICAgIC4gLiAuXG5cdCAqICAgXVxuXHQgKiB9LFxuXHQgKiAuIC4gLlxuXHQgKlxuXHQgKi9cblx0VHdpbmtsZS5jb25maWcuc2VjdGlvbnMgPSBbXG5cdFx0e1xuXHRcdFx0dGl0bGU6IHdpbmRvdy53Z1VMUygn5bi46KeEJywgJ+W4uOimjycpLFxuXHRcdFx0bW9kdWxlOiAnZ2VuZXJhbCcsXG5cdFx0XHRwcmVmZXJlbmNlczogW1xuXHRcdFx0XHQvLyBUd2lua2xlQ29uZmlnLnVzZXJUYWxrUGFnZU1vZGUgbWF5IHRha2UgYXJndW1lbnRzOlxuXHRcdFx0XHQvLyAnd2luZG93Jzogb3BlbiBhIG5ldyB3aW5kb3csIHJlbWVtYmVyIHRoZSBvcGVuZWQgd2luZG93XG5cdFx0XHRcdC8vICd0YWInOiBvcGVucyBpbiBhIG5ldyB0YWIsIGlmIHBvc3NpYmxlLlxuXHRcdFx0XHQvLyAnYmxhbmsnOiBmb3JjZSBvcGVuIGluIGEgbmV3IHdpbmRvdywgZXZlbiBpZiBzdWNoIGEgd2luZG93IGV4aXN0c1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3VzZXJUYWxrUGFnZU1vZGUnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+W9k+imgeaJk+W8gOeUqOaIt+iuqOiuuumhteaXticsICfnlbbopoHmiZPplovkvb/nlKjogIXoqI7oq5bpoIHmmYInKSxcblx0XHRcdFx0XHR0eXBlOiAnZW51bScsXG5cdFx0XHRcdFx0ZW51bVZhbHVlczoge1xuXHRcdFx0XHRcdFx0d2luZG93OiB3aW5kb3cud2dVTFMoJ+WcqOeql+WPo+S4re+8jOabv+aNouaIkOWFtuWug+eUqOaIt+WvueivnemhtScsICflnKjnlbbliY3liIbpoIHvvIzmm7/mj5vmiJDlhbblroPnlKjmiLboqI7oq5bpoIEnKSxcblx0XHRcdFx0XHRcdHRhYjogd2luZG93LndnVUxTKCflnKjmlrDmoIfnrb7pobXkuK0nLCAn5Zyo5paw5YiG6aCB5LitJyksXG5cdFx0XHRcdFx0XHRibGFuazogd2luZG93LndnVUxTKCflnKjlhajmlrDnmoTnqpflj6PkuK0nLCAn5Zyo5paw6KaW56qX5LitJyksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy5kaWFsb2dMYXJnZUZvbnQgKGJvb2xlYW4pXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnZGlhbG9nTGFyZ2VGb250Jyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflnKhUd2lua2xl5a+56K+d5qGG5Lit5L2/55So5aSn5Y+35a2X5L2TJywgJ+WcqFR3aW5rbGXlsI3oqbHmlrnloYrkuK3kvb/nlKjlpKfomZ/lrZflnosnKSxcblx0XHRcdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGUuY29uZmlnLmRpc2FibGVkTW9kdWxlcyAoYXJyYXkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnZGlzYWJsZWRNb2R1bGVzJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflhbPpl63mjIflrprnmoRUd2lua2xl5qih5Z2XJywgJ+mXnOmWieaMh+WumueahFR3aW5rbGXmqKHntYQnKSxcblx0XHRcdFx0XHRoZWxwdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5oKo5Zyo5q2k6YCJ5oup55qE5Yqf6IO95bCG5peg5rOV5L2/55So77yM5Y+W5raI6YCJ5oup5Lul6YeN5paw5ZCv55So5Yqf6IO944CCJyxcblx0XHRcdFx0XHRcdCfmgqjlnKjmraTpgbjmk4fnmoTlip/og73lsIfnhKHms5Xkvb/nlKjvvIzlj5bmtojpgbjmk4fku6Xph43mlrDllZ/nlKjlip/og73jgIInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR0eXBlOiAnc2V0Jyxcblx0XHRcdFx0XHRzZXRWYWx1ZXM6IHtcblx0XHRcdFx0XHRcdGFydjogd2luZG93LndnVUxTKCflkYrnirYnLCAn5ZGK54uAJyksXG5cdFx0XHRcdFx0XHR3YXJuOiAn6K2m5ZGKJyxcblx0XHRcdFx0XHRcdGJsb2NrOiB3aW5kb3cud2dVTFMoJ+WwgeemgScsICflsIHpjpYnKSxcblx0XHRcdFx0XHRcdHRhbGtiYWNrOiAn6YCa5ZGKJyxcblx0XHRcdFx0XHRcdHNwZWVkeTogd2luZG93LndnVUxTKCfpgJ/liKAnLCAn6YCf5YiqJyksXG5cdFx0XHRcdFx0XHRjb3B5dmlvOiB3aW5kb3cud2dVTFMoJ+S+teadgycsICfkvrXmrIonKSxcblx0XHRcdFx0XHRcdHhmZDogd2luZG93LndnVUxTKCfmj5DliKAnLCAn5o+Q5YiqJyksXG5cdFx0XHRcdFx0XHRpbWFnZTogd2luZG93LndnVUxTKCflm77mnYMnLCAn5ZyW5qyKJyksXG5cdFx0XHRcdFx0XHRwcm90ZWN0OiB3aW5kb3cud2dVTFMoJ+S/neaKpCcsICfkv53orbcnKSxcblx0XHRcdFx0XHRcdHRhZzogd2luZG93LndnVUxTKCfmoIforrAnLCAn5qiZ6KiYJyksXG5cdFx0XHRcdFx0XHRzdHViOiAn5bCP5L2c5ZOBJyxcblx0XHRcdFx0XHRcdGRpZmY6IHdpbmRvdy53Z1VMUygn5beu5byCJywgJ+W3rueVsCcpLFxuXHRcdFx0XHRcdFx0dW5saW5rOiB3aW5kb3cud2dVTFMoJ+mTvuWFpScsICfpgKPlhaUnKSxcblx0XHRcdFx0XHRcdGZsdWZmOiAn5Zue6YCAJyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHQvLyBUd2lua2xlLmNvbmZpZy5kaXNhYmxlZFN5c29wTW9kdWxlcyAoYXJyYXkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnZGlzYWJsZWRTeXNvcE1vZHVsZXMnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WFs+mXreaMh+WumueahFR3aW5rbGXnrqHnkIblkZjmqKHlnZcnLCAn6Zec6ZaJ5oyH5a6a55qEVHdpbmtsZeeuoeeQhuWToeaooee1hCcpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfmgqjlnKjmraTpgInmi6nnmoTlip/og73lsIbml6Dms5Xkvb/nlKjvvIzlj5bmtojpgInmi6nku6Xph43mlrDlkK/nlKjlip/og73jgIInLFxuXHRcdFx0XHRcdFx0J+aCqOWcqOatpOmBuOaTh+eahOWKn+iDveWwh+eEoeazleS9v+eUqO+8jOWPlua2iOmBuOaTh+S7pemHjeaWsOWVn+eUqOWKn+iDveOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGFkbWluT25seTogdHJ1ZSxcblx0XHRcdFx0XHR0eXBlOiAnc2V0Jyxcblx0XHRcdFx0XHRzZXRWYWx1ZXM6IHtcblx0XHRcdFx0XHRcdGJhdGNoZGVsZXRlOiB3aW5kb3cud2dVTFMoJ+aJueWIoCcsICfmibnliKonKSxcblx0XHRcdFx0XHRcdGJhdGNodW5kZWxldGU6IHdpbmRvdy53Z1VMUygn5om55aSNJywgJ+aJueW+qScpLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0dGl0bGU6IHdpbmRvdy53Z1VMUygn5ZGK54q2JywgJ+WRiueLgCcpLFxuXHRcdFx0bW9kdWxlOiAnYXJ2Jyxcblx0XHRcdHByZWZlcmVuY2VzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnc3BpV2F0Y2hSZXBvcnQnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WPkei1t+WCgOWEoeiwg+afpeaXtuWKoOWFpeWIsOebkeinhuWIl+ihqCcsICfnmbzotbflgoDlhKHoqr/mn6XmmYLliqDlhaXliLDnm6PoppbmuIXllq4nKSxcblx0XHRcdFx0XHR0eXBlOiAnZW51bScsXG5cdFx0XHRcdFx0ZW51bVZhbHVlczogVHdpbmtsZS5jb25maWcud2F0Y2hsaXN0RW51bXMsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0dGl0bGU6IHdpbmRvdy53Z1VMUygn5bCB56aB55So5oi3JywgJ+WwgemOluS9v+eUqOiAhScpLFxuXHRcdFx0bW9kdWxlOiAnYmxvY2snLFxuXHRcdFx0YWRtaW5Pbmx5OiB0cnVlLFxuXHRcdFx0cHJlZmVyZW5jZXM6IFtcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy5kZWZhdWx0VG9CbG9jazY0IChib29sZWFuKVxuXHRcdFx0XHQvLyBXaGV0aGVyIHRvIGRlZmF1bHQgdG8ganVzdCBibG9ja2luZyB0aGUgLzY0IG9uIG9yIG9mZlxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ2RlZmF1bHRUb0Jsb2NrNjQnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WvueS6jklQdjblnLDlnYDvvIzpu5jorqTpgInmi6nlsIHnpoEvNjTmrrUnLCAn5bCN5pa8SVB2NuWcsOWdgO+8jOmgkOioremBuOaTh+WwgemOli82NOautScpLFxuXHRcdFx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy5kZWZhdWx0VG9QYXJ0aWFsQmxvY2tzIChib29sZWFuKVxuXHRcdFx0XHQvLyBXaGV0aGVyIHRvIGRlZmF1bHQgcGFydGlhbCBibG9ja3Mgb24gb3Igb2ZmXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnZGVmYXVsdFRvUGFydGlhbEJsb2NrcycsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5omT5byA5bCB56aB6I+c5Y2V5pe26buY6K6k6YCJ5oup6YOo5YiG5bCB56aBJywgJ+aJk+mWi+WwgemOlumBuOWWruaZgumgkOioremBuOaTh+mDqOWIhuWwgemOlicpLFxuXHRcdFx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy53YXRjaEJsb2NrTm90aWNlcyAoc3RyaW5nKVxuXHRcdFx0XHQvLyBXYXRjaGxpc3Qgc2V0dGluZyBmb3IgdGhlIHBhZ2Ugd2hpY2ggaGFzIGJlZW4gZGlzcGF0Y2hlZCBhbiB3YXJuaW5nIG9yIG5vdGljZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3dhdGNoQmxvY2tOb3RpY2VzJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+WPkemAgeWwgeemgeaooeadv+aXtuWKoOWFpeeUqOaIt+iuqOiuuumhteWIsOebkeinhuWIl+ihqCcsXG5cdFx0XHRcdFx0XHQn55m86YCB5bCB6Y6W5qih5p2/5pmC5Yqg5YWl5L2/55So6ICF6KiO6KuW6aCB5Yiw55uj6KaW5riF5ZauJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0dHlwZTogJ2VudW0nLFxuXHRcdFx0XHRcdGVudW1WYWx1ZXM6IFR3aW5rbGUuY29uZmlnLndhdGNobGlzdEVudW1zLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ2N1c3RvbUJsb2NrUmVhc29uTGlzdCcsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6Ieq5a6a5LmJ5bCB56aB55CG55SxJywgJ+iHquioguWwgemOlueQhueUsScpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfmgqjlj6/ku6XliqDlhaXluLjnlKjnmoTlsIHnpoHnkIbnlLHjgILoh6rlrprkuYnnmoTlsIHnpoHnkIbnlLHkvJrlh7rnjrDlnKjkuIDoiKznmoTlsIHnpoHnkIbnlLHkuIvmlrnjgIInLFxuXHRcdFx0XHRcdFx0J+aCqOWPr+S7peWKoOWFpeW4uOeUqOeahOWwgemOlueQhueUseOAguiHquiogueahOWwgemOlueQhueUseacg+WHuuePvuWcqOS4gOiIrOeahOWwgemOlueQhueUseS4i+aWueOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHR5cGU6ICdjdXN0b21MaXN0Jyxcblx0XHRcdFx0XHRjdXN0b21MaXN0VmFsdWVUaXRsZTogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+S9v+eUqOWwgeemgeaooeadv++8iOm7mOiupOS4uiB1dy1ibG9jazHvvIknLFxuXHRcdFx0XHRcdFx0J+S9v+eUqOWwgemOluaooeadv++8iOmgkOioreeCuiB1dy1ibG9jazHvvIknXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRjdXN0b21MaXN0TGFiZWxUaXRsZTogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+KAnOeUseS6juKApuaCqOW3suiiq+WwgeemgeKAneWPiuWwgeemgeaXpeW/l+eQhueUsScsXG5cdFx0XHRcdFx0XHQn44CM55Sx5pa84oCm5oKo5bey6KKr5bCB6Y6W44CN5Y+K5bCB6Y6W5pel6KqM55CG55SxJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0dGl0bGU6IHdpbmRvdy53Z1VMUygn5Zu+54mH5Yig6ZmkJywgJ+WclueJh+WIqumZpCcpLFxuXHRcdFx0bW9kdWxlOiAnaW1hZ2UnLFxuXHRcdFx0cHJlZmVyZW5jZXM6IFtcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy5ub3RpZnlVc2VyT25EZWxpIChib29sZWFuKVxuXHRcdFx0XHQvLyBJZiB0aGUgdXNlciBzaG91bGQgYmUgbm90aWZpZWQgYWZ0ZXIgcGxhY2luZyBhIGZpbGUgZGVsZXRpb24gdGFnXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnbm90aWZ5VXNlck9uRGVsaScsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6buY6K6k5Yu+6YCJ4oCc6YCa55+l5Yib5bu66ICF4oCdJywgJ+mgkOioreWLvumBuOOAjOmAmuefpeW7uueri+iAheOAjScpLFxuXHRcdFx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy5kZWxpV2F0Y2hQYWdlIChzdHJpbmcpXG5cdFx0XHRcdC8vIFRoZSB3YXRjaGxpc3Qgc2V0dGluZyBvZiB0aGUgcGFnZSB0YWdnZWQgZm9yIGRlbGV0aW9uLlxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ2RlbGlXYXRjaFBhZ2UnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+agh+iusOWbvueJh+aXtuWKoOWFpeWIsOebkeinhuWIl+ihqCcsICfmqJnoqJjlnJbniYfmmYLliqDlhaXliLDnm6PoppbmuIXllq4nKSxcblx0XHRcdFx0XHR0eXBlOiAnZW51bScsXG5cdFx0XHRcdFx0ZW51bVZhbHVlczogVHdpbmtsZS5jb25maWcud2F0Y2hsaXN0RW51bXMsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGVDb25maWcuZGVsaVdhdGNoVXNlciAoc3RyaW5nKVxuXHRcdFx0XHQvLyBUaGUgd2F0Y2hsaXN0IHNldHRpbmcgb2YgdGhlIHVzZXIgdGFsayBwYWdlIGlmIGEgbm90aWZpY2F0aW9uIGlzIHBsYWNlZC5cblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdkZWxpV2F0Y2hVc2VyJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmoIforrDlm77niYfml7bliqDlhaXliJvlu7rogIXorqjorrrpobXliLDnm5Hop4bliJfooagnLCAn5qiZ6KiY5ZyW54mH5pmC5Yqg5YWl5bu656uL6ICF6KiO6KuW6aCB5Yiw55uj6KaW5riF5ZauJyksXG5cdFx0XHRcdFx0dHlwZTogJ2VudW0nLFxuXHRcdFx0XHRcdGVudW1WYWx1ZXM6IFR3aW5rbGUuY29uZmlnLndhdGNobGlzdEVudW1zLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHRpdGxlOiB3aW5kb3cud2dVTFMoJ+S/neaKpCcsICfkv53orbcnKSxcblx0XHRcdG1vZHVsZTogJ3Byb3RlY3QnLFxuXHRcdFx0cHJlZmVyZW5jZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICd3YXRjaFJlcXVlc3RlZFBhZ2VzJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfor7fmsYLkv53miqTpobXpnaLml7bliqDlhaXliLDnm5Hop4bliJfooagnLCAn6KuL5rGC5L+d6K236aCB6Z2i5pmC5Yqg5YWl5Yiw55uj6KaW5riF5ZauJyksXG5cdFx0XHRcdFx0dHlwZTogJ2VudW0nLFxuXHRcdFx0XHRcdGVudW1WYWx1ZXM6IFR3aW5rbGUuY29uZmlnLndhdGNobGlzdEVudW1zLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3dhdGNoUFBUYWdnZWRQYWdlcycsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5qCH6K6w5L+d5oqk5qih5p2/5pe25Yqg5YWl5Yiw55uR6KeG5YiX6KGoJywgJ+aomeiomOS/neitt+aooeadv+aZguWKoOWFpeWIsOebo+imlua4heWWricpLFxuXHRcdFx0XHRcdHR5cGU6ICdlbnVtJyxcblx0XHRcdFx0XHRlbnVtVmFsdWVzOiBUd2lua2xlLmNvbmZpZy53YXRjaGxpc3RFbnVtcyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICd3YXRjaFByb3RlY3RlZFBhZ2VzJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfkv53miqTml7bliqDlhaXliLDnm5Hop4bliJfooagnLCAn5L+d6K235pmC5Yqg5YWl5Yiw55uj6KaW5riF5ZauJyksXG5cdFx0XHRcdFx0aGVscHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+iLpeWcqOS/neaKpOWQjuS5n+agh+iusOmhtemdou+8jOWImeS9v+eUqOagh+iusOmhtemdoueahOWPguaVsOiuvue9ruOAgicsXG5cdFx0XHRcdFx0XHQn6Iul5Zyo5L+d6K235b6M5Lmf5qiZ6KiY6aCB6Z2i77yM5YmH5L2/55So5qiZ6KiY6aCB6Z2i55qE5YGP5aW96Kit5a6a44CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0YWRtaW5Pbmx5OiB0cnVlLFxuXHRcdFx0XHRcdHR5cGU6ICdlbnVtJyxcblx0XHRcdFx0XHRlbnVtVmFsdWVzOiBUd2lua2xlLmNvbmZpZy53YXRjaGxpc3RFbnVtcyxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0XHR7XG5cdFx0XHR0aXRsZTogJ+WbnumAgCcsXG5cdFx0XHQvLyB0d2lua2xlZmx1ZmYgbW9kdWxlXG5cdFx0XHRtb2R1bGU6ICdmbHVmZicsXG5cdFx0XHRwcmVmZXJlbmNlczogW1xuXHRcdFx0XHQvLyBUd2lua2xlQ29uZmlnLmF1dG9NZW51QWZ0ZXJSb2xsYmFjayAoYm9vbClcblx0XHRcdFx0Ly8gT3B0aW9uIHRvIGF1dG9tYXRpY2FsbHkgb3BlbiB0aGUgd2FybmluZyBtZW51IGlmIHRoZSB1c2VyIHRhbGsgcGFnZSBpcyBvcGVuZWQgcG9zdC1yZXZlcnNpb25cblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdhdXRvTWVudUFmdGVyUm9sbGJhY2snLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5ZyoVHdpbmtsZeWbnumAgOWQjuiHquWKqOaJk+W8gOeUqOaIt+iuqOiuuumhteS4iueahFR3aW5rbGXorablkYroj5zljZUnLFxuXHRcdFx0XHRcdFx0J+WcqFR3aW5rbGXlm57pgIDlvozoh6rli5XmiZPplovkvb/nlKjogIXoqI7oq5bpoIHkuIrnmoRUd2lua2xl6K2m5ZGK6YG45ZauJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0aGVscHRpcDogd2luZG93LndnVUxTKCfku4XlnKjpgInlj5bkuIvmlrnlr7nlupTmoYbml7bmiY3miafooYwnLCAn5YOF5Zyo6YG45Y+W5LiL5pa55bCN5oeJ5qGG5pmC5omN5Z+36KGMJyksXG5cdFx0XHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHQvLyBUd2lua2xlQ29uZmlnLm9wZW5UYWxrUGFnZSAoYXJyYXkpXG5cdFx0XHRcdC8vIFdoYXQgdHlwZXMgb2YgYWN0aW9ucyB0aGF0IHNob3VsZCByZXN1bHQgaW4gb3BlbmluZyBvZiB0YWxrIHBhZ2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdvcGVuVGFsa1BhZ2UnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WcqOi/meS6m+exu+Wei+eahOWbnumAgOWQjuaJk+W8gOeUqOaIt+iuqOiuuumhtScsICflnKjpgJnkupvpoZ7liKXnmoTlm57pgIDlvozmiZPplovkvb/nlKjogIXoqI7oq5bpoIEnKSxcblx0XHRcdFx0XHR0eXBlOiAnc2V0Jyxcblx0XHRcdFx0XHRzZXRWYWx1ZXM6IHtcblx0XHRcdFx0XHRcdG5vcm06IHdpbmRvdy53Z1VMUygn5bi46KeE5Zue6YCAJywgJ+W4uOimj+WbnumAgCcpLFxuXHRcdFx0XHRcdFx0dmFuZDogd2luZG93LndnVUxTKCfnoLTlnY/lm57pgIAnLCAn56C05aOe5Zue6YCAJyksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy5vcGVuVGFsa1BhZ2VPbkF1dG9SZXZlcnQgKGJvb2wpXG5cdFx0XHRcdC8vIERlZmluZXMgaWYgdGFsayBwYWdlIHNob3VsZCBiZSBvcGVuZWQgd2hlbiBjYWxsaW5nIHJldmVydCBmcm9tIGNvbnRyaWJzIG9yIHJlY2VudCBjaGFuZ2VzIHBhZ2VzLiBJZiBzZXQgdG8gdHJ1ZSwgb3BlblRhbGtQYWdlIGRlZmluZXMgdGhlbiBpZiB0YWxrIHBhZ2Ugd2lsbCBiZSBvcGVuZWQuXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnb3BlblRhbGtQYWdlT25BdXRvUmV2ZXJ0Jyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+WcqOS7jueUqOaIt+i0oeeMruWPiuacgOi/keabtOaUueS4reWPkei1t+WbnumAgOaXtuaJk+W8gOeUqOaIt+iuqOiuuumhtScsXG5cdFx0XHRcdFx0XHQn5Zyo5b6e5L2/55So6ICF6LKi54275Y+K6L+R5pyf6K6K5pu05Lit55m86LW35Zue6YCA5pmC5omT6ZaL5L2/55So6ICF6KiO6KuW6aCBJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0aGVscHRpcDogd2luZG93LndnVUxTKCflvZPlroPmiZPlvIDml7bvvIzkvp3otZbkuIrkuIDkuKrorr7nva7jgIInLCAn55W25a6D5omT6ZaL5pmC77yM5L6d6LO05LiK5LiA5YCL6Kit5a6a44CCJyksXG5cdFx0XHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHQvLyBUd2lua2xlQ29uZmlnLnJvbGxiYWNrSW5QbGFjZSAoYm9vbClcblx0XHRcdFx0Ly9cblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdyb2xsYmFja0luUGxhY2UnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5Zyo5LuO55So5oi36LSh54yu5Y+K5pyA6L+R5pu05pS55Lit5Y+R6LW35Zue6YCA5pe25LiN5Yi35paw6aG16Z2iJyxcblx0XHRcdFx0XHRcdCflnKjlvp7kvb/nlKjogIXosqLnjbvlj4rov5HmnJ/orormm7TkuK3nmbzotbflm57pgIDmmYLkuI3ph43mlrDmlbTnkIbpoIHpnaInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRoZWxwdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5b2T5a6D5omT5byA5pe277yMVHdpbmtsZeWwhuS4jeS8muWcqOS7jueUqOaIt+i0oeeMruWPiuacgOi/keabtOaUueS4reWPkei1t+WbnumAgOaXtuWIt+aWsOmhtemdou+8jOWFgeiuuOaCqOS4gOasoeaAp+WbnumAgOWkmuS4que8lui+keOAgicsXG5cdFx0XHRcdFx0XHQn55W25a6D5omT6ZaL5pmC77yMVHdpbmtsZeWwh+S4jeacg+WcqOW+nuS9v+eUqOiAheiyoueNu+WPiui/keacn+iuiuabtOS4reeZvOi1t+WbnumAgOaZgumHjeaWsOaVtOeQhumggemdou+8jOWFgeioseaCqOS4gOasoeaAp+WbnumAgOWkmuWAi+e3qOi8r+OAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy5tYXJrUmV2ZXJ0ZWRQYWdlc0FzTWlub3IgKGFycmF5KVxuXHRcdFx0XHQvLyBXaGF0IHR5cGVzIG9mIGFjdGlvbnMgdGhhdCBzaG91bGQgcmVzdWx0IGluIG1hcmtpbmcgZWRpdCBhcyBtaW5vclxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ21hcmtSZXZlcnRlZFBhZ2VzQXNNaW5vcicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bCG6L+Z5Lqb57G75Z6L55qE5Zue6YCA5qCH6K6w5Li65bCP5L+u5pS5JywgJ+Wwh+mAmeS6m+mhnuWIpeeahOWbnumAgOaomeiomOeCuuWwj+S/ruaUuScpLFxuXHRcdFx0XHRcdHR5cGU6ICdzZXQnLFxuXHRcdFx0XHRcdHNldFZhbHVlczoge1xuXHRcdFx0XHRcdFx0bm9ybTogd2luZG93LndnVUxTKCfluLjop4Tlm57pgIAnLCAn5bi46KaP5Zue6YCAJyksXG5cdFx0XHRcdFx0XHR2YW5kOiB3aW5kb3cud2dVTFMoJ+egtOWdj+WbnumAgCcsICfnoLTlo57lm57pgIAnKSxcblx0XHRcdFx0XHRcdHRvcmV2OiB3aW5kb3cud2dVTFMoJ+KAnOaBouWkjeatpOeJiOacrOKAnScsICfjgIzmgaLlvqnmraTniYjmnKzjgI0nKSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHQvLyBUd2lua2xlQ29uZmlnLndhdGNoUmV2ZXJ0ZWRQYWdlcyAoYXJyYXkpXG5cdFx0XHRcdC8vIFdoYXQgdHlwZXMgb2YgYWN0aW9ucyB0aGF0IHNob3VsZCByZXN1bHQgaW4gZm9yY2VkIGFkZGl0aW9uIHRvIHdhdGNobGlzdFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3dhdGNoUmV2ZXJ0ZWRQYWdlcycsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5oqK6L+Z5Lqb57G75Z6L55qE5Zue6YCA5Yqg5YWl5Yiw55uR6KeG5YiX6KGoJywgJ+aKiumAmeS6m+mhnuWIpeeahOWbnumAgOWKoOWFpeWIsOebo+imlua4heWWricpLFxuXHRcdFx0XHRcdHR5cGU6ICdzZXQnLFxuXHRcdFx0XHRcdHNldFZhbHVlczoge1xuXHRcdFx0XHRcdFx0bm9ybTogd2luZG93LndnVUxTKCfluLjop4Tlm57pgIAnLCAn5bi46KaP5Zue6YCAJyksXG5cdFx0XHRcdFx0XHR2YW5kOiB3aW5kb3cud2dVTFMoJ+egtOWdj+WbnumAgCcsICfnoLTlo57lm57pgIAnKSxcblx0XHRcdFx0XHRcdHRvcmV2OiB3aW5kb3cud2dVTFMoJ+KAnOaBouWkjeatpOeJiOacrOKAnScsICfjgIzmgaLlvqnmraTniYjmnKzjgI0nKSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHQvLyBUd2lua2xlQ29uZmlnLndhdGNoUmV2ZXJ0ZWRFeHBpcnlcblx0XHRcdFx0Ly8gSWYgYW55IG9mIHRoZSBhYm92ZSBpdGVtcyBhcmUgc2VsZWN0ZWQsIHdoZXRoZXIgdG8gZXhwaXJlIHRoZSB3YXRjaFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3dhdGNoUmV2ZXJ0ZWRFeHBpcnknLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+W9k+WbnumAgOmhtemdouaXtu+8jOWKoOWFpeWIsOebkeinhuWIl+ihqOeahOacn+mZkCcsICfnlbblm57pgIDpoIHpnaLmmYLvvIzliqDlhaXliLDnm6PoppbmuIXllq7nmoTmnJ/pmZAnKSxcblx0XHRcdFx0XHR0eXBlOiAnZW51bScsXG5cdFx0XHRcdFx0ZW51bVZhbHVlczogVHdpbmtsZS5jb25maWcud2F0Y2hsaXN0RW51bXMsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGVDb25maWcub2ZmZXJSZWFzb25Pbk5vcm1hbFJldmVydCAoYm9vbGVhbilcblx0XHRcdFx0Ly8gSWYgdG8gb2ZmZXIgYSBwcm9tcHQgZm9yIGV4dHJhIHN1bW1hcnkgcmVhc29uIGZvciBub3JtYWwgcmV2ZXJ0cywgZGVmYXVsdCB0byB0cnVlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnb2ZmZXJSZWFzb25Pbk5vcm1hbFJldmVydCcsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bi46KeE5Zue6YCA5pe26K+i6Zeu55CG55SxJywgJ+W4uOimj+WbnumAgOaZguipouWVj+eQhueUsScpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUygn4oCc5bi46KeE4oCd5Zue6YCA5piv5Lit6Ze055qE6YKj5LiqW+WbnumAgF3pk77mjqXjgIInLCAn44CM5bi46KaP44CN5Zue6YCA5piv5Lit6ZaT55qE6YKj5YCLW+WbnumAgF3pgKPntZDjgIInKSxcblx0XHRcdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnY29uZmlybU9uRmx1ZmYnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WbnumAgOWJjeimgeaxguehruiupO+8iOaJgOacieiuvuWkh++8iScsICflm57pgIDliY3opoHmsYLnorroqo3vvIjmiYDmnInoo53nva7vvIknKSxcblx0XHRcdFx0XHRoZWxwdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5a+55LqO5L2/55So56e75Yqo6K6+5aSH55qE55So5oi377yM5oiW6ICF5oSP5b+X5LiN5Z2a5a6a55qE44CCJyxcblx0XHRcdFx0XHRcdCflsI3mlrzkvb/nlKjooYzli5Xoo53nva7nmoTkvb/nlKjogIXvvIzmiJbogIXmhI/lv5fkuI3loIXlrprnmoTjgIInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGVDb25maWcuc2hvd1JvbGxiYWNrTGlua3MgKGFycmF5KVxuXHRcdFx0XHQvLyBXaGVyZSBUd2lua2xlIHNob3VsZCBzaG93IHJvbGxiYWNrIGxpbmtzOlxuXHRcdFx0XHQvLyBkaWZmLCBvdGhlcnMsIG1pbmUsIGNvbnRyaWJzLCBoaXN0b3J5LCByZWNlbnRcblx0XHRcdFx0Ly8gTm90ZSBmcm9tIFRUTzogfGNvbnRyaWJzfCBzZWVtcyB0byBiZSBlcXVhbCB0byB8b3RoZXJzfCArIHxtaW5lfCwgaS5lLiByZWR1bmRhbnQsIHNvIEkgbGVmdCBpdCBvdXQgaGVyZXNcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdzaG93Um9sbGJhY2tMaW5rcycsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zyo6L+Z5Lqb6aG16Z2i5LiK5pi+56S65Zue6YCA6ZO+5o6lJywgJ+WcqOmAmeS6m+mggemdouS4iumhr+ekuuWbnumAgOmAo+e1kCcpLFxuXHRcdFx0XHRcdHR5cGU6ICdzZXQnLFxuXHRcdFx0XHRcdHNldFZhbHVlczoge1xuXHRcdFx0XHRcdFx0ZGlmZjogd2luZG93LndnVUxTKCflt67lvIInLCAn5beu55WwJyksXG5cdFx0XHRcdFx0XHRoaXN0b3J5OiB3aW5kb3cud2dVTFMoJ+WOhuWPsuiusOW9lScsICfmrbflj7LoqJjpjIQnKSxcblx0XHRcdFx0XHRcdG90aGVyczogd2luZG93LndnVUxTKCflhbblroPnlKjmiLfnmoTotKHnjK4nLCAn5YW25a6D5L2/55So6ICF55qE6LKi5427JyksXG5cdFx0XHRcdFx0XHRtaW5lOiB3aW5kb3cud2dVTFMoJ+aIkeeahOi0oeeMricsICfmiJHnmoTosqLnjbsnKSxcblx0XHRcdFx0XHRcdHJlY2VudGNoYW5nZXM6IHdpbmRvdy53Z1VMUygn5pyA6L+R5pu05pS5JywgJ+i/keacn+iuiuabtCcpLFxuXHRcdFx0XHRcdFx0cmVjZW50Y2hhbmdlc2xpbmtlZDogd2luZG93LndnVUxTKCfnm7jlhbPmm7TmlLknLCAn55u46Zec6K6K5pu0JyksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdjdXN0b21SZXZlcnRTdW1tYXJ5Jyxcblx0XHRcdFx0XHRsYWJlbDogJ+WbnumAgOeQhueUsScsXG5cdFx0XHRcdFx0aGVscHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+WcqOafpeeci+W3ruW8guaXtuWPr+mAie+8jOS7heWWhOaEj+WbnumAgOOAgeW4uOinhOWbnumAgOOAgeaBouWkjeatpOeJiOacrCcsXG5cdFx0XHRcdFx0XHQn5Zyo5qqi6KaW5beu55Ww5pmC5Y+v6YG477yM5YOF5ZaE5oSP5Zue6YCA44CB5bi46KaP5Zue6YCA44CB5oGi5b6p5q2k54mI5pysJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0dHlwZTogJ2N1c3RvbUxpc3QnLFxuXHRcdFx0XHRcdGN1c3RvbUxpc3RWYWx1ZVRpdGxlOiAn55CG55SxJyxcblx0XHRcdFx0XHRjdXN0b21MaXN0TGFiZWxUaXRsZTogd2luZG93LndnVUxTKCfmmL7npLrnmoTmloflrZcnLCAn6aGv56S655qE5paH5a2XJyksXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0dGl0bGU6IHdpbmRvdy53Z1VMUygn5b+r6YCf5Yig6ZmkJywgJ+W/q+mAn+WIqumZpCcpLFxuXHRcdFx0bW9kdWxlOiAnc3BlZWR5Jyxcblx0XHRcdHByZWZlcmVuY2VzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnc3BlZWR5U2VsZWN0aW9uU3R5bGUnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+S7gOS5iOaXtuWAmeaJp+ihjOagh+iusOaIluWIoOmZpCcsICfku4DpurzmmYLlgJnln7fooYzmqJnoqJjmiJbliKrpmaQnKSxcblx0XHRcdFx0XHR0eXBlOiAnZW51bScsXG5cdFx0XHRcdFx0ZW51bVZhbHVlczoge1xuXHRcdFx0XHRcdFx0YnV0dG9uQ2xpY2s6IHdpbmRvdy53Z1VMUygn5b2T5oiR54K54oCc5o+Q5Lqk4oCd5pe2JywgJ+eVtuaIkem7nuOAjOaPkOS6pOOAjeaZgicpLFxuXHRcdFx0XHRcdFx0cmFkaW9DbGljazogd2luZG93LndnVUxTKCflvZPmiJHngrnkuIDkuKrpgInpobnml7YnLCAn55W25oiR6bue5LiA5YCL6YG46aCF5pmCJyksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy53YXRjaFNwZWVkeVBhZ2VzIChhcnJheSlcblx0XHRcdFx0Ly8gV2hldGhlciB0byBhZGQgc3BlZWR5IHRhZ2dlZCBwYWdlcyB0byB3YXRjaGxpc3Rcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICd3YXRjaFNwZWVkeVBhZ2VzJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCflsIbku6XkuIvnkIbnlLHliqDlhaXliLDnm5Hop4bliJfooagnLCAn5bCH5Lul5LiL55CG55Sx5Yqg5YWl5Yiw55uj6KaW5riF5ZauJyksXG5cdFx0XHRcdFx0dHlwZTogJ3NldCcsXG5cdFx0XHRcdFx0c2V0VmFsdWVzOiBUd2lua2xlLmNvbmZpZy5jb21tb25TZXRzLmNzZENyaXRlcmlhLFxuXHRcdFx0XHRcdHNldERpc3BsYXlPcmRlcjogVHdpbmtsZS5jb25maWcuY29tbW9uU2V0cy5jc2RDcml0ZXJpYURpc3BsYXlPcmRlcixcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy53YXRjaFNwZWVkeUV4cGlyeVxuXHRcdFx0XHQvLyBJZiBhbnkgb2YgdGhlIGFib3ZlIGl0ZW1zIGFyZSBzZWxlY3RlZCwgd2hldGhlciB0byBleHBpcmUgdGhlIHdhdGNoXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnd2F0Y2hTcGVlZHlFeHBpcnknLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+W9k+agh+iusOmhtemdouaXtu+8jOWKoOWFpeWIsOebkeinhuWIl+ihqOeahOacn+mZkCcsICfnlbbmqJnoqJjpoIHpnaLmmYLvvIzliqDlhaXliLDnm6PoppbmuIXllq7nmoTmnJ/pmZAnKSxcblx0XHRcdFx0XHR0eXBlOiAnZW51bScsXG5cdFx0XHRcdFx0ZW51bVZhbHVlczogVHdpbmtsZS5jb25maWcud2F0Y2hsaXN0RW51bXMsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGVDb25maWcubWFya1NwZWVkeVBhZ2VzQXNQYXRyb2xsZWQgKGJvb2xlYW4pXG5cdFx0XHRcdC8vIElmLCB3aGVuIGFwcGx5aW5nIHNwZWVkeSB0ZW1wbGF0ZSB0byBwYWdlLCB0byBtYXJrIHRoZSBwYWdlIGFzIHBhdHJvbGxlZCAoaWYgdGhlIHBhZ2Ugd2FzIHJlYWNoZWQgZnJvbSBOZXdQYWdlcylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdtYXJrU3BlZWR5UGFnZXNBc1BhdHJvbGxlZCcsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5qCH6K6w5pe25qCH6K6w6aG16Z2i5Li65bey5beh5p+l77yI5aaC5Y+v6IO977yJJywgJ+aomeiomOaZguaomeiomOmggemdoueCuuW3suW3oeafpe+8iOWmguWPr+iDve+8iScpLFxuXHRcdFx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy5ub3RpZnlVc2VyT25TcGVlZHlEZWxldGlvbk5vbWluYXRpb24gKGFycmF5KVxuXHRcdFx0XHQvLyBXaGF0IHR5cGVzIG9mIGFjdGlvbnMgc2hvdWxkIHJlc3VsdCB0aGF0IHRoZSBhdXRob3Igb2YgdGhlIHBhZ2UgYmVpbmcgbm90aWZpZWQgb2Ygbm9taW5hdGlvblxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ25vdGlmeVVzZXJPblNwZWVkeURlbGV0aW9uTm9taW5hdGlvbicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5LuF5Zyo5L2/55So5Lul5LiL55CG55Sx5pe26YCa55+l6aG16Z2i5Yib5bu66ICFJywgJ+WDheWcqOS9v+eUqOS7peS4i+eQhueUseaZgumAmuefpemggemdouW7uueri+iAhScpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCflsL3nrqHmgqjlnKjlr7nor53moYbkuK3pgInmi6npgJrnn6XvvIzpgJrnn6Xku43lj6rkvJrlnKjkvb/nlKjov5nkupvnkIbnlLHml7blj5Hlh7rjgIInLFxuXHRcdFx0XHRcdFx0J+WEmOeuoeaCqOWcqOWwjeipseaWueWhiuS4remBuOaTh+mAmuefpe+8jOmAmuefpeS7jeWPquacg+WcqOS9v+eUqOmAmeS6m+eQhueUseaZgueZvOWHuuOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHR5cGU6ICdzZXQnLFxuXHRcdFx0XHRcdHNldFZhbHVlczogVHdpbmtsZS5jb25maWcuY29tbW9uU2V0cy5jc2RDcml0ZXJpYU5vdGlmaWNhdGlvbixcblx0XHRcdFx0XHRzZXREaXNwbGF5T3JkZXI6IFR3aW5rbGUuY29uZmlnLmNvbW1vblNldHMuY3NkQ3JpdGVyaWFOb3RpZmljYXRpb25EaXNwbGF5T3JkZXIsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGVDb25maWcucHJvbXB0Rm9yU3BlZWR5RGVsZXRpb25TdW1tYXJ5IChhcnJheSBvZiBzdHJpbmdzKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3Byb21wdEZvclNwZWVkeURlbGV0aW9uU3VtbWFyeScsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5L2/55So5Lul5LiL55CG55Sx5Yig6Zmk5pe25YWB6K6457yW6L6R5Yig6Zmk55CG55SxJywgJ+S9v+eUqOS7peS4i+eQhueUseWIqumZpOaZguWFgeiosee3qOi8r+WIqumZpOeQhueUsScpLFxuXHRcdFx0XHRcdGFkbWluT25seTogdHJ1ZSxcblx0XHRcdFx0XHR0eXBlOiAnc2V0Jyxcblx0XHRcdFx0XHRzZXRWYWx1ZXM6IFR3aW5rbGUuY29uZmlnLmNvbW1vblNldHMuY3NkQW5kRElDcml0ZXJpYSxcblx0XHRcdFx0XHRzZXREaXNwbGF5T3JkZXI6IFR3aW5rbGUuY29uZmlnLmNvbW1vblNldHMuY3NkQW5kRElDcml0ZXJpYURpc3BsYXlPcmRlcixcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy5vcGVuVXNlclRhbGtQYWdlT25TcGVlZHlEZWxldGUgKGFycmF5IG9mIHN0cmluZ3MpXG5cdFx0XHRcdC8vIFdoYXQgdHlwZXMgb2YgYWN0aW9ucyB0aGF0IHNob3VsZCByZXN1bHQgdXNlciB0YWxrIHBhZ2UgdG8gYmUgb3BlbmVkIHdoZW4gc3BlZWRpbHkgZGVsZXRpbmcgKGFkbWluIG9ubHkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnb3BlblVzZXJUYWxrUGFnZU9uU3BlZWR5RGVsZXRlJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfkvb/nlKjku6XkuIvnkIbnlLHml7bmiZPlvIDnlKjmiLforqjorrrpobUnLCAn5L2/55So5Lul5LiL55CG55Sx5pmC5omT6ZaL5L2/55So6ICF6KiO6KuW6aCBJyksXG5cdFx0XHRcdFx0YWRtaW5Pbmx5OiB0cnVlLFxuXHRcdFx0XHRcdHR5cGU6ICdzZXQnLFxuXHRcdFx0XHRcdHNldFZhbHVlczogVHdpbmtsZS5jb25maWcuY29tbW9uU2V0cy5jc2RBbmRESUNyaXRlcmlhLFxuXHRcdFx0XHRcdHNldERpc3BsYXlPcmRlcjogVHdpbmtsZS5jb25maWcuY29tbW9uU2V0cy5jc2RBbmRESUNyaXRlcmlhRGlzcGxheU9yZGVyLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHQvLyBUd2lua2xlQ29uZmlnLmRlbGV0ZVRhbGtQYWdlT25EZWxldGUgKGJvb2xlYW4pXG5cdFx0XHRcdC8vIElmIHRhbGsgcGFnZSBpZiBleGlzdHMgc2hvdWxkIGFsc28gYmUgZGVsZXRlZCAoQ1NEIEc4KSB3aGVuIHNwZWR5aW5nIGEgcGFnZSAoYWRtaW4gb25seSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdkZWxldGVUYWxrUGFnZU9uRGVsZXRlJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfpu5jorqTli77pgInigJzliKDpmaTorqjorrrpobXigJ0nLCAn6aCQ6Kit5Yu+6YG444CM5Yiq6Zmk6KiO6KuW6aCB44CNJyksXG5cdFx0XHRcdFx0YWRtaW5Pbmx5OiB0cnVlLFxuXHRcdFx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdkZWxldGVSZWRpcmVjdHNPbkRlbGV0ZScsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6buY6K6k5Yu+6YCJ4oCc5Yig6Zmk6YeN5a6a5ZCR4oCdJywgJ+mgkOioreWLvumBuOOAjOWIqumZpOmHjeaWsOWwjuWQkeOAjScpLFxuXHRcdFx0XHRcdGFkbWluT25seTogdHJ1ZSxcblx0XHRcdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGVDb25maWcuZGVsZXRlU3lzb3BEZWZhdWx0VG9EZWxldGUgKGJvb2xlYW4pXG5cdFx0XHRcdC8vIE1ha2UgdGhlIENTRCBzY3JlZW4gZGVmYXVsdCB0byBcImRlbGV0ZVwiIGluc3RlYWQgb2YgXCJ0YWdcIiAoYWRtaW4gb25seSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdkZWxldGVTeXNvcERlZmF1bHRUb0RlbGV0ZScsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6buY6K6k5Li655u05o6l5Yig6Zmk6ICM5LiN5piv5qCH6K6wJywgJ+mgkOioreeCuuebtOaOpeWIqumZpOiAjOS4jeaYr+aomeiomCcpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfoi6Xlt7LmlL7nva7lv6vpgJ/liKDpmaTmoIforrDvvIzliJnmsLjov5zpu5jorqTkuLrliKDpmaTmqKHlvI/jgIInLFxuXHRcdFx0XHRcdFx0J+iLpeW3suaUvue9ruW/q+mAn+WIqumZpOaomeiomO+8jOWJh+awuOmBoOmgkOioreeCuuWIqumZpOaooeW8j+OAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGFkbWluT25seTogdHJ1ZSxcblx0XHRcdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGVDb25maWcuc3BlZWR5V2luZG93V2lkdGggKGludGVnZXIpXG5cdFx0XHRcdC8vIERlZmluZXMgdGhlIHdpZHRoIG9mIHRoZSBUd2lua2xlIFNEIHdpbmRvdyBpbiBwaXhlbHNcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdzcGVlZHlXaW5kb3dXaWR0aCcsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5b+r6YCf5Yig6Zmk5a+56K+d5qGG5a695bqm77yI5YOP57Sg77yJJywgJ+W/q+mAn+WIqumZpOWwjeipseaWueWhiuWvrOW6pu+8iOWDj+e0oO+8iScpLFxuXHRcdFx0XHRcdHR5cGU6ICdpbnRlZ2VyJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy5zcGVlZHlXaW5kb3dXaWR0aCAoaW50ZWdlcilcblx0XHRcdFx0Ly8gRGVmaW5lcyB0aGUgd2lkdGggb2YgdGhlIFR3aW5rbGUgU0Qgd2luZG93IGluIHBpeGVsc1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3NwZWVkeVdpbmRvd0hlaWdodCcsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5b+r6YCf5Yig6Zmk5a+56K+d5qGG6auY5bqm77yI5YOP57Sg77yJJywgJ+W/q+mAn+WIqumZpOWwjeipseaWueWhiumrmOW6pu+8iOWDj+e0oO+8iScpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfoi6XmgqjmnInkuIDlj7DlvojlpKfnmoTmmL7npLrlmajvvIzmgqjlj6/ku6XlsIbmraTosIPpq5jjgIInLFxuXHRcdFx0XHRcdFx0J+iLpeaCqOacieS4gOWPsOW+iOWkp+eahOmhr+ekuuWZqO+8jOaCqOWPr+S7peWwh+atpOiqv+mrmOOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHR5cGU6ICdpbnRlZ2VyJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdsb2dTcGVlZHlOb21pbmF0aW9ucycsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zyo55So5oi356m66Ze05Lit6K6w5b2V5omA5pyJ5b+r6YCf5Yig6Zmk5o+Q5ZCNJywgJ+WcqOS9v+eUqOiAheepuumWk+S4reiomOmMhOaJgOacieW/q+mAn+WIqumZpOaPkOWQjScpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfpnZ7nrqHnkIblkZjml6Dms5Xorr/pl67liLDlt7LliKDpmaTnmoTotKHnjK7vvIznlKjmiLfnqbrpl7Tml6Xlv5fmj5DkvpvkuobkuIDkuKrlvojlpb3nmoTmlrnms5XmnaXorrDlvZXov5nkupvljoblj7LjgIInLFxuXHRcdFx0XHRcdFx0J+mdnueuoeeQhuWToeeEoeazleWtmOWPluWIsOW3suWIqumZpOeahOiyoueNu++8jOS9v+eUqOiAheepuumWk+aXpeiqjOaPkOS+m+S6huS4gOWAi+W+iOWlveeahOaWueazleS+huiomOmMhOmAmeS6m+att+WPsuOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdzcGVlZHlMb2dQYWdlTmFtZScsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zyo5q2k6aG15L+d55WZ5pel5b+XJywgJ+WcqOatpOmggeS/neeVmeaXpeiqjCcpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCflnKjmraTmoYbkuK3ovpPlhaXlrZDpobXpnaLlkI3np7DvvIzmgqjlsIblnKhVc2VyOjxpPueUqOaIt+WQjTwvaT4vPGk+5a2Q6aG16Z2iPC9pPuaJvuWIsENTROaXpeW/l+OAguS7heWcqOWQr+eUqOaXpeW/l+aXtuW3peS9nOOAgicsXG5cdFx0XHRcdFx0XHQn5Zyo5q2k5qGG5Lit6Ly45YWl5a2Q6aCB6Z2i5ZCN56ix77yM5oKo5bCH5ZyoVXNlcjo8aT7kvb/nlKjogIXlkI3nqLE8L2k+LzxpPuWtkOmggemdojwvaT7mib7liLBDU0Tml6XoqozjgILlg4XlnKjllZ/nlKjml6XoqozmmYLlt6XkvZzjgIInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdub0xvZ09uU3BlZWR5Tm9taW5hdGlvbicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zyo5L2/55So5Lul5LiL55CG55Sx5pe25LiN5YGa6K6w5b2VJywgJ+WcqOS9v+eUqOS7peS4i+eQhueUseaZguS4jeWBmuiomOmMhCcpLFxuXHRcdFx0XHRcdHR5cGU6ICdzZXQnLFxuXHRcdFx0XHRcdHNldFZhbHVlczogVHdpbmtsZS5jb25maWcuY29tbW9uU2V0cy5jc2RBbmRESUNyaXRlcmlhLFxuXHRcdFx0XHRcdHNldERpc3BsYXlPcmRlcjogVHdpbmtsZS5jb25maWcuY29tbW9uU2V0cy5jc2RBbmRESUNyaXRlcmlhRGlzcGxheU9yZGVyLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ2VubGFyZ2VHN0lucHV0Jyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmianlpKdDU0QgRzfnmoTmjInpkq4nLCAn5pO05aSnQ1NEIEc355qE5oyJ6YiVJyksXG5cdFx0XHRcdFx0aGVscHRpcDogd2luZG93LndnVUxTKCfmiankuLrpu5jorqTnmoTkuKTlgI3lpKfjgIInLCAn5pO054K66aCQ6Kit55qE5YWp5YCN5aSn44CCJyksXG5cdFx0XHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHRpdGxlOiB3aW5kb3cud2dVTFMoJ+agh+iusCcsICfmqJnoqJgnKSxcblx0XHRcdG1vZHVsZTogJ3RhZycsXG5cdFx0XHRwcmVmZXJlbmNlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3dhdGNoVGFnZ2VkUGFnZXMnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+agh+iusOaXtuWKoOWFpeWIsOebkeinhuWIl+ihqCcsICfmqJnoqJjmmYLliqDlhaXliLDnm6PoppbmuIXllq4nKSxcblx0XHRcdFx0XHR0eXBlOiAnZW51bScsXG5cdFx0XHRcdFx0ZW51bVZhbHVlczogVHdpbmtsZS5jb25maWcud2F0Y2hsaXN0RW51bXMsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnd2F0Y2hNZXJnZURpc2N1c3Npb25zJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliqDlhaXlkIjlubborqjorrrml7bnm5Hop4borqjorrrpobUnLCAn5Yqg5YWl5ZCI5L216KiO6KuW5pmC55uj6KaW6KiO6KuW6aCBJyksXG5cdFx0XHRcdFx0dHlwZTogJ2VudW0nLFxuXHRcdFx0XHRcdGVudW1WYWx1ZXM6IFR3aW5rbGUuY29uZmlnLndhdGNobGlzdEVudW1zLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ21hcmtUYWdnZWRQYWdlc0FzTWlub3InLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+Wwhuagh+iusOagh+iusOS4uuWwj+S/ruaUuScsICflsIfmqJnoqJjmqJnoqJjngrrlsI/kv67mlLknKSxcblx0XHRcdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnbWFya1RhZ2dlZFBhZ2VzQXNQYXRyb2xsZWQnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+m7mOiupOWLvumAieKAnOagh+iusOmhtemdouS4uuW3suW3oeafpeKAneahhicsICfpoJDoqK3li77pgbjjgIzmqJnoqJjpoIHpnaLngrrlt7Llt6Hmn6XjgI3moYYnKSxcblx0XHRcdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnZ3JvdXBCeURlZmF1bHQnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn6buY6K6k5Yu+6YCJ4oCc5ZCI5bm25Yiwe3ttdWx0aXBsZSBpc3N1ZXN9feKAneWkjemAieahhicsXG5cdFx0XHRcdFx0XHQn6aCQ6Kit5Yu+6YG444CM5ZCI5L215Yiwe3ttdWx0aXBsZSBpc3N1ZXN9feOAjeaguOWPluaWueWhiidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICd0YWdBcnRpY2xlU29ydE9yZGVyJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmnaHnm67moIforrDnmoTpu5jorqTmn6XnnIvmlrnlvI8nLCAn5qKd55uu5qiZ6KiY55qE6aCQ6Kit5qqi6KaW5pa55byPJyksXG5cdFx0XHRcdFx0dHlwZTogJ2VudW0nLFxuXHRcdFx0XHRcdGVudW1WYWx1ZXM6IHtcblx0XHRcdFx0XHRcdGNhdDogd2luZG93LndnVUxTKCfmjInnsbvlnosnLCAn5oyJ6aGe5YilJyksXG5cdFx0XHRcdFx0XHRhbHBoYTogJ+aMieWtl+avjScsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdjdXN0b21UYWdMaXN0Jyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfoh6rlrprkuYnmnaHnm67nu7TmiqTmoIforrAnLCAn6Ieq6KiC5qKd55uu57at6K235qiZ6KiYJyksXG5cdFx0XHRcdFx0aGVscHRpcDogd2luZG93LndnVUxTKCfov5nkupvkvJrlh7rnjrDlnKjliJfooajnmoTmnKvlsL7jgIInLCAn6YCZ5Lqb5pyD5Ye654++5Zyo5YiX6KGo55qE5pyr5bC+44CCJyksXG5cdFx0XHRcdFx0dHlwZTogJ2N1c3RvbUxpc3QnLFxuXHRcdFx0XHRcdGN1c3RvbUxpc3RWYWx1ZVRpdGxlOiB3aW5kb3cud2dVTFMoJ+aooeadv+WQje+8iOS4jeWQq+Wkp+aLrOWPt++8iScsICfmqKHmnb/lkI3vvIjkuI3lkKvlpKfmi6zomZ/vvIknKSxcblx0XHRcdFx0XHRjdXN0b21MaXN0TGFiZWxUaXRsZTogd2luZG93LndnVUxTKCfmmL7npLrnmoTmloflrZcnLCAn6aGv56S655qE5paH5a2XJyksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnY3VzdG9tRmlsZVRhZ0xpc3QnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+iHquWumuS5ieaWh+S7tue7tOaKpOagh+iusCcsICfoh6roqILmqpTmoYjntq3orbfmqJnoqJgnKSxcblx0XHRcdFx0XHRoZWxwdGlwOiB3aW5kb3cud2dVTFMoJ+i/meS6m+S8muWHuueOsOWcqOWIl+ihqOeahOacq+WwvuOAgicsICfpgJnkupvmnIPlh7rnj77lnKjliJfooajnmoTmnKvlsL7jgIInKSxcblx0XHRcdFx0XHR0eXBlOiAnY3VzdG9tTGlzdCcsXG5cdFx0XHRcdFx0Y3VzdG9tTGlzdFZhbHVlVGl0bGU6IHdpbmRvdy53Z1VMUygn5qih5p2/5ZCN77yI5LiN5ZCr5aSn5ous5Y+377yJJywgJ+aooeadv+WQje+8iOS4jeWQq+Wkp+aLrOiZn++8iScpLFxuXHRcdFx0XHRcdGN1c3RvbUxpc3RMYWJlbFRpdGxlOiB3aW5kb3cud2dVTFMoJ+aYvuekuueahOaWh+WtlycsICfpoa/npLrnmoTmloflrZcnKSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdjdXN0b21SZWRpcmVjdFRhZ0xpc3QnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+iHquWumuS5iemHjeWumuWQkee7tOaKpOagh+iusCcsICfoh6roqILph43mlrDlsI7lkJHntq3orbfmqJnoqJgnKSxcblx0XHRcdFx0XHRoZWxwdGlwOiB3aW5kb3cud2dVTFMoJ+i/meS6m+S8muWHuueOsOWcqOWIl+ihqOeahOacq+WwvuOAgicsICfpgJnkupvmnIPlh7rnj77lnKjliJfooajnmoTmnKvlsL7jgIInKSxcblx0XHRcdFx0XHR0eXBlOiAnY3VzdG9tTGlzdCcsXG5cdFx0XHRcdFx0Y3VzdG9tTGlzdFZhbHVlVGl0bGU6IHdpbmRvdy53Z1VMUygn5qih5p2/5ZCN77yI5LiN5ZCr5aSn5ous5Y+377yJJywgJ+aooeadv+WQje+8iOS4jeWQq+Wkp+aLrOiZn++8iScpLFxuXHRcdFx0XHRcdGN1c3RvbUxpc3RMYWJlbFRpdGxlOiB3aW5kb3cud2dVTFMoJ+aYvuekuueahOaWh+WtlycsICfpoa/npLrnmoTmloflrZcnKSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0XHR7XG5cdFx0XHR0aXRsZTogJ+Wwj+S9nOWTgScsXG5cdFx0XHRtb2R1bGU6ICdzdHViJyxcblx0XHRcdHByZWZlcmVuY2VzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnd2F0Y2hTdHViYmVkUGFnZXMnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+agh+iusOaXtuWKoOWFpeWIsOebkeinhuWIl+ihqCcsICfmqJnoqJjmmYLliqDlhaXliLDnm6PoppbmuIXllq4nKSxcblx0XHRcdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnbWFya1N0dWJiZWRQYWdlc0FzTWlub3InLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WwhuWwj+S9nOWTgeagh+iusOS4uuWwj+S/ruaUuScsICflsIflsI/kvZzlk4HmqJnoqJjngrrlsI/kv67mlLknKSxcblx0XHRcdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnbWFya1N0dWJiZWRQYWdlc0FzUGF0cm9sbGVkJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfpu5jorqTli77pgInigJzmoIforrDpobXpnaLkuLrlt7Llt6Hmn6XigJ3moYYnLCAn6aCQ6Kit5Yu+6YG444CM5qiZ6KiY6aCB6Z2i54K65bey5beh5p+l44CN5qGGJyksXG5cdFx0XHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3N0dWJBcnRpY2xlU29ydE9yZGVyJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmnaHnm67lsI/kvZzlk4HnmoTpu5jorqTmn6XnnIvmlrnlvI8nLCAn5qKd55uu5bCP5L2c5ZOB55qE6aCQ6Kit5qqi6KaW5pa55byPJyksXG5cdFx0XHRcdFx0dHlwZTogJ2VudW0nLFxuXHRcdFx0XHRcdGVudW1WYWx1ZXM6IHtcblx0XHRcdFx0XHRcdGNhdDogd2luZG93LndnVUxTKCfmjInnsbvlnosnLCAn5oyJ6aGe5YilJyksXG5cdFx0XHRcdFx0XHRhbHBoYTogJ+aMieWtl+avjScsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdjdXN0b21TdHViTGlzdCcsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6Ieq5a6a5LmJ5p2h55uu5bCP5L2c5ZOB5qCH6K6wJywgJ+iHquioguaineebruWwj+S9nOWTgeaomeiomCcpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUygn6L+Z5Lqb5Lya5Ye6546w5Zyo5YiX6KGo55qE5pyr5bC+44CCJywgJ+mAmeS6m+acg+WHuuePvuWcqOWIl+ihqOeahOacq+WwvuOAgicpLFxuXHRcdFx0XHRcdHR5cGU6ICdjdXN0b21MaXN0Jyxcblx0XHRcdFx0XHRjdXN0b21MaXN0VmFsdWVUaXRsZTogd2luZG93LndnVUxTKCfmqKHmnb/lkI3vvIjkuI3lkKvlpKfmi6zlj7fvvIknLCAn5qih5p2/5ZCN77yI5LiN5ZCr5aSn5ous6Jmf77yJJyksXG5cdFx0XHRcdFx0Y3VzdG9tTGlzdExhYmVsVGl0bGU6IHdpbmRvdy53Z1VMUygn5pi+56S655qE5paH5a2XJywgJ+mhr+ekuueahOaWh+WtlycpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHRpdGxlOiAn6YCa5ZGKJyxcblx0XHRcdG1vZHVsZTogJ3RhbGtiYWNrJyxcblx0XHRcdHByZWZlcmVuY2VzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnbWFya1RhbGtiYWNrQXNNaW5vcicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5bCG6YCa5ZGK5qCH6K6w5Li65bCP5L+u5pS5JywgJ+Wwh+mAmuWRiuaomeiomOeCuuWwj+S/ruaUuScpLFxuXHRcdFx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdpbnNlcnRUYWxrYmFja1NpZ25hdHVyZScsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6YCa5ZGK5pe25Yqg5YWl562+5ZCNJywgJ+mAmuWRiuaZguWKoOWFpeewveWQjScpLFxuXHRcdFx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICd0YWxrYmFja0hlYWRpbmcnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+mAmuWRiuaJgOeUqOeahOWwj+iKguagh+mimCcsICfpgJrlkYrmiYDnlKjnmoTlsI/nr4DmqJnpoYwnKSxcblx0XHRcdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdtYWlsSGVhZGluZycsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn4oCc5pyJ5paw6YKu5Lu24oCd5omA55So55qE5bCP6IqC5qCH6aKYJywgJ+OAjOacieaWsOmDteS7tuOAjeaJgOeUqOeahOWwj+evgOaomemhjCcpLFxuXHRcdFx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHRpdGxlOiB3aW5kb3cud2dVTFMoJ+WPlua2iOmTvuWFpScsICflj5bmtojpgKPlhaUnKSxcblx0XHRcdG1vZHVsZTogJ3VubGluaycsXG5cdFx0XHRwcmVmZXJlbmNlczogW1xuXHRcdFx0XHQvLyBUd2lua2xlQ29uZmlnLnVubGlua05hbWVzcGFjZXMgKGFycmF5KVxuXHRcdFx0XHQvLyBJbiB3aGF0IG5hbWVzcGFjZXMgdW5saW5rIHNob3VsZCBoYXBwZW4sIGRlZmF1bHQgaW4gMCAoYXJ0aWNsZSkgYW5kIDEwMCAocG9ydGFsKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3VubGlua05hbWVzcGFjZXMnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WPlua2iOS7peS4i+WRveWQjeepuumXtOS4reeahOWPjeWQkemTvuaOpScsICflj5bmtojku6XkuIvlkb3lkI3nqbrplpPkuK3nmoTlj43lkJHpgKPntZAnKSxcblx0XHRcdFx0XHRoZWxwdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn6K+36YG/5YWN6YCJ5oup6K6o6K666aG177yM5Zug6L+Z5qC35Lya5a+86Ie0VHdpbmtsZeivleWbvuS/ruaUueiuqOiuuuWtmOaho+OAgicsXG5cdFx0XHRcdFx0XHQn6KuL6YG/5YWN6YG45pOH6KiO6KuW6aCB77yM5Zug6YCZ5qij5pyD5bCO6Ie0VHdpbmtsZeippuWcluS/ruaUueiojuirluWtmOaqlOOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHR5cGU6ICdzZXQnLFxuXHRcdFx0XHRcdHNldFZhbHVlczogVHdpbmtsZS5jb25maWcuY29tbW9uU2V0cy5uYW1lc3BhY2VzTm9TcGVjaWFsLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHRpdGxlOiB3aW5kb3cud2dVTFMoJ+itpuWRiueUqOaItycsICforablkYrkvb/nlKjogIUnKSxcblx0XHRcdG1vZHVsZTogJ3dhcm4nLFxuXHRcdFx0cHJlZmVyZW5jZXM6IFtcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy5kZWZhdWx0V2FybmluZ0dyb3VwIChpbnQpXG5cdFx0XHRcdC8vIGlmIHRydWUsIHdhdGNoIHRoZSBwYWdlIHdoaWNoIGhhcyBiZWVuIGRpc3BhdGNoZWQgYW4gd2FybmluZyBvciBub3RpY2UsIGlmIGZhbHNlLCBkZWZhdWx0IGFwcGxpZXNcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdkZWZhdWx0V2FybmluZ0dyb3VwJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfpu5jorqTorablkYrnuqfliKsnLCAn6aCQ6Kit6K2m5ZGK57Sa5YilJyksXG5cdFx0XHRcdFx0dHlwZTogJ2VudW0nLFxuXHRcdFx0XHRcdGVudW1WYWx1ZXM6IHtcblx0XHRcdFx0XHRcdDE6ICcx77ya5rOo5oSPJyxcblx0XHRcdFx0XHRcdDI6ICcy77ya6K2m5ZGKJyxcblx0XHRcdFx0XHRcdDM6IHdpbmRvdy53Z1VMUygn5Y2V5bGC57qn5o+Q6YaSJywgJ+WWruWxpOe0muaPkOmGkicpLFxuXHRcdFx0XHRcdFx0NDogd2luZG93LndnVUxTKCfljZXlsYLnuqforablkYonLCAn5Zau5bGk57Sa6K2m5ZGKJyksXG5cdFx0XHRcdFx0XHQ1OiB3aW5kb3cud2dVTFMoJ+iHquWumuS5ieaPkOmGkuaIluitpuWRiicsICfoh6roqILmj5DphpLmiJborablkYonKSxcblx0XHRcdFx0XHRcdDY6ICfmiYDmnInorablkYrmqKHmnb8nLFxuXHRcdFx0XHRcdFx0Nzogd2luZG93LndnVUxTKCfoh6rliqjpgInmi6nlsYLnuqcnLCAn6Ieq5YuV6YG45pOH5bGk57SaJyksXG5cdFx0XHRcdFx0XHQvLyA4IHdhcyB1c2VkIGZvciBibG9jayB0ZW1wbGF0ZXMgYmVmb3JlICMyNjBcblx0XHRcdFx0XHRcdC8vIDkgd2FzIGRlcHJlY2F0ZWRcblx0XHRcdFx0XHRcdC8vIDEwIHdhcyBkZXByZWNhdGVkXG5cdFx0XHRcdFx0XHQvLyAxMSB3YXMgZGVwcmVjYXRlZFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGVDb25maWcuY29tYmluZWRTaW5nbGV0TWVudXMgKGJvb2xlYW4pXG5cdFx0XHRcdC8vIGlmIHRydWUsIHNob3cgb25lIG1lbnUgd2l0aCBib3RoIHNpbmdsZS1pc3N1ZSBub3RpY2VzIGFuZCB3YXJuaW5ncyBpbnN0ZWFkIG9mIHR3byBzZXBhcmF0ZWx5XG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnY29tYmluZWRTaW5nbGV0TWVudXMnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WwhuS4pOS4quWNleWxgue6p+iPnOWNleWQiOW5tuaIkOS4gOS4qicsICflsIflhanlgIvllq7lsaTntJrpgbjllq7lkIjkvbXmiJDkuIDlgIsnKSxcblx0XHRcdFx0XHRoZWxwdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5b2T5ZCv55So5q2k6YCJ6aG55pe277yM5peg6K666buY6K6k6K2m5ZGK57qn5Yir6YCJ5oup5Y2V5bGC57qn6YCa55+l5oiW5Y2V5bGC57qn6K2m5ZGK55qG5bGe5LqO5q2k6aG544CCJyxcblx0XHRcdFx0XHRcdCfnlbbllZ/nlKjmraTpgbjpoIXmmYLvvIznhKHoq5bpoJDoqK3orablkYrntJrliKXpgbjmk4fllq7lsaTntJrpgJrnn6XmiJbllq7lsaTntJrorablkYrnmoblsazmlrzmraTpoIXjgIInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGVDb25maWcud2F0Y2hXYXJuaW5ncyAoc3RyaW5nKVxuXHRcdFx0XHQvLyBXYXRjaGxpc3Qgc2V0dGluZyBmb3IgdGhlIHBhZ2Ugd2hpY2ggaGFzIGJlZW4gZGlzcGF0Y2hlZCBhbiB3YXJuaW5nIG9yIG5vdGljZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3dhdGNoV2FybmluZ3MnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+itpuWRiuaXtuWKoOWFpeeUqOaIt+iuqOiuuumhteWIsOebkeinhuWIl+ihqCcsICforablkYrmmYLliqDlhaXkvb/nlKjogIXoqI7oq5bpoIHliLDnm6PoppbmuIXllq4nKSxcblx0XHRcdFx0XHR0eXBlOiAnZW51bScsXG5cdFx0XHRcdFx0ZW51bVZhbHVlczogVHdpbmtsZS5jb25maWcud2F0Y2hsaXN0RW51bXMsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGVDb25maWcub2xkU2VsZWN0IChib29sZWFuKVxuXHRcdFx0XHQvLyBpZiB0cnVlLCB1c2UgdGhlIG5hdGl2ZSBzZWxlY3QgbWVudSByYXRoZXIgdGhlIGpxdWVyeSBjaG9zZW4tYmFzZWQgb25lXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnb2xkU2VsZWN0Jyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfkvb/nlKjkuI3lj6/mkJzntKLnmoTnu4/lhbjoj5zljZUnLCAn5L2/55So5LiN5Y+v5pCc5bCL55qE57aT5YW46YG45ZauJyksXG5cdFx0XHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ2N1c3RvbVdhcm5pbmdMaXN0Jyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfoh6rlrprkuYnorablkYrmqKHmnb8nLCAn6Ieq6KiC6K2m5ZGK5qih5p2/JyksXG5cdFx0XHRcdFx0aGVscHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+aCqOWPr+S7peWKoOWFpeaooeadv+aIlueUqOaIt+WtkOmhtemdouOAguiHquWumuS5ieitpuWRiuS8muWHuueOsOWcqOitpuWRiuWvueivneahhuS4reKAnOiHquWumuS5ieitpuWRiuKAneS4gOiKguOAgicsXG5cdFx0XHRcdFx0XHQn5oKo5Y+v5Lul5Yqg5YWl5qih5p2/5oiW5L2/55So6ICF5a2Q6aCB6Z2i44CC6Ieq6KiC6K2m5ZGK5pyD5Ye654++5Zyo6K2m5ZGK5bCN6Kmx5pa55aGK5Lit44CM6Ieq6KiC6K2m5ZGK44CN5LiA56+A44CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0dHlwZTogJ2N1c3RvbUxpc3QnLFxuXHRcdFx0XHRcdGN1c3RvbUxpc3RWYWx1ZVRpdGxlOiB3aW5kb3cud2dVTFMoJ+aooeadv+WQje+8iOS4jeWQq+Wkp+aLrOWPt++8iScsICfmqKHmnb/lkI3vvIjkuI3lkKvlpKfmi6zomZ/vvIknKSxcblx0XHRcdFx0XHRjdXN0b21MaXN0TGFiZWxUaXRsZTogd2luZG93LndnVUxTKCfmmL7npLrnmoTmloflrZfvvIjlkoznvJbovpHmkZjopoHvvIknLCAn6aGv56S655qE5paH5a2X77yI5ZKM57eo6Lyv5pGY6KaB77yJJyksXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0dGl0bGU6IHdpbmRvdy53Z1VMUygn5a2Y5bqf6K6o6K66JywgJ+WtmOW7ouiojuirlicpLFxuXHRcdFx0bW9kdWxlOiAneGZkJyxcblx0XHRcdHByZWZlcmVuY2VzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnbG9nWGZkTm9taW5hdGlvbnMnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WcqOeUqOaIt+epuumXtOS4reiusOW9leaJgOacieWtmOW6n+iuqOiuuuaPkOWQjScsICflnKjkvb/nlKjogIXnqbrplpPkuK3oqJjpjITmiYDmnInlrZjlu6LoqI7oq5bmj5DlkI0nKSxcblx0XHRcdFx0XHRoZWxwdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn6K+l5pel5b+X5L6b5oKo6L+96Liq5omA5pyJ6YCa6L+HVHdpbmtsZeaPkOS6pOeahOWtmOW6n+iuqOiuuicsXG5cdFx0XHRcdFx0XHQn6Kmy5pel6KqM5L6b5oKo6L+96Lmk5omA5pyJ6YCP6YGOVHdpbmtsZeaPkOS6pOeahOWtmOW7ouiojuirlidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICd4ZmRMb2dQYWdlTmFtZScsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zyo5q2k6aG15L+d55WZ5pel5b+XJywgJ+WcqOatpOmggeS/neeVmeaXpeiqjCcpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCflnKjmraTmoYbkuK3ovpPlhaXlrZDpobXpnaLlkI3np7DvvIzmgqjlsIblnKhVc2VyOjxpPueUqOaIt+WQjTwvaT4vPGk+5a2Q6aG16Z2iPC9pPuaJvuWIsFhGROaXpeW/l+OAguS7heWcqOWQr+eUqOaXpeW/l+aXtuW3peS9nOOAgicsXG5cdFx0XHRcdFx0XHQn5Zyo5q2k5qGG5Lit6Ly45YWl5a2Q6aCB6Z2i5ZCN56ix77yM5oKo5bCH5ZyoVXNlcjo8aT7kvb/nlKjogIXlkI3nqLE8L2k+LzxpPuWtkOmggemdojwvaT7mib7liLBYRkTml6XoqozjgILlg4XlnKjllZ/nlKjml6XoqozmmYLlt6XkvZzjgIInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdub0xvZ09uWGZkTm9taW5hdGlvbicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zyo5L2/55So5Lul5LiL55CG55Sx5pe25LiN5YGa6K6w5b2VJywgJ+WcqOS9v+eUqOS7peS4i+eQhueUseaZguS4jeWBmuiomOmMhCcpLFxuXHRcdFx0XHRcdHR5cGU6ICdzZXQnLFxuXHRcdFx0XHRcdHNldFZhbHVlczogVHdpbmtsZS5jb25maWcuY29tbW9uU2V0cy54ZmRDcml0ZXJpYSxcblx0XHRcdFx0XHRzZXREaXNwbGF5T3JkZXI6IFR3aW5rbGUuY29uZmlnLmNvbW1vblNldHMueGZkQ3JpdGVyaWFEaXNwbGF5T3JkZXIsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGVDb25maWcueGZkV2F0Y2hQYWdlIChzdHJpbmcpXG5cdFx0XHRcdC8vIFRoZSB3YXRjaGxpc3Qgc2V0dGluZyBvZiB0aGUgcGFnZSBiZWluZyBub21pbmF0ZWQgZm9yIFhmRC5cblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICd4ZmRXYXRjaFBhZ2UnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+WKoOWFpeaPkOWQjeeahOmhtemdouWIsOebkeinhuWIl+ihqCcsICfliqDlhaXmj5DlkI3nmoTpoIHpnaLliLDnm6PoppbmuIXllq4nKSxcblx0XHRcdFx0XHR0eXBlOiAnZW51bScsXG5cdFx0XHRcdFx0ZW51bVZhbHVlczogVHdpbmtsZS5jb25maWcud2F0Y2hsaXN0RW51bXMsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGVDb25maWcueGZkV2F0Y2hEaXNjdXNzaW9uIChzdHJpbmcpXG5cdFx0XHRcdC8vIFRoZSB3YXRjaGxpc3Qgc2V0dGluZyBvZiB0aGUgbmV3bHkgY3JlYXRlZCBYZkQgcGFnZSAoZm9yIHRob3NlIHByb2Nlc3NlcyB0aGF0IGNyZWF0ZSBkaXNjdXNzaW9uIHBhZ2VzIGZvciBlYWNoIG5vbWluYXRpb24pLFxuXHRcdFx0XHQvLyBvciB0aGUgbGlzdCBwYWdlIGZvciB0aGUgb3RoZXIgcHJvY2Vzc2VzLlxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3hmZFdhdGNoRGlzY3Vzc2lvbicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Yqg5YWl5a2Y5bqf6K6o6K666aG15Yiw55uR6KeG5YiX6KGoJywgJ+WKoOWFpeWtmOW7ouiojuirlumggeWIsOebo+imlua4heWWricpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUygn5b2T5pel55qE6aG16Z2i44CCJywgJ+eVtuaXpeeahOmggemdouOAgicpLFxuXHRcdFx0XHRcdHR5cGU6ICdlbnVtJyxcblx0XHRcdFx0XHRlbnVtVmFsdWVzOiBUd2lua2xlLmNvbmZpZy53YXRjaGxpc3RFbnVtcyxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy54ZmRXYXRjaFVzZXIgKHN0cmluZylcblx0XHRcdFx0Ly8gVGhlIHdhdGNobGlzdCBzZXR0aW5nIG9mIHRoZSB1c2VyIHRhbGsgcGFnZSBpZiB0aGV5IHJlY2VpdmUgYSBub3RpZmljYXRpb24uXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAneGZkV2F0Y2hVc2VyJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+WKoOWFpeWIm+W7uuiAheiuqOiuuumhteWIsOebkeinhuWIl+ihqO+8iOWcqOmAmuefpeaXtu+8iScsXG5cdFx0XHRcdFx0XHQn5Yqg5YWl5bu656uL6ICF6KiO6KuW6aCB5Yiw55uj6KaW5riF5Zau77yI5Zyo6YCa55+l5pmC77yJJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0dHlwZTogJ2VudW0nLFxuXHRcdFx0XHRcdGVudW1WYWx1ZXM6IFR3aW5rbGUuY29uZmlnLndhdGNobGlzdEVudW1zLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ21hcmtYZmRQYWdlc0FzUGF0cm9sbGVkJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfmoIforrDml7bmoIforrDpobXpnaLkuLrlt7Llt6Hmn6XvvIjlpoLlj6/og73vvIknLCAn5qiZ6KiY5pmC5qiZ6KiY6aCB6Z2i54K65bey5beh5p+l77yI5aaC5Y+v6IO977yJJyksXG5cdFx0XHRcdFx0aGVscHRpcDogd2luZG93LndnVUxTKFxuXHRcdFx0XHRcdFx0J+WfuuS6juaKgOacr+WOn+WboO+8jOmhtemdouS7heS8muWcqOeUsVNwZWNpYWw6TmV3UGFnZXPliLDovr7ml7booqvmoIforrDkuLrlt7Llt6Hmn6XjgIInLFxuXHRcdFx0XHRcdFx0J+WfuuaWvOaKgOihk+WOn+WboO+8jOmggemdouWDheacg+WcqOeUsVNwZWNpYWw6TmV3UGFnZXPliLDpgZTmmYLooqvmqJnoqJjngrrlt7Llt6Hmn6XjgIInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnRndkQ3NkVG9YZmQnLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoJ+aPkOWIoOexu+Wei+WinuWKoOi9rOS6pOiHquW/q+mAn+WIoOmZpOWAmemAiScsICfmj5DliKrpoZ7liKXlop7liqDovYnkuqToh6rlv6vpgJ/liKrpmaTlgJnpgbgnKSxcblx0XHRcdFx0XHRoZWxwdGlwOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn6K+356Gu5L+d5oKo5YWF5YiG5LqG6KejW1tMSUI65b+r6YCf5Yig6Zmk5p2h5L6LXV3miY3lvIDlkK/mraTlip/og73jgIInLFxuXHRcdFx0XHRcdFx0J+iri+eiuuS/neaCqOWFheWIhuS6huino1tbTElCOuW/q+mAn+WIqumZpOaineS+i11d5omN6ZaL5ZWf5q2k5Yqf6IO944CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ2FmZERlZmF1bHRDYXRlZ29yeScsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6buY6K6k5o+Q5Yig57G75Z6LJywgJ+mgkOioreaPkOWIqumhnuWIpScpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfoi6XpgInmi6nigJznm7jlkIzkuo7kuIrmrKHpgInmi6nigJ3lsIbkvb/nlKhsb2NhbFN0b3JhZ2XmnaXorrDlv4bjgIInLFxuXHRcdFx0XHRcdFx0J+iLpemBuOaTh+OAjOebuOWQjOaWvOS4iuasoemBuOaTh+OAjeWwh+S9v+eUqGxvY2FsU3RvcmFnZeS+huiomOaGtuOAgidcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHR5cGU6ICdlbnVtJyxcblx0XHRcdFx0XHRlbnVtVmFsdWVzOiB7XG5cdFx0XHRcdFx0XHRkZWxldGU6IHdpbmRvdy53Z1VMUygn5Yig6ZmkJywgJ+WIqumZpCcpLFxuXHRcdFx0XHRcdFx0c2FtZTogd2luZG93LndnVUxTKCfnm7jlkIzkuo7kuIrmrKHpgInmi6knLCAn55u45ZCM5pa85LiK5qyh6YG45pOHJyksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdhZmRGYW1lRGVmYXVsdFJlYXNvbicsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn6buY6K6k5YWz5rOo5bqm5o+Q5Yig55CG55SxJywgJ+mgkOioremXnOazqOW6puaPkOWIqueQhueUsScpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUygn55So5LqO5om56YeP5o+Q5Yig44CCJywgJ+eUqOaWvOaJueasoeaPkOWIquOAgicpLFxuXHRcdFx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ2FmZFN1YnN0dWJEZWZhdWx0UmVhc29uJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfpu5jorqTlsI/lsI/kvZzlk4Hmj5DliKDnkIbnlLEnLCAn6aCQ6Kit5bCP5bCP5L2c5ZOB5o+Q5Yiq55CG55SxJyksXG5cdFx0XHRcdFx0aGVscHRpcDogd2luZG93LndnVUxTKCfnlKjkuo7mibnph4/mj5DliKDjgIInLCAn55So5pa85om55qyh5o+Q5Yiq44CCJyksXG5cdFx0XHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0dGl0bGU6IHdpbmRvdy53Z1VMUygn5YWz6Zet5a2Y5bqf6K6o6K66JywgJ+mXnOmWieWtmOW7ouiojuirlicpLFxuXHRcdFx0bW9kdWxlOiAnY2xvc2UnLFxuXHRcdFx0cHJlZmVyZW5jZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdYZmRDbG9zZScsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5Zyo5a2Y5bqf6K6o6K665pi+56S65YWz6Zet6K6o6K665oyJ6ZKuJywgJ+WcqOWtmOW7ouiojuirlumhr+ekuumXnOmWieiojuirluaMiemIlScpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfor7fnoa7kv53mgqjlhYXliIbkuobop6NbW0xJQjrliKDpmaTmnaHkvotdXeaJjeW8gOWQr+atpOWKn+iDveOAgicsXG5cdFx0XHRcdFx0XHQn6KuL56K65L+d5oKo5YWF5YiG5LqG6KejW1tMSUI65Yiq6Zmk5qKd5L6LXV3miY3plovllZ/mraTlip/og73jgIInXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR0eXBlOiAnZW51bScsXG5cdFx0XHRcdFx0ZW51bVZhbHVlczoge1xuXHRcdFx0XHRcdFx0aGlkZTogd2luZG93LndnVUxTKCfkuI3mmL7npLonLCAn5LiN6aGv56S6JyksXG5cdFx0XHRcdFx0XHRub25hZG1pbm9ubHk6IHdpbmRvdy53Z1VMUygn5Y+q5YyF5ZCr6Z2e566h55CG5ZGY5Y+v5L2/55So6YCJ6aG5JywgJ+WPquWMheWQq+mdnueuoeeQhuWToeWPr+S9v+eUqOmBuOmghScpLFxuXHRcdFx0XHRcdFx0YWxsOiB3aW5kb3cud2dVTFMoJ+aYvuekuuaJgOaciemAiemhuScsICfpoa/npLrmiYDmnInpgbjpoIUnKSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHRpdGxlOiB3aW5kb3cud2dVTFMoJ+S+teeKr+iRl+S9nOadgycsICfkvrXniq/okZfkvZzmrIonKSxcblx0XHRcdG1vZHVsZTogJ2NvcHl2aW8nLFxuXHRcdFx0cHJlZmVyZW5jZXM6IFtcblx0XHRcdFx0Ly8gVHdpbmtsZUNvbmZpZy5jb3B5dmlvV2F0Y2hQYWdlIChzdHJpbmcpXG5cdFx0XHRcdC8vIFRoZSB3YXRjaGxpc3Qgc2V0dGluZyBvZiB0aGUgcGFnZSBiZWluZyBub21pbmF0ZWQgZm9yIFhmRC5cblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdjb3B5dmlvV2F0Y2hQYWdlJyxcblx0XHRcdFx0XHRsYWJlbDogd2luZG93LndnVUxTKCfliqDlhaXmj5DmiqXnmoTpobXpnaLliLDnm5Hop4bliJfooagnLCAn5Yqg5YWl5o+Q5aCx55qE6aCB6Z2i5Yiw55uj6KaW5riF5ZauJyksXG5cdFx0XHRcdFx0dHlwZTogJ2VudW0nLFxuXHRcdFx0XHRcdGVudW1WYWx1ZXM6IFR3aW5rbGUuY29uZmlnLndhdGNobGlzdEVudW1zLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHQvLyBUd2lua2xlQ29uZmlnLmNvcHl2aW9XYXRjaFVzZXIgKHN0cmluZylcblx0XHRcdFx0Ly8gVGhlIHdhdGNobGlzdCBzZXR0aW5nIG9mIHRoZSB1c2VyIGlmIGhlIHJlY2VpdmVzIGEgbm90aWZpY2F0aW9uLlxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ2NvcHl2aW9XYXRjaFVzZXInLFxuXHRcdFx0XHRcdGxhYmVsOiB3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHQn5Yqg5YWl5Yib5bu66ICF6K6o6K666aG15Yiw55uR6KeG5YiX6KGo77yI5Zyo6YCa55+l5pe277yJJyxcblx0XHRcdFx0XHRcdCfliqDlhaXlu7rnq4vogIXoqI7oq5bpoIHliLDnm6PoppbmuIXllq7vvIjlnKjpgJrnn6XmmYLvvIknXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR0eXBlOiAnZW51bScsXG5cdFx0XHRcdFx0ZW51bVZhbHVlczogVHdpbmtsZS5jb25maWcud2F0Y2hsaXN0RW51bXMsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIFR3aW5rbGVDb25maWcubWFya0NvcHl2aW9QYWdlc0FzUGF0cm9sbGVkIChib29sZWFuKVxuXHRcdFx0XHQvLyBJZiwgd2hlbiBhcHBseWluZyBjb3B5dmlvIHRlbXBsYXRlIHRvIHBhZ2UsIHRvIG1hcmsgdGhlIHBhZ2UgYXMgcGF0cm9sbGVkIChpZiB0aGUgcGFnZSB3YXMgcmVhY2hlZCBmcm9tIE5ld1BhZ2VzKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ21hcmtDb3B5dmlvUGFnZXNBc1BhdHJvbGxlZCcsXG5cdFx0XHRcdFx0bGFiZWw6IHdpbmRvdy53Z1VMUygn5qCH6K6w5pe25qCH6K6w6aG16Z2i5Li65bey5beh5p+l77yI5aaC5Y+v6IO977yJJywgJ+aomeiomOaZguaomeiomOmggemdoueCuuW3suW3oeafpe+8iOWmguWPr+iDve+8iScpLFxuXHRcdFx0XHRcdGhlbHB0aXA6IHdpbmRvdy53Z1VMUyhcblx0XHRcdFx0XHRcdCfln7rkuo7mioDmnK/ljp/lm6DvvIzpobXpnaLku4XkvJrlnKjnlLFTcGVjaWFsOk5ld1BhZ2Vz5Yiw6L6+5pe26KKr5qCH6K6w5Li65bey5beh5p+l44CCJyxcblx0XHRcdFx0XHRcdCfln7rmlrzmioDooZPljp/lm6DvvIzpoIHpnaLlg4XmnIPlnKjnlLFTcGVjaWFsOk5ld1BhZ2Vz5Yiw6YGU5pmC6KKr5qiZ6KiY54K65bey5beh5p+l44CCJ1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHRpdGxlOiB3aW5kb3cud2dVTFMoJ+makOiXjycsICfpmrHol48nKSxcblx0XHRcdGhpZGRlbjogdHJ1ZSxcblx0XHRcdHByZWZlcmVuY2VzOiBbXG5cdFx0XHRcdC8vIHR3aW5rbGUuanM6IHBvcnRsZXQgc2V0dXBcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdwb3J0bGV0QXJlYScsXG5cdFx0XHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAncG9ydGxldElkJyxcblx0XHRcdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdwb3J0bGV0TmFtZScsXG5cdFx0XHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAncG9ydGxldFR5cGUnLFxuXHRcdFx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3BvcnRsZXROZXh0Jyxcblx0XHRcdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gdHdpbmtsZWZsdWZmLmpzOiBkZWZpbmVzIGhvdyBtYW55IHJldmlzaW9uIHRvIHF1ZXJ5IG1heGltdW0sIG1heGltdW0gcG9zc2libGUgaXMgNTAsIGRlZmF1bHQgaXMgNTBcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdyZXZlcnRNYXhSZXZpc2lvbnMnLFxuXHRcdFx0XHRcdHR5cGU6ICdpbnRlZ2VyJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gdHdpbmtsZWJhdGNoZGVsZXRlLmpzOiBIb3cgbWFueSBwYWdlcyBzaG91bGQgYmUgcHJvY2Vzc2VkIG1heGltdW1cblx0XHRcdFx0e1xuXHRcdFx0XHRcdG5hbWU6ICdiYXRjaE1heCcsXG5cdFx0XHRcdFx0dHlwZTogJ2ludGVnZXInLFxuXHRcdFx0XHRcdGFkbWluT25seTogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gSG93IG1hbnkgcGFnZXMgc2hvdWxkIGJlIHByb2Nlc3NlZCBhdCBhIHRpbWUgYnkgZGVwcm9kIGFuZCBiYXRjaGRlbGV0ZS9wcm90ZWN0L3VuZGVsZXRlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYW1lOiAnYmF0Y2hDaHVua3MnLFxuXHRcdFx0XHRcdHR5cGU6ICdpbnRlZ2VyJyxcblx0XHRcdFx0XHRhZG1pbk9ubHk6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdF07IC8vIGVuZCBvZiBUd2lua2xlLmNvbmZpZy5zZWN0aW9uc1xuXHRUd2lua2xlLmNvbmZpZy5pbml0ID0gKCkgPT4ge1xuXHRcdC8vIGNyZWF0ZSB0aGUgY29uZmlnIHBhZ2UgYXQgVHdpbmtsZS5nZXRQcmVmKCdjb25maWdQYWdlJylcblx0XHRpZiAobXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpID09PSBUd2lua2xlLmdldFByZWYoJ2NvbmZpZ1BhZ2UnKSAmJiBtdy5jb25maWcuZ2V0KCd3Z0FjdGlvbicpID09PSAndmlldycpIHtcblx0XHRcdGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3R3aW5rbGUtY29uZmlnJykpIHtcblx0XHRcdFx0cmV0dXJuOyAvLyBtYXliZSB0aGUgcGFnZSBpcyBtaXNjb25maWd1cmVkLCBvciBzb21ldGhpbmcgLSBidXQgYW55IGF0dGVtcHQgdG8gbW9kaWZ5IGl0IHdpbGwgYmUgcG9pbnRsZXNzXG5cdFx0XHR9XG5cdFx0XHRjb25zdCBjb250ZW50ZGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3R3aW5rbGUtY29uZmlnLWNvbnRlbnQnKTtcblx0XHRcdGNvbnRlbnRkaXYudGV4dENvbnRlbnQgPSAnJzsgLy8gY2xlYXIgY2hpbGRyZW5cblx0XHRcdC8vIHN0YXJ0IGEgdGFibGUgb2YgY29udGVudHNcblx0XHRcdGNvbnN0IHRvY3RhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0XHR0b2N0YWJsZS5jbGFzc05hbWUgPSAndG9jJztcblx0XHRcdHRvY3RhYmxlLnN0eWxlLm1hcmdpbkxlZnQgPSAnMC40ZW0nO1xuXHRcdFx0Ly8gY3JlYXRlIFRPQyB0aXRsZVxuXHRcdFx0Y29uc3QgdG9jdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRcdHRvY3RpdGxlLmlkID0gJ3RvY3RpdGxlJztcblx0XHRcdGNvbnN0IHRvY2gyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcblx0XHRcdHRvY2gyLnRleHRDb250ZW50ID0gd2luZG93LndnVUxTKCfnm67lvZUgJywgJ+ebrumMhCAnKTtcblx0XHRcdHRvY3RpdGxlLmFwcGVuZENoaWxkKHRvY2gyKTtcblx0XHRcdC8vIGFkZCBUT0Mgc2hvdy9oaWRlIGxpbmtcblx0XHRcdGNvbnN0IHRvY3RvZ2dsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblx0XHRcdHRvY3RvZ2dsZS5jbGFzc05hbWUgPSAndG9jdG9nZ2xlJztcblx0XHRcdHRvY3RvZ2dsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnWycpKTtcblx0XHRcdGNvbnN0IHRvY3RvZ2dsZWxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cdFx0XHR0b2N0b2dnbGVsaW5rLmNsYXNzTmFtZSA9ICdpbnRlcm5hbCc7XG5cdFx0XHR0b2N0b2dnbGVsaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsICcjdHctdG9jc2hvd2hpZGUnKTtcblx0XHRcdHRvY3RvZ2dsZWxpbmsudGV4dENvbnRlbnQgPSB3aW5kb3cud2dVTFMoJ+makOiXjycsICfpmrHol48nKTtcblx0XHRcdHRvY3RvZ2dsZS5hcHBlbmRDaGlsZCh0b2N0b2dnbGVsaW5rKTtcblx0XHRcdHRvY3RvZ2dsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnXScpKTtcblx0XHRcdHRvY3RpdGxlLmFwcGVuZENoaWxkKHRvY3RvZ2dsZSk7XG5cdFx0XHR0b2N0YWJsZS5hcHBlbmRDaGlsZCh0b2N0aXRsZSk7XG5cdFx0XHQvLyBjcmVhdGUgaXRlbSBjb250YWluZXI6IHRoaXMgaXMgd2hhdCB3ZSBhZGQgc3R1ZmYgdG9cblx0XHRcdGNvbnN0IHRvY3VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcblx0XHRcdHRvY3RvZ2dsZWxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcblx0XHRcdFx0J2NsaWNrJyxcblx0XHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0ICR0b2N1bCA9ICQodG9jdWwpO1xuXHRcdFx0XHRcdCR0b2N1bC50b2dnbGUoKTtcblx0XHRcdFx0XHRpZiAoJHRvY3VsLmZpbmQoJzp2aXNpYmxlJykubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHR0b2N0b2dnbGVsaW5rLnRleHRDb250ZW50ID0gd2luZG93LndnVUxTKCfpmpDol48nLCAn6Zqx6JePJyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRvY3RvZ2dsZWxpbmsudGV4dENvbnRlbnQgPSB3aW5kb3cud2dVTFMoJ+aYvuekuicsICfpoa/npLonKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGZhbHNlXG5cdFx0XHQpO1xuXHRcdFx0dG9jdGFibGUuYXBwZW5kQ2hpbGQodG9jdWwpO1xuXHRcdFx0Y29udGVudGRpdi5hcHBlbmRDaGlsZCh0b2N0YWJsZSk7XG5cdFx0XHRjb25zdCBjb250ZW50Zm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zY3JpcHQtdXJsXG5cdFx0XHRjb250ZW50Zm9ybS5zZXRBdHRyaWJ1dGUoJ2FjdGlvbicsICdqYXZhc2NyaXB0OnZvaWQoMCknKTsgLy8gd2FzICN0dy1zYXZlIC0gY2hhbmdlZCB0byB2b2lkKDApIHRvIHdvcmsgYXJvdW5kIENocm9tZSBpc3N1ZVxuXHRcdFx0Y29udGVudGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgVHdpbmtsZS5jb25maWcuc2F2ZSwgdHJ1ZSk7XG5cdFx0XHRjb250ZW50ZGl2LmFwcGVuZENoaWxkKGNvbnRlbnRmb3JtKTtcblx0XHRcdGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG5cdFx0XHRjb250YWluZXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XG5cdFx0XHRjb250ZW50Zm9ybS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXHRcdFx0JChUd2lua2xlLmNvbmZpZy5zZWN0aW9ucykuZWFjaCgoc2VjdGlvbmtleSwgc2VjdGlvbikgPT4ge1xuXHRcdFx0XHRpZiAoc2VjdGlvbi5oaWRkZW4gfHwgKHNlY3Rpb24uYWRtaW5Pbmx5ICYmICFNb3JlYml0cy51c2VySXNTeXNvcCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTsgLy8gaS5lLiBcImNvbnRpbnVlXCIgaW4gdGhpcyBjb250ZXh0XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gYWRkIHRvIFRPQ1xuXHRcdFx0XHRjb25zdCB0b2NsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG5cdFx0XHRcdHRvY2xpLmNsYXNzTmFtZSA9ICd0b2NsZXZlbC0xJztcblx0XHRcdFx0Y29uc3QgdG9jYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblx0XHRcdFx0dG9jYS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBgIyR7c2VjdGlvbi5tb2R1bGV9YCk7XG5cdFx0XHRcdHRvY2EuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc2VjdGlvbi50aXRsZSkpO1xuXHRcdFx0XHR0b2NsaS5hcHBlbmRDaGlsZCh0b2NhKTtcblx0XHRcdFx0dG9jdWwuYXBwZW5kQ2hpbGQodG9jbGkpO1xuXHRcdFx0XHRsZXQgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcblx0XHRcdFx0bGV0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuXHRcdFx0XHRjZWxsLnNldEF0dHJpYnV0ZSgnY29sc3BhbicsICczJyk7XG5cdFx0XHRcdGNvbnN0IGhlYWRpbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoNCcpO1xuXHRcdFx0XHRoZWFkaW5nLnN0eWxlLmJvcmRlckJvdHRvbSA9ICcxcHggc29saWQgIzgwODA4MCc7XG5cdFx0XHRcdGhlYWRpbmcuc3R5bGUubWFyZ2luVG9wID0gJzAuMmVtJztcblx0XHRcdFx0aGVhZGluZy5pZCA9IHNlY3Rpb24ubW9kdWxlO1xuXHRcdFx0XHRoZWFkaW5nLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHNlY3Rpb24udGl0bGUpKTtcblx0XHRcdFx0Y2VsbC5hcHBlbmRDaGlsZChoZWFkaW5nKTtcblx0XHRcdFx0cm93LmFwcGVuZENoaWxkKGNlbGwpO1xuXHRcdFx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQocm93KTtcblx0XHRcdFx0bGV0IHJvd2NvdW50ID0gMTsgLy8gZm9yIHJvdyBiYW5kaW5nXG5cdFx0XHRcdC8vIGFkZCBlYWNoIG9mIHRoZSBwcmVmZXJlbmNlcyB0byB0aGUgZm9ybVxuXHRcdFx0XHQkKHNlY3Rpb24ucHJlZmVyZW5jZXMpLmVhY2goKHByZWZrZXksIHByZWYpID0+IHtcblx0XHRcdFx0XHRpZiAocHJlZi5hZG1pbk9ubHkgJiYgIU1vcmViaXRzLnVzZXJJc1N5c29wKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTsgLy8gaS5lLiBcImNvbnRpbnVlXCIgaW4gdGhpcyBjb250ZXh0XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcblx0XHRcdFx0XHRyb3cuc3R5bGUubWFyZ2luQm90dG9tID0gJzAuMmVtJztcblx0XHRcdFx0XHQvLyBjcmVhdGUgb2RkIHJvdyBiYW5kaW5nXG5cdFx0XHRcdFx0aWYgKHJvd2NvdW50KysgJSAyID09PSAwKSB7XG5cdFx0XHRcdFx0XHRyb3cuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JnYigxMjggMTI4IDEyOC8uMSknO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcblx0XHRcdFx0XHRsZXQgbGFiZWw7XG5cdFx0XHRcdFx0bGV0IGlucHV0O1xuXHRcdFx0XHRcdGNvbnN0IGdvdFByZWYgPSBUd2lua2xlLmdldFByZWYocHJlZi5uYW1lKTtcblx0XHRcdFx0XHRzd2l0Y2ggKHByZWYudHlwZSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnYm9vbGVhbic6XG5cdFx0XHRcdFx0XHRcdC8vIGNyZWF0ZSBhIGNoZWNrYm94XG5cdFx0XHRcdFx0XHRcdGNlbGwuc2V0QXR0cmlidXRlKCdjb2xzcGFuJywgJzInKTtcblx0XHRcdFx0XHRcdFx0bGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuXHRcdFx0XHRcdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG5cdFx0XHRcdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdjaGVja2JveCcpO1xuXHRcdFx0XHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgcHJlZi5uYW1lKTtcblx0XHRcdFx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgcHJlZi5uYW1lKTtcblx0XHRcdFx0XHRcdFx0aWYgKGdvdFByZWYgPT09IHRydWUpIHtcblx0XHRcdFx0XHRcdFx0XHRpbnB1dC5jaGVja2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRsYWJlbC5hcHBlbmRDaGlsZChpbnB1dCk7XG5cdFx0XHRcdFx0XHRcdGxhYmVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHByZWYubGFiZWwpKTtcblx0XHRcdFx0XHRcdFx0Y2VsbC5hcHBlbmRDaGlsZChsYWJlbCk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnc3RyaW5nJzogLy8gY3JlYXRlIGFuIGlucHV0IGJveFxuXHRcdFx0XHRcdFx0Y2FzZSAnaW50ZWdlcic6XG5cdFx0XHRcdFx0XHRcdC8vIGFkZCBsYWJlbCB0byBmaXJzdCBjb2x1bW5cblx0XHRcdFx0XHRcdFx0Y2VsbC5zdHlsZS50ZXh0QWxpZ24gPSAncmlnaHQnO1xuXHRcdFx0XHRcdFx0XHRjZWxsLnN0eWxlLnBhZGRpbmdSaWdodCA9ICcwLjVlbSc7XG5cdFx0XHRcdFx0XHRcdGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcblx0XHRcdFx0XHRcdFx0bGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCBwcmVmLm5hbWUpO1xuXHRcdFx0XHRcdFx0XHRsYWJlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShgJHtwcmVmLmxhYmVsfe+8mmApKTtcblx0XHRcdFx0XHRcdFx0Y2VsbC5hcHBlbmRDaGlsZChsYWJlbCk7XG5cdFx0XHRcdFx0XHRcdHJvdy5hcHBlbmRDaGlsZChjZWxsKTtcblx0XHRcdFx0XHRcdFx0Ly8gYWRkIGlucHV0IGJveCB0byBzZWNvbmQgY29sdW1uXG5cdFx0XHRcdFx0XHRcdGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuXHRcdFx0XHRcdFx0XHRjZWxsLnN0eWxlLnBhZGRpbmdSaWdodCA9ICcxZW0nO1xuXHRcdFx0XHRcdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG5cdFx0XHRcdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0Jyk7XG5cdFx0XHRcdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSgnaWQnLCBwcmVmLm5hbWUpO1xuXHRcdFx0XHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBwcmVmLm5hbWUpO1xuXHRcdFx0XHRcdFx0XHRpZiAocHJlZi50eXBlID09PSAnaW50ZWdlcicpIHtcblx0XHRcdFx0XHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ3NpemUnLCA2KTtcblx0XHRcdFx0XHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnbnVtYmVyJyk7XG5cdFx0XHRcdFx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCdzdGVwJywgJzEnKTsgLy8gaW50ZWdlcnMgb25seVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aWYgKGdvdFByZWYpIHtcblx0XHRcdFx0XHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgZ290UHJlZik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0Y2VsbC5hcHBlbmRDaGlsZChpbnB1dCk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnZW51bSc6IHtcblx0XHRcdFx0XHRcdFx0Ly8gY3JlYXRlIGEgY29tYm8gYm94XG5cdFx0XHRcdFx0XHRcdC8vIGFkZCBsYWJlbCB0byBmaXJzdCBjb2x1bW5cblx0XHRcdFx0XHRcdFx0Ly8gbm90ZTogZHVwbGljYXRlcyB0aGUgY29kZSBhYm92ZSwgdW5kZXIgc3RyaW5nL2ludGVnZXJcblx0XHRcdFx0XHRcdFx0Y2VsbC5zdHlsZS50ZXh0QWxpZ24gPSAncmlnaHQnO1xuXHRcdFx0XHRcdFx0XHRjZWxsLnN0eWxlLnBhZGRpbmdSaWdodCA9ICcwLjVlbSc7XG5cdFx0XHRcdFx0XHRcdGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcblx0XHRcdFx0XHRcdFx0bGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCBwcmVmLm5hbWUpO1xuXHRcdFx0XHRcdFx0XHRsYWJlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShgJHtwcmVmLmxhYmVsfe+8mmApKTtcblx0XHRcdFx0XHRcdFx0Y2VsbC5hcHBlbmRDaGlsZChsYWJlbCk7XG5cdFx0XHRcdFx0XHRcdHJvdy5hcHBlbmRDaGlsZChjZWxsKTtcblx0XHRcdFx0XHRcdFx0Ly8gYWRkIGlucHV0IGJveCB0byBzZWNvbmQgY29sdW1uXG5cdFx0XHRcdFx0XHRcdGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuXHRcdFx0XHRcdFx0XHRjZWxsLnN0eWxlLnBhZGRpbmdSaWdodCA9ICcxZW0nO1xuXHRcdFx0XHRcdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xuXHRcdFx0XHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgcHJlZi5uYW1lKTtcblx0XHRcdFx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgcHJlZi5uYW1lKTtcblx0XHRcdFx0XHRcdFx0bGV0IG9wdGlvbkV4aXN0cyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRmb3IgKGNvbnN0IFtlbnVtdmFsdWUsIGVudW1kaXNwbGF5XSBvZiBPYmplY3QuZW50cmllcyhwcmVmLmVudW1WYWx1ZXMpKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9uLnNldEF0dHJpYnV0ZSgndmFsdWUnLCBlbnVtdmFsdWUpO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdFx0XHRcdGdvdFByZWYgPT09IGVudW12YWx1ZSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFjayB0byBjb252ZXJ0IG9sZCBib29sZWFuIHdhdGNobGlzdCBwcmVmc1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gdG8gY29ycmVzcG9uZGluZyBlbnVtcyAoYWRkZWQgaW4gdjIuMSlcblx0XHRcdFx0XHRcdFx0XHRcdCh0eXBlb2YgZ290UHJlZiA9PT0gJ2Jvb2xlYW4nICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCgoZ290UHJlZiAmJiBlbnVtdmFsdWUgPT09ICd5ZXMnKSB8fCAoIWdvdFByZWYgJiYgZW51bXZhbHVlID09PSAnbm8nKSkpXG5cdFx0XHRcdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvcHRpb24uc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsICdzZWxlY3RlZCcpO1xuXHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9uRXhpc3RzID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9uLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGVudW1kaXNwbGF5KSk7XG5cdFx0XHRcdFx0XHRcdFx0aW5wdXQuYXBwZW5kQ2hpbGQob3B0aW9uKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHQvLyBBcHBlbmQgdXNlci1kZWZpbmVkIHZhbHVlIHRvIG9wdGlvbnNcblx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25FeGlzdHMpIHtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcblx0XHRcdFx0XHRcdFx0XHRvcHRpb24uc2V0QXR0cmlidXRlKCd2YWx1ZScsIGdvdFByZWYpO1xuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9uLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGdvdFByZWYpKTtcblx0XHRcdFx0XHRcdFx0XHRpbnB1dC5hcHBlbmRDaGlsZChvcHRpb24pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGNlbGwuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNhc2UgJ3NldCc6IHtcblx0XHRcdFx0XHRcdFx0Ly8gY3JlYXRlIGEgc2V0IG9mIGNoZWNrIGJveGVzXG5cdFx0XHRcdFx0XHRcdC8vIGFkZCBsYWJlbCBmaXJzdCBvZiBhbGxcblx0XHRcdFx0XHRcdFx0Y2VsbC5zZXRBdHRyaWJ1dGUoJ2NvbHNwYW4nLCAnMicpO1xuXHRcdFx0XHRcdFx0XHRsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7IC8vIG5vdCByZWFsbHkgbmVjZXNzYXJ5IHRvIHVzZSBhIGxhYmVsIGVsZW1lbnQgaGVyZSwgYnV0IHdlIGRvIGl0IGZvciBjb25zaXN0ZW5jeSBvZiBzdHlsaW5nXG5cdFx0XHRcdFx0XHRcdGxhYmVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGAke3ByZWYubGFiZWx977yaYCkpO1xuXHRcdFx0XHRcdFx0XHRjZWxsLmFwcGVuZENoaWxkKGxhYmVsKTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgY2hlY2tkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRcdFx0XHRcdFx0Y2hlY2tkaXYuc3R5bGUucGFkZGluZ0xlZnQgPSAnMWVtJztcblx0XHRcdFx0XHRcdFx0Y29uc3Qgd29ya2VyID0gKGl0ZW1rZXksIGl0ZW12YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IGNoZWNrbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuXHRcdFx0XHRcdFx0XHRcdGNoZWNrbGFiZWwuc3R5bGUubWFyZ2luUmlnaHQgPSAnMC43ZW0nO1xuXHRcdFx0XHRcdFx0XHRcdGNoZWNrbGFiZWwuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IGNoZWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcblx0XHRcdFx0XHRcdFx0XHRjaGVjay5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnY2hlY2tib3gnKTtcblx0XHRcdFx0XHRcdFx0XHRjaGVjay5zZXRBdHRyaWJ1dGUoJ2lkJywgYCR7cHJlZi5uYW1lfV8ke2l0ZW1rZXl9YCk7XG5cdFx0XHRcdFx0XHRcdFx0Y2hlY2suc2V0QXR0cmlidXRlKCduYW1lJywgYCR7cHJlZi5uYW1lfV8ke2l0ZW1rZXl9YCk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGdvdFByZWYgJiYgZ290UHJlZi5pbmNsdWRlcyhpdGVta2V5KSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2hlY2suY2hlY2tlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIGNhdGVyIGZvciBsZWdhY3kgaW50ZWdlciBhcnJheSB2YWx1ZXMgZm9yIHVubGlua05hbWVzcGFjZXMgKHRoaXMgY2FuIGJlIHJlbW92ZWQgYSBmZXcgeWVhcnMgZG93biB0aGUgdHJhY2suLi4pXG5cdFx0XHRcdFx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdFx0XHRcdFx0cHJlZi5uYW1lID09PSAndW5saW5rTmFtZXNwYWNlcycgJiZcblx0XHRcdFx0XHRcdFx0XHRcdGdvdFByZWYgJiZcblx0XHRcdFx0XHRcdFx0XHRcdGdvdFByZWYuaW5jbHVkZXMoTnVtYmVyLnBhcnNlSW50KGl0ZW1rZXksIDEwKSlcblx0XHRcdFx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNoZWNrLmNoZWNrZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRjaGVja2xhYmVsLmFwcGVuZENoaWxkKGNoZWNrKTtcblx0XHRcdFx0XHRcdFx0XHRjaGVja2xhYmVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGl0ZW12YWx1ZSkpO1xuXHRcdFx0XHRcdFx0XHRcdGNoZWNrZGl2LmFwcGVuZENoaWxkKGNoZWNrbGFiZWwpO1xuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0XHRpZiAocHJlZi5zZXREaXNwbGF5T3JkZXIpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBhZGQgY2hlY2sgYm94ZXMgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBkaXNwbGF5IG9yZGVyXG5cdFx0XHRcdFx0XHRcdFx0Zm9yIChjb25zdCBpdGVtIG9mIHByZWYuc2V0RGlzcGxheU9yZGVyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR3b3JrZXIoaXRlbSwgcHJlZi5zZXRWYWx1ZXNbaXRlbV0pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBhZGQgY2hlY2sgYm94ZXMgYWNjb3JkaW5nIHRvIHRoZSBvcmRlciBpdCBnZXRzIGZlZCB0byB1cyAocHJvYmFibHkgc3RyaWN0IGFscGhhYmV0aWNhbClcblx0XHRcdFx0XHRcdFx0XHRmb3IgKGNvbnN0IFtpdGVta2V5LCBpdGVtdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByZWYuc2V0VmFsdWVzKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0d29ya2VyKGl0ZW1rZXksIGl0ZW12YWx1ZSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGNlbGwuYXBwZW5kQ2hpbGQoY2hlY2tkaXYpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNhc2UgJ2N1c3RvbUxpc3QnOiB7XG5cdFx0XHRcdFx0XHRcdC8vIGFkZCBsYWJlbCB0byBmaXJzdCBjb2x1bW5cblx0XHRcdFx0XHRcdFx0Y2VsbC5zdHlsZS50ZXh0QWxpZ24gPSAncmlnaHQnO1xuXHRcdFx0XHRcdFx0XHRjZWxsLnN0eWxlLnBhZGRpbmdSaWdodCA9ICcwLjVlbSc7XG5cdFx0XHRcdFx0XHRcdGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcblx0XHRcdFx0XHRcdFx0bGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCBwcmVmLm5hbWUpO1xuXHRcdFx0XHRcdFx0XHRsYWJlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShgJHtwcmVmLmxhYmVsfe+8mmApKTtcblx0XHRcdFx0XHRcdFx0Y2VsbC5hcHBlbmRDaGlsZChsYWJlbCk7XG5cdFx0XHRcdFx0XHRcdHJvdy5hcHBlbmRDaGlsZChjZWxsKTtcblx0XHRcdFx0XHRcdFx0Ly8gYWRkIGJ1dHRvbiB0byBzZWNvbmQgY29sdW1uXG5cdFx0XHRcdFx0XHRcdGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuXHRcdFx0XHRcdFx0XHRjZWxsLnN0eWxlLnBhZGRpbmdSaWdodCA9ICcxZW0nO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBjdXN0b21MaXN0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5cdFx0XHRcdFx0XHRcdGN1c3RvbUxpc3RCdXR0b24uc2V0QXR0cmlidXRlKCdpZCcsIHByZWYubmFtZSk7XG5cdFx0XHRcdFx0XHRcdGN1c3RvbUxpc3RCdXR0b24uc2V0QXR0cmlidXRlKCduYW1lJywgcHJlZi5uYW1lKTtcblx0XHRcdFx0XHRcdFx0Y3VzdG9tTGlzdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7XG5cdFx0XHRcdFx0XHRcdGN1c3RvbUxpc3RCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBUd2lua2xlLmNvbmZpZy5saXN0RGlhbG9nLmRpc3BsYXksIGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0Ly8gdXNlIGpRdWVyeSBkYXRhIG9uIHRoZSBidXR0b24gdG8gc3RvcmUgdGhlIGN1cnJlbnQgY29uZmlnIHZhbHVlXG5cdFx0XHRcdFx0XHRcdCQoY3VzdG9tTGlzdEJ1dHRvbikuZGF0YSh7XG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU6IGdvdFByZWYsXG5cdFx0XHRcdFx0XHRcdFx0cHJlZixcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdGN1c3RvbUxpc3RCdXR0b24uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUod2luZG93LndnVUxTKCfnvJbovpHpobnnm64nLCAn57eo6Lyv6aCF55uuJykpKTtcblx0XHRcdFx0XHRcdFx0Y2VsbC5hcHBlbmRDaGlsZChjdXN0b21MaXN0QnV0dG9uKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHR2b2lkIG13Lm5vdGlmeShgdHdpbmtsZWNvbmZpZzog5pyq55+l57G75Z6L55qE5bGe5oCnICR7cHJlZi5uYW1lfWAsIHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0XHRcdFx0dGFnOiAndHdpbmtsZWNvbmZpZycsXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cm93LmFwcGVuZENoaWxkKGNlbGwpO1xuXHRcdFx0XHRcdC8vIGFkZCBoZWxwIHRpcFxuXHRcdFx0XHRcdGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuXHRcdFx0XHRcdGNlbGwuc3R5bGUuZm9udFNpemUgPSAnOTAlJztcblx0XHRcdFx0XHRjZWxsLnN0eWxlLmNvbG9yID0gJ2dyYXknO1xuXHRcdFx0XHRcdGlmIChwcmVmLmhlbHB0aXApIHtcblx0XHRcdFx0XHRcdC8vIGNvbnZlcnQgbWVudGlvbnMgb2YgdGVtcGxhdGVzIGluIHRoZSBoZWxwdGlwIHRvIGNsaWNrYWJsZSBsaW5rc1xuXHRcdFx0XHRcdFx0Y2VsbC5pbm5lckhUTUwgPSBwcmVmLmhlbHB0aXBcblx0XHRcdFx0XHRcdFx0LnJlcGxhY2UoXG5cdFx0XHRcdFx0XHRcdFx0L3t7KC4rPyl9fS9nLFxuXHRcdFx0XHRcdFx0XHRcdGB7ezxhIGhyZWY9XCIke213LnV0aWwuZ2V0VXJsKCdUZW1wbGF0ZTonKX0kMVwiIHJlbD1cIm5vb3BlbmVyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+JDE8L2E+fX1gXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0LnJlcGxhY2UoXG5cdFx0XHRcdFx0XHRcdFx0L1xcW1xcWyguKz8pXV0vZyxcblx0XHRcdFx0XHRcdFx0XHRgPGEgaHJlZj1cIiR7bXcudXRpbC5nZXRVcmwoJycpfSQxXCIgcmVsPVwibm9vcGVuZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIj4kMTwvYT5gXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGFkZCByZXNldCBsaW5rIChjdXN0b20gbGlzdHMgZG9uJ3QgbmVlZCB0aGlzLCBhcyB0aGVpciBjb25maWcgdmFsdWUgaXNuJ3QgZGlzcGxheWVkIG9uIHRoZSBmb3JtKVxuXHRcdFx0XHRcdGlmIChwcmVmLnR5cGUgIT09ICdjdXN0b21MaXN0Jykge1xuXHRcdFx0XHRcdFx0Y29uc3QgcmVzZXRsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHRcdFx0XHRcdFx0cmVzZXRsaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsICcjdHctcmVzZXQnKTtcblx0XHRcdFx0XHRcdHJlc2V0bGluay5zZXRBdHRyaWJ1dGUoJ2lkJywgYHR3aW5rbGUtY29uZmlnLXJlc2V0LSR7cHJlZi5uYW1lfWApO1xuXHRcdFx0XHRcdFx0cmVzZXRsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgVHdpbmtsZS5jb25maWcucmVzZXRQcmVmTGluaywgZmFsc2UpO1xuXHRcdFx0XHRcdFx0cmVzZXRsaW5rLnN0eWxlLmNzc0Zsb2F0ID0gJ3JpZ2h0Jztcblx0XHRcdFx0XHRcdHJlc2V0bGluay5zdHlsZS5tYXJnaW4gPSAnMCAwLjZlbSc7XG5cdFx0XHRcdFx0XHRyZXNldGxpbmsuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUod2luZG93LndnVUxTKCflpI3kvY0nLCAn5b6p5L2NJykpKTtcblx0XHRcdFx0XHRcdGNlbGwuYXBwZW5kQ2hpbGQocmVzZXRsaW5rKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cm93LmFwcGVuZENoaWxkKGNlbGwpO1xuXHRcdFx0XHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZChyb3cpO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IGZvb3RlcmJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdFx0Zm9vdGVyYm94LnNldEF0dHJpYnV0ZSgnaWQnLCAndHdpbmtsZS1jb25maWctYnV0dG9ucGFuZScpO1xuXHRcdFx0Zm9vdGVyYm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjQkNDQURGJztcblx0XHRcdGZvb3RlcmJveC5zdHlsZS5wYWRkaW5nID0gJzAuNWVtJztcblx0XHRcdGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuXHRcdFx0c3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZSgnaWQnLCAndHdpbmtsZS1jb25maWctc3VibWl0Jyk7XG5cdFx0XHRzdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKCd0eXBlJywgJ3N1Ym1pdCcpO1xuXHRcdFx0c3VibWl0QnV0dG9uLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHdpbmRvdy53Z1VMUygn5L+d5a2Y5L+u5pS5JywgJ+WEsuWtmOS/ruaUuScpKSk7XG5cdFx0XHRmb290ZXJib3guYXBwZW5kQ2hpbGQoc3VibWl0QnV0dG9uKTtcblx0XHRcdGNvbnN0IGZvb3RlcnNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cdFx0XHRmb290ZXJzcGFuLmNsYXNzTmFtZSA9ICdwbGFpbmxpbmtzJztcblx0XHRcdGZvb3RlcnNwYW4uc3R5bGUubWFyZ2luTGVmdCA9ICcyLjRlbSc7XG5cdFx0XHRmb290ZXJzcGFuLnN0eWxlLmZvbnRTaXplID0gJzkwJSc7XG5cdFx0XHRjb25zdCBmb290ZXJhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHRcdFx0Zm9vdGVyYS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnI3R3LXJlc2V0LWFsbCcpO1xuXHRcdFx0Zm9vdGVyYS5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3R3aW5rbGUtY29uZmlnLXJlc2V0YWxsJyk7XG5cdFx0XHRmb290ZXJhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgVHdpbmtsZS5jb25maWcucmVzZXRBbGxQcmVmcywgZmFsc2UpO1xuXHRcdFx0Zm9vdGVyYS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh3aW5kb3cud2dVTFMoJ+aBouWkjem7mOiupCcsICfmgaLlvqnpoJDoqK0nKSkpO1xuXHRcdFx0Zm9vdGVyc3Bhbi5hcHBlbmRDaGlsZChmb290ZXJhKTtcblx0XHRcdGZvb3RlcmJveC5hcHBlbmRDaGlsZChmb290ZXJzcGFuKTtcblx0XHRcdGNvbnRlbnRmb3JtLmFwcGVuZENoaWxkKGZvb3RlcmJveCk7XG5cdFx0XHQvLyBzaW5jZSBhbGwgdGhlIHNlY3Rpb24gaGVhZGVycyBleGlzdCBub3csIHdlIGNhbiB0cnkgZ29pbmcgdG8gdGhlIHJlcXVlc3RlZCBhbmNob3Jcblx0XHRcdGlmICh3aW5kb3cubG9jYXRpb24uaGFzaCkge1xuXHRcdFx0XHRjb25zdCBsb2MgPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdFx0d2luZG93LmxvY2F0aW9uLmhhc2ggPSAnJztcblx0XHRcdFx0d2luZG93LmxvY2F0aW9uLmhhc2ggPSBsb2M7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChcblx0XHRcdG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlTnVtYmVyJykgPT09IG13LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlSWRzJykudXNlciAmJlxuXHRcdFx0bXcuY29uZmlnLmdldCgnd2dUaXRsZScpLmluZGV4T2YobXcuY29uZmlnLmdldCgnd2dVc2VyTmFtZScpKSA9PT0gMCAmJlxuXHRcdFx0bXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLnNsaWNlKC0zKSA9PT0gJy5qcydcblx0XHQpIHtcblx0XHRcdGNvbnN0IGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdFx0Ly8gU3R5bGVkIGluIHR3aW5rbGUuY3NzXG5cdFx0XHRib3guc2V0QXR0cmlidXRlKCdpZCcsICd0d2lua2xlLWNvbmZpZy1oZWFkZXJib3gnKTtcblx0XHRcdGxldCBsaW5rO1xuXHRcdFx0Y29uc3Qgc2NyaXB0UGFnZU5hbWUgPSBtdy5jb25maWdcblx0XHRcdFx0LmdldCgnd2dQYWdlTmFtZScpXG5cdFx0XHRcdC5zbGljZShcblx0XHRcdFx0XHRtdy5jb25maWcuZ2V0KCd3Z1BhZ2VOYW1lJykubGFzdEluZGV4T2YoJy8nKSArIDEsXG5cdFx0XHRcdFx0bXcuY29uZmlnLmdldCgnd2dQYWdlTmFtZScpLmxhc3RJbmRleE9mKCcuanMnKVxuXHRcdFx0XHQpO1xuXHRcdFx0aWYgKHNjcmlwdFBhZ2VOYW1lID09PSAndHdpbmtsZW9wdGlvbnMnKSB7XG5cdFx0XHRcdC8vIHBsYWNlIFwid2h5IG5vdCB0cnkgdGhlIHByZWZlcmVuY2UgcGFuZWxcIiBub3RpY2Vcblx0XHRcdFx0Ym94LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY29uZmlnLXR3b3B0LWJveCcpO1xuXHRcdFx0XHRpZiAobXcuY29uZmlnLmdldCgnd2dBcnRpY2xlSWQnKSA+IDApIHtcblx0XHRcdFx0XHQvLyBwYWdlIGV4aXN0c1xuXHRcdFx0XHRcdGJveC5hcHBlbmRDaGlsZChcblx0XHRcdFx0XHRcdGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0J+i/memhteWMheWQq+aCqOeahFR3aW5rbGXlj4LmlbDorr7nva7vvIzmgqjlj6/kvb/nlKgnLFxuXHRcdFx0XHRcdFx0XHRcdCfpgJnpoIHljIXlkKvmgqjnmoRUd2lua2xl5YGP5aW96Kit5a6a77yM5oKo5Y+v5L2/55SoJ1xuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBwYWdlIGRvZXMgbm90IGV4aXN0XG5cdFx0XHRcdFx0Ym94LmFwcGVuZENoaWxkKFxuXHRcdFx0XHRcdFx0ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5oKo5Y+v6YWN572u5oKo55qEVHdpbmtsZe+8jOmAmui/h+S9v+eUqCcsICfmgqjlj6/phY3nva7mgqjnmoRUd2lua2xl77yM6YCa6YGO5L2/55SoJylcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cdFx0XHRcdGxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgbXcudXRpbC5nZXRVcmwoVHdpbmtsZS5nZXRQcmVmKCdjb25maWdQYWdlJykpKTtcblx0XHRcdFx0bGluay5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh3aW5kb3cud2dVTFMoJ1R3aW5rbGXlj4LmlbDorr7nva7pnaLmnb8nLCAnVHdpbmtsZeWBj+WlveioreWumumdouadvycpKSk7XG5cdFx0XHRcdGJveC5hcHBlbmRDaGlsZChsaW5rKTtcblx0XHRcdFx0Ym94LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHdpbmRvdy53Z1VMUygn77yM5oiW55u05o6l57yW6L6R5pys6aG144CCJywgJ++8jOaIluebtOaOpee3qOi8r+acrOmggeOAgicpKSk7XG5cdFx0XHRcdCQoYm94KS5pbnNlcnRBZnRlcigkYm9keS5maW5kKCcjY29udGVudFN1YicpKTtcblx0XHRcdH0gZWxzZSBpZiAoWyd2ZWN0b3InLCAndmVjdG9yLTIwMjInLCAnZ29uZ2JpJywgJ2NpdGl6ZW4nLCAnY29tbW9uJ10uaW5jbHVkZXMoc2NyaXB0UGFnZU5hbWUpKSB7XG5cdFx0XHRcdC8vIHBsYWNlIFwiTG9va2luZyBmb3IgVHdpbmtsZSBvcHRpb25zP1wiIG5vdGljZVxuXHRcdFx0XHRib3guc2V0QXR0cmlidXRlKCdjbGFzcycsICdjb25maWctdXNlcnNraW4tYm94Jyk7XG5cdFx0XHRcdGJveC5hcHBlbmRDaGlsZChcblx0XHRcdFx0XHRkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcblx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn6Iul5oKo5oOz6YWN572u5oKo55qEVHdpbmtsZe+8jOivt+S9v+eUqCcsICfoi6Xmgqjmg7PphY3nva7mgqjnmoRUd2lua2xl77yM6KuL5L2/55SoJylcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cdFx0XHRcdGxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgbXcudXRpbC5nZXRVcmwoVHdpbmtsZS5nZXRQcmVmKCdjb25maWdQYWdlJykpKTtcblx0XHRcdFx0bGluay5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh3aW5kb3cud2dVTFMoJ1R3aW5rbGXlj4LmlbDorr7nva7pnaLmnb8nLCAnVHdpbmtsZeWBj+WlveioreWumumdouadvycpKSk7XG5cdFx0XHRcdGJveC5hcHBlbmRDaGlsZChsaW5rKTtcblx0XHRcdFx0Ym94LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCfjgIInKSk7XG5cdFx0XHRcdCQoYm94KS5pbnNlcnRBZnRlcigkYm9keS5maW5kKCcjY29udGVudFN1YicpKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdC8vIGN1c3RvbSBsaXN0LXJlbGF0ZWQgc3R1ZmZcblx0VHdpbmtsZS5jb25maWcubGlzdERpYWxvZyA9IHt9O1xuXHRUd2lua2xlLmNvbmZpZy5saXN0RGlhbG9nLmFkZFJvdyA9IChkbGd0YWJsZSwgdmFsdWUsIGxhYmVsKSA9PiB7XG5cdFx0Y29uc3QgY29udGVudHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcblx0XHQvLyBcInJlbW92ZVwiIGJ1dHRvblxuXHRcdGxldCBjb250ZW50dGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuXHRcdGNvbnN0IHJlbW92ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuXHRcdHJlbW92ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7XG5cdFx0cmVtb3ZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXG5cdFx0XHQnY2xpY2snLFxuXHRcdFx0KCkgPT4ge1xuXHRcdFx0XHQkKGNvbnRlbnR0cikucmVtb3ZlKCk7XG5cdFx0XHR9LFxuXHRcdFx0ZmFsc2Vcblx0XHQpO1xuXHRcdHJlbW92ZUJ1dHRvbi50ZXh0Q29udGVudCA9ICfnp7vpmaQnO1xuXHRcdGNvbnRlbnR0ZC5hcHBlbmRDaGlsZChyZW1vdmVCdXR0b24pO1xuXHRcdGNvbnRlbnR0ci5hcHBlbmRDaGlsZChjb250ZW50dGQpO1xuXHRcdC8vIHZhbHVlIGlucHV0IGJveFxuXHRcdGNvbnRlbnR0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG5cdFx0bGV0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuXHRcdGlucHV0LmNsYXNzTmFtZSA9ICd0d2lua2xlLWNvbmZpZy1jdXN0b21saXN0LXZhbHVlJztcblx0XHRpbnB1dC5zdHlsZS53aWR0aCA9ICc5NyUnO1xuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHZhbHVlKTtcblx0XHR9XG5cdFx0Y29udGVudHRkLmFwcGVuZENoaWxkKGlucHV0KTtcblx0XHRjb250ZW50dHIuYXBwZW5kQ2hpbGQoY29udGVudHRkKTtcblx0XHQvLyBsYWJlbCBpbnB1dCBib3hcblx0XHRjb250ZW50dGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuXHRcdGlucHV0LmNsYXNzTmFtZSA9ICd0d2lua2xlLWNvbmZpZy1jdXN0b21saXN0LWxhYmVsJztcblx0XHRpbnB1dC5zdHlsZS53aWR0aCA9ICc5OCUnO1xuXHRcdGlmIChsYWJlbCkge1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIGxhYmVsKTtcblx0XHR9XG5cdFx0Y29udGVudHRkLmFwcGVuZENoaWxkKGlucHV0KTtcblx0XHRjb250ZW50dHIuYXBwZW5kQ2hpbGQoY29udGVudHRkKTtcblx0XHRkbGd0YWJsZS5hcHBlbmRDaGlsZChjb250ZW50dHIpO1xuXHR9O1xuXHRUd2lua2xlLmNvbmZpZy5saXN0RGlhbG9nLmRpc3BsYXkgPSAoZSkgPT4ge1xuXHRcdGNvbnN0ICRwcmVmYnV0dG9uID0gJChlLnRhcmdldCk7XG5cdFx0Y29uc3QgY3VydmFsdWUgPSAkcHJlZmJ1dHRvbi5kYXRhKCd2YWx1ZScpO1xuXHRcdGNvbnN0IGN1cnByZWYgPSAkcHJlZmJ1dHRvbi5kYXRhKCdwcmVmJyk7XG5cdFx0Y29uc3QgZGlhbG9nID0gbmV3IE1vcmViaXRzLnNpbXBsZVdpbmRvdyg3MjAsIDQwMCk7XG5cdFx0ZGlhbG9nLnNldFRpdGxlKGN1cnByZWYubGFiZWwpO1xuXHRcdGRpYWxvZy5zZXRTY3JpcHROYW1lKHdpbmRvdy53Z1VMUygnVHdpbmtsZeWPguaVsOiuvue9ricsICdUd2lua2xl5YGP5aW96Kit5a6aJykpO1xuXHRcdGNvbnN0IGRpYWxvZ2NvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRjb25zdCBkbGd0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG5cdFx0ZGxndGFibGUuY2xhc3NOYW1lID0gJ3dpa2l0YWJsZSc7XG5cdFx0ZGxndGFibGUuc3R5bGUubWFyZ2luID0gJzEuNGVtIDFlbSc7XG5cdFx0ZGxndGFibGUuc3R5bGUud2lkdGggPSAnOTclJztcblx0XHRjb25zdCBkbGd0Ym9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XG5cdFx0Ly8gaGVhZGVyIHJvd1xuXHRcdGxldCBkbGd0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5cdFx0Ly8gdG9wLWxlZnQgY2VsbFxuXHRcdGxldCBkbGd0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG5cdFx0ZGxndGguc3R5bGUud2lkdGggPSAnNSUnO1xuXHRcdGRsZ3RyLmFwcGVuZENoaWxkKGRsZ3RoKTtcblx0XHQvLyB2YWx1ZSBjb2x1bW4gaGVhZGVyXG5cdFx0ZGxndGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xuXHRcdGRsZ3RoLnN0eWxlLndpZHRoID0gJzM1JSc7XG5cdFx0ZGxndGgudGV4dENvbnRlbnQgPSBjdXJwcmVmLmN1c3RvbUxpc3RWYWx1ZVRpdGxlID8/IHdpbmRvdy53Z1VMUygn5pWw5YC8JywgJ+aVuOWAvCcpO1xuXHRcdGRsZ3RyLmFwcGVuZENoaWxkKGRsZ3RoKTtcblx0XHQvLyBsYWJlbCBjb2x1bW4gaGVhZGVyXG5cdFx0ZGxndGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xuXHRcdGRsZ3RoLnN0eWxlLndpZHRoID0gJzYwJSc7XG5cdFx0ZGxndGgudGV4dENvbnRlbnQgPSBjdXJwcmVmLmN1c3RvbUxpc3RMYWJlbFRpdGxlID8/IHdpbmRvdy53Z1VMUygn5qCH562+JywgJ+aomeexpCcpO1xuXHRcdGRsZ3RyLmFwcGVuZENoaWxkKGRsZ3RoKTtcblx0XHRkbGd0Ym9keS5hcHBlbmRDaGlsZChkbGd0cik7XG5cdFx0Ly8gY29udGVudCByb3dzXG5cdFx0bGV0IGdvdFJvdyA9IGZhbHNlO1xuXHRcdGZvciAoY29uc3QgdiBvZiBjdXJ2YWx1ZSkge1xuXHRcdFx0Z290Um93ID0gdHJ1ZTtcblx0XHRcdFR3aW5rbGUuY29uZmlnLmxpc3REaWFsb2cuYWRkUm93KGRsZ3Rib2R5LCB2LnZhbHVlLCB2LmxhYmVsKTtcblx0XHR9XG5cdFx0Ly8gaWYgdGhlcmUgYXJlIG5vIHZhbHVlcyBwcmVzZW50LCBhZGQgYSBibGFuayByb3cgdG8gc3RhcnQgdGhlIHVzZXIgb2ZmXG5cdFx0aWYgKCFnb3RSb3cpIHtcblx0XHRcdFR3aW5rbGUuY29uZmlnLmxpc3REaWFsb2cuYWRkUm93KGRsZ3Rib2R5KTtcblx0XHR9XG5cdFx0Ly8gZmluYWwgXCJhZGRcIiBidXR0b25cblx0XHRjb25zdCBkbGd0Zm9vdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rmb290Jyk7XG5cdFx0ZGxndHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuXHRcdGNvbnN0IGRsZ3RkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcblx0XHRkbGd0ZC5zZXRBdHRyaWJ1dGUoJ2NvbHNwYW4nLCAnMycpO1xuXHRcdGNvbnN0IGFkZEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuXHRcdGFkZEJ1dHRvbi5zdHlsZS5taW5XaWR0aCA9ICc4ZW0nO1xuXHRcdGFkZEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7XG5cdFx0YWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXG5cdFx0XHQnY2xpY2snLFxuXHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRUd2lua2xlLmNvbmZpZy5saXN0RGlhbG9nLmFkZFJvdyhkbGd0Ym9keSk7XG5cdFx0XHR9LFxuXHRcdFx0ZmFsc2Vcblx0XHQpO1xuXHRcdGFkZEJ1dHRvbi50ZXh0Q29udGVudCA9ICfmt7vliqAnO1xuXHRcdGRsZ3RkLmFwcGVuZENoaWxkKGFkZEJ1dHRvbik7XG5cdFx0ZGxndHIuYXBwZW5kQ2hpbGQoZGxndGQpO1xuXHRcdGRsZ3Rmb290LmFwcGVuZENoaWxkKGRsZ3RyKTtcblx0XHRkbGd0YWJsZS5hcHBlbmRDaGlsZChkbGd0Ym9keSk7XG5cdFx0ZGxndGFibGUuYXBwZW5kQ2hpbGQoZGxndGZvb3QpO1xuXHRcdGRpYWxvZ2NvbnRlbnQuYXBwZW5kQ2hpbGQoZGxndGFibGUpO1xuXHRcdC8vIGJ1dHRvbnBhbmUgYnV0dG9uczogW1NhdmUgY2hhbmdlc10gW1Jlc2V0XSBbQ2FuY2VsXVxuXHRcdGxldCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcblx0XHRidXR0b24uc2V0QXR0cmlidXRlKCd0eXBlJywgJ3N1Ym1pdCcpOyAvLyBzbyBNb3JlYml0cy5zaW1wbGVXaW5kb3cgcHV0cyB0aGUgYnV0dG9uIGluIHRoZSBidXR0b24gcGFuZVxuXHRcdGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFxuXHRcdFx0J2NsaWNrJyxcblx0XHRcdCgpID0+IHtcblx0XHRcdFx0VHdpbmtsZS5jb25maWcubGlzdERpYWxvZy5zYXZlKCRwcmVmYnV0dG9uLCBkbGd0Ym9keSk7XG5cdFx0XHRcdGRpYWxvZy5jbG9zZSgpO1xuXHRcdFx0fSxcblx0XHRcdGZhbHNlXG5cdFx0KTtcblx0XHRidXR0b24udGV4dENvbnRlbnQgPSB3aW5kb3cud2dVTFMoJ+S/neWtmOS/ruaUuScsICflhLLlrZjkv67mlLknKTtcblx0XHRkaWFsb2djb250ZW50LmFwcGVuZENoaWxkKGJ1dHRvbik7XG5cdFx0YnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5cdFx0YnV0dG9uLnNldEF0dHJpYnV0ZSgndHlwZScsICdzdWJtaXQnKTsgLy8gc28gTW9yZWJpdHMuc2ltcGxlV2luZG93IHB1dHMgdGhlIGJ1dHRvbiBpbiB0aGUgYnV0dG9uIHBhbmVcblx0XHRidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcblx0XHRcdCdjbGljaycsXG5cdFx0XHQoKSA9PiB7XG5cdFx0XHRcdFR3aW5rbGUuY29uZmlnLmxpc3REaWFsb2cucmVzZXQoJHByZWZidXR0b24sIGRsZ3Rib2R5KTtcblx0XHRcdH0sXG5cdFx0XHRmYWxzZVxuXHRcdCk7XG5cdFx0YnV0dG9uLnRleHRDb250ZW50ID0gd2luZG93LndnVUxTKCflpI3kvY0nLCAn5b6p5L2NJyk7XG5cdFx0ZGlhbG9nY29udGVudC5hcHBlbmRDaGlsZChidXR0b24pO1xuXHRcdGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuXHRcdGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnc3VibWl0Jyk7IC8vIHNvIE1vcmViaXRzLnNpbXBsZVdpbmRvdyBwdXRzIHRoZSBidXR0b24gaW4gdGhlIGJ1dHRvbiBwYW5lXG5cdFx0YnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXG5cdFx0XHQnY2xpY2snLFxuXHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRkaWFsb2cuY2xvc2UoKTsgLy8gdGhlIGV2ZW50IHBhcmFtZXRlciBvbiB0aGlzIGZ1bmN0aW9uIHNlZW1zIHRvIGJlIGJyb2tlblxuXHRcdFx0fSxcblx0XHRcdGZhbHNlXG5cdFx0KTtcblx0XHRidXR0b24udGV4dENvbnRlbnQgPSAn5Y+W5raIJztcblx0XHRkaWFsb2djb250ZW50LmFwcGVuZENoaWxkKGJ1dHRvbik7XG5cdFx0ZGlhbG9nLnNldENvbnRlbnQoZGlhbG9nY29udGVudCk7XG5cdFx0ZGlhbG9nLmRpc3BsYXkoKTtcblx0fTtcblx0Ly8gUmVzZXRzIHRoZSBkYXRhIHZhbHVlLCByZS1wb3B1bGF0ZXMgYmFzZWQgb24gdGhlIG5ldyAoZGVmYXVsdCkgdmFsdWUsIHRoZW4gc2F2ZXMgdGhlXG5cdC8vIG9sZCBkYXRhIHZhbHVlIGFnYWluIChsZXNzIHN1cnByaXNpbmcgYmVoYXZpb3VyKVxuXHRUd2lua2xlLmNvbmZpZy5saXN0RGlhbG9nLnJlc2V0ID0gKGJ1dHRvbiwgdGJvZHkpID0+IHtcblx0XHQvLyByZXNldCB2YWx1ZSBvbiBidXR0b25cblx0XHRjb25zdCAkYnV0dG9uID0gJChidXR0b24pO1xuXHRcdGNvbnN0IGN1cnByZWYgPSAkYnV0dG9uLmRhdGEoJ3ByZWYnKTtcblx0XHRjb25zdCBvbGR2YWx1ZSA9ICRidXR0b24uZGF0YSgndmFsdWUnKTtcblx0XHRUd2lua2xlLmNvbmZpZy5yZXNldFByZWYoY3VycHJlZik7XG5cdFx0Ly8gcmVzZXQgZm9ybVxuXHRcdGNvbnN0ICR0Ym9keSA9ICQodGJvZHkpO1xuXHRcdCR0Ym9keS5maW5kKCd0cicpLnNsaWNlKDEpLnJlbW92ZSgpOyAvLyBhbGwgcm93cyBleGNlcHQgdGhlIGZpcnN0IChoZWFkZXIpIHJvd1xuXHRcdC8vIGFkZCB0aGUgbmV3IHZhbHVlc1xuXHRcdGNvbnN0IGN1cnZhbHVlID0gJGJ1dHRvbi5kYXRhKCd2YWx1ZScpO1xuXHRcdGZvciAoY29uc3QgdiBvZiBjdXJ2YWx1ZSkge1xuXHRcdFx0VHdpbmtsZS5jb25maWcubGlzdERpYWxvZy5hZGRSb3codGJvZHksIHYudmFsdWUsIHYubGFiZWwpO1xuXHRcdH1cblx0XHQvLyBzYXZlIHRoZSBvbGQgdmFsdWVcblx0XHQkYnV0dG9uLmRhdGEoJ3ZhbHVlJywgb2xkdmFsdWUpO1xuXHR9O1xuXHRUd2lua2xlLmNvbmZpZy5saXN0RGlhbG9nLnNhdmUgPSAoYnV0dG9uLCB0Ym9keSkgPT4ge1xuXHRcdGNvbnN0IHJlc3VsdCA9IFtdO1xuXHRcdGxldCBjdXJyZW50ID0ge307XG5cdFx0JCh0Ym9keSlcblx0XHRcdC5maW5kKCdpbnB1dFt0eXBlPVwidGV4dFwiXScpXG5cdFx0XHQuZWFjaCgoaW5wdXRrZXksIGlucHV0KSA9PiB7XG5cdFx0XHRcdGlmICgkKGlucHV0KS5oYXNDbGFzcygndHdpbmtsZS1jb25maWctY3VzdG9tbGlzdC12YWx1ZScpKSB7XG5cdFx0XHRcdFx0Y3VycmVudCA9IHtcblx0XHRcdFx0XHRcdHZhbHVlOiBpbnB1dC52YWx1ZSxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGN1cnJlbnQubGFiZWwgPSBpbnB1dC52YWx1ZTtcblx0XHRcdFx0XHQvLyBleGNsdWRlIHRvdGFsbHkgZW1wdHkgcm93c1xuXHRcdFx0XHRcdGlmIChjdXJyZW50LnZhbHVlIHx8IGN1cnJlbnQubGFiZWwpIHtcblx0XHRcdFx0XHRcdHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IGN1cnJlbnQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHQkKGJ1dHRvbikuZGF0YSgndmFsdWUnLCByZXN1bHQpO1xuXHR9O1xuXHQvLyByZXNldC9yZXN0b3JlIGRlZmF1bHRzXG5cdFR3aW5rbGUuY29uZmlnLnJlc2V0UHJlZkxpbmsgPSAoZSkgPT4ge1xuXHRcdGNvbnN0IHdhbnRlZHByZWYgPSBlLnRhcmdldC5pZC5zbGljZSgyMSk7IC8vIFwidHdpbmtsZS1jb25maWctcmVzZXQtXCIgcHJlZml4IGlzIHN0cmlwcGVkXG5cdFx0Ly8gc2VhcmNoIHRhY3RpY3Ncblx0XHQkKFR3aW5rbGUuY29uZmlnLnNlY3Rpb25zKS5lYWNoKChzZWN0aW9ua2V5LCBzZWN0aW9uKSA9PiB7XG5cdFx0XHRpZiAoc2VjdGlvbi5oaWRkZW4gfHwgKHNlY3Rpb24uYWRtaW5Pbmx5ICYmICFNb3JlYml0cy51c2VySXNTeXNvcCkpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7IC8vIGNvbnRpbnVlOiBza2lwIGltcG9zc2liaWxpdGllc1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgZm91bmRpdCA9IGZhbHNlO1xuXHRcdFx0JChzZWN0aW9uLnByZWZlcmVuY2VzKS5lYWNoKChwcmVma2V5LCBwcmVmKSA9PiB7XG5cdFx0XHRcdGlmIChwcmVmLm5hbWUgIT09IHdhbnRlZHByZWYpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTsgLy8gY29udGludWVcblx0XHRcdFx0fVxuXG5cdFx0XHRcdFR3aW5rbGUuY29uZmlnLnJlc2V0UHJlZihwcmVmKTtcblx0XHRcdFx0Zm91bmRpdCA9IHRydWU7XG5cdFx0XHRcdHJldHVybiBmYWxzZTsgLy8gYnJlYWtcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoZm91bmRpdCkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7IC8vIGJyZWFrXG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gZmFsc2U7IC8vIHN0b3AgbGluayBmcm9tIHNjcm9sbGluZyBwYWdlXG5cdH07XG5cblx0VHdpbmtsZS5jb25maWcucmVzZXRQcmVmID0gKHByZWYpID0+IHtcblx0XHRzd2l0Y2ggKHByZWYudHlwZSkge1xuXHRcdFx0Y2FzZSAnYm9vbGVhbic6XG5cdFx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3ByZWYubmFtZX1gKS5jaGVja2VkID0gVHdpbmtsZS5kZWZhdWx0Q29uZmlnW3ByZWYubmFtZV07XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnc3RyaW5nJzpcblx0XHRcdGNhc2UgJ2ludGVnZXInOlxuXHRcdFx0Y2FzZSAnZW51bSc6XG5cdFx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3ByZWYubmFtZX1gKS52YWx1ZSA9IFR3aW5rbGUuZGVmYXVsdENvbmZpZ1twcmVmLm5hbWVdO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ3NldCc6XG5cdFx0XHRcdGZvciAoY29uc3QgW2l0ZW1rZXldIG9mIE9iamVjdC5lbnRyaWVzKHByZWYuc2V0VmFsdWVzKSkge1xuXHRcdFx0XHRcdGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtwcmVmLm5hbWV9XyR7aXRlbWtleX1gKSkge1xuXHRcdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7cHJlZi5uYW1lfV8ke2l0ZW1rZXl9YCkuY2hlY2tlZCA9XG5cdFx0XHRcdFx0XHRcdFR3aW5rbGUuZGVmYXVsdENvbmZpZ1twcmVmLm5hbWVdLmluY2x1ZGVzKGl0ZW1rZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ2N1c3RvbUxpc3QnOlxuXHRcdFx0XHQkKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3ByZWYubmFtZX1gKSkuZGF0YSgndmFsdWUnLCBUd2lua2xlLmRlZmF1bHRDb25maWdbcHJlZi5uYW1lXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dm9pZCBtdy5ub3RpZnkoYHR3aW5rbGVjb25maWc6IHVua25vd24gZGF0YSB0eXBlIGZvciBwcmVmZXJlbmNlICR7cHJlZi5uYW1lfWAsIHtcblx0XHRcdFx0XHR0eXBlOiAnd2FybicsXG5cdFx0XHRcdFx0dGFnOiAndHdpbmtsZWNvbmZpZycsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH07XG5cdFR3aW5rbGUuY29uZmlnLnJlc2V0QWxsUHJlZnMgPSAoKSA9PiB7XG5cdFx0Ly8gbm8gY29uZmlybWF0aW9uIG1lc3NhZ2UgLSB0aGUgdXNlciBjYW4ganVzdCByZWZyZXNoL2Nsb3NlIHRoZSBwYWdlIHRvIGFib3J0XG5cdFx0JChUd2lua2xlLmNvbmZpZy5zZWN0aW9ucykuZWFjaCgoc2VjdGlvbmtleSwgc2VjdGlvbikgPT4ge1xuXHRcdFx0aWYgKHNlY3Rpb24uaGlkZGVuIHx8IChzZWN0aW9uLmFkbWluT25seSAmJiAhTW9yZWJpdHMudXNlcklzU3lzb3ApKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlOyAvLyBjb250aW51ZTogc2tpcCBpbXBvc3NpYmlsaXRpZXNcblx0XHRcdH1cblxuXHRcdFx0JChzZWN0aW9uLnByZWZlcmVuY2VzKS5lYWNoKChwcmVma2V5LCBwcmVmKSA9PiB7XG5cdFx0XHRcdGlmICghcHJlZi5hZG1pbk9ubHkgfHwgTW9yZWJpdHMudXNlcklzU3lzb3ApIHtcblx0XHRcdFx0XHRUd2lua2xlLmNvbmZpZy5yZXNldFByZWYocHJlZik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBzdG9wIGxpbmsgZnJvbSBzY3JvbGxpbmcgcGFnZVxuXHR9O1xuXG5cdFR3aW5rbGUuY29uZmlnLnNhdmUgPSAoZSkgPT4ge1xuXHRcdE1vcmViaXRzLnN0YXR1cy5pbml0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0d2lua2xlLWNvbmZpZy1jb250ZW50JykpO1xuXHRcdGNvbnN0IHVzZXJqcyA9IGAke213LmNvbmZpZy5nZXQoJ3dnRm9ybWF0dGVkTmFtZXNwYWNlcycpW213LmNvbmZpZy5nZXQoJ3dnTmFtZXNwYWNlSWRzJykudXNlcl19OiR7bXcuY29uZmlnLmdldChcblx0XHRcdCd3Z1VzZXJOYW1lJ1xuXHRcdCl9L3R3aW5rbGVvcHRpb25zLmpzYDtcblx0XHRjb25zdCB5c2FyY2hpdmVzX3BhZ2UgPSBuZXcgTW9yZWJpdHMud2lraS5wYWdlKFxuXHRcdFx0dXNlcmpzLFxuXHRcdFx0d2luZG93LndnVUxTKCfkv53lrZjlj4LmlbDorr7nva7liLAgJywgJ+WEsuWtmOWBj+WlveioreWumuWIsCAnKSArIHVzZXJqc1xuXHRcdCk7XG5cdFx0eXNhcmNoaXZlc19wYWdlLnNldENhbGxiYWNrUGFyYW1ldGVycyhlLnRhcmdldCk7XG5cdFx0eXNhcmNoaXZlc19wYWdlLmxvYWQoVHdpbmtsZS5jb25maWcud3JpdGVQcmVmcyk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXHRUd2lua2xlLmNvbmZpZy53cml0ZVByZWZzID0gKHBhZ2VvYmopID0+IHtcblx0XHRjb25zdCBmb3JtID0gcGFnZW9iai5nZXRDYWxsYmFja1BhcmFtZXRlcnMoKTtcblx0XHQvLyB0aGlzIGlzIHRoZSBvYmplY3Qgd2hpY2ggZ2V0cyBzZXJpYWxpemVkIGludG8gSlNPTjsgb25seVxuXHRcdC8vIHByZWZlcmVuY2VzIHRoYXQgdGhpcyBzY3JpcHQga25vd3MgYWJvdXQgYXJlIGtlcHRcblx0XHRjb25zdCBuZXdDb25maWcgPSB7XG5cdFx0XHRvcHRpb25zVmVyc2lvbjogMi4xLFxuXHRcdH07XG5cdFx0Ly8gYSBjb21wYXJpc29uIGZ1bmN0aW9uIGlzIG5lZWRlZCBsYXRlciBvblxuXHRcdC8vIGl0IGlzIGp1c3QgZW5vdWdoIGZvciBvdXIgcHVycG9zZXMgKGkuZS4gY29tcGFyaW5nIHN0cmluZ3MsIG51bWJlcnMsIGJvb2xlYW5zLFxuXHRcdC8vIGFycmF5cyBvZiBzdHJpbmdzLCBhbmQgYXJyYXlzIG9mIHsgdmFsdWUsIGxhYmVsIH0pXG5cdFx0Ly8gYW5kIGl0IGlzIG5vdCB2ZXJ5IHJvYnVzdDogZS5nLiBjb21wYXJlKFsyXSwgW1wiMlwiXSkgPT09IHRydWUsIGFuZFxuXHRcdC8vIGNvbXBhcmUoe30sIHt9KSA9PT0gZmFsc2UsIGJ1dCBpdCdzIGdvb2QgZW5vdWdoIGZvciBvdXIgcHVycG9zZXMgaGVyZVxuXHRcdGNvbnN0IGNvbXBhcmUgPSAoYSwgYikgPT4ge1xuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcblx0XHRcdFx0aWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRhLnNvcnQoKTtcblx0XHRcdFx0Yi5zb3J0KCk7XG5cdFx0XHRcdGZvciAoY29uc3QgW2ksIGVsZW1lbnRdIG9mIGEuZW50cmllcygpKSB7XG5cdFx0XHRcdFx0Ly8gY29tcGFyaXNvbiBvZiB0aGUgdHdvIHByb3BlcnRpZXMgb2YgY3VzdG9tIGxpc3RzXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBlbGVtZW50ID09PSAnb2JqZWN0JyAmJiAoZWxlbWVudC5sYWJlbCAhPT0gYltpXS5sYWJlbCB8fCBlbGVtZW50LnZhbHVlICE9PSBiW2ldLnZhbHVlKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZWxlbWVudC50b1N0cmluZygpICE9PSBiW2ldLnRvU3RyaW5nKCkpIHtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYSA9PT0gYjtcblx0XHR9O1xuXHRcdCQoVHdpbmtsZS5jb25maWcuc2VjdGlvbnMpLmVhY2goKHNlY3Rpb25rZXksIHNlY3Rpb24pID0+IHtcblx0XHRcdGlmIChzZWN0aW9uLmFkbWluT25seSAmJiAhTW9yZWJpdHMudXNlcklzU3lzb3ApIHtcblx0XHRcdFx0cmV0dXJuOyAvLyBpLmUuIFwiY29udGludWVcIiBpbiB0aGlzIGNvbnRleHRcblx0XHRcdH1cblx0XHRcdC8vIHJlYWNoIGVhY2ggb2YgdGhlIHByZWZlcmVuY2VzIGZyb20gdGhlIGZvcm1cblx0XHRcdCQoc2VjdGlvbi5wcmVmZXJlbmNlcykuZWFjaCgocHJlZmtleSwgcHJlZikgPT4ge1xuXHRcdFx0XHRsZXQgdXNlclZhbHVlOyAvLyA9IHVuZGVmaW5lZFxuXHRcdFx0XHQvLyBvbmx5IHJlYWQgZm9ybSB2YWx1ZXMgZm9yIHRob3NlIHByZWZzIHRoYXQgaGF2ZSB0aGVtXG5cdFx0XHRcdGlmICghcHJlZi5hZG1pbk9ubHkgfHwgTW9yZWJpdHMudXNlcklzU3lzb3ApIHtcblx0XHRcdFx0XHRpZiAoIXNlY3Rpb24uaGlkZGVuKSB7XG5cdFx0XHRcdFx0XHRzd2l0Y2ggKHByZWYudHlwZSkge1xuXHRcdFx0XHRcdFx0XHRjYXNlICdib29sZWFuJzpcblx0XHRcdFx0XHRcdFx0XHQvLyByZWFkIGZyb20gdGhlIGNoZWNrYm94XG5cdFx0XHRcdFx0XHRcdFx0dXNlclZhbHVlID0gZm9ybVtwcmVmLm5hbWVdLmNoZWNrZWQ7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ3N0cmluZyc6IC8vIHJlYWQgZnJvbSB0aGUgaW5wdXQgYm94IG9yIGNvbWJvIGJveFxuXHRcdFx0XHRcdFx0XHRjYXNlICdlbnVtJzpcblx0XHRcdFx0XHRcdFx0XHR1c2VyVmFsdWUgPSBmb3JtW3ByZWYubmFtZV0udmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ2ludGVnZXInOlxuXHRcdFx0XHRcdFx0XHRcdC8vIHJlYWQgZnJvbSB0aGUgaW5wdXQgYm94XG5cdFx0XHRcdFx0XHRcdFx0dXNlclZhbHVlID0gTnVtYmVyLnBhcnNlSW50KGZvcm1bcHJlZi5uYW1lXS52YWx1ZSwgMTApO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChOdW1iZXIuaXNOYU4odXNlclZhbHVlKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0TW9yZWJpdHMuc3RhdHVzLndhcm4oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHdpbmRvdy53Z1VMUygn5L+d5a2YJywgJ+WEsuWtmCcpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRgJHt3aW5kb3cud2dVTFMoJ+aCqOS4uiAnLCAn5oKo54K6ICcpICsgcHJlZi5uYW1lfSDmjIflrprnmoTlgLzvvIgke3ByZWYudmFsdWV9JHt3aW5kb3cud2dVTFMoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0J++8ieS4jeWQiOazle+8jOS8mue7p+e7reS/neWtmOaTjeS9nO+8jOS9huatpOWAvOWwhuS8mui3s+i/h+OAgicsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0J++8ieS4jeWQiOazle+8jOacg+e5vOe6jOWEsuWtmOaTjeS9nO+8jOS9huatpOWAvOWwh+acg+i3s+mBjuOAgidcblx0XHRcdFx0XHRcdFx0XHRcdFx0KX1gXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0dXNlclZhbHVlID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ3NldCc6XG5cdFx0XHRcdFx0XHRcdFx0Ly8gcmVhZCBmcm9tIHRoZSBzZXQgb2YgY2hlY2sgYm94ZXNcblx0XHRcdFx0XHRcdFx0XHR1c2VyVmFsdWUgPSBbXTtcblx0XHRcdFx0XHRcdFx0XHRpZiAocHJlZi5zZXREaXNwbGF5T3JkZXIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIHJlYWQgb25seSB0aG9zZSBrZXlzIHNwZWNpZmllZCBpbiB0aGUgZGlzcGxheSBvcmRlclxuXHRcdFx0XHRcdFx0XHRcdFx0Zm9yIChjb25zdCBpdGVtIG9mIHByZWYuc2V0RGlzcGxheU9yZGVyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChmb3JtW2Ake3ByZWYubmFtZX1fJHtpdGVtfWBdLmNoZWNrZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1c2VyVmFsdWVbdXNlclZhbHVlLmxlbmd0aF0gPSBpdGVtO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIHJlYWQgYWxsIHRoZSBrZXlzIGluIHRoZSBsaXN0IG9mIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0Zm9yIChjb25zdCBbaXRlbWtleV0gb2YgT2JqZWN0LmVudHJpZXMocHJlZi5zZXRWYWx1ZXMpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChmb3JtW2Ake3ByZWYubmFtZX1fJHtpdGVta2V5fWBdLmNoZWNrZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1c2VyVmFsdWVbdXNlclZhbHVlLmxlbmd0aF0gPSBpdGVta2V5O1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICdjdXN0b21MaXN0Jzpcblx0XHRcdFx0XHRcdFx0XHQvLyByZWFkIGZyb20gdGhlIGpRdWVyeSBkYXRhIHN0b3JlZCBvbiB0aGUgYnV0dG9uIG9iamVjdFxuXHRcdFx0XHRcdFx0XHRcdHVzZXJWYWx1ZSA9ICQoZm9ybVtwcmVmLm5hbWVdKS5kYXRhKCd2YWx1ZScpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdHZvaWQgbXcubm90aWZ5KGB0d2lua2xlY29uZmlnOiDmnKrnn6XmlbDmja7nsbvlnovvvIzlsZ7mgKcgJHtwcmVmLm5hbWV9YCwge1xuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogJ3dhcm4nLFxuXHRcdFx0XHRcdFx0XHRcdFx0dGFnOiAndHdpbmtsZWNvbmZpZycsXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChUd2lua2xlLnByZWZzKSB7XG5cdFx0XHRcdFx0XHQvLyBSZXRhaW4gdGhlIGhpZGRlbiBwcmVmZXJlbmNlcyB0aGF0IG1heSBoYXZlIGN1c3RvbWlzZWQgYnkgdGhlIHVzZXIgZnJvbSB0d2lua2xlb3B0aW9ucy5qc1xuXHRcdFx0XHRcdFx0Ly8gdW5kZWZpbmVkIGlmIG5vdCBzZXRcblx0XHRcdFx0XHRcdHVzZXJWYWx1ZSA9IFR3aW5rbGUucHJlZnNbcHJlZi5uYW1lXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gb25seSBzYXZlIHRob3NlIHByZWZlcmVuY2VzIHRoYXQgYXJlICpkaWZmZXJlbnQqIGZyb20gdGhlIGRlZmF1bHRcblx0XHRcdFx0aWYgKHVzZXJWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICFjb21wYXJlKHVzZXJWYWx1ZSwgVHdpbmtsZS5kZWZhdWx0Q29uZmlnW3ByZWYubmFtZV0pKSB7XG5cdFx0XHRcdFx0bmV3Q29uZmlnW3ByZWYubmFtZV0gPSB1c2VyVmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdGNvbnN0IG5vd2lraSA9ICdub3dpa2knO1xuXHRcdGxldCB0ZXh0ID0gYC8vIDwke25vd2lraX0+XFxuJHt3aW5kb3cud2dVTFMoXG5cdFx0XHRgLy8gdHdpbmtsZW9wdGlvbnMuanPvvJrnlKjmiLdUd2lua2xl5Y+C5pWw6K6+572u5paH5Lu2XFxuLy9cXG4vLyDms6jvvJrkv67mlLnmgqjnmoTlj4LmlbDorr7nva7mnIDnroDljZXnmoTlip7ms5XmmK/kvb/nlKhcXG4vLyBUd2lua2xl5Y+C5pWw6K6+572u6Z2i5p2/77yM5ZyoW1ske01vcmViaXRzLnBhZ2VOYW1lTm9ybX1dXeOAglxcbi8vXFxuLy8g6L+Z5Liq5paH5Lu25piv6Ieq5Yqo55Sf5oiQ55qE77yM5oKo5omA5YGa55qE5Lu75L2V5L+u5pS577yI6Zmk5LqGXFxuLy8g5Lul5LiA56eN5ZCI5rOV55qESmF2YVNjcmlwdOeahOaWueW8j+adpeS/ruaUuei/meS6m+WxnuaAp+WAvO+8ieS8mlxcbi8vIOWcqOS4i+S4gOasoeaCqOeCueWHu+KAnOS/neWtmOKAneaXtuiiq+imhuebluOAglxcbi8vIOS/ruaUueatpOaWh+S7tuaXtu+8jOivt+iusOW+l+S9v+eUqOWQiOazleeahEphdmFTY3JpcHTjgIJcXG5gLFxuXHRcdFx0YC8vIHR3aW5rbGVvcHRpb25zLmpz77ya5L2/55So6ICFVHdpbmtsZeWPg+aVuOioreWumuaqlOahiFxcbi8vXFxuLy8g6Ki777ya5L+u5pS55oKo55qE5Y+D5pW46Kit5a6a5pyA57Ch5Zau55qE6L6m5rOV5piv5L2/55SoXFxuLy8gVHdpbmtsZeWPg+aVuOioreWumumdouadv++8jOWcqFtbJHtNb3JlYml0cy5wYWdlTmFtZU5vcm19XV3jgIJcXG4vL1xcbi8vIOmAmeWAi+aqlOahiOaYr+iHquWLleeUoueUn+eahO+8jOaCqOaJgOWBmueahOS7u+S9leS/ruaUue+8iOmZpOS6hlxcbi8vIOS7peS4gOeoruWQiOazleeahEphdmFTY3JpcHTnmoTmlrnlvI/kvobkv67mlLnpgJnkupvlsazmgKflgLzvvInmnINcXG4vLyDlnKjkuIvkuIDmrKHmgqjpu57mk4rjgIzlhLLlrZjjgI3mmYLooqvopobok4vjgIJcXG4vLyDkv67mlLnmraTmqpTmoYjmmYLvvIzoq4voqJjlvpfkvb/nlKjlkIjms5XnmoRKYXZhU2NyaXB044CCXFxuYFxuXHRcdCl9YDtcblx0XHR0ZXh0ICs9XG5cdFx0XHQnXFxud2luZG93LlR3aW5rbGUgPSB3aW5kb3cuVHdpbmtsZSB8fCB7fTtcXG53aW5kb3cuVHdpbmtsZS5wcmVmcyA9IHdpbmRvdy5Ud2lua2xlLnByZWZzIHx8IHt9O1xcbndpbmRvdy5Ud2lua2xlLnByZWZzID0gJztcblx0XHR0ZXh0ICs9IEpTT04uc3RyaW5naWZ5KG5ld0NvbmZpZywgbnVsbCwgMik7XG5cdFx0dGV4dCArPSBgO1xcblxcbiR7d2luZG93LndnVUxTKCcvLyB0d2lua2xlb3B0aW9ucy5qc+WIsOatpOS4uuatolxcbicsICcvLyB0d2lua2xlb3B0aW9ucy5qc+WIsOatpOeCuuatolxcbicpfS8vIDwvJHtub3dpa2l9PmA7XG5cdFx0cGFnZW9iai5zZXRQYWdlVGV4dCh0ZXh0KTtcblx0XHRwYWdlb2JqLnNldEVkaXRTdW1tYXJ5KFxuXHRcdFx0d2luZG93LndnVUxTKCfkv53lrZhUd2lua2xl5Y+C5pWw6K6+572u77ya5p2l6IeqW1snLCAn5YSy5a2YVHdpbmtsZeWBj+WlveioreWumu+8muS+huiHqltbJykgK1xuXHRcdFx0XHRNb3JlYml0cy5wYWdlTmFtZU5vcm0gK1xuXHRcdFx0XHR3aW5kb3cud2dVTFMoJ11d55qE6Ieq5Yqo57yW6L6RJywgJ11d55qE6Ieq5YuV57eo6LyvJylcblx0XHQpO1xuXHRcdHBhZ2VvYmouc2V0Q2hhbmdlVGFncyhUd2lua2xlLmNoYW5nZVRhZ3MpO1xuXHRcdHBhZ2VvYmouc2V0Q3JlYXRlT3B0aW9uKCdyZWNyZWF0ZScpO1xuXHRcdHBhZ2VvYmouc2F2ZShUd2lua2xlLmNvbmZpZy5zYXZlU3VjY2Vzcyk7XG5cdH07XG5cdFR3aW5rbGUuY29uZmlnLnNhdmVTdWNjZXNzID0gKHBhZ2VvYmopID0+IHtcblx0XHRwYWdlb2JqLmdldFN0YXR1c0VsZW1lbnQoKS5pbmZvKCfmiJDlip8nKTtcblx0XHRjb25zdCBub3RpY2Vib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRub3RpY2Vib3guY2xhc3NOYW1lID0gJ213LW1lc3NhZ2UtYm94IG13LW1lc3NhZ2UtYm94LXN1Y2Nlc3MnO1xuXHRcdG5vdGljZWJveC5zdHlsZS5mb250U2l6ZSA9ICcxMDAlJztcblx0XHRub3RpY2Vib3guc3R5bGUubWFyZ2luVG9wID0gJzJlbSc7XG5cdFx0bm90aWNlYm94LmlubmVySFRNTCA9IGA8cD48Yj4ke3dpbmRvdy53Z1VMUyhcblx0XHRcdCfmgqjnmoRUd2lua2xl5Y+C5pWw6K6+572u5bey6KKr5L+d5a2Y44CCJyxcblx0XHRcdCfmgqjnmoRUd2lua2xl5YGP5aW96Kit5a6a5bey6KKr5YSy5a2Y44CCJ1xuXHRcdCl9PC9iPjwvcD48cD4ke3dpbmRvdy53Z1VMUygn6KaB55yL5Yiw6L+Z5Lqb5pu05pS577yM5oKo5Y+v6IO96ZyA6KaBJywgJ+imgeeci+WIsOmAmeS6m+abtOaUue+8jOaCqOWPr+iDvemcgOimgScpfTxhIGhyZWY9XCIke213LnV0aWwuZ2V0VXJsKFxuXHRcdFx0J0xJQjpCWVBBU1MnXG5cdFx0KX1cIiB0aXRsZT1cIkxJQjpCWVBBU1NcIj48Yj4ke3dpbmRvdy53Z1VMUygn57uV6L+H5rWP6KeI5Zmo57yT5a2YJywgJ+e5numBjueAj+imveWZqOW/q+WPlicpfTwvYj48L2E+44CCPC9wPmA7XG5cdFx0TW9yZWJpdHMuc3RhdHVzLnJvb3QuYXBwZW5kQ2hpbGQobm90aWNlYm94KTtcblx0XHRjb25zdCBub3RpY2VjbGVhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JyJyk7XG5cdFx0bm90aWNlY2xlYXIuc3R5bGUuY2xlYXIgPSAnYm90aCc7XG5cdFx0TW9yZWJpdHMuc3RhdHVzLnJvb3QuYXBwZW5kQ2hpbGQobm90aWNlY2xlYXIpO1xuXHR9O1xuXHRUd2lua2xlLmFkZEluaXRDYWxsYmFjayhUd2lua2xlLmNvbmZpZy5pbml0KTtcbn0pKGpRdWVyeSk7XG5cbmV4cG9ydCB7fTtcbiIsICJpbXBvcnQgJy4vVHdpbmtsZS5sZXNzJztcblxuKGFzeW5jIGZ1bmN0aW9uIHR3aW5rbGVMb2FkKCkge1xuXHRhd2FpdCBpbXBvcnQoJy4vbW9kdWxlcy90d2lua2xlJyk7XG5cdGF3YWl0IGltcG9ydCgnLi9tb2R1bGVzL3R3aW5rbGVhcnYnKTtcblx0YXdhaXQgaW1wb3J0KCcuL21vZHVsZXMvdHdpbmtsZXdhcm4nKTtcblx0YXdhaXQgaW1wb3J0KCcuL21vZHVsZXMvdHdpbmtsZWJsb2NrJyk7XG5cdGF3YWl0IGltcG9ydCgnLi9tb2R1bGVzL2ZyaWVuZGx5dGFsa2JhY2snKTtcblx0YXdhaXQgaW1wb3J0KCcuL21vZHVsZXMvdHdpbmtsZXNwZWVkeScpO1xuXHRhd2FpdCBpbXBvcnQoJy4vbW9kdWxlcy90d2lua2xlY29weXZpbycpO1xuXHRhd2FpdCBpbXBvcnQoJy4vbW9kdWxlcy90d2lua2xleGZkJyk7XG5cdGF3YWl0IGltcG9ydCgnLi9tb2R1bGVzL3R3aW5rbGVpbWFnZScpO1xuXHRhd2FpdCBpbXBvcnQoJy4vbW9kdWxlcy90d2lua2xlcHJvdGVjdCcpO1xuXHRhd2FpdCBpbXBvcnQoJy4vbW9kdWxlcy9mcmllbmRseXRhZycpO1xuXHRhd2FpdCBpbXBvcnQoJy4vbW9kdWxlcy90d2lua2xlc3R1YicpO1xuXHRhd2FpdCBpbXBvcnQoJy4vbW9kdWxlcy90d2lua2xlZGlmZicpO1xuXHRhd2FpdCBpbXBvcnQoJy4vbW9kdWxlcy90d2lua2xldW5saW5rJyk7XG5cdGF3YWl0IGltcG9ydCgnLi9tb2R1bGVzL3R3aW5rbGVmbHVmZicpO1xuXHRhd2FpdCBpbXBvcnQoJy4vbW9kdWxlcy90d2lua2xlYmF0Y2hkZWxldGUnKTtcblx0YXdhaXQgaW1wb3J0KCcuL21vZHVsZXMvdHdpbmtsZWJhdGNodW5kZWxldGUnKTtcblx0YXdhaXQgaW1wb3J0KCcuL21vZHVsZXMvdHdpbmtsZWJhdGNocHJvdGVjdCcpO1xuXHRhd2FpdCBpbXBvcnQoJy4vbW9kdWxlcy90d2lua2xlY2xvc2UnKTtcblx0YXdhaXQgaW1wb3J0KCcuL21vZHVsZXMvdHdpbmtsZWNvbmZpZycpO1xufSkoKTtcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUEsNkZBQUFBLFNBQUE7QUFBQTtBQUNBLFFBQUksUUFBUSxTQUFVLElBQUk7QUFDeEIsYUFBTyxNQUFNLEdBQUcsU0FBUyxRQUFRO0FBQUEsSUFDbkM7QUFHQSxJQUFBQSxRQUFPO0FBQUEsSUFFTCxNQUFNLE9BQU8sY0FBYyxZQUFZLFVBQVUsS0FDakQsTUFBTSxPQUFPLFVBQVUsWUFBWSxNQUFNO0FBQUEsSUFFekMsTUFBTSxPQUFPLFFBQVEsWUFBWSxJQUFJLEtBQ3JDLE1BQU0sT0FBTyxVQUFVLFlBQVksTUFBTSxLQUN6QyxNQUFNLE9BQU8sV0FBUSxZQUFZLE9BQUk7QUFBQSxJQUVwQywyQkFBWTtBQUFFLGFBQU87QUFBQSxJQUFNLEVBQUcsS0FBSyxTQUFTLGFBQWEsRUFBRTtBQUFBO0FBQUE7OztBQ2Y5RDtBQUFBLHVGQUFBQyxTQUFBO0FBQUE7QUFDQSxJQUFBQSxRQUFPLFVBQVUsU0FBVSxNQUFNO0FBQy9CLFVBQUk7QUFDRixlQUFPLENBQUMsQ0FBQyxLQUFLO0FBQUEsTUFDaEIsU0FBUyxPQUFPO0FBQ2QsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBQUE7QUFBQTs7O0FDUEE7QUFBQSw2RkFBQUMsU0FBQTtBQUFBO0FBQ0EsUUFBSSxRQUFRO0FB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LFVBQU1vc0IsUUFBQUMsUUFBQSxFQUFBN3dELEtBQUEsT0FBQXd2QyxpQkFBQSxHQUFBRixvQkFBQTtBQUNOLFVBQU1zaEIsUUFBQUMsUUFBQSxFQUFBN3dELEtBQUEsT0FBQTZ4QyxpQkFBQSxHQUFBRCxvQkFBQTtBQUNOLFVBQU1nZixRQUFBQyxRQUFBLEVBQUE3d0QsS0FBQSxPQUFBc3lDLG1CQUFBLEdBQUFELHNCQUFBO0FBQ04sVUFBTXVlLFFBQUFDLFFBQUEsRUFBQTd3RCxLQUFBLE9BQUEwMUMsa0JBQUEsR0FBQUQscUJBQUE7QUFDTixVQUFNbWIsUUFBQUMsUUFBQSxFQUFBN3dELEtBQUEsT0FBQWk4Qyx3QkFBQSxHQUFBRCwyQkFBQTtBQUNOLFVBQU00VSxRQUFBQyxRQUFBLEVBQUE3d0QsS0FBQSxPQUFBb2hELDBCQUFBLEdBQUFELDZCQUFBO0FBQ04sVUFBTXlQLFFBQUFDLFFBQUEsRUFBQTd3RCxLQUFBLE9BQUFtaUQseUJBQUEsR0FBQUQsNEJBQUE7QUFDTixVQUFNME8sUUFBQUMsUUFBQSxFQUFBN3dELEtBQUEsT0FBQW9qRCxrQkFBQSxHQUFBRCxxQkFBQTtBQUNOLFVBQU15TixRQUFBQyxRQUFBLEVBQUE3d0QsS0FBQSxPQUFBcW5ELG1CQUFBLEdBQUFELHNCQUFBO0VBQ1AsQ0FBQTtBQUFBLFdBckJnQjBKLGNBQUE7QUFBQSxXQUFBQyxhQUFBQyxNQUFBLE1BQUFDLFNBQUE7RUFBQTtBQUFBLFNBQUFIO0FBQUEsR0FBQSxFQXFCYjsiLAogICJuYW1lcyI6IFsibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAiZ2xvYmFsVGhpcyIsICJtb2R1bGUiLCAibW9kdWxlIiwgImdsb2JhbFRoaXMiLCAibW9kdWxlIiwgImdsb2JhbFRoaXMiLCAibW9kdWxlIiwgImdsb2JhbFRoaXMiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJnbG9iYWxUaGlzIiwgIm1vZHVsZSIsICJnbG9iYWxUaGlzIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAiZ2xvYmFsVGhpcyIsICJTeW1ib2wiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAiZ2xvYmFsVGhpcyIsICJkb2N1bWVudCIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAiZ2xvYmFsVGhpcyIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJnbG9iYWxUaGlzIiwgIlR5cGVFcnJvciIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgImdsb2JhbFRoaXMiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJhY3RpdmVYRG9jdW1lbnQiLCAibW9kdWxlIiwgImdsb2JhbFRoaXMiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgImltcG9ydF9leHRfZ2FkZ2V0IiwgImFwaSIsICJpbml0X2FwaSIsICJfX2VzbSIsICJyZXF1aXJlIiwgImluaXRNd0FwaSIsICJ0d2lua2xlX2V4cG9ydHMiLCAiaW5pdF90d2lua2xlIiwgInR3aW5rbGUiLCAiJCIsICJfd2luZG93IiwgIiRib2R5IiwgIlR3aW5rbGUyIiwgIndpbmRvdyIsICJUd2lua2xlIiwgIk1vcmViaXRzIiwgInVzZXJJc0luR3JvdXAiLCAiY29uc29sZSIsICJ3YXJuIiwgImNoYW5nZVRhZ3MiLCAic3VtbWFyeUFkIiwgImhhdG5vdGVSZWdleCIsICJpbml0Q2FsbGJhY2tzIiwgImFkZEluaXRDYWxsYmFjayIsICJmdW5jIiwgIm5hbWUiLCAibGVuZ3RoIiwgImRlZmF1bHRDb25maWciLCAidXNlclRhbGtQYWdlTW9kZSIsICJkaWFsb2dMYXJnZUZvbnQiLCAiZGlzYWJsZWRNb2R1bGVzIiwgInVzZXJJc1N5c29wIiwgImRpc2FibGVkU3lzb3BNb2R1bGVzIiwgInNwaVdhdGNoUmVwb3J0IiwgImRlZmF1bHRUb0Jsb2NrNjQiLCAiZGVmYXVsdFRvUGFydGlhbEJsb2NrcyIsICJibGFua1RhbGtwYWdlT25JbmRlZkJsb2NrIiwgIndhdGNoQmxvY2tOb3RpY2VzIiwgImN1c3RvbUJsb2NrUmVhc29uTGlzdCIsICJvcGVuVGFsa1BhZ2UiLCAib3BlblRhbGtQYWdlT25BdXRvUmV2ZXJ0IiwgInJvbGxiYWNrSW5QbGFjZSIsICJtYXJrUmV2ZXJ0ZWRQYWdlc0FzTWlub3IiLCAid2F0Y2hSZXZlcnRlZFBhZ2VzIiwgIndhdGNoUmV2ZXJ0ZWRFeHBpcnkiLCAib2ZmZXJSZWFzb25Pbk5vcm1hbFJldmVydCIsICJjb25maXJtT25GbHVmZiIsICJzaG93Um9sbGJhY2tMaW5rcyIsICJjdXN0b21SZXZlcnRTdW1tYXJ5IiwgIm5vdGlmeVVzZXJPbkRlbGkiLCAiZGVsaVdhdGNoUGFnZSIsICJkZWxpV2F0Y2hVc2VyIiwgIndhdGNoUmVxdWVzdGVkUGFnZXMiLCAid2F0Y2hQUFRhZ2dlZFBhZ2VzIiwgIndhdGNoUHJvdGVjdGVkUGFnZXMiLCAic3BlZWR5U2VsZWN0aW9uU3R5bGUiLCAid2F0Y2hTcGVlZHlQYWdlcyIsICJ3YXRjaFNwZWVkeUV4cGlyeSIsICJtYXJrU3BlZWR5UGFnZXNBc1BhdHJvbGxlZCIsICJ3YXRjaFNwZWVkeVVzZXIiLCAibm90aWZ5VXNlck9uU3BlZWR5RGVsZXRpb25Ob21pbmF0aW9uIiwgIndhcm5Vc2VyT25TcGVlZHlEZWxldGUiLCAicHJvbXB0Rm9yU3BlZWR5RGVsZXRpb25TdW1tYXJ5IiwgIm9wZW5Vc2VyVGFsa1BhZ2VPblNwZWVkeURlbGV0ZSIsICJkZWxldGVUYWxrUGFnZU9uRGVsZXRlIiwgImRlbGV0ZVJlZGlyZWN0c09uRGVsZXRlIiwgImRlbGV0ZVN5c29wRGVmYXVsdFRvRGVsZXRlIiwgInNwZWVkeVdpbmRvd0hlaWdodCIsICJzcGVlZHlXaW5kb3dXaWR0aCIsICJsb2dTcGVlZHlOb21pbmF0aW9ucyIsICJzcGVlZHlMb2dQYWdlTmFtZSIsICJub0xvZ09uU3BlZWR5Tm9taW5hdGlvbiIsICJlbmxhcmdlRzdJbnB1dCIsICJ1bmxpbmtOYW1lc3BhY2VzIiwgImRlZmF1bHRXYXJuaW5nR3JvdXAiLCAiY29tYmluZWRTaW5nbGV0TWVudXMiLCAid2F0Y2hXYXJuaW5ncyIsICJvbGRTZWxlY3QiLCAiY3VzdG9tV2FybmluZ0xpc3QiLCAiYXV0b01lbnVBZnRlclJvbGxiYWNrIiwgImxvZ1hmZE5vbWluYXRpb25zIiwgInhmZExvZ1BhZ2VOYW1lIiwgIm5vTG9nT25YZmROb21pbmF0aW9uIiwgInhmZFdhdGNoRGlzY3Vzc2lvbiIsICJ4ZmRXYXRjaFBhZ2UiLCAieGZkV2F0Y2hVc2VyIiwgIm1hcmtYZmRQYWdlc0FzUGF0cm9sbGVkIiwgIkZ3ZENzZFRvWGZkIiwgImFmZERlZmF1bHRDYXRlZ29yeSIsICJhZmRGYW1lRGVmYXVsdFJlYXNvbiIsICJhZmRTdWJzdHViRGVmYXVsdFJlYXNvbiIsICJYZmRDbG9zZSIsICJjb3B5dmlvV2F0Y2hQYWdlIiwgImNvcHl2aW9XYXRjaFVzZXIiLCAibWFya0NvcHl2aW9QYWdlc0FzUGF0cm9sbGVkIiwgImF1dG9sZXZlbFN0YWxlRGF5cyIsICJyZXZlcnRNYXhSZXZpc2lvbnMiLCAiYmF0Y2hNYXgiLCAiYmF0Y2hDaHVua3MiLCAiY29uZmlnUGFnZSIsICJwcm9qZWN0TmFtZXNwYWNlTmFtZSIsICJtdyIsICJjb25maWciLCAiZ2V0IiwgInNhbmRib3hQYWdlIiwgImRlbGV0aW9uU3VtbWFyeUFkIiwgInByb3RlY3Rpb25TdW1tYXJ5QWQiLCAiYmxvY2tTdW1tYXJ5QWQiLCAiZ3JvdXBCeURlZmF1bHQiLCAid2F0Y2hUYWdnZWRQYWdlcyIsICJ3YXRjaE1lcmdlRGlzY3Vzc2lvbnMiLCAibWFya1RhZ2dlZFBhZ2VzQXNNaW5vciIsICJtYXJrVGFnZ2VkUGFnZXNBc1BhdHJvbGxlZCIsICJ0YWdBcnRpY2xlU29ydE9yZGVyIiwgImN1c3RvbVRhZ0xpc3QiLCAiY3VzdG9tRmlsZVRhZ0xpc3QiLCAiY3VzdG9tUmVkaXJlY3RUYWdMaXN0IiwgIndhdGNoU3R1YmJlZFBhZ2VzIiwgIm1hcmtTdHViYmVkUGFnZXNBc01pbm9yIiwgIm1hcmtTdHViYmVkUGFnZXNBc1BhdHJvbGxlZCIsICJzdHViQXJ0aWNsZVNvcnRPcmRlciIsICJjdXN0b21TdHViTGlzdCIsICJtYXJrVGFsa2JhY2tBc01pbm9yIiwgImluc2VydFRhbGtiYWNrU2lnbmF0dXJlIiwgInRhbGtiYWNrSGVhZGluZyIsICJ3Z1VMUyIsICJtYWlsSGVhZGluZyIsICJwb3J0bGV0QXJlYSIsICJwb3J0bGV0SWQiLCAicG9ydGxldE5hbWUiLCAicG9ydGxldFR5cGUiLCAicG9ydGxldE5leHQiLCAiZmluZCIsICJnZXRQcmVmIiwgInByZWZzIiwgIlR3aW5rbGVDb25maWciLCAiYWRkUG9ydGxldCIsICJuYXZpZ2F0aW9uIiwgImlkIiwgInRleHQiLCAidHlwZSIsICJuZXh0bm9kZWlkIiwgInJvb3QiLCAiZG9jdW1lbnQiLCAicXVlcnlTZWxlY3RvciIsICJ0ZXN0IiwgImNvbmNhdCIsICJpdGVtIiwgInBhcmVudE5vZGUiLCAibmV4dG5vZGUiLCAic2tpbiIsICJvdXRlck5hdkNsYXNzIiwgImlubmVyRGl2Q2xhc3MiLCAidWxDbGFzc05hbWUiLCAib3V0ZXJOYXYiLCAiaGVhZGluZyIsICJjcmVhdGVFbGVtZW50IiwgInNldEF0dHJpYnV0ZSIsICJjbGFzc05hbWUiLCAiaW5zZXJ0QmVmb3JlIiwgImFwcGVuZENoaWxkIiwgInVsIiwgImluY2x1ZGVzIiwgImNoa2JveCIsICJzcGFuIiwgImNyZWF0ZVRleHROb2RlIiwgImEiLCAiaHJlZiIsICJvbiIsICJlIiwgInByZXZlbnREZWZhdWx0IiwgImlubmVyRGl2IiwgImFkZFBvcnRsZXRMaW5rIiwgInRhc2siLCAidG9vbHRpcCIsICJsaW5rIiwgInV0aWwiLCAiY3NzIiwgImV2IiwgImNvbGxhcHNpYmxlVGFicyIsICJoYW5kbGVSZXNpemUiLCAiYWN0aW9uIiwgInByb3AiLCAicnZwcm9wIiwgImZvcm1hdCIsICJmb3JtYXR2ZXJzaW9uIiwgInRpdGxlcyIsICJydmxpbWl0IiwgInJ2c2xvdHMiLCAidGhlbiIsICJyZXNwb25zZSIsICJwYWdlcyIsICJtaXNzaW5nIiwgIl9yZXNwb25zZSRxdWVyeSRwYWdlcyIsICJjb250ZW50IiwgInJldmlzaW9ucyIsICJzbG90cyIsICJtYWluIiwgImV2YWwiLCAibm90aWZ5IiwgInRhZyIsICJmYWlsIiwgImFsd2F5cyIsICJsb2FkIiwgImFjdGl2ZVNwZWNpYWxQYWdlTGlzdCIsICJ0b3AiLCAic2VsZiIsICJ1c2VyQWdlbnQiLCAid2lraSIsICJzZXRBcGlVc2VyQWdlbnQiLCAiX2l0ZXJhdG9yIiwgIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwgIl9zdGVwIiwgInMiLCAibiIsICJkb25lIiwgIm1vZHVsZTIiLCAidmFsdWUiLCAiZXJyIiwgImYiLCAiYWRkQ1NTIiwgImlzVmVjdG9yIiwgInNvcnRCeU5hbWVzcGFjZSIsICJmaXJzdCIsICJzZWNvbmQiLCAibnMiLCAidGl0bGUiLCAiZ2VuZXJhdGVCYXRjaFBhZ2VMaW5rcyIsICJjaGVja2JveCIsICIkY2hlY2tib3giLCAiaHRtbE5vZGUiLCAidmFsIiwgImdldFVybCIsICJuZXh0IiwgInByZXBlbmQiLCAialF1ZXJ5IiwgInR3aW5rbGVhcnZfZXhwb3J0cyIsICJpbml0X3R3aW5rbGVhcnYiLCAidHdpbmtsZWFydiIsICJhcnYiLCAidXNlcm5hbWUiLCAiaXNJUCIsICJpc0lQQWRkcmVzcyIsICJjYWxsYmFjayIsICJ1aWQiLCAiV2luZG93IiwgInNpbXBsZVdpbmRvdyIsICJzZXRUaXRsZSIsICJzZXRTY3JpcHROYW1lIiwgImFkZEZvb3RlckxpbmsiLCAiZm9ybSIsICJxdWlja0Zvcm0iLCAiZXZhbHVhdGUiLCAiY2F0ZWdvcmllcyIsICJhcHBlbmQiLCAibGFiZWwiLCAiZXZlbnQiLCAiY2hhbmdlQ2F0ZWdvcnkiLCAiZGlzYWJsZWQiLCAic3R5bGUiLCAicmVzdWx0IiwgInJlbmRlciIsICJzZXRDb250ZW50IiwgImRpc3BsYXkiLCAicXVlcnkiLCAibGlzdCIsICJia3Byb3AiLCAiYmtpcCIsICJia3VzZXJzIiwgImFwaW9iaiIsICJibG9ja2xpc3QiLCAiZ2V0UmVzcG9uc2UiLCAiYmxvY2tzIiwgImJsb2NrIiwgIm1lc3NhZ2UiLCAicGFydGlhbCIsICJyYW5nZXN0YXJ0IiwgInJhbmdlZW5kIiwgInBvc3QiLCAiZXZ0IiwgImNyZWF0ZUV2ZW50IiwgImluaXRFdmVudCIsICJjYXRlZ29yeSIsICJkaXNwYXRjaEV2ZW50IiwgImx0YV9saXN0IiwgInNvY2ttYXN0ZXJfY2hhbmdlZCIsICJzZXRfc29ja21hc3RlciIsICJ0YXJnZXQiLCAic29ja21hc3RlciIsICJ2YWx1ZV8iLCAicm9vdF8iLCAib2xkX2FyZWEiLCAiZ2V0RWxlbWVudHMiLCAid29ya19hcmVhIiwgInByZXZpZXdsaW5rIiwgImN1cnNvciIsICJ0ZXh0Q29udGVudCIsICJwcmV2aWV3IiwgImVsZW1lbnQiLCAic3VibGFiZWwiLCAibWluIiwgIm1heCIsICJyZXBsYWNlV2l0aCIsICJhZGRDbGFzcyIsICJzcGlub3RpY2VwcmV2aWV3ZXIiLCAibGFzdCIsICJnZXRQYXJhbVZhbHVlIiwgImJhZGlkIiwgImdvb2RpZCIsICJwcmV2aWV3ZXIiLCAicmVhc29uIiwgImdldFJlcG9ydFdpa2l0ZXh0IiwgImlucHV0IiwgImdldElucHV0RGF0YSIsICJiZWdpblJlbmRlciIsICJjb21tZW50IiwgImNoZWNrVGl0bGUiLCAicmV2aWQiLCAicGFnZV8iLCAiVGl0bGUiLCAibmFtZXNwYWNlIiwgInBhZ2UiLCAibWFwIiwgIm8iLCAiX2l0ZXJhdG9yMiIsICJfc3RlcDIiLCAiZ2V0UHJlZml4ZWRUZXh0IiwgInJlcGxhY2UiLCAidHJpbSIsICJzdHJpbmciLCAiYXBwZW5kUHVuY3R1YXRpb24iLCAidHlwZXMiLCAiYXJ2dHlwZSIsICJ0b0xvd2VyQ2FzZUZpcnN0Q2hhciIsICJoYXNTaGFyZWQiLCAic3BsaWNlIiwgImluZGV4T2YiLCAiY29uZmlybSIsICJqb2luIiwgInNsaWNlIiwgImhpZGVuYW1lIiwgInRvVXBwZXJDYXNlRmlyc3RDaGFyIiwgInNvY2twdXBwZXRzIiwgImFycmF5IiwgInVuaXEiLCAic29jayIsICJpbmRleCIsICJjaGVja3VzZXIiLCAidiIsICJfaW5wdXQkZ29vZGlkIiwgInN1bW1hcnkiLCAic2V0QnV0dG9uc0VuYWJsZWQiLCAic3RhdHVzIiwgImluaXQiLCAiYWN0aW9uQ29tcGxldGVkIiwgInJlZGlyZWN0IiwgIm5vdGljZSIsICJld2lwUGFnZSIsICJzZXRGb2xsb3dSZWRpcmVjdCIsICJnZXRQYWdlVGV4dCIsICIkZXdpcExpbmsiLCAiUmVnRXhwIiwgImVzY2FwZVJlZ0V4cCIsICJnZXRTdGF0dXNFbGVtZW50IiwgImVycm9yIiwgInByaW50VXNlclRleHQiLCAic2V0UGFnZVNlY3Rpb24iLCAic2V0RWRpdFN1bW1hcnkiLCAic2V0Q2hhbmdlVGFncyIsICJzZXRBcHBlbmRUZXh0IiwgInVhYVBhZ2UiLCAiJHVhYUxpbmsiLCAicmVwb3J0cGFnZSIsICJzcGlQYWdlIiwgInNldFdhdGNobGlzdCIsICJhaXZQYWdlIiwgIiRhaXZMaW5rIiwgInR3aW5rbGV3YXJuX2V4cG9ydHMiLCAiaW5pdF90d2lua2xld2FybiIsICJ0d2lua2xld2FybiIsICJyZWxldmFudFVzZXJOYW1lIiwgIiR2YW5kYWxUYWxrTGluayIsICJtYWtlVmFuZGFsVGFsa0xpbmsiLCAicGFnZU5hbWVOb3JtIiwgImFmVGFsa0xpbmsiLCAicGFnZV9wcmVmaXhlZHRpdGxlIiwgInBhZ2VuYW1lIiwgIndyYXBJbm5lciIsICJhdHRyIiwgImV4dHJhUGFyYW0iLCAicmF3dXJsZW5jb2RlIiwgImRpYWxvZyIsICJtYWluX3NlbGVjdCIsICJtYWluX2dyb3VwIiwgImNoYW5nZV9jYXRlZ29yeSIsICJkZWZhdWx0R3JvdXAiLCAiTnVtYmVyIiwgInBhcnNlSW50IiwgInNlbGVjdGVkIiwgImNoYW5nZV9zdWJjYXRlZ29yeSIsICJzaXplIiwgInBsYWNlaG9sZGVyIiwgIm1vcmUiLCAiY2FsbGJhY2tzIiwgInZhbnJldmlkIiwgInJ2c3RhcnRpZCIsICJydmRpciIsICJyZXZlcnRVc2VyIiwgImdldEF0dHJpYnV0ZSIsICJjaGVja1N0YWxlIiwgInZhbnRpbWVzdGFtcF8iLCAicmV2RGF0ZSIsICJkYXRlIiwgImlzVmFsaWQiLCAiYWRkIiwgImlzQmVmb3JlIiwgIkRhdGUiLCAidmFudGltZXN0YW1wIiwgInJldmlkcyIsICJtZXNzYWdlcyIsICJsZXZlbHMiLCAibGV2ZWwxIiwgImxldmVsMiIsICJzaW5nbGVub3RpY2UiLCAic2luZ2xld2FybiIsICJzdXBwcmVzc0FydGljbGVJblN1bW1hcnkiLCAicHJldl9hcnRpY2xlIiwgInByZXZfcmVhc29uIiwgInRhbGtwYWdlT2JqIiwgInN1Yl9ncm91cCIsICJvbGRfc3VidmFsdWUiLCAib2xkX3N1YnZhbHVlX3JlIiwgImhhc0NoaWxkTm9kZXMiLCAicmVtb3ZlQ2hpbGQiLCAiZmlyc3RDaGlsZCIsICJjcmVhdGVFbnRyaWVzIiwgImNvbnRlbnRzIiwgImNvbnRhaW5lciIsICJ3cmFwSW5PcHRncm91cCIsICJsZXZlbCIsICJjbGllbnQiLCAicHJvZmlsZSIsICJwbGF0Zm9ybSIsICJ3cmFwcGVyT3B0Z3JvdXAiLCAiX2kyIiwgIl9PYmplY3QkZW50cmllcyIsICJPYmplY3QiLCAiZW50cmllcyIsICJpdGVtS2V5IiwgIml0ZW1Qcm9wZXJ0aWVzIiwgImtleSIsICJ0ZW1wbGF0ZSIsICJlbGVtIiwgImRhdGEiLCAiZWxlbVJlbmRlcmVkIiwgInVuU29ydGVkU2luZ2xldHMiLCAic29ydGVkU2luZ2xldE1lc3NhZ2VzIiwgIl9pdGVyYXRvcjMiLCAia2V5cyIsICJzb3J0IiwgIl9zdGVwMyIsICJfaTMiLCAiX2FyciIsICJsdmwiLCAiX2l0ZXJhdG9yNCIsICJfc3RlcDQiLCAibGV2ZWxHcm91cCIsICJfaXRlcmF0b3I1IiwgIl9zdGVwNSIsICJvcHRncm91cCIsICJhdXRvbGV2ZWxQcm9jIiwgIndpa2l0ZXh0IiwgImxhdGVzdCIsICJkYXRlUHJvY2Vzc2luZyIsICJwYXJhbXMiLCAiYXJ0aWNsZSIsICJhdXRvbGV2ZWxQYXJzZVdpa2l0ZXh0IiwgIl9pdGVyYXRvcjYiLCAiX3N0ZXA2IiwgInBvc3RDYXRlZ29yeUNsZWFudXAiLCAidXNlcnRhbGtfcGFnZSIsICJwYWdlb2JqIiwgIiRub1RhbGtQYWdlTm9kZSIsICJjbG9zZVByZXZpZXciLCAicmVtb3ZlIiwgInNldEVsZW1lbnRUb29sdGlwVmlzaWJpbGl0eSIsICJyZXNldEVsZW1lbnRMYWJlbCIsICJzZWxlY3QyIiwgIndpZHRoIiwgIm1hdGNoZXIiLCAibWF0Y2hlcnMiLCAib3B0Z3JvdXBGdWxsIiwgInRlbXBsYXRlUmVzdWx0IiwgImhpZ2hsaWdodFNlYXJjaE1hdGNoZXMiLCAibGFuZ3VhZ2UiLCAic2VhcmNoaW5nIiwgInF1ZXJ5SW50ZXJjZXB0b3IiLCAiY2hhbmdlIiwgImF1dG9TdGFydCIsICJ0cmlnZ2VyIiwgIm5vdExpbmtlZEFydGljbGUiLCAibm90QXJ0aWNsZSIsICJvdmVycmlkZUVsZW1lbnRMYWJlbCIsICJnZXRXYXJuaW5nV2lraXRleHQiLCAidGVtcGxhdGVOYW1lIiwgImlzQ3VzdG9tIiwgIm5vU2lnbiIsICJzaG93UHJldmlldyIsICJ0ZW1wbGF0ZW5hbWUiLCAibGlua2VkYXJ0aWNsZSIsICJ0ZW1wbGF0ZXRleHQiLCAibWVzc2FnZURhdGEiLCAiaGlzdG9yeV9yZSIsICJoaXN0b3J5IiwgImN1cnJlbnQiLCAiZXhlYyIsICJjdXJyZW50X2RhdGUiLCAiaXNBZnRlciIsICJzdGF0ZWxlbSIsICIkYXV0b2xldmVsTWVzc2FnZSIsICJpc05hTiIsICJhdXRvVGltZW91dCIsICJnZXRUaW1lIiwgIiRsaW5rIiwgImNsb3NlIiwgInN0YXR1c05vZGUiLCAiaW5zZXJ0QWZ0ZXIiLCAiZ2V0Q2FsbGJhY2tQYXJhbWV0ZXJzIiwgIndhcm5pbmdIaXN0b3J5IiwgIm5vdyIsICJnZXRMb2FkVGltZSIsICJ0ZW1wbGF0ZUFuZExldmVsIiwgImN1c3RvbVByb2Nlc3MiLCAic3BsaXQiLCAicHJlZml4IiwgInN1YiIsICJ3YXJuaW5nVGV4dCIsICJzZWN0aW9uRXhpc3RzIiwgInNlY3Rpb25OdW1iZXIiLCAic2VjdGlvbnMiLCAibWF0Y2giLCAiZGF0ZUhlYWRlclJlZ2V4IiwgIm1vbnRoSGVhZGVyUmVnZXgiLCAicmV2ZXJzZSIsICJzb21lIiwgInNlYyIsICJpZHgiLCAic2V0TmV3U2VjdGlvblRpdGxlIiwgImluZm8iLCAibW9udGhIZWFkZXIiLCAic2V0TmV3U2VjdGlvblRleHQiLCAibmV3U2VjdGlvbiIsICJ1c2VyVGFsa1BhZ2UiLCAiZ2V0RnJhZ21lbnQiLCAiYWxlcnQiLCAiJHNlbGVjdGVkRWwiLCAieXNhcmNoaXZlc19wYWdlIiwgInNldENhbGxiYWNrUGFyYW1ldGVycyIsICJ0d2lua2xlYmxvY2tfZXhwb3J0cyIsICJpbXBvcnRfZXh0X2dhZGdldDIiLCAiaW5pdF90d2lua2xlYmxvY2siLCAidHdpbmtsZWJsb2NrIiwgImJsb2NrZWRVc2VyTmFtZSIsICJtZW51Rm9ybWF0dGVkTmFtZXNwYWNlcyIsICJibG9ja0FjdGlvblRleHQiLCAicmVibG9jayIsICJ1bmJsb2NrIiwgImlwIiwgImlzUmFuZ2UiLCAidmFsaWRDSURSIiwgImN1cnJlbnRCbG9ja0luZm8iLCAiZmllbGRfYmxvY2tfb3B0aW9ucyIsICJmaWVsZF90ZW1wbGF0ZV9vcHRpb25zIiwgImFjdGlvbmZpZWxkIiwgImNoYW5nZV9hY3Rpb24iLCAiaGlkZGVuIiwgImNoZWNrZWQiLCAic2l4dHlGb3VyIiwgImdldDY0IiwgImJsb2NrNjRmaWVsZCIsICJjaGFuZ2VfYmxvY2s2NCIsICJmZXRjaFVzZXJJbmZvIiwgImlzUmVnaXN0ZXJlZCIsICIkZm9ybSIsICJzZXRFbGVtZW50VmlzaWJpbGl0eSIsICJwYXJlbnQiLCAidHJhbnNmb3JtQmxvY2tQcmVzZXRzIiwgImJsb2NrNjQiLCAiYWN0aW9udHlwZSIsICJmZXRjaGVkRGF0YSIsICJwcm9jZXNzVXNlckluZm8iLCAiZm4iLCAiYmxvY2tpbmZvIiwgInVzZXJpbmZvIiwgInVzZXJzIiwgInVzZXIiLCAidXNlcmlkIiwgInVzZXJJc0JvdCIsICJncm91cG1lbWJlcnNoaXBzIiwgImdyb3VwIiwgImRpc2FibGV0YWxrIiwgImFsbG93dXNlcnRhbGsiLCAiaGFyZGJsb2NrIiwgImFub25vbmx5IiwgImhhc0Jsb2NrTG9nIiwgImxvZ2V2ZW50cyIsICJibG9ja0xvZyIsICJibG9ja0xvZ0lkIiwgImxvZ2lkIiwgImxldHlwZSIsICJsZWxpbWl0IiwgImxldGl0bGUiLCAidXN1c2VycyIsICJ1c3Byb3AiLCAic2F2ZUZpZWxkc2V0IiwgImZpZWxkc2V0IiwgIl9pdGVyYXRvcjciLCAic2VyaWFsaXplQXJyYXkiLCAiX3N0ZXA3IiwgImVsIiwgIiRibG9jazY0IiwgInByaW9yTmFtZSIsICJpcyIsICJvcmlnaW5hbElzUmFuZ2UiLCAicmVnZW5lcmF0ZUZvcm0iLCAidGl0bGVCYXIiLCAibmV4dFNpYmxpbmciLCAibm9kZVZhbHVlIiwgImZpZWxkX3ByZXNldCIsICJmaWVsZF90YWdfb3B0aW9ucyIsICJmaWVsZF91bmJsb2NrX29wdGlvbnMiLCAiJGJsb2NrIiwgImJsb2NrQm94IiwgIiR0ZW1wbGF0ZSIsICJ0ZW1wbGF0ZUJveCIsICIkdGFnIiwgInRhZ0JveCIsICIkcHJvdGVjdCIsICIkcGFydGlhbCIsICJwYXJ0aWFsQm94IiwgIiR1bmJsb2NrIiwgInVuYmxvY2tCb3giLCAiYmxvY2tHcm91cCIsICJibG9ja0dyb3Vwc1BhcnRpYWwiLCAiYmxvY2tHcm91cHMiLCAicHJpb3IiLCAiYmxvY2tQcmVzZXRzSW5mbyIsICJiZyIsICJpc0luZmluaXR5IiwgImV4cGlyeSIsICJmaWx0ZXIiLCAiY2hhbmdlX3ByZXNldCIsICJmaWx0ZXJlZF9ibG9ja19ncm91cHMiLCAiY2hhbmdlX2V4cGlyeSIsICJ0ZW1wbGF0ZV9leHBpcnkiLCAibXVsdGlwbGUiLCAiX2k0IiwgIl9PYmplY3QkZW50cmllczIiLCAibnVtYmVyIiwgImJsb2Nrb3B0aW9ucyIsICJub2NyZWF0ZSIsICJub2VtYWlsIiwgImF1dG9ibG9jayIsICJ3YXRjaHVzZXIiLCAidG9nZ2xlX3NlZV9hbHNvcyIsICJjaGFuZ2VfdGVtcGxhdGUiLCAiYmxvY2tfcmVhc29uIiwgImJsYW5rX2R1cmF0aW9uIiwgIm5vdGFsayIsICJub2VtYWlsX3RlbXBsYXRlIiwgIm5vY3JlYXRlX3RlbXBsYXRlIiwgIiRwcmV2aWV3bGluayIsICJvZmYiLCAic3ViZ3JvdXAiLCAib2xkZmllbGQiLCAiaGlkZSIsICJzaG93IiwgImVycm9yTG9hZGluZyIsICJtYXhpbXVtU2VsZWN0aW9uTGVuZ3RoIiwgIm1pbmltdW1JbnB1dExlbmd0aCIsICJhamF4IiwgInVybCIsICJ3aWtpU2NyaXB0IiwgImRhdGFUeXBlIiwgImRlbGF5IiwgIm5ld0Zyb21UZXh0IiwgInRlcm0iLCAiYXBmcm9tIiwgImFwbmFtZXNwYWNlIiwgImFwbGltaXQiLCAicHJvY2Vzc1Jlc3VsdHMiLCAicmVzdWx0cyIsICJhbGxwYWdlcyIsICJ0b1RleHQiLCAidGVtcGxhdGVTZWxlY3Rpb24iLCAiY2hvaWNlIiwgInJlbCIsICJ3b3JkQmVnaW5uaW5nIiwgInNhbWVVc2VyIiwgInN0YXR1c1N0ciIsICIkcmFuZ2VibG9ja2xvZ2xpbmsiLCAiaHRtbCIsICJjYWxlbmRhciIsICJpbmZvU3RyIiwgInVwZGF0ZV9mb3JtIiwgImJsb2NrbG9naW5mbyIsICIkYmxvY2tsb2dsaW5rIiwgImxhc3RCbG9ja0FjdGlvbiIsICJibG9ja0FjdGlvbiIsICJ0aW1lc3RhbXAiLCAiZm9ybWF0VGltZSIsICJkdXJhdGlvbiIsICJmb3JSZWdpc3RlcmVkT25seSIsICJwYWdlUGFyYW0iLCAicmVhc29uUGFyYW0iLCAibm9uc3RhbmRhcmQiLCAiZm9yQW5vbk9ubHkiLCAic2lnIiwgImNoZWNrdXNlcmJsb2NrIiwgImJpb2Jsb2NrIiwgInVjYmxvY2siLCAibnBibG9jayIsICJfaXRlcmF0b3I4IiwgIl9zdGVwOCIsICJuZXdLZXkiLCAiY3VzdG9tIiwgIl9pNSIsICJfT2JqZWN0JGVudHJpZXMzIiwgInByZXNldCIsICJzZXR0aW5ncyIsICJpbmRlZmluaXRlIiwgIm1ldGEiLCAic2hvd190ZW1wbGF0ZSIsICJ0ZW1wbGF0ZXMiLCAiQXJyYXkiLCAicHJvdG90eXBlIiwgImNhbGwiLCAiYmxvY2tQcmVzZXQiLCAiYmxvY2tTZXR0aW5ncyIsICJyZWdpc3RyYXRpb25SZXN0cmljdCIsICJzZWVBbHNvcyIsICJzZWVBbHNvTWVzc2FnZSIsICJ1c2VJbml0aWFsT3B0aW9ucyIsICJwYXJzZSIsICJ0b0dNVFN0cmluZyIsICJleHBpcnlfcHJlc2V0IiwgImVhY2giLCAiX2kiLCAiY2hlY2siLCAicHJlcGVuZFJlYXNvbiIsICJwYWdlcmVzdHJpY3Rpb25zIiwgIiRwYWdlU2VsZWN0IiwgIiRuYW1lc3BhY2VTZWxlY3QiLCAicmVzdHJpY3Rpb25zIiwgInByIiwgIl9pdGVyYXRvcjkiLCAiX3N0ZXA5IiwgImVzY2FwZVNlbGVjdG9yIiwgIm5ld09wdGlvbiIsICJPcHRpb24iLCAiZ2VuZXJhdGVBcnJheSIsICJuYW1lc3BhY2VzIiwgInByZXZfdGVtcGxhdGVfZXhwaXJ5IiwgImFyZWEiLCAibmFtZXNwYWNlcmVzdHJpY3Rpb25zIiwgInRlbXBsYXRlVGV4dCIsICJnZXRCbG9ja05vdGljZVdpa2l0ZXh0IiwgIl90ZW1wbGF0ZW9wdGlvbnMiLCAidG9CbG9jayIsICJ0b1dhcm4iLCAidG9QYXJ0aWFsIiwgInRvVGFnIiwgInRvUHJvdGVjdCIsICJ0b1VuYmxvY2siLCAidGVtcGxhdGVvcHRpb25zIiwgInVuYmxvY2tvcHRpb25zIiwgInRvQ2xvc2V2aXAiLCAiY2xvc2V2aXAiLCAiY2hlY2tJbmNvbXBhdGlibGUiLCAiY29uZmxpY3RzIiwgImV4dHJhIiwgImNvdW50IiwgInJlZHVjZSIsICJzdW0iLCAic3BwVXNlcm5hbWUiLCAic3RhdHVzRWxlbWVudCIsICJsb2dFeHBpcnkiLCAiZXhwaXJ5RGF0ZSIsICJncm91cHNDYW5CZVJlbW92ZWQiLCAiZ3JvdXBzVG9CZVJlbW92ZWQiLCAiZ3JvdXBzIiwgInRhZ3MiLCAidG9rZW4iLCAidG9rZW5zIiwgIm1iQXBpIiwgImlzc3VlX3RlbXBsYXRlIiwgInZpcFBhZ2UiLCAiY2xvc2VSZXF1ZXN0IiwgInJpZ2h0U3RhdHVzRWxlbWVudCIsICJyZXZva2VPcHRpb25zIiwgInVzZXJyaWdodHN0b2tlbiIsICJtckFwaSIsICJ1c2VyUGFnZSIsICJ0YWd1c2VycGFnZSIsICJ1bmJsb2NrU3RhdHVzRWxlbWVudCIsICJ1bmJsb2NrTWJBcGkiLCAiX2l0ZXJhdG9yMTAiLCAiX3N0ZXAxMCIsICJ0YWd0ZXh0IiwgInNwcFR5cGUiLCAic3BwRXZpZGVuY2UiLCAic3BtQ2hlY2tlZCIsICJzcG1FdmlkZW5jZSIsICJzZXRQYWdlVGV4dCIsICJzYXZlIiwgInByb3RlY3R1c2VycGFnZSIsICJleGlzdHMiLCAic2V0RWRpdFByb3RlY3Rpb24iLCAic2V0TW92ZVByb3RlY3Rpb24iLCAic2V0Q3JlYXRlUHJvdGVjdGlvbiIsICJwcm90ZWN0IiwgImZvcm1EYXRhIiwgInVzZXJ0YWxrX3N1bW1hcnkiLCAidXNlck5hbWUiLCAiZXhwaXJ5VGV4dCIsICJyZXF1ZXN0TGlzdCIsICJmb3VuZCIsICJ2aXBSZSIsICJwYWdlTmFtZVJlZ2V4IiwgIl9pdGVyYXRvcjExIiwgIl9zdGVwMTEiLCAicmVxdWVzdCIsICJ0cmltRW5kIiwgIm5ld1RleHQiLCAibWFrZVNlbnRlbmNlIiwgInBvcCIsICJwIiwgIm5hbWVzcGFjZU5hbWVzIiwgImRhdGVIZWFkZXJSZWdleExhc3QiLCAiZGF0ZUhlYWRlclJlZ2V4UmVzdWx0IiwgImxhc3RIZWFkZXJJbmRleCIsICJsYXN0SW5kZXhPZiIsICJmcmllbmRseXRhbGtiYWNrX2V4cG9ydHMiLCAiaW5pdF9mcmllbmRseXRhbGtiYWNrIiwgImZyaWVuZGx5dGFsa2JhY2siLCAidGFsa2JhY2siLCAiY2hhbmdlVGFyZ2V0IiwgInRidGFyZ2V0IiwgImVscXVlcnkiLCAiZWxsaW1pdCIsICJ5c2FyY2hpdmVzX2FwaSIsICJvcHRvdXRTdGF0dXMiLCAib3B0b3V0IiwgIiRlbCIsICJnZXRYTUwiLCAicHJldl9wYWdlIiwgInByZXZfc2VjdGlvbiIsICJwcmV2X21lc3NhZ2UiLCAidmFsdWVzIiwgInNlY3Rpb24iLCAicmVxdWlyZWQiLCAibm90aWNlYm9hcmQiLCAiX2k2IiwgIl9PYmplY3QkZW50cmllczQiLCAibm90aWNlYm9hcmRzIiwgIm5ibmFtZSIsICJkZWZhdWx0U2VsZWN0ZWQiLCAicmVwbGFjZUNoaWxkIiwgImFmZnAiLCAiZWRpdFN1bW1hcnkiLCAic2JsIiwgInNobCIsICJnZXRDaGVja2VkIiwgIm5hbWVzcGFjZVJlZ2V4IiwgImZ1bGxVc2VyVGFsa1BhZ2VOYW1lIiwgInVzZXJfdGFsayIsICJnZXROb3RpY2VXaWtpdGV4dCIsICJ0YWxrcGFnZSIsICJzZXRDcmVhdGVPcHRpb24iLCAic2V0TWlub3JFZGl0IiwgIm5vdGljZXRleHQiLCAic2FmZVJlcGxhY2UiLCAidHdpbmtsZXNwZWVkeV9leHBvcnRzIiwgImltcG9ydF9leHRfZ2FkZ2V0MyIsICJpbml0X3R3aW5rbGVzcGVlZHkiLCAidHdpbmtsZXNwZWVkeSIsICJzcGVlZHkiLCAiaW5pdERpYWxvZyIsICJldmFsdWF0ZVN5c29wIiwgImV2YWx1YXRlVXNlciIsICJoYXNDU0QiLCAibW9kZSIsICJzeXNvcFNpbmdsZVN1Ym1pdCIsICJzeXNvcFJhZGlvQ2xpY2siLCAic3lzb3BNdWx0aXBsZVN1Ym1pdCIsICJzeXNvcE11bHRpcGxlUmFkaW9DbGljayIsICJ1c2VyTXVsdGlwbGVTdWJtaXQiLCAidXNlck11bHRpcGxlUmFkaW9DbGljayIsICJ1c2VyU2luZ2xlU3VibWl0IiwgInVzZXJTaW5nbGVSYWRpb0NsaWNrIiwgImlzU3lzb3AiLCAiaGFzU3VibWl0QnV0dG9uIiwgImlzTXVsdGlwbGUiLCAiY2FsbGJhY2tmdW5jIiwgImNGb3JtIiwgImNDaGVja2VkIiwgInJlZGlyZWN0cyIsICJkZWxtdWx0aXBsZSIsICJvcGVudXNlcnRhbGsiLCAic2FsdGluZyIsICJtb2RlQ2hhbmdlZCIsICJzdG9wUHJvcGFnYXRpb24iLCAiZGVsZXRlT3B0aW9ucyIsICJ0YWdPcHRpb25zIiwgInByaW9yRGVsZXRpb25Db3VudCIsICJnZXRNb2RlIiwgInRhZ19vbmx5IiwgImlzU3lzb3BNb2RlIiwgImV2YWx1YXRlVHlwZSIsICJyYWRpb09yQ2hlY2tib3giLCAiZ2VuZXJhdGVDc2RMaXN0IiwgImN1c3RvbVJhdGlvbmFsZSIsICJhcnRpY2xlTGlzdCIsICJ1c2VyTGlzdCIsICJ1c2VydGFsa0xpc3QiLCAiZmlsZUxpc3QiLCAiY2F0ZWdvcnlMaXN0IiwgImRyYWZ0TGlzdCIsICJ0YWxrTGlzdCIsICJnZW5lcmFsQ3JpdGVyaWEiLCAiZ2VuZXJhbExpc3QiLCAicmVkaXJlY3RMaXN0IiwgImN1c3RvbU9wdGlvbiIsICJjbGljayIsICJkZWNvZGVVUklDb21wb25lbnQiLCAibGFiZWxzIiwgImVtcHR5IiwgImxlYWN0aW9uIiwgImxlcHJvcCIsICJkZWxDb3VudCIsICJjb250aW51ZSIsICJvcGVuU3ViZ3JvdXBIYW5kbGVyIiwgImNoaWxkcmVuIiwgImZvY3VzIiwgInN1Ym1pdFN1Ymdyb3VwSGFuZGxlciIsICJjcml0RWxlbWVudCIsICJjcml0ZXJpb24iLCAiaGlkZVdoZW5NdWx0aXBsZSIsICJoaWRlU3ViZ3JvdXBXaGVuTXVsdGlwbGUiLCAiaGlkZVdoZW5TaW5nbGUiLCAiaGlkZVN1Ymdyb3VwV2hlblNpbmdsZSIsICJoaWRlV2hlblN5c29wIiwgImhpZGVTdWJncm91cFdoZW5TeXNvcCIsICJoaWRlV2hlblVzZXIiLCAiaGlkZVN1Ymdyb3VwV2hlblVzZXIiLCAiaGlkZVdoZW5SZWRpcmVjdCIsICJzaG93SW5OYW1lc3BhY2VzIiwgImhpZGVJbk5hbWVzcGFjZXMiLCAib3JpZ2luYWxFdmVudCIsICJub3JtYWxpemVkQ3JpdGVyaW9uIiwgIm5vcm1hbGl6ZUhhc2giLCAiZzEiLCAiZzIiLCAiZzMiLCAiZzQiLCAiZzUiLCAiZzYiLCAiZzciLCAiZzgiLCAiZzkiLCAiYTEiLCAiYTIiLCAiYTMiLCAicjEiLCAicjIiLCAiZjEiLCAiZjIiLCAiZjMiLCAiZjQiLCAiZjUiLCAibzEiLCAibzIiLCAibzMiLCAiZ2V0VGVtcGxhdGVDb2RlQW5kUGFyYW1zIiwgImNvZGUiLCAicGFyYW1ldGVycyIsICJpIiwgIm5vcm1hbGl6ZWRzIiwgInV0cGFyYW1zIiwgIl9pdGVyYXRvcjEyIiwgIl9zdGVwMTIiLCAibm9ybSIsICJ0b1VwcGVyQ2FzZSIsICJ0ZW1wbGF0ZVBhcmFtcyIsICJpXyIsICJnZXRVc2VyVGFsa1BhcmFtZXRlcnMiLCAicGFyc2VXaWtpdGV4dCIsICJwc3QiLCAiY29udGVudG1vZGVsIiwgInN0YXR1c0luZGljYXRvciIsICJhcGkyIiwgImFwaU9iaiIsICJjaGlsZE5vZGVzIiwgInN5c29wIiwgInByb21wdCIsICJkZWxldGVQYWdlIiwgImRlbGV0ZVJlYXNvbiIsICJwcm9tcHRGb3JTdW1tYXJ5IiwgInRoaXNwYWdlIiwgImRlbGV0ZU1haW4iLCAid2F0Y2giLCAiZGVsZXRlVGFsayIsICJvcGVuVXNlclRhbGsiLCAibG9va3VwQ3JlYXRpb24iLCAib3BlblVzZXJUYWxrUGFnZSIsICJkZWxldGVUYWxrUGFnZSIsICJub3JtYWxpemVkIiwgImNsYXNzTGlzdCIsICJjb250YWlucyIsICJzZXRUaW1lb3V0IiwgImRlbGV0ZVJlZGlyZWN0cyIsICJyZGxpbWl0IiwgImRlbGV0ZVJlZGlyZWN0c01haW4iLCAiJGJpZ3RleHQiLCAic2V0IiwgInVubGluayIsICJnZXRDcmVhdG9yIiwgInZhbmFydGljbGUiLCAib3BlbiIsICJ4bWxEb2MiLCAiJHNuYXBzaG90IiwgInRvdGFsIiwgIm9uc3VjY2VzcyIsICJhcGlvYmpJbm5lciIsICJ1cGRhdGUiLCAicmVtb3ZlQ2hlY2twb2ludCIsICJhZGRDaGVja3BvaW50IiwgIl9rZXkiLCAidGV4dE5vU2QiLCAiY29weXZpbyIsICJ4ZmQiLCAiYnVpbGREYXRhIiwgInBhdHJvbCIsICJyZXF1ZXN0c2FsdCIsICJlZGl0c3VtbWFyeSIsICJfaXRlcmF0b3IxMyIsICJfc3RlcDEzIiwgIk1hdGgiLCAiYmxhbmsiLCAiaW5zZXJ0QWZ0ZXJUZW1wbGF0ZXMiLCAiZ2V0VGV4dCIsICJ0YWdDb21wbGV0ZSIsICJ1c2VydGFsayIsICJwYWdlT2JqIiwgImluaXRpYWxDb250cmliIiwgInRhbGtQYWdlTmFtZSIsICJ1c2VydGFsa3BhZ2UiLCAibm90aWZ5dGV4dCIsICJsb2dub21pbmF0aW9uIiwgImFkZFRvTG9nIiwgInVzbCIsICJ1c2Vyc3BhY2VMb2dnZXIiLCAiaW5pdGlhbFRleHQiLCAiYXBwZW5kVGV4dCIsICJmcm9tREkiLCAiX2l0ZXJhdG9yMTQiLCAiX3N0ZXAxNCIsICJsb2ciLCAiZ2V0UGFyYW1ldGVycyIsICJfaXRlcmF0b3IxNSIsICJfc3RlcDE1IiwgImN1cnJlbnRQYXJhbXMiLCAicmVkaW1hZ2UiLCAiZGJyYXRpb25hbGUiLCAib3RoZXJwYWdlIiwgImZpbGVuYW1lIiwgInJlZGlydHlwZSIsICJyZXNvbHZlQ3NkVmFsdWVzIiwgIl9lJHRhcmdldCRmb3JtIiwgIl9lJHRhcmdldCRmb3JtMiIsICJ3YXRjaFBhZ2UiLCAiX2l0ZXJhdG9yMTYiLCAiX3N0ZXAxNiIsICJfZSR0YXJnZXQkZm9ybTMiLCAiX2l0ZXJhdG9yMTciLCAiX3N0ZXAxNyIsICJfaTciLCAiX25vcm1hbGl6ZWRzIiwgIm5vdGlmeXVzZXIiLCAiX2l0ZXJhdG9yMTgiLCAiX3N0ZXAxOCIsICJjc2Rsb2ciLCAiX2l0ZXJhdG9yMTkiLCAiX3N0ZXAxOSIsICJ0d2lua2xlY29weXZpb19leHBvcnRzIiwgImluaXRfdHdpbmtsZWNvcHl2aW8iLCAidHdpbmtsZWNvcHl2aW8iLCAiaXNQYWdlUmVkaXJlY3QiLCAidHJ5VGFnZ2luZyIsICJ0YWdnaW5nQXJ0aWNsZSIsICJsb2dwYWdlIiwgImNvcHl2aW9MaXN0IiwgInJldmlzaW9uSWQiLCAic291cmNlIiwgIm9sZGNzZCIsICJzcGVlZHlUYWciLCAiZzRfcGFnZW5hbWUiLCAib3V0cHV0IiwgImdldFVUQ01vbnRoIiwgImdldFVUQ0RhdGUiLCAidHdpbmtsZXhmZF9leHBvcnRzIiwgImluaXRfdHdpbmtsZXhmZCIsICJ0d2lua2xleGZkIiwgImN1cnJlbnRSYXRpb25hbGUiLCAicHJpbnRSYXRpb25hbGUiLCAib2xkcmVhc29udGV4dGJveCIsICJvbGRyZWFzb24iLCAiYXBwZW5kUmVhc29uQm94IiwgInhmZF9jYXQiLCAiYWZkX2NhdGVnb3J5IiwgImNoYW5nZV9hZmRfY2F0ZWdvcnkiLCAiYWZkX2NhdCIsICJsb2NhbFN0b3JhZ2UiLCAiVHdpbmtsZV9hZmRDYXRlZ29yeSIsICJ4ZmRjYXQiLCAibWVyZ2VpbnRvIiwgInBhcmVudEVsZW1lbnQiLCAicmVtb3ZlQXR0cmlidXRlIiwgImZ3ZGNzZHJlYXNvbiIsICJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwgImlubmVySFRNTCIsICJ4ZmRyZWFzb24iLCAiYWZkIiwgInRhZ2dpbmdfcGFnZSIsICJkaXNjdXNzaW9uX3BhZ2UiLCAidG9kYXlzTGlzdCIsICJjcmVhdG9yIiwgImZvcm1hdFJlYXNvblRleHQiLCAibm9pbmNsdWRlIiwgInRleHROb05vdE1hbmRhcmluIiwgInRleHROb0FmYyIsICJ0byIsICJjb21tZW50VGV4dCIsICJzYWZlc3Vic3QiLCAiZmFtZSIsICJzdWJzdHViIiwgImJhdGNoIiwgInRhcmdldF9wYWdlIiwgImZmZCIsICJ0YWdnaW5nSW1hZ2UiLCAieGZkQ2F0TmFtZSIsICJ3aWtpVXJsZW5jb2RlIiwgImZvcm1hdFJlYXNvbkZvckxvZyIsICJvbkVycm9yIiwgInNldExvb2t1cE5vblJlZGlyZWN0Q3JlYXRvciIsICJ0d2lua2xlaW1hZ2VfZXhwb3J0cyIsICJpbml0X3R3aW5rbGVpbWFnZSIsICJ0d2lua2xlaW1hZ2UiLCAiaW1hZ2UiLCAiZmllbGQiLCAiX2l0ZXJhdG9yMjAiLCAiX3N0ZXAyMCIsICJ0eXBlXyIsICJjc2Rjcml0IiwgIkVycm9yIiwgInRvTG93ZXJDYXNlIiwgImYxX3NvdXJjZSIsICJmNF90eXBlIiwgInVzZXJOb3RpZmljYXRpb24iLCAibm90ZURhdGEiLCAiaW1hZ2VMaXN0IiwgInR3aW5rbGVwcm90ZWN0X2V4cG9ydHMiLCAiaW5pdF90d2lua2xlcHJvdGVjdCIsICJ0d2lua2xlcHJvdGVjdCIsICJjaGFuZ2VBY3Rpb24iLCAiZmV0Y2hQcm90ZWN0aW9uTGV2ZWwiLCAiaXNUZW1wbGF0ZSIsICJjdXJyZW50UHJvdGVjdGlvbkxldmVscyIsICJwcmV2aW91c1Byb3RlY3Rpb25MZXZlbHMiLCAiaW5kZXhwYWdlaWRzIiwgImlucHJvcCIsICJwcm90ZWN0RGF0YSIsICJwYWdlaWQiLCAicGFnZWlkcyIsICJwcmV2aW91cyIsICJ3YXRjaGVkIiwgIndhdGNobGlzdGV4cGlyeSIsICJfaXRlcmF0b3IyMSIsICJwcm90ZWN0aW9uIiwgIl9zdGVwMjEiLCAiY2FzY2FkZSIsICJwcmV2aW91c1Byb3RlY3Rpb25Mb2ciLCAiX2l0ZXJhdG9yMjIiLCAiZGV0YWlscyIsICJfc3RlcDIyIiwgImhhc1Byb3RlY3RMb2ciLCAic2hvd0xvZ0FuZEN1cnJlbnRQcm90ZWN0SW5mbyIsICJjdXJyZW50bHlQcm90ZWN0ZWQiLCAiaGFzU3RhYmxlTG9nIiwgIiRsaW5rTWFya3VwIiwgImZvcm1hdFByb3RlY3Rpb25EZXNjcmlwdGlvbiIsICJwcm90ZWN0aW9uTm9kZSIsICJzdGF0dXNMZXZlbCIsICJmaWVsZDEiLCAiZmllbGQyIiwgImNoYW5nZVByZXNldCIsICJwcm90ZWN0aW9uVHlwZXNBZG1pbiIsICJwcm90ZWN0aW9uVHlwZXNDcmVhdGUiLCAiZm9ybWV2ZW50cyIsICJlZGl0bW9kaWZ5IiwgImVkaXRsZXZlbCIsICJwcm90ZWN0aW9uTGV2ZWxzIiwgImRvQ3VzdG9tRXhwaXJ5IiwgImNsb3Nlc3QiLCAic2VsZWN0ZWRJbmRleCIsICJwcm90ZWN0aW9uTGVuZ3RocyIsICJtb3ZlbW9kaWZ5IiwgIm1vdmVsZXZlbCIsICJjcmVhdGVsZXZlbCIsICJwcm90ZWN0aW9uVGFncyIsICJ0YWd0eXBlIiwgInByb3RlY3Rpb25UeXBlcyIsICJtYXJnaW5SaWdodCIsICJlZGl0ZXhwaXJ5IiwgImNvbG9yIiwgIm1vdmVleHBpcnkiLCAiY3JlYXRlZXhwaXJ5IiwgInNtYWxsIiwgInNob3dleHBpcnkiLCAib3B0aW9uIiwgInByb3RlY3Rpb25UeXBlc0NyZWF0ZU9ubHkiLCAicHJvdGVjdGlvblByZXNldHNJbmZvIiwgImVkaXQiLCAibW92ZSIsICJ1bnByb3RlY3QiLCAiY3JlYXRlIiwgImFjdGlvbnR5cGVzIiwgIl9pdGVyYXRvcjIzIiwgIl9zdGVwMjMiLCAiYWN0aW9uX3R5cGVfdmFsdWUiLCAicmVhc29uRmllbGQiLCAicHJvdGVjdFJlYXNvbiIsICJfaXRlbSR0ZW1wbGF0ZSIsICJ0YWdwYXJhbXMiLCAiY2xvc2VwYXJhbXMiLCAic3RhdHVzSW5pdGVkIiwgImFsbERvbmUiLCAidGFnZ2luZ1BhZ2VJbml0aWFsIiwgInJwcFBhZ2UiLCAicHJvdGVjdEl0IiwgImZvbGxvd1JlZGlyZWN0IiwgInR5cGVuYW1lIiwgInR5cGVyZWFzb24iLCAicnBwcGFyYW1zIiwgInJwcE5hbWUiLCAiZmlsZVJlcXVlc3QiLCAicGFnZU5hbWUiLCAicHJvdGVjdGVkUGFnZSIsICJ0YWdnaW5nUGFnZSIsICJnZXRUYWdnZWRQYWdlIiwgIm9sZHRhZ19yZSIsICJyZV9yZXN1bHQiLCAibmV3VmVyc2lvbiIsICJzdXBwcmVzc1Byb3RlY3RXYXJuaW5nIiwgInJwcFJlIiwgInJwcExpbmsiLCAiZ2V0UGFnZU5hbWUiLCAibmV3dGFnIiwgIlN0cmluZyIsICJyYXciLCAiX3RlbXBsYXRlT2JqZWN0IiwgIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWwiLCAid29yZHMiLCAicmVnIiwgIm9yaWdpbmFsVGV4dExlbmd0aCIsICJsaW5rbm9kZSIsICJ3YXRjaFByZWYiLCAib3B0aW9ucyIsICJ3YXRjaF9xdWVyeSIsICJsaW5rbm9kZTIiLCAic2VjdGlvblRleHQiLCAiX2l0ZXJhdG9yMjQiLCAiX3N0ZXAyNCIsICJfaTgiLCAiX09iamVjdCRlbnRyaWVzNSIsICJmcmllbmRseXRhZ19leHBvcnRzIiwgImluaXRfZnJpZW5kbHl0YWciLCAiZnJpZW5kbHl0YWciLCAibW9kZUVuIiwgImNhblJlbW92ZSIsICJjaGVja2VkVGFncyIsICIkYWxsQ2hlY2tib3hEaXZzIiwgImxhYmVsX2VsZW1lbnQiLCAiJGFsbEhlYWRlcnMiLCAic2VhcmNoU3RyaW5nIiwgInNlYXJjaFJlZ2V4IiwgIl9pbmRleCIsICJsYWJlbF90ZXh0IiwgInNlYXJjaEhpdCIsICJyYW5nZSIsICJjcmVhdGVSYW5nZSIsICJ0ZXh0bm9kZSIsICJzZWxlY3ROb2RlQ29udGVudHMiLCAic2V0U3RhcnQiLCAic2V0RW5kIiwgInVuZGVybGluZV9zcGFuIiwgInN1cnJvdW5kQ29udGVudHMiLCAiZmxhdE9iamVjdCIsICJfaXRlcmF0b3IyNSIsICJ0YWdMaXN0IiwgIl9zdGVwMjUiLCAiX2l0ZXJhdG9yMjYiLCAiX3N0ZXAyNiIsICJfaXRlcmF0b3IyNyIsICJfc3RlcDI3IiwgImRlc2NyaXB0aW9uIiwgImV4Y2x1ZGVNSSIsICJ1cGRhdGVTb3J0T3JkZXIiLCAiZGl2RWxlbWVudCIsICJfaXRlcmF0b3IyOCIsICJfc3RlcDI4IiwgImJ1aWxkRmlsZW5hbWUiLCAiX2l0ZXJhdG9yMjkiLCAiX3N0ZXAyOSIsICJfaXRlcmF0b3IzMCIsICJfc3RlcDMwIiwgInF1aWNrZmlsdGVyIiwgImF1dG9jb21wbGV0ZSIsICJhZGRFdmVudExpc3RlbmVyIiwgImFscmVhZHlQcmVzZW50VGFncyIsICJ0YWdOYW1lIiwgImJveFRhZyIsICJmb250U2l6ZSIsICJudW1BZGRlZCIsICJudW1SZW1vdmVkIiwgImFmdGVyIiwgInNvcnRvcmRlciIsICJfaXRlcmF0b3IzMSIsICJfc3RlcDMxIiwgImdlbmVyYXRlTGlua3MiLCAibWFrZUNoZWNrYm94IiwgIm90aGVyVGFnTmFtZSIsICJtYWtlQ2hlY2tib3hlc0ZvckFscmVhZHlQcmVzZW50VGFncyIsICJzdWJkaXYiLCAiY2hlY2tib3hlcyIsICJ1bkNoZWNrZWRUYWdzIiwgImdldFVuY2hlY2tlZCIsICJfaXRlcmF0b3IzMiIsICJfc3RlcDMyIiwgImRvQ2F0ZWdvcnlDaGVja2JveGVzIiwgIl9pdGVyYXRvcjMzIiwgIl9zdGVwMzMiLCAiX2l0ZXJhdG9yMzQiLCAiX3N0ZXAzNCIsICJfaXRlcmF0b3IzNSIsICJfc3RlcDM1IiwgIl9Ud2lua2xlJHRhZyRhcnRpY2xlIiwgImFscGhhYmV0aWNhbExpc3QiLCAiX2l0ZXJhdG9yMzYiLCAiX3N0ZXAzNiIsICIkd29ya2FyZWEiLCAicmVuZGVyZWQiLCAiX2l0ZXJhdG9yMzciLCAiX3N0ZXAzNyIsICJfaXRlcmF0b3IzOCIsICJfc3RlcDM4IiwgImZpcnN0UGFydCIsICJzZWNvbmRQYXJ0IiwgInRhZ25hbWUiLCAicGFnZVRleHQiLCAicG9zdFJlbW92YWwiLCAidGFnc1RvUmVtb3ZlIiwgIm1ha2VUZW1wbGF0ZUxpbmsiLCAic3VtbWFyeVRleHQiLCAiYWRkZWRUYWdzIiwgInJlbW92ZWRUYWdzIiwgIm1lcmdlUmVhc29uIiwgImRpc2N1c3NBcnRpY2xlIiwgIm5vbkRpc2N1c3NBcnRpY2xlIiwgIm1lcmdlVGFnT3RoZXIiLCAibWVyZ2VUYWciLCAibmV3UGFyYW1zIiwgInRhZ3NUb1JlbWFpbiIsICJtZXJnZVRhcmdldCIsICJ0YWxrRGlzY3Vzc2lvblRpdGxlIiwgInRhbGtEaXNjdXNzaW9uVGl0bGVMaW5rZWQiLCAibW92ZVJlYXNvbiIsICJtb3ZlVGFsa3BhZ2VUZXh0IiwgIm1vdmVUYXJnZXQiLCAibW92ZVRhbGtwYWdlIiwgInJlbW92ZVRhZ3MiLCAiZ2V0UmVkaXJlY3RzRm9yIiwgIl9pdGVyYXRvcjM5IiwgIl9zdGVwMzkiLCAidGFnX3JlIiwgImxobmFtZXNwYWNlIiwgImxoc2hvdyIsICJsaGxpbWl0IiwgInJlc3BvbnNlWE1MIiwgIl9pZHgiLCAicmVtb3ZlZCIsICJ0YWdSZSIsICJ0YWdUZXh0IiwgImdyb3VwYWJsZVRhZ3MiLCAiZ3JvdXBhYmxlRXhpc3RpbmdUYWdzIiwgImFkZFRhZyIsICJjdXJyZW50VGFnIiwgImV4cGVydCIsICJleHBlcnQyIiwgImV4cGVydDMiLCAibWlzc2luZ0luZm9ybWF0aW9uIiwgIm5vdGFiaWxpdHkiLCAidGFyZ2V0MSIsICJ0YXJnZXQyIiwgInRhcmdldDMiLCAiY2xlYW51cFJlYXNvbiIsICJhZGRVbmdyb3VwZWRUYWdzIiwgIl9pOSIsICJfdGFncyIsICJ0ZW1wbGF0ZXNBZnRlciIsICJfaXRlcmF0b3I0MCIsICJfc3RlcDQwIiwgIm5vdGFiaWxpdHlMaXN0IiwgIl9pdGVyYXRvcjQxIiwgIl9zdGVwNDEiLCAibWlUZXN0IiwgIl9pdGVyYXRvcjQyIiwgIl9zdGVwNDIiLCAibWlSZWdleCIsICJhZGROZXdUYWdzVG9NSSIsICJfaXRlcmF0b3I0MyIsICJfc3RlcDQzIiwgIl9pdGVyYXRvcjQ0IiwgIl9zdGVwNDQiLCAidGFnSW5kZXgiLCAiYWx0TGFuZ0Zyb20iLCAicmVxQXJ0aWNsZUxhbmciLCAicmVxQXJ0aWNsZVRpdGxlIiwgIl9pMTAiLCAiX3RhZ3MyIiwgIm9sZFRhZ3MiLCAicGFnZVRhZ3MiLCAib2xkUGFnZVRhZ3MiLCAiX2l0ZXJhdG9yNDUiLCAiX3N0ZXA0NSIsICJwYWdlVGFnIiwgInBhZ2VSZSIsICJmaWxlIiwgIl9pdGVyYXRvcjQ2IiwgIl9zdGVwNDYiLCAibm93Y29tbW9uc05hbWUiLCAia2VlcGxvY2FsTmFtZSIsICJrZWVwbG9jYWxSZWFzb24iLCAicmVuYW1lbWVkaWFOZXduYW1lIiwgInJlbmFtZW1lZGlhUmVhc29uIiwgIkRvTm90TW92ZVRvQ29tbW9uc19yZWFzb24iLCAiY2hlY2tQYXJhbWV0ZXIiLCAicGFyYW1ldGVyIiwgImV4aXN0aW5nVGFncyIsICJ0d2lua2xlc3R1Yl9leHBvcnRzIiwgImltcG9ydF9leHRfZ2FkZ2V0NCIsICJpbml0X3R3aW5rbGVzdHViIiwgInR3aW5rbGVzdHViIiwgInN0dWIiLCAiX1R3aW5rbGUkc3R1YiIsICJfVHdpbmtsZSRzdHViJGNoZWNrZWQiLCAiY3VzdG9tY2hlY2tib3hlcyIsICJfaXRlcmF0b3I0NyIsICJfc3RlcDQ3IiwgIl9pdGVyYXRvcjQ4IiwgIl9zdGVwNDgiLCAiX2kxMSIsICJfT2JqZWN0JGVudHJpZXM2IiwgInRhZ0NhdGVnb3JpZXMiLCAidGl0bGVOYW1lIiwgInRhZ0NhdGVnb3JpZXNIZWFkZXIiLCAiaXNBcnJheSIsICJfaTEyIiwgIl9PYmplY3QkZW50cmllczciLCAic3VidGl0bGUiLCAic3ViY29udGVudCIsICJfaTEzIiwgIl9PYmplY3QkZW50cmllczgiLCAiX2l0ZXJhdG9yNDkiLCAiX3N0ZXA0OSIsICJnZW5lcmFsIiwgImdlbyIsICJvdGhlcnMiLCAiYmlvIiwgInNjaWVuY2UiLCAic3BvcnQiLCAidGVjaCIsICJhcnQiLCAidG90YWxUYWdzIiwgIl9pMTQiLCAiX3RhZ3MzIiwgInBhdHJvbFBhZ2UiLCAidHdpbmtsZWRpZmZfZXhwb3J0cyIsICJpbml0X3R3aW5rbGVkaWZmIiwgInR3aW5rbGVkaWZmIiwgImRpZmYiLCAib2xkaWQiLCAibWUiLCAibm9kZSIsICJydnVzZXIiLCAibG9jYXRpb24iLCAidHdpbmtsZXVubGlua19leHBvcnRzIiwgImluaXRfdHdpbmtsZXVubGluayIsICJ0d2lua2xldW5saW5rIiwgInByZXNldFJlYXNvbiIsICJmaWxlU3BhY2UiLCAibGlua1RleHRCZWZvcmUiLCAibGlua1RleHRBZnRlciIsICJsaW5rUGxhaW5CZWZvcmUiLCAibGlua1RlbXBsYXRlQmVmb3JlIiwgImxpbmtQbGFpbkFmdGVyIiwgIl9pMTUiLCAiX2FycjIiLCAiZm9udEZhbWlseSIsICJmb250U3R5bGUiLCAiYmx0aXRsZSIsICJibGxpbWl0IiwgImJsbmFtZXNwYWNlIiwgInJhd2NvbnRpbnVlIiwgIml1dGl0bGUiLCAiaXVsaW1pdCIsICJpdW5hbWVzcGFjZSIsICJibGZpbHRlcnJlZGlyIiwgImJhY2tsaW5rcyIsICJwYWRkaW5nIiwgImltYWdldXNhZ2UiLCAidW5saW5rZXIiLCAiYmF0Y2hPcGVyYXRpb24iLCAic2V0T3B0aW9uIiwgInNldFBhZ2VMaXN0IiwgInJ1biIsICJzZXRCb3RFZGl0IiwgImRvQmFja2xpbmtzIiwgImRvSW1hZ2V1c2FnZSIsICJ1bmxpbmtCYWNrbGlua3MiLCAiaGF2ZWNvbnRlbnQiLCAiX2l0ZXJhdG9yNTAiLCAiX3N0ZXA1MCIsICJjb252ZXJ0TnVtYmVyIiwgInNoaWZ0Q2xpY2tTdXBwb3J0IiwgIl9pdGVyYXRvcjUxIiwgIl9zdGVwNTEiLCAiX2l0ZXJhdG9yNTIiLCAiX3N0ZXA1MiIsICJfaXRlcmF0b3I1MyIsICJfc3RlcDUzIiwgIm9sZHRleHQiLCAid2FybmluZ1N0cmluZyIsICJjb21tZW50T3V0SW1hZ2UiLCAicmVtb3ZlTGluayIsICJyZW1vdmVUZW1wbGF0ZSIsICJ3b3JrZXJGYWlsdXJlIiwgIndvcmtlclN1Y2Nlc3MiLCAidHdpbmtsZWZsdWZmX2V4cG9ydHMiLCAiaW5pdF90d2lua2xlZmx1ZmYiLCAidHdpbmtsZWZsdWZmIiwgImZsdWZmIiwgImhvb2siLCAiYWRkTGlua3MiLCAic2tpcFRhbGsiLCAiY29udHJpYnV0aW9ucyIsICJyZWNlbnRjaGFuZ2VzIiwgInRydXN0ZWRCb3RzIiwgImhpZGRlbk5hbWUiLCAibGlua0J1aWxkZXIiLCAic3BhblRhZyIsICJidWlsZExpbmsiLCAicm9sbGJhY2tMaW5rcyIsICJ2YW5kYWwiLCAiaW5saW5lIiwgInJldiIsICJyZXZOb2RlIiwgIm5vcm1Ob2RlIiwgInZhbmROb2RlIiwgIm5vcm1MaW5rIiwgInZhbmRMaW5rIiwgInJldmVydCIsICJkaXNhYmxlTGlua3MiLCAic2VwYXJhdG9yIiwgInJlc3RvcmVUaGlzUmV2aXNpb25MaW5rIiwgInJldmlzaW9uUmVmIiwgInJldmVydFRvUmV2aXNpb25Ob2RlIiwgImZvbnRXZWlnaHQiLCAicmV2ZXJ0VG9SZXZpc2lvbkxpbmsiLCAicmV2ZXJ0VG9SZXZpc2lvbiIsICIkbGlzdCIsICJkYXRhc2V0IiwgIm13UmV2aWQiLCAibm90IiwgInRhcmdldFBhZ2UiLCAiaGlzdExpc3QiLCAidG9BcnJheSIsICJzaGlmdCIsICJfaXRlcmF0b3I1NCIsICJfc3RlcDU0IiwgIl9pdGVyYXRvcjU1IiwgIl9zdGVwNTUiLCAid2FybkZyb21UYWxrIiwgInh0aXRsZSIsICJ0YWxrTGluayIsICJleHRyYVBhcmFtcyIsICJvbGRUaXRsZSIsICJyZXZlcnRzdW1tYXJ5IiwgIl8iLCAibmV3VGl0bGUiLCAibnRpdGxlIiwgImlzSVB2NkFkZHJlc3MiLCAic2FuaXRpemVJUHY2IiwgInF1ZXJ5U2VsZWN0b3JBbGwiLCAibm90aWZ5U3RhdHVzIiwgImF1dG9IaWRlIiwgInVzZXJIaWRkZW4iLCAiaW50ZXN0YWN0aW9ucyIsICJjdXJ0aW1lc3RhbXAiLCAib2xkcmV2IiwgInRvUmV2aXNpb24iLCAibGFzdHJldmlkIiwgInRvdWNoZWQiLCAibG9hZHRpbWVzdGFtcCIsICJjc3JmdG9rZW4iLCAicmV2ZXJ0VG9SZXZJRCIsICJyZXZlcnRUb1VzZXIiLCAicmV2ZXJ0VG9Vc2VySGlkZGVuIiwgIm9wdGlvbmFsX3N1bW1hcnkiLCAiZm9ybWF0U3VtbWFyeSIsICJ1bmRvIiwgInVuZG9hZnRlciIsICJiYXNldGltZXN0YW1wIiwgInN0YXJ0dGltZXN0YW1wIiwgIm1pbm9yIiwgImJvdCIsICJ3YXRjaE9yRXhwaXJ5IiwgIndhdGNobGlzdCIsICJjb21wbGV0ZSIsICJyZXZzIiwgImxhc3R1c2VyIiwgInVzZXJOb3JtIiwgImNvbnQiLCAiZ29vZF9yZXZpc2lvbiIsICJ1c2VySGFzQWxyZWFkeUNvbmZpcm1lZEFjdGlvbiIsICJnb29kdXNlciIsICJnb29kdXNlckhpZGRlbiIsICJleHRyYV9zdW1tYXJ5IiwgIm5vdGlmeVVzZXIiLCAieG1sIiwgIiRlZGl0IiwgIndpbmRvd1F1ZXJ5IiwgInZhbmFydGljbGVyZXZpZCIsICJ2YW5hcnRpY2xlZ29vZHJldmlkIiwgImJ1aWx0SW5TdHJpbmciLCAiY3VzdG9tU3RyaW5nIiwgInJlc3VsdExlbiIsICJ1bmVzY2FwZSIsICJlbmNvZGVVUklDb21wb25lbnQiLCAiY29udHJpYnNMaW5rIiwgImNvbnRyaWJzTGVuIiwgInR3aW5rbGViYXRjaGRlbGV0ZV9leHBvcnRzIiwgImluaXRfdHdpbmtsZWJhdGNoZGVsZXRlIiwgInR3aW5rbGViYXRjaGRlbGV0ZSIsICJiYXRjaGRlbGV0ZSIsICJ1bmxpbmtDYWNoZSIsICJzdWJwYWdlc0xvYWRlZCIsICJ0b2dnbGVTdWJwYWdlcyIsICJkZWxldGVyZWFzb25saXN0IiwgImNoYW5nZV9jb21tb25fcmVhc29uIiwgImdlbmVyYXRvciIsICJnY210aXRsZSIsICJnY21saW1pdCIsICJnYXBsaW1pdCIsICJnYXBuYW1lc3BhY2UiLCAiZ2FwcHJlZml4IiwgInBhdGhTcGxpdCIsICJwYXRobmFtZSIsICJ0aXRsZVNwbGl0IiwgImdxcHBhZ2UiLCAiZ3FwbGltaXQiLCAiZ3BsbGltaXQiLCAic3RhdHVzZGl2IiwgIiRwYWdlcyIsICIkcGFnZSIsICJpc1JlZGlyIiwgIiRlZGl0cHJvdCIsICJpc1Byb3RlY3RlZCIsICJtZXRhZGF0YSIsICJmb3JtXyIsICJfaXRlcmF0b3I1NiIsICJfc3RlcDU2IiwgImdlbmVyYXRlQXJyb3dMaW5rcyIsICJuZXh0RWxlbWVudFNpYmxpbmciLCAiZ2VuZXJhdGVOZXdQYWdlTGlzdCIsICJlbGVtZW50cyIsICJOb2RlTGlzdCIsICJfaXRlcmF0b3I1NyIsICJfc3RlcDU3IiwgIkhUTUxJbnB1dEVsZW1lbnQiLCAibmV3UGFnZUxpc3QiLCAiZGVsZXRlX3N1YnBhZ2VfcmVkaXJlY3RzIiwgImRlbGV0ZV9yZWRpcmVjdHMiLCAiZGVsZXRlX3N1YnBhZ2VfdGFsa3MiLCAiZGVsZXRlX3RhbGsiLCAidW5saW5rX3N1YnBhZ2VzIiwgInVubGlua19wYWdlIiwgIl9pdGVyYXRvcjU4IiwgIl9zdGVwNTgiLCAic3ViZ3JvdXBfIiwgIl9pdGVyYXRvcjU5IiwgIl9zdGVwNTkiLCAiX2l0ZXJhdG9yNjAiLCAiX3N0ZXA2MCIsICJsb2FkaW5nVGV4dCIsICJzdWJwYWdlTGlzdGVyIiwgInBhZ2VUaXRsZSIsICJwYWdlTmFtZUZ1bGwiLCAic3VicGFnZUxpc3QiLCAicGFnZU5hbWVfIiwgIl9pdGVyYXRvcjYxIiwgIl9zdGVwNjEiLCAiX2l0ZXJhdG9yNjIiLCAiX3N0ZXA2MiIsICJfaXRlcmF0b3I2MyIsICJfc3RlcDYzIiwgIl9pdGVyYXRvcjY0IiwgIl9zdGVwNjQiLCAibnVtUHJvdGVjdGVkIiwgInN1YnBhZ2VzIiwgImRlbGV0ZV9wYWdlIiwgImRlbGV0ZV9zdWJwYWdlcyIsICJ1bmxpbmtfZmlsZSIsICJwYWdlRGVsZXRlciIsICJkb0V4dHJhcyIsICJzdWJwYWdlRGVsZXRlciIsICJ0aGluZ1dpdGhQYXJhbWV0ZXJzIiwgInVubGlua0JhY2tsaW5rc01haW4iLCAidW5saW5rSW1hZ2VJbnN0YW5jZXNNYWluIiwgInRhbGtQYWdlIiwgInJlZGlyZWN0RGVsZXRlciIsICJvbGRfdGV4dCIsICJzZXRNYXhDb25mbGljdFJldHJpZXMiLCAidW5saW5rSW1hZ2VJbnN0YW5jZXMiLCAidHdpbmtsZWJhdGNodW5kZWxldGVfZXhwb3J0cyIsICJpbml0X3R3aW5rbGViYXRjaHVuZGVsZXRlIiwgInR3aW5rbGViYXRjaHVuZGVsZXRlIiwgImJhdGNodW5kZWxldGUiLCAicHJvamVjdCIsICJ1bmRlbF90YWxrIiwgInBhZ2VVbmRlbGV0ZXIiLCAic2V0TWF4UmV0cmllcyIsICJ1bmRlbGV0ZVBhZ2UiLCAidGFsa3BhZ2VuYW1lIiwgImdldFRhbGtQYWdlIiwgImRydnByb3AiLCAiZHJ2bGltaXQiLCAidW5kZWxldGVUYWxrIiwgImRlbHJldnMiLCAidHdpbmtsZWJhdGNocHJvdGVjdF9leHBvcnRzIiwgImluaXRfdHdpbmtsZWJhdGNocHJvdGVjdCIsICJ0d2lua2xlYmF0Y2hwcm90ZWN0IiwgImJhdGNocHJvdGVjdCIsICJwcm90TGV2ZWwiLCAiX2l0ZXJhdG9yNjUiLCAiX3N0ZXA2NSIsICJlZGl0UHJvdCIsICJmaW5kTGFzdCIsICJpbWFnZWluZm8iLCAiX2l0ZXJhdG9yNjYiLCAiX3N0ZXA2NiIsICJsaW5rcyIsICJjdXJyZW50UHJvdGVjdENvdW50ZXIiLCAiY3VycmVudHByb3RlY3RvciIsICJ0YWtlbkFjdGlvbiIsICJjcmVhdGVtb2RpZnkiLCAidHdpbmtsZWNsb3NlX2V4cG9ydHMiLCAiaW5pdF90d2lua2xlY2xvc2UiLCAidHdpbmtsZWNsb3NlIiwgInNlbGVjdG9yIiwgImRlbE5vZGUiLCAiZGVsTGluayIsICJfaXRlcmF0b3I2NyIsICJfc3RlcDY3IiwgImhlYWRsaW5laHJlZiIsICJtIiwgInBhZ2Vub3RleGlzdCIsICJoYXNDbGFzcyIsICJ0bXBOb2RlIiwgImNsb25lTm9kZSIsICJjb2RlcyIsICJpciIsICJyZXAiLCAibmUiLCAibnEiLCAiayIsICJhZG1pbm9ubHkiLCAic2siLCAidGsiLCAicnIiLCAiZGFuIiwgImQiLCAiaWMiLCAic2QiLCAibHNzZCIsICJzdmciLCAiZHJlcCIsICJjIiwgInIiLCAiY3IiLCAibWVyZ2UiLCAibWVyZ2VhcHByb3ZlZCIsICJuYyIsICJub29wIiwgImNoYW5nZV9jb2RlIiwgImNoYW5nZV9vcGVyYXRpb24iLCAicmVzdWx0RGF0YSIsICJfaTE2IiwgIl9PYmplY3QkZW50cmllczkiLCAiX2l0ZXJhdG9yNjgiLCAiX3N0ZXA2OCIsICJzZHJlYXNvbiIsICJyZW1hcmsiLCAicGFyZW50U2VjdGlvbiIsICJ0YWxrZW5kIiwgImRlbCIsICJrZWVwIiwgInBhZ2V0aXRsZSIsICJnZXROYW1lc3BhY2VJZCIsICJ0YWxrcGFnZXRpdGxlIiwgImdldE1haW5UZXh0IiwgInRvU3RyaW5nIiwgInZmZGtlcHQiLCAic2V0UHJlcGVuZFRleHQiLCAibmV3dGV4dCIsICJrZWVwQ29tcGxldGUiLCAic2F2ZVRhbGsiLCAic2JlZ2luIiwgInNlbmQiLCAiYmFyIiwgImRpc2FibGVMaW5rIiwgInR3aW5rbGVjb25maWdfZXhwb3J0cyIsICJpbml0X3R3aW5rbGVjb25maWciLCAidHdpbmtsZWNvbmZpZyIsICJ3YXRjaGxpc3RFbnVtcyIsICJ5ZXMiLCAibm8iLCAiZGVmYXVsdCIsICJjb21tb25TZXRzIiwgImNzZENyaXRlcmlhIiwgImRiIiwgImNzZENyaXRlcmlhRGlzcGxheU9yZGVyIiwgImNzZENyaXRlcmlhTm90aWZpY2F0aW9uIiwgImNzZENyaXRlcmlhTm90aWZpY2F0aW9uRGlzcGxheU9yZGVyIiwgImNzZEFuZERJQ3JpdGVyaWEiLCAiY3NkQW5kRElDcml0ZXJpYURpc3BsYXlPcmRlciIsICJ4ZmRDcml0ZXJpYSIsICJkZWxldGUiLCAiZndkY3NkIiwgInhmZENyaXRlcmlhRGlzcGxheU9yZGVyIiwgIm5hbWVzcGFjZXNOb1NwZWNpYWwiLCAibW9kdWxlIiwgInByZWZlcmVuY2VzIiwgImVudW1WYWx1ZXMiLCAidGFiIiwgImhlbHB0aXAiLCAic2V0VmFsdWVzIiwgImFkbWluT25seSIsICJjdXN0b21MaXN0VmFsdWVUaXRsZSIsICJjdXN0b21MaXN0TGFiZWxUaXRsZSIsICJ2YW5kIiwgInRvcmV2IiwgIm1pbmUiLCAicmVjZW50Y2hhbmdlc2xpbmtlZCIsICJidXR0b25DbGljayIsICJyYWRpb0NsaWNrIiwgInNldERpc3BsYXlPcmRlciIsICJjYXQiLCAiYWxwaGEiLCAic2FtZSIsICJub25hZG1pbm9ubHkiLCAiYWxsIiwgImNvbnRlbnRkaXYiLCAidG9jdGFibGUiLCAibWFyZ2luTGVmdCIsICJ0b2N0aXRsZSIsICJ0b2NoMiIsICJ0b2N0b2dnbGUiLCAidG9jdG9nZ2xlbGluayIsICJ0b2N1bCIsICIkdG9jdWwiLCAidG9nZ2xlIiwgImNvbnRlbnRmb3JtIiwgInNlY3Rpb25rZXkiLCAidG9jbGkiLCAidG9jYSIsICJyb3ciLCAiY2VsbCIsICJib3JkZXJCb3R0b20iLCAibWFyZ2luVG9wIiwgInJvd2NvdW50IiwgInByZWZrZXkiLCAicHJlZiIsICJtYXJnaW5Cb3R0b20iLCAiYmFja2dyb3VuZENvbG9yIiwgImdvdFByZWYiLCAidGV4dEFsaWduIiwgInBhZGRpbmdSaWdodCIsICJvcHRpb25FeGlzdHMiLCAiX2kxNyIsICJfT2JqZWN0JGVudHJpZXMxMCIsICJlbnVtdmFsdWUiLCAiZW51bWRpc3BsYXkiLCAiY2hlY2tkaXYiLCAicGFkZGluZ0xlZnQiLCAid29ya2VyIiwgIml0ZW1rZXkiLCAiaXRlbXZhbHVlIiwgImNoZWNrbGFiZWwiLCAiX2l0ZXJhdG9yNjkiLCAiX3N0ZXA2OSIsICJfaTE4IiwgIl9PYmplY3QkZW50cmllczExIiwgImN1c3RvbUxpc3RCdXR0b24iLCAibGlzdERpYWxvZyIsICJyZXNldGxpbmsiLCAicmVzZXRQcmVmTGluayIsICJjc3NGbG9hdCIsICJtYXJnaW4iLCAiZm9vdGVyYm94IiwgInN1Ym1pdEJ1dHRvbiIsICJmb290ZXJzcGFuIiwgImZvb3RlcmEiLCAicmVzZXRBbGxQcmVmcyIsICJoYXNoIiwgImxvYyIsICJib3giLCAic2NyaXB0UGFnZU5hbWUiLCAiYWRkUm93IiwgImRsZ3RhYmxlIiwgImNvbnRlbnR0ciIsICJjb250ZW50dGQiLCAicmVtb3ZlQnV0dG9uIiwgIl9jdXJwcmVmJGN1c3RvbUxpc3RWYSIsICJfY3VycHJlZiRjdXN0b21MaXN0TGEiLCAiJHByZWZidXR0b24iLCAiY3VydmFsdWUiLCAiY3VycHJlZiIsICJkaWFsb2djb250ZW50IiwgImRsZ3Rib2R5IiwgImRsZ3RyIiwgImRsZ3RoIiwgImdvdFJvdyIsICJfaXRlcmF0b3I3MCIsICJfc3RlcDcwIiwgImRsZ3Rmb290IiwgImRsZ3RkIiwgImFkZEJ1dHRvbiIsICJtaW5XaWR0aCIsICJidXR0b24iLCAicmVzZXQiLCAidGJvZHkiLCAiJGJ1dHRvbiIsICJvbGR2YWx1ZSIsICJyZXNldFByZWYiLCAiJHRib2R5IiwgIl9pdGVyYXRvcjcxIiwgIl9zdGVwNzEiLCAiaW5wdXRrZXkiLCAid2FudGVkcHJlZiIsICJmb3VuZGl0IiwgIl9pMTkiLCAiX09iamVjdCRlbnRyaWVzMTIiLCAidXNlcmpzIiwgIndyaXRlUHJlZnMiLCAibmV3Q29uZmlnIiwgIm9wdGlvbnNWZXJzaW9uIiwgImNvbXBhcmUiLCAiYiIsICJfaXRlcmF0b3I3MiIsICJfc3RlcDcyIiwgInVzZXJWYWx1ZSIsICJfaXRlcmF0b3I3MyIsICJfc3RlcDczIiwgIl9pMjAiLCAiX09iamVjdCRlbnRyaWVzMTMiLCAibm93aWtpIiwgIkpTT04iLCAic3RyaW5naWZ5IiwgInNhdmVTdWNjZXNzIiwgIm5vdGljZWJveCIsICJub3RpY2VjbGVhciIsICJjbGVhciIsICJQcm9taXNlIiwgInJlc29sdmUiLCAidHdpbmtsZUxvYWQiLCAiX3R3aW5rbGVMb2FkIiwgImFwcGx5IiwgImFyZ3VtZW50cyJdCn0K
